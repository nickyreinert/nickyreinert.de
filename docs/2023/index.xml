<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" 
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>2023s auf Nicky Reinert</title>
    <link>http://localhost:1313/2023/</link>
    <description>Blog &amp; Projekte von Nicky Reinert (Institut für digitale Herausforderungen): Webentwicklung &amp; Software Development, SEO &amp; Analytics, Hosting &amp; DevOps, WordPress &amp; Hugo, Tools &amp; Projekte, Datenschutz und digitale Kultur – plus Texte zu KI sowie Autismus &amp; Gesellschaft.</description>
    <generator>Hugo 0.148.2</generator>
    <language>de</language>
    <managingEditor></managingEditor>
    <webMaster></webMaster>
    <copyright></copyright>
    <lastBuildDate>Wed, 06 Dec 2023 12:34:56 +0100</lastBuildDate><atom:link href="http://localhost:1313/2023/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>My 2,718281828459045235 Cents - - Das Dilemma der digitalen Güter</title>
      <link>http://localhost:1313/2023/2023-12-07-mtc---das-dilemma-der-digitalen-g%C3%BCter/</link>
      <pubDate>Wed, 06 Dec 2023 12:34:56 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-12-07-mtc---das-dilemma-der-digitalen-g%C3%BCter/</guid>
      <description>Was ist der große Vorteil digitaler Güter? Man kann sie beliebig, kostengünstig und verlustfrei verfielfältigen! Stell dir vor, man könnte …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Ein Essay, der das &#39;Dilemma der digitalen Güter&#39; beleuchtet. Der Artikel argumentiert, dass die Vorteile digitaler Produkte (einfache Vervielfältigung) durch Nachteile für Konsumenten (fehlendes Eigentum, DRM, Lizenzabhängigkeiten) aufgewogen werden. Anhand von Beispielen wie dem Löschen gekaufter Inhalte durch Anbieter wie Sony und Amazon wird die Problematik der digitalen Rechteverwaltung kritisiert.</p>
          
          
          <p><strong>Hauptthemen:</strong> Digitale Güter, DRM, Urheberrecht, Konsumgüter, Technologiekritik, Recht</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>Was ist der große Vorteil <strong>digitaler Güter</strong>? Man kann sie <strong>beliebig</strong>, <strong>kostengünstig</strong> und <strong>verlustfrei</strong> <strong>verfielfältigen</strong>! Stell dir vor, man könnte &ldquo;<strong>tangible</strong>&rdquo; (tangibel - schlau-deutsch für &ldquo;anfassbar&rdquo;) <strong>konventionelle Güter</strong> wie <strong>Bier</strong>, <strong>Schuhe</strong> oder <strong>Autos</strong> duplizieren - einfach so! Das wäre fantastisch, ist aber, solange der <strong>Star Trek Replikator</strong> noch nicht existiert, eine utopische Traumvorstellung.</p>
<p>Digitale Güter altern in der Regel nicht: Das <strong>Paar Schuhe</strong> steht in meinem Schuhschrank und nach ein paar Monaten oder Jahren, je nach Umständen, sind die Schuhe verschlissen und ich muss mir neue kaufen. Doch bis dahin kann ich mit den Schuhen machen, was ich will. Bis sie <strong>zerfallen</strong>, so geschehen vor ein paar Tagen:</p>
<p><img src="/2023/2023-12-07-mtc---das-dilemma-der-digitalen-g%C3%BCter/kaputte_stiefel.jpg" alt="">
<em>RIP Stiefel, 6. Dezember 2023, eigene Aufnahme</em></p>
<p>Es ist also eigentlich eine gute Sache, dass wir zumindestens einen Teil (vielleicht sogar den wichtigsten? ;)) unseres <strong>Unterhaltungs-Bedürfnisses</strong> mit digitalen Produkten befriedigen dürfen. <strong>Bücher</strong>, <strong>Spiele</strong>, <strong>Filme</strong>, <strong>Serien</strong>, <strong>Podcasts</strong> - das Angebot ist vielfältig und groß. Und toll!</p>
<p>Aber es gibt auch einen Haken, es gibt immer einen Haken:</p>
<p>Das größte Risiko aus Angebots-Sicht, also der Hersteller von digitalen Gütern, ist die berüchtigte &ldquo;<strong>Raubkopie</strong>&rdquo;. Also das unerlaubte anfertigen von Duplikaten. Es gilt der Grundsatz: <strong>Ist es digital, lässt es sich kopieren</strong>. Das trifft übrigens auch auf <strong>NFT</strong> zu - ein <strong>NFT</strong> ist ein Besitznachweis, kein Kopierschutz.</p>
<p>Raubkopien gibt es, seit es Software gibt. Hersteller und - nun ja, wie nennen wir sie - <strong>diverse subversive Gruppen</strong> liefern sich ein Wettrennen, seit es Software gibt: Kopierschutz gegen unerlaubte Kopie. <strong>Piraterie</strong> ist indes <strong>kein</strong> <strong>Kavaliersdelikt</strong> und nicht cool.</p>
<p>Der Schaden einer Raubkopien ließe sich über den entgangenen Umsatz zwar messen. Studien zeigen aber sogar eine <strong>positive Wirkung</strong> auf den Konsum. Wirklich leiden tut die mehr als florierende Industrie darunter also eher nicht.</p>
<p><img src="/2023/2023-12-07-mtc---das-dilemma-der-digitalen-g%C3%BCter/umsatz_unterhaltungsindustrie.png" alt=""></p>
<p><em>obligatorisches Chart des Umsatzwachstums der Unterhaltungsindustrie seit 1731, koloriert, eigene Darstellung</em></p>
<p>Aber auch aus Konsumenten-Sicht gibt es ein Problem: Digitale Bibiliotheken sind eine feine Sache. Aber dahinter steckt ein kompliziertes Geflecht aus <strong>juristischen Abhängigkeiten</strong>, <strong>Distributionsverträgen</strong> und <strong>Lizenzen</strong>. Für die Nutzer:innen hat das Jonglieren mit den &ldquo;<strong>Verbreitungsrechten</strong>&rdquo; im Hintergrund eigentlich keine Relevanz. Warum auch!? <strong>Darum</strong>: Es ist nicht das erste und wird nicht das letzte Mal sein: <a href="https://unkreativ.net/dir-gehoert-nichts-uns-gehoert-alles/"><strong>Sony</strong> löscht von dir erworbene Serien und Filme von deinem Computer</a>. Der Grund ist ein Vertrag mit <strong>Discovery</strong> über die Vertriebslizenzen. Vor knapp 3 Jahren <a href="https://www.chip.de/news/Prime-Video-Amazon-kann-gekaufte-Filme-wegnehmen_183082966.html">hatte <strong>Amazon</strong> gekaufte Filme aus deiner Bibliothek</a> gelöscht, in <a href="https://www.basicthinking.de/blog/2009/07/20/und-ploetzlich-waren-sie-weg-amazon-loescht-ebooks-ohne-erlaubnis-von-kindle-lesern/">2009 waren es eBooks</a>. Als der Musikstreaming Dienst <strong>Juke</strong> von <strong>MediaMarktSaturn</strong> damals seinen Dienst einstellte, bot man die Erstattung der gekauften Spiele und Filme zwar aus Kulanz (sic!), <a href="https://www.computerbild.de/artikel/cb-News-Internet-Juke.com-Filme-Geld-Erstattung-19713055.html">so richtig klappte das aber nicht</a>. Die Liste ließe sich sicher belieg erweitern.</p>
<p>Wenn du jetzt denkst, die Lösung wäre ein <strong>10 TByte NAS</strong> mit <strong>unverwüstlichen Bandlaufwerken</strong>, muss ich dich enttäuschen: Denn genau solche Szenarien werden durch moderne <strong>Kopierschutzmaßnahmen</strong> und permanten <strong>Online-Zwang</strong> unterbunden.</p>
<p>Was bleibt? Die fade Vorstellung, dass <strong>Nike</strong> eines Tages an meiner Tür klingelt, um meine <strong>WiFi-Zurück-In-Die-Zukunft-Schuhe</strong> zurückzufordern, weil die <strong>Lizenzvereinbarung</strong> mit <strong>Disney</strong> abgelaufen ist. Und wenn ich nicht zu Hause bin, werden die Schuhe aus der Ferne abgeschaltet&hellip;</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Digital, DRM, Urheberrecht, Kritik, Konsum</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>My 2,718281828459045235 Cents - - Das Dilemma der digitalen Güter - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>essay</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 42 - Mit einem nassen Seil ins Internet</title>
      <link>http://localhost:1313/2023/2023-10-05-nerd-enzyklop%C3%A4die-42---mit-einem-nassen-seil-ins-internet/</link>
      <pubDate>Thu, 05 Oct 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-10-05-nerd-enzyklop%C3%A4die-42---mit-einem-nassen-seil-ins-internet/</guid>
      <description>
Nerd-Enzyklopädie #42
Um Breitband-Internet in die Wohnungen und Büros zu bekommen, wird viel Aufwand betrieben und am Ende beschweren sich die Kunden …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Anekdote aus der &#39;Nerd Enzyklopädie&#39; über einen britischen Internet-Techniker, dem es gelang, Daten über ein nasses Seil zu übertragen. Der Artikel beschreibt das Experiment, bei dem über eine Distanz von 2 Metern eine Geschwindigkeit von 3,5 MBit/Sekunde erreicht wurde, und beleuchtet die unerwarteten Möglichkeiten der Datenübertragung.</p>
          
          
          <p><strong>Hauptthemen:</strong> Netzwerktechnik, Internet, Kuriositäten, Nerd-Kultur, Datenübertragung</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-10-05-nerd-enzyklop%C3%A4die-42---mit-einem-nassen-seil-ins-internet/image1.png" alt=""></p>
<p>Nerd-Enzyklopädie #42</p>
<p>Um Breitband-Internet in die Wohnungen und Büros zu bekommen, wird viel Aufwand betrieben und am Ende beschweren sich die Kunden trotzdem. Als Internet-Provider hat man es wahrlich nicht leicht.<br>
Kupferkabel, Glasfaserleitungen oder große Satelliten-Anlagen sind den meisten von uns ein Begriff. Aber es geht auch günstiger: Einem Techniker des Internet-Anbieters Andrew &amp; Arnolds aus dem Vereinigten Königreich ist es gelungen, ein nasses Seil als Übertragungsmedium zu nutzen. Über eine Entfernung von 2 Metern erreichte er so eine Übertragungsgeschwindigkeit von 3,5 MBit/Sekunde! Reicht für die Prokrastination!</p>
<p><img src="/2023/2023-10-05-nerd-enzyklop%C3%A4die-42---mit-einem-nassen-seil-ins-internet/image2.png" alt=""></p>
<p>Nasses Seil [<a href="https://www.revk.uk/2017/12/its-official-adsl-works-over-wet-string.html">REVK1</a>]</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Netzwerk, Kuriosität, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 42 - Mit einem nassen Seil ins Internet - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 41 - Welche Farbe hat Chuck Norris?</title>
      <link>http://localhost:1313/2023/2023-10-03-nerd-enzyklop%C3%A4die-41---welche-farbe-hat-chuck-norris/</link>
      <pubDate>Tue, 03 Oct 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-10-03-nerd-enzyklop%C3%A4die-41---welche-farbe-hat-chuck-norris/</guid>
      <description>
Eine Farbe sagt mehr als 1.000 Worte!
Oder so ähnlich. Im Webdesign können Farben unterschiedlich definiert werden. Ziemlich weit verbreitet ist die Angabe der …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieser Artikel behandelt Die Nerd Enzyklopädie 41 - Welche Farbe hat Chuck Norris? und bietet praktische Einblicke in das Thema.</p>
          
          
          <p><strong>Hauptthemen:</strong> Web, IT, Tools</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p><img src="/2023/2023-10-03-nerd-enzyklop%C3%A4die-41---welche-farbe-hat-chuck-norris/image1.png" alt=""></p>
<p>Eine Farbe sagt mehr als 1.000 Worte!</p>
<p>Oder so ähnlich. Im Webdesign können Farben unterschiedlich definiert werden. Ziemlich weit verbreitet ist die Angabe der roten, grünen und blauen Farbanteile mittels der entsprechenden Hexadezimal-Wertes. Jeder Farbanteil wird auf einer Skala von 0 bis 255 angegeben, bzw. in hexadezimaler Schreibweise von 0 bis FF.</p>
<p>Der folgende Farbcode steht z.B. für Grün (0 Rotanteile, 255 bzw. FF Grünanteile und 0 Blauanteile. (Ein Farbwert hat immer genau 2 Stellen, deshalb schreibt man 00 und nicht nur 0. So lässt sich auch genau erkennen, welcher Teil des Farbcodes für welche Farbe steht.)</p>
<pre><code>#00FF00
</code></pre>
<p>Da hexadezimale Werte alphanumerische Zeichen enthalten, lassen sich damit auch Wörter bilden, in etwa so wie damals in der Schule auf dem Taschenrechner. Ein Beispiel:</p>
<pre><code>#C0FFEE
</code></pre>
<p>Eigentlich darf ein Farbcode nicht mehr als 6 Stellen haben, die nur Ziffern und die Buchstaben von A bis F enthalten, trotzdem lassen sich auch beliebige Wörter verwenden und so ganze klandestine Botschaften im Farbcode verstecken! Wenn man damit leben kann, dass der Browser den Farbcode mitunter etwas seltsam interpretiert und das nur unter bestimmten Bedingungen anwendbar ist (siehe unten):</p>
<pre><code>#CHUCKNORRIS
</code></pre>
<p>Wie funktioniert das? Der Browser ersetzt alle nicht gültigen Zeichen einfach mit 0. Aus CHUCKNORRIS wird also:</p>
<pre><code>#C00C0000000
</code></pre>
<p>Da man nun aber mehr als 6 Stellen hat, geht der Browser einfach davon aus, dass sich die Stellen gleichmäßig auf die drei Farbanteile verteilen.
Dazu muss erstmal eine 0 angehangen werden, um auf ein Vielfaches von 3 zu kommen:</p>
<pre><code>#C00C00000000
</code></pre>
<p>Nun werden bei jedem einzelnen Farbwert die letzten beiden Stellen abgeschnitten, weil ja nur nur 2 Stellen erwartet werden! Eine Sonderregel besagt, dass zuerst führende Nullen abgeschnitten werden [SCRAP1]). Das interpretierte Resultat sieht also so aus:</p>
<pre><code>#C00000
</code></pre>
<p>CHUCKNORRIS ist also rot! (Der geübte Nerd-Blick erkennt hier sofort 192 Rotanteile und sonst nichts.) Und irgendwie passt das ja auch, oder?
Natürlich funktioniert das mit beliebigen Wörtern. nerdenzyklopädie ergibt z.B. ein prächtiges Lila!</p>
<p>Das klingt nach viel Spaß für Jung und Alt. Doch leider hat die Sachen einen kleinen Haken: Das Farbenspiel funktioniert nur bei Verwendung des HTML Attributs bgcolor, nicht über die typischen CSS-Attribute wie background-color und Co.</p>

        
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 41 - Welche Farbe hat Chuck Norris? - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>guide</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 40 - isUserAMonkey</title>
      <link>http://localhost:1313/2023/2023-06-22-nerd-enzyklop%C3%A4die-40---isuseramonkey/</link>
      <pubDate>Thu, 22 Jun 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-06-22-nerd-enzyklop%C3%A4die-40---isuseramonkey/</guid>
      <description>
Googles Betriebssystem Android bietet über Schnittstellen eine Vielzahl von Methoden an, um den Entwickler:innen die Arbeit zu erleichtern. Eine dieser …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieser Artikel behandelt Die Nerd Enzyklopädie 40 - isUserAMonkey und bietet praktische Einblicke in das Thema.</p>
          
          
          <p><strong>Hauptthemen:</strong> Web, IT, Tools</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p><img src="imag1.png" alt=""></p>
<p><strong>Googles</strong> Betriebssystem <strong>Android</strong> bietet über Schnittstellen eine Vielzahl von Methoden an, um den Entwickler:innen die Arbeit zu erleichtern. Eine dieser Methoden heißt <strong>isUserAMonkey</strong>. Die Methode prüft, ob die Benutzeroberfläche von einem Affen manipuliert wurde [<a href="https://developer.android.com/reference/android/app/ActivityManager.html#isUserAMonkey%28%29">ANDRO1</a>]:</p>
<blockquote>
<p>Returns “true” if the user interface is currently being messed with by a monkey.</p></blockquote>
<p>Das klingt danach, als würde Google sich einen Spaß erlauben, aber es gibt tatsächlich ein Tool, das pseudo-randomisierte Ereignisse simuliert: <strong>Monkey</strong> erzeugt wahllos Clicks, Wischgesten und vieles mehr, um eine Benutzeroberfläche auf Herz und Nieren zu prüfen. Und mit der Method <strong>isUserAMonkey</strong> findet man heraus, ob das eigene Programm gerade von eben jenem Hilfsmittel „bedient“ wird.</p>

        
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 40 - isUserAMonkey - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>guide</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 39 - Der Kerzen-Controller</title>
      <link>http://localhost:1313/2023/2023-06-19-nerd-enzyklop%C3%A4die-39---der-kerzen-controller/</link>
      <pubDate>Mon, 19 Jun 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-06-19-nerd-enzyklop%C3%A4die-39---der-kerzen-controller/</guid>
      <description>Eine Infrarot-Fernbedienung funktioniert nach einem einfachen Prinzip: Die Fernbedienung erzeugt Signale im Infrarot-Bereich, die der Empfänger im Fernseher …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine kuriose Anekdote aus der &#39;Nerd Enzyklopädie&#39;, die erklärt, wie man zwei Kerzen als Ersatz für die Sensorleiste der Nintendo Wii verwenden kann. Der Artikel beschreibt das Prinzip der Infrarot-Kommunikation der Wiimote und wie Kerzen Infrarotstrahlen emittieren, die der Controller zur Positionsbestimmung nutzen kann.</p>
          
          
          <p><strong>Hauptthemen:</strong> Gaming, Nintendo Wii, Infrarot, Hardware-Hack, Nerd-Kultur, Kuriositäten</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Eine <strong>Infrarot-Fernbedienung</strong> funktioniert nach einem einfachen Prinzip: Die Fernbedienung erzeugt Signale im Infrarot-Bereich, die der Empfänger im Fernseher verarbeiten kann. Lichtblitze, wenn man so will, die für das menschliche Auge nicht sichtbar sind.</p>
<p><img src="/2023/2023-06-19-nerd-enzyklop%C3%A4die-39---der-kerzen-controller/image1.png" alt=""></p>
<p>Die Spielekonsole <strong>Wii</strong> von <strong>Nintendo</strong> nutzt dieses Prinzip, um mit dem Controller, der <strong>Wiimote</strong>, zu kommunizieren. In einer Leiste, die am Fernseher platziert wird, befinden sich zwei Infrarot-Sender, die als Referenzpunkt dienen. So können die Controller ihre Position im Raum bestimmen und Objekte auf dem Fernseher anvisieren.</p>
<p>Sollte die Infrarot-Leiste einmal ausfallen, muss man nicht auf ein teures Ersatzteil zurückgreifen. Man stellt einfach zwei Kerzen im richtigen Abstand vor den Fernseher. Auch Kerzen geben neben dem sichtbaren Licht Infrarotstrahlen ab, die der Controller als Signal zur Positionsbestimmung verarbeiten kann [<a href="https://www.dkoldies.com/blog/you-can-use-candles-instead-of-the-wii-sensor-bar/">DKOL1</a>].</p>
<p><img src="/2023/2023-06-19-nerd-enzyklop%C3%A4die-39---der-kerzen-controller/image2.png" alt=""></p>
<p>Screenshot DKOldies.com@<a href="https://www.youtube.com/watch?v=NZzMeCyeiUI&amp;t=1s">youtube.com</a></p>
<p>Das ganze hat noch einen Vorteil: Die Kerzen haben eine begrenzte Brenndauer: Du kommst nicht umhin, nach ein paar Stunden eine Pause einzulegen.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Gaming, Hardware, Nerd-Enzyklopädie, Kuriosität</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 39 - Der Kerzen-Controller - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 38 - Du Idiot</title>
      <link>http://localhost:1313/2023/2023-06-16-nerd-enzyklop%C3%A4die-38---du-idiot/</link>
      <pubDate>Fri, 16 Jun 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-06-16-nerd-enzyklop%C3%A4die-38---du-idiot/</guid>
      <description>
You fool. You absolute, unmitigated, unadulterated, complete and utter, fool” [GIST2]
Das ist die unverblümte, ungeschönte und zeitlose Reaktion von Robert J. …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Erkundung aus der &#39;Nerd Enzyklopädie&#39; über das ikonische Zitat &#39;You fool&#39; von OpenPGP-Entwickler Robert J. Hansen. Der Artikel beleuchtet den Hintergrund dieses Ausbruchs: einen Angriff auf das SKS-Netzwerk, der durch die Ausnutzung bekannter Schwachstellen in einer veralteten, als Proof-of-Concept gedachten Software erfolgte, und dient als Warnung vor vernachlässigter Softwarewartung in kritischen Infrastrukturen.</p>
          
          
          <p><strong>Hauptthemen:</strong> Software-Sicherheit, OpenPGP, SKS-Netzwerk, Softwarewartung, IT-Sicherheit, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-06-16-nerd-enzyklop%C3%A4die-38---du-idiot/image1.png" alt=""></p>
<blockquote>
<p>You fool. You absolute, unmitigated, unadulterated, complete and utter, fool” [<a href="https://gist.github.com/rjhansen/67ab921ffb4084c865b3618d6955275f">GIST2</a>]</p></blockquote>
<p>Das ist die unverblümte, ungeschönte und zeitlose Reaktion von <strong>Robert J. Hansen</strong>, einem Entwickler von <strong>OpenPGP</strong>, nach einen Angriff auf das <strong>SKS - Netzwerk</strong>. Er richtet sich damit an diejenigen, die diesen Angriff zu verantworten haben.</p>
<p>Das SKS-Netzwerk (<strong>Synchronizing Key Server</strong>) speichert öffentliche Schlüssel, die sich z.B. für die vertrauenswürdige Kommunikation über E-Mail nutzen lassen. Die Server nutzen dazu eine in <strong>OCaml</strong> entwickelte Software, die von <strong>Yaron Minsky</strong> im Rahmen einer Doktorarbeit geschrieben wurde und eigentlich nur als <strong>Proof Of Concept</strong> gedacht war.</p>
<p>Die Programmiersprache ist nicht sehr weit verbreitet, die Software sehr komplex und damit nur schwer zu warten. Das System ist also weder für den produktiven Einsatz noch für hohe Belastungen ausgelegt — eben ein Proof Of Concept [<a href="https://securityaffairs.co/88071/hacking/poisoning-pgp-sks-key-network.html">SECU1</a>].</p>
<p>Und es gab Probleme, die schon seit Jahren bekannt waren. So durfte man beliebig viele, auch irrelevante, Informationen ungeprüft auf den Server laden, die dann nicht mehr gelöscht werden konnten.</p>
<p>Eine Software, die kaum gewartet und optimiert wird, die Teil einer kritischen Infrastruktur ist, mit bekannten Sicherheitslücken — was kann da schon schief gehen?</p>
<p>Das zeigte sich im <strong>Sommer 2019</strong>. Unbekannte nutzten die Schwachstelle aus und überfluteten die öffentlichen Schlüssel von <strong>Robert J. Hansen</strong> und <strong>Daniel Kahn Gillmor</strong>, ebenfalls Open-PGP Entwickler, mit Spam. So zwangen sie das veraltete System in die Knie und Programme, die darauf angewiesen waren, konnten nicht mehr verwendet werden [<strong>FIFT1</strong>]. Ein absehbarer Super-GAU, auf den Hansen in einem relativ langen, ikonischen Kommentar auf GitHub entsprechend ungehalten reagiert.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Sicherheit, OpenPGP, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 38 - Du Idiot - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 37 - Mehrdeutige Bilder</title>
      <link>http://localhost:1313/2023/2023-06-13-nerd-enzyklop%C3%A4die-37---mehrdeutige-bilder/</link>
      <pubDate>Tue, 13 Jun 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-06-13-nerd-enzyklop%C3%A4die-37---mehrdeutige-bilder/</guid>
      <description>
Ein Bild ist ein Bild ist ein Bild. Ob in der realen Welt oder auf dem Computer. Oder? ODER? Du ahnst es schon: Die Sache hätte keinen Haken, wenn ich es nicht …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Erklärung aus der &#39;Nerd Enzyklopädie&#39; über &#39;mehrdeutige Bilder&#39; und eine spezifische Schwachstelle in Apples PNG-Implementierung. Der Artikel beschreibt, wie ein und dieselbe PNG-Datei aufgrund eines Bugs in Apples proprietärem &#39;iDOT&#39;-Chunk auf Apple-Geräten anders dargestellt werden konnte als auf anderen Systemen, und beleuchtet die Komplexität der Bildverarbeitung.</p>
          
          
          <p><strong>Hauptthemen:</strong> Bildformate, PNG, Apple, Software-Sicherheit, Computer-Grafik, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p><img src="/2023/2023-06-13-nerd-enzyklop%C3%A4die-37---mehrdeutige-bilder/image1.png" alt=""></p>
<p>Ein Bild ist ein Bild ist ein Bild. Ob in der realen Welt oder auf dem Computer. Oder? ODER? Du ahnst es schon: Die Sache hätte keinen Haken, wenn ich es nicht so betonen würde.</p>
<p>Ein Bild auf dem Computer muss „interpretiert“ werden, denn schließlich handelte sich dabei um nichts anderes als eine Datei voller verrückter Zeichen — Nullen und Einsen. Es gibt verschiedene Formate, um Bilder in Dateien zu speichern, allen voran <strong>JPG</strong>, <strong>GIF</strong> und <strong>PNG</strong>.</p>
<p>Per Definition besteht eine PNG-Datei aus vielen kleinen <strong>Chunks</strong> (“Stücken”), die unterschiedliche Informationen enthalten, um das Bild aufzubauen. Dazu gehören z.B. die Farbpalette, die tatsächlichen Bild-Daten, Meta-Daten und so weiter [<a href="https://einstein.informatik.uni-oldenburg.de/rechnernetze/png.htm">EINS1</a>].</p>
<p>Zwar folgt PNG einem fest definierten Standard, aber wie es mit Standards so ist: Jeder kocht sein eigenes Süppchen. So auch <strong>Apple</strong>. Dort hat man für die eigenen Zwecke einen zusätzlichen Chunk names <strong>iDOT</strong> eingeführt. Um diesen zu verarbeiten, greifen Apple-Geräte auf einen nur dafür entwickelten Algorithmus zurück, der die Informationen aus dem iDOT-Chunk nutzbar macht. Apple hat die Funktion von iDOT nicht öffentlich dokumentiert und so ist der Zweck nicht ganz klar. Anonymen Hinweisen nach soll damit aber die optimierte Verarbeitung der Bilddaten auf Mehrkern-Prozessoren im Vordergrund stehen [<a href="https://www.hackerfactor.com/blog/index.php?/archives/895-Connecting-the-iDOTs.html">HACK1</a>].</p>
<p><strong>Ende 2021</strong> fand <strong>David Buchanan</strong> heraus, dass dieser Algorithmus fehlerbehaftet ist und sich die Bild-Datei so manipulieren lässt, dass das Bild auf einem Apple-Gerät anders dargestellt wird als auf einem Windows-Computer. Und das sieht dann so aus:</p>
<p><img src="/2023/2023-06-13-nerd-enzyklop%C3%A4die-37---mehrdeutige-bilder/image2.png" alt=""></p>
<p>Das gleiche PNG-Bild, dargestellt auf einem nicht-Apple-Computer (links) und auf einem Apple-Computer (rechts) [<a href="https://www.da.vidbuchanan.co.uk/widgets/pngdiff/">DAVI1</a>]</p>
<p>Apple den Bug mittlerweile „leider„ behoben…</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> PNG, Apple, Sicherheit, Nerd-Enzyklopädie, Bild</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 37 - Mehrdeutige Bilder - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 36 - Das kik &amp; left-pad Drama</title>
      <link>http://localhost:1313/2023/2023-06-10-nerd-enzyklop%C3%A4die-36---das-kik--left-pad-drama/</link>
      <pubDate>Sat, 10 Jun 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-06-10-nerd-enzyklop%C3%A4die-36---das-kik--left-pad-drama/</guid>
      <description>
NPM (Node Package Manager) ist ein Paket Manager für JavaScript und eine Plattform für Pakete, also Software, um die Funktionalität von JavaScript zu …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Nacherzählung des &#39;kik &amp; left-pad Dramas&#39; von 2016, das die JavaScript-Entwicklergemeinschaft erschütterte. Der Artikel erklärt, wie die Entfernung eines kleinen, aber weit verbreiteten npm-Pakets namens &#39;left-pad&#39; aufgrund eines Namensstreits zu weitreichenden Problemen in Tausenden von Softwareprojekten führte und die Fragilität moderner Software-Abhängigkeiten aufzeigte.</p>
          
          
          <p><strong>Hauptthemen:</strong> JavaScript, npm, Open Source, Softwareentwicklung, Abhängigkeiten, Nerd-Kultur, Fallstudie</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-06-10-nerd-enzyklop%C3%A4die-36---das-kik--left-pad-drama/image1.png" alt=""></p>
<p><strong>NPM (Node Package Manager)</strong> ist ein Paket Manager für <strong>JavaScript</strong> und eine Plattform für Pakete, also Software, um die Funktionalität von <strong>JavaScript</strong> zu erweitern. Es gibt einige Pakete, die sehr populär sind und in vielen JavaScript-Programmen verwendet werden. Dass das nicht nur praktisch ist sondern auch kritische Abhängigkeiten erzeugt, demonstrierte <strong>Azer Koçulu</strong> im Jahr <strong>2016</strong>.</p>
<p>Koçulu stellte damals über NPM eine Vielzahl von Paketen zur Verfügung, darunter auch <strong>kik</strong>, ein kaum bekanntes Paket, um Templates zu erstellen. kik ist aber auch der Name einer Messenger-App mit seinerzeit rund <strong>270. Mio</strong>. aktiven Nutzer:innen.<br>
Eines Tages erhielt Koculu Post von <strong>Bob Stratton</strong>, einem Rechtsanwalt, der die Interessen von <strong>Kik interactive</strong> vertrat, dem Unternehmen hinter dem Messenger. Stratton bat darum, dass Koculu sein Paket umbenennt, verwies dabei auf die eingetragene Handelsmarke und bot im Gegenzug sogar <strong>30.000 Dollar</strong> an.</p>
<p>Für Koculu war das keine Option, also nahm Stratton Kontakt mit NPM auf. Dort schlug man sich auf die Seite von Stratton, was Koculu nicht sonderlich wohlwollend aufnahm. Er fühlte sich als <strong>David</strong> im Kampf gegen <strong>Goliath</strong>. Koçulu gegen die seit jeher wenig beliebten Patentanwälte!</p>
<p>Seine Konsequenz: Er zog all seine <strong>273 Pakete</strong> von NPM zurück. Darunter befand sich auch „<strong>left-pad</strong>“, ein unscheinbares Paket, das nur aus 11 Zeilen bestand und lediglich dem Zweck diente, eine Zeichenkette mit einem bestimmten Wert zu befüllen.</p>
<p>Das löste eine Kaskade von Ereignissen aus: left-pad wurde von vielen Entwickler:innen in ihren Projekten genutzt, darunter auch Pakete, die wiederum in anderen Projekten genutzt wurden. So entstanden tausende Abhängigkeiten und Fehlermeldungen. Es kam zu massiven Problemen bei Updates und der Entwicklung, nur weil 11 Zeilen simpler JavaScript Code nicht mehr verfügbar waren.</p>
<p>Das Problem wurde zum Glück relativ schnell behoben. Innerhalb von 10 Minuten veröffentlichte <strong>Cameron Westland</strong> eine Alternative. Insgesamt dauerte die Fehlerbehebung <strong>2,5 Stunden</strong> [<a href="https://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm">NPM1</a>] [<a href="https://www.infoworld.com/article/3047177/how-one-yanked-javascript-package-wreaked-havoc.html">INFO4</a>].</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> JavaScript, npm, Open-Source, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 36 - Das kik &amp; left-pad Drama - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 35 - JavaScript Bananas</title>
      <link>http://localhost:1313/2023/2023-06-07-nerd-enzyklop%C3%A4die-35---javascript-bananas/</link>
      <pubDate>Wed, 07 Jun 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-06-07-nerd-enzyklop%C3%A4die-35---javascript-bananas/</guid>
      <description>
Nerd-Enzyklopädie #35
Auf den ersten Blick steckt JavaScript voller Mysterien. Erst wenn man etwas genauer hinschaut, erkennt man die Eleganz einer gewissen …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieser Artikel behandelt Die Nerd Enzyklopädie 35 - JavaScript Bananas und bietet praktische Einblicke in das Thema.</p>
          
          
          <p><strong>Hauptthemen:</strong> Web, IT, Tools</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p><img src="/2023/2023-06-07-nerd-enzyklop%C3%A4die-35---javascript-bananas/image1.png" alt=""></p>
<p>Nerd-Enzyklopädie #35</p>
<p>Auf den ersten Blick steckt JavaScript voller Mysterien. Erst wenn man etwas genauer hinschaut, erkennt man die Eleganz einer gewissen Regeltreue. Zu welchem Ergebnis könnte z.B. diese Anweisung führen:</p>
<pre><code>  &quot;b&quot; + &quot;a&quot; + +&quot;a&quot; +&quot;a&quot;;
</code></pre>
<p>Richtig, es ist <strong>baNaNa</strong>! Aber warum und wieso nicht einfach <strong>baaa</strong>? Die Details spielen hier eine wichtige Rolle und damit ist diese Frage prädestiniert für das nächste JavaScript-Bewerbungsgespräch: Dem zweiten “a” wird das Plus-Zeichen ohne Leerzeichen vorangestellt. Damit handelt es sich um einen „<strong>unären Operator</strong>„, mit dem das darauf folgende Zeichen als numerischer Wert interpretiert wird. Das “a” ist aber kein numerischer Wert, sprich <strong>not a number</strong>. Die Kurzform dafür lautet <strong>NaN</strong> und die Anweisung ergibt somit ausgeschrieben:</p>
<pre><code>&quot;b&quot; + &quot;a&quot; + NaN + &quot;a&quot;;
</code></pre>
<p><strong>NaN</strong> ist in JavaScript zwar streng genommen eine Property, die aber „automatisch“ in einen String umgewandelt wird, um die Anweisung ausführen zu können und damit lautet das finale Ergebnis:</p>
<p>baNaNa</p>
<p><strong>JavaScript</strong> steckt voller weiterer unterhaltsamer Fallstricke und Seltsamkeiten, deren Lektüre sich gut für einen gemütlichen Abend vor dem Kamin eignet, mehr davon gibt es bei <strong>WTFS</strong>: <a href="https://github.com/denysdovhan/wtfjs">[GITH1].</a></p>

        
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 35 - JavaScript Bananas - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>guide</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 34 - JavaScript wurde innerhalb von 10 Tagen entwickelt</title>
      <link>http://localhost:1313/2023/2023-06-04-nerd-enzyklop%C3%A4die-34---javascript-wurde-innerhalb-von-10-tagen-entwickelt/</link>
      <pubDate>Sun, 04 Jun 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-06-04-nerd-enzyklop%C3%A4die-34---javascript-wurde-innerhalb-von-10-tagen-entwickelt/</guid>
      <description>
JavaScript ist eine der am weitesten verbreiteten Programmiersprachen der Welt und für die Funktion und Popularität des WWW von großer Bedeutung. Während HTML …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine historische Erkundung aus der &#39;Nerd Enzyklopädie&#39; über die Entstehung von JavaScript, das innerhalb von nur 10 Tagen entwickelt wurde. Der Artikel beleuchtet die Notwendigkeit einer Skriptsprache für dynamische Webseiten, die Rolle von Brendan Eich bei Netscape, die Namensentwicklung von Mocha zu JavaScript und Microsofts Reaktion mit JScript.</p>
          
          
          <p><strong>Hauptthemen:</strong> JavaScript, Webentwicklung, Programmiersprachen, IT-Geschichte, Nerd-Kultur, Netscape</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-06-04-nerd-enzyklop%C3%A4die-34---javascript-wurde-innerhalb-von-10-tagen-entwickelt/image1.png" alt=""></p>
<p><strong>JavaScript</strong> ist eine der am weitesten verbreiteten Programmiersprachen der Welt und für die Funktion und Popularität des <strong>WWW</strong> von großer Bedeutung. Während <strong>HTML</strong> die statische Darstellung von Inhalten im Browser ermöglicht, lassen sich dank JavaScript diese Inhalte dynamisch darstellen und modifizieren. JavaScript hat in den letzten Jahrzehnten eine beeindruckende Entwicklung hingelegt, angefangen als <strong>Script-Sprache</strong> innerhalb des Browsers bis hin zur Grundlage für eine leistungsfähige <strong>Webserver-Architektur</strong>.</p>
<p>Es gibt zahlreiche Anwendungsgebiete, sei es als Sprache innerhalb des Datenbanksystems <strong>MongoDB</strong>, für die Entwicklung von Spielen und Anwendungen oder als serverseitige Applikation [<a href="https://thenewstack.io/brendan-eich-on-creating-javascript-in-10-days-and-what-hed-do-differently-today/">THEN1</a>].</p>
<p>JavaScript ist extrem erfolgreich, vielseitig und beliebt. Und alles begann mit einer kleinen Sprache, die <strong>innerhalb von 10 Tagen</strong> entwickelt wurde!</p>
<p>Als das Web noch ganz jung war, wurden Seiten mit HTML dargestellt. HTML war relativ simpel und so musste man keine große Programmierer:in sein, um eigene Inhalte auf die Bühne des Webs zu hieven. Diese Einfachheit war ein wichtiger Erfolgsfaktor für das frühe World Weide Web.</p>
<p>Dank des plattformunabhängigen Browsers <strong>Netscape</strong> waren Webentwickler:innen in der Lage, ihre Programme unkompliziert für unterschiedliche Betriebssysteme zur Verfügung zu stellen. Was fehlte war die Möglichkeit mit den Inhalten zu interagieren. Netscape erkannt das Problem und betraute <strong>1995</strong> <strong>Brendan Eich</strong> mit wichtigen Aufgabe eine Lösung in Form einer entsprechenden Programmiersprache zu entwickeln.</p>
<blockquote>
<p>“But Marc Andreessen of Netscape, Bill Joy of Sun, and myself [Brendan Eich] and a few others saw that there was a need for a language that was approachable, that you could put directly in the web page,”<br>
Brendan Eich, InfoWorld, 2011</p></blockquote>
<p>Anfangs hieß es noch, dass die Programmiersprache <strong>Scheme</strong> als Grundlage dienen könnte. Dann wurde <strong>Java</strong> in Betracht gezogen und so verhandelte Netscape mit <strong>Sun Microsystems</strong>, um Java im hauseigenen Browser zu unterstützen. Aber Java (damals noch <strong>Oak</strong> genannt) war groß und komplex. Sollte die Webentwicklung weiterhin zugänglich sein, war Java nicht die beste Wahl. Es musste eine einfache Lösung her, ähnlich wie <strong>Microsofts</strong> <strong>VisualBasic</strong>, das als Einstiegs-Alternative für <strong>C</strong> oder <strong>C++</strong> galt.</p>
<p>Und so kam es, dass Eich im <strong>Mai 1995</strong> innerhalb von <strong>10 Tagen</strong> einen ersten funktionsfähigen Prototypen von JavaScript entwickelte, da noch unter dem Namen <strong>Mocha</strong>. Mocha wurde erstmal mit dem Netscape Navigator 2.0 vorgestellt. Im <strong>September 1995</strong> änderte man den Namen zu **LiveScript **— Live klang aus Marketingsicht dynamischer. Außerdem hatte Eich die Zeit genutzt, um einen Großteil des Codes aufzuräumen; zehn Tage sind erwartungsgemäß sehr knapp, um eine gewisse Codequalität zu erhalten.</p>
<p>Im <strong>Dezember 1995</strong> wurde dann der Name JavaScript eingeführt, um die Bedeutung als einfache Alternative zu Java zu unterstreichen und sicherlich auch um ein wenig von Javas Popularität zu profitieren. Intern wird die JavaScript-Engine bis heute als <strong>SpiderMonkey</strong> bezeichnet.</p>
<p>Der große Konkurrent auf dem Browser-Markt, <strong>Microsoft</strong>, ließ nicht lange auf sich warten. Im <strong>August 1996</strong> zog man nach und implementierte seine eigene JavaScript-Engine im Internet Explorer: <strong>JScript</strong>. Da man damals aber noch nicht soviel von Standards hielt, war JScript nur bedingt kompatibel zu SpiderMonkey. Nur eine Folge des Browser-Krieges, die in den folgenden Jahren vielen Web-Entwickler:innen Kopfschmerzen und schlaflose Nächte bereiten sollte.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> JavaScript, IT-Geschichte, Nerd-Enzyklopädie, Programmierung</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 34 - JavaScript wurde innerhalb von 10 Tagen entwickelt - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 33 - GCJ-02</title>
      <link>http://localhost:1313/2023/2023-06-01-nerd-enzyklop%C3%A4die-33---gcj-02/</link>
      <pubDate>Thu, 01 Jun 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-06-01-nerd-enzyklop%C3%A4die-33---gcj-02/</guid>
      <description>
WGS steht für World Geodetic System und beschreibt ein Referenzsystem für die Kartographie und Vermessung der Welt. Das WGS spielt unter anderem für die …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Erklärung aus der &#39;Nerd Enzyklopädie&#39; über GCJ-02, Chinas nationalen Standard für geografische Koordinaten. Der Artikel beleuchtet, wie dieser Standard bewusst Abweichungen zum globalen WGS-System einführt, offiziell aus Gründen der nationalen Sicherheit, und wie dies zu Problemen für Navigationssysteme führt. Auch der davon abgeleitete Baidu-Standard BD-09 wird kurz vorgestellt.</p>
          
          
          <p><strong>Hauptthemen:</strong> Geografie, Kartographie, GPS, China, Zensur, Technologiepolitik, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-06-01-nerd-enzyklop%C3%A4die-33---gcj-02/image1.png" alt=""></p>
<p><strong>WGS</strong> steht für <strong>World Geodetic System</strong> und beschreibt ein Referenzsystem für die Kartographie und Vermessung der Welt. Das WGS spielt unter anderem für die Navigation mit <strong>GPS</strong> eine wichtige Rolle.</p>
<p>Nicht jedoch in <strong>China</strong>. Dort wurde in <strong>2002</strong> der Standard <strong>GCJ-02</strong> eingeführt, der zwar auf WGS basiert, aber einen Algorithmus implementiert, der dafür sorgt, dass Längen- und Breiten-Angaben anders berechnet werden [<a href="https://abstractkitchen.com/blog/a-short-guide-to-chinese-coordinate-system-de-de/">ABST1</a>].</p>
<p>Dadurch ergeben sich im Vergleich zu WGS <strong>Abweichungen von bis zu 500 Metern</strong>, in Ausnahmefällen sogar mehreren Kilometern [<a href="https://github.com/leifgehrmann/gcj02-distortion-map">GITH3</a>]. Die Motivation für diesen Standard ist laut offizieller Stelle die nationale Sicherheit. In der Realität führt das dazu, dass „nicht lizensierte“ Navigationssysteme dich an den falschen Zielort schicken.</p>
<p><img src="/2023/2023-06-01-nerd-enzyklop%C3%A4die-33---gcj-02/image2.jpg" alt=""></p>
<p style="text-align: center;font-style:italic">
Abweichung von GCJ-02 zu WGS [[GITH3](https://github.com/leifgehrmann/gcj02-distortion-map)]
</p>
<p><strong>Baidu</strong>, eine chinesische Suchmaschine, geht noch einen Schritt weiter. Dort wurde der von GCJ-02 abgeleitete Standard <strong>BD-09</strong> eingeführt, der die Koordinaten in China noch weiter verschleiert. Man will damit vermeiden, dass andere Anbieter die Daten von Baidus Kartendienst verwenden.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> China, Geografie, Nerd-Enzyklopädie, Technologie</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 33 - GCJ-02 - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 32 - Was haben PHP, Visa und Mandelbrot gemeinsam?</title>
      <link>http://localhost:1313/2023/2023-05-28-nerd-enzyklop%C3%A4die-32---was-haben-php-visa-und-mandelbrot-gemeinsam/</link>
      <pubDate>Sun, 28 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-28-nerd-enzyklop%C3%A4die-32---was-haben-php-visa-und-mandelbrot-gemeinsam/</guid>
      <description>
PHP ist eine der populärsten Sprachen im WWW. PHP steht für PHP: Hypertext Preprocessor und ist damit ein rekursives Akronym. Ursprünglich stand PHP für …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Erkundung aus der &#39;Nerd Enzyklopädie&#39;, die die Gemeinsamkeit zwischen PHP, Visa und Mandelbrot aufdeckt: rekursive Akronyme und selbst-referenzielle Konzepte. Der Artikel erklärt die Bedeutung von rekursiven Akronymen in der IT und beleuchtet humorvolle Legenden rund um Namen wie Benoit B. Mandelbrot und Bing.</p>
          
          
          <p><strong>Hauptthemen:</strong> Rekursive Akronyme, Sprache, Informatik, Mathematik, Nerd-Kultur, Etymologie</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-28-nerd-enzyklop%C3%A4die-32---was-haben-php-visa-und-mandelbrot-gemeinsam/image1.png" alt=""></p>
<p><strong>PHP</strong> ist eine der populärsten Sprachen im <strong>WWW</strong>. PHP steht für <strong>PHP: Hypertext Preprocessor</strong> und ist damit ein rekursives Akronym. Ursprünglich stand PHP für <strong>Personal HomePage Tools</strong>. Ab Version 3 gab es allerdings grundlegende Änderungen, weshalb man sich von dem Vorgänger absetzen wollte und daher genau diesen Namen wählte. In der IT gibt es viele mal mehr oder weniger populäre rekursive Akronyme, wie z.B.</p>
<ul>
<li><strong>WINE</strong>: WINE Is Not an Emulator (Software),</li>
<li><strong>cURL</strong>: cURL URL Request Library (Software),</li>
<li><strong>RPM</strong>: RPM Package Manager (Paketmanager),</li>
<li><strong>GNU</strong>: GNU is not UNIX (Betriebssystem,</li>
<li><strong>ATI</strong>: ATI Technologies Inc. (Hardwarehersteller),</li>
<li><strong>NANO</strong>: Nano’s Another editor (Texteditor)</li>
</ul>
<p>&hellip;und viele mehr, unter anderem auch <strong>VISA</strong> für Visa International Service Association.</p>
<p>Nun geht das Gerücht um, dass das <strong>B</strong> im Namen des berühmten Mathematikers <strong>Benoit B. Mandelbrot</strong> für <strong>Benoit B Mandelbrot</strong> steht [<a href="https://www.nytimes.com/2010/10/17/us/17mandelbrot.html">NYTI1</a>]. Eine Anspielung auf eines seiner bekanntesten Vermächtnisse: Die wunderschöne Mandelbrot-Menge — ein rekursives mathematisches Kunstwerk!</p>
<p><img src="/2023/2023-05-28-nerd-enzyklop%C3%A4die-32---was-haben-php-visa-und-mandelbrot-gemeinsam/image2.png" alt=""></p>
<p style="text-align: center;font-style:italic">Bis zum Ende zoomen! [[WIKI5](https://de.wikipedia.org/wiki/Beno%C3%AEt_Mandelbrot)]</p>
<p>Fest steht: Das B als Initial hat sich Mandelbrot in seiner Autobiographie selber gegeben. Dass das B aber für <strong>Benoit B. Mandelbrot</strong> steht ist leider nicht belegt — es ist nur ein Initial [<a href="https://www.theguardian.com/science/2010/oct/17/benoit-mandelbrot-obituary">THEG1</a>].</p>
<p>Einer weiteren aber nicht belegbaren und vermutlich nicht ganz srnst gemeinten Legende nach steht <strong>Bing</strong> übrigens für <strong>Bing ist not Google</strong>…</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Akronym, Nerd-Enzyklopädie, Humor, Sprache</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 32 - Was haben PHP, Visa und Mandelbrot gemeinsam? - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 31 - Der allererste Bug</title>
      <link>http://localhost:1313/2023/2023-05-25-nerd-enzyklop%C3%A4die-31---der-allererste-bug/</link>
      <pubDate>Thu, 25 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-25-nerd-enzyklop%C3%A4die-31---der-allererste-bug/</guid>
      <description>
Als ein Bug wird ein Fehler in einem Programm verstanden. Am 9. September des Jahres 1945 soll es sich zugetragen habe, dass der Mark II, ein Computer der …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine historische Untersuchung aus der &#39;Nerd Enzyklopädie&#39; über den Ursprung des Begriffs &#39;Bug&#39; in der Informatik. Der Artikel entlarvt den Mythos der Motte im Harvard Mark II Computer als Ursprung und verfolgt die wahre Etymologie des Wortes zurück zu Thomas Edison im späten 19. Jahrhundert, während er Grace Hoppers Rolle bei der Popularisierung des Begriffs in der Computerwelt würdigt.</p>
          
          
          <p><strong>Hauptthemen:</strong> Computergeschichte, Softwarefehler, Etymologie, Nerd-Kultur, Informatik</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-25-nerd-enzyklop%C3%A4die-31---der-allererste-bug/image1.png" alt=""></p>
<p>Als ein Bug wird ein <strong>Fehler in einem Programm</strong> verstanden. Am <strong>9. September des Jahres 1945</strong> soll es sich zugetragen habe, dass der <strong>Mark II</strong>, ein Computer der <strong>Harvard University</strong>, eine Fehlermeldung≤ ausgab. Selbst Universitäts-Computer sind davor nicht gefeit.</p>
<p>Man öffnete im Rahmen der Fehlersuche also den Computer — die waren zu der Zeit ja etwas größer als die Smartwatch an unserem Handgelenk — und fand die offensichtliche Ursache des Problems: Eine <strong>Motte</strong>! Sie wollte es sich im <strong>Panel F im Relay 70</strong> gemütlich machen und hat dieses wagemutige Vorhaben mit dem Leben bezahlt - die Todesursache ist leider nicht überliefert.</p>
<p>Die leiblichen Überreste der Motte wurden in ein Logbuch geklebt (warum eigentlich?) und von <strong>Dr. Grace Hopper</strong> mit der berühmten Bemerkung kommentiert: “First actual case of bug being found.”</p>
<p><img src="/2023/2023-05-25-nerd-enzyklop%C3%A4die-31---der-allererste-bug/image2.png" alt=""></p>
<p style="text-align: center;font-style:italic">Quelle [[AMER1](https://americanhistory.si.edu/collections/search/object/nmah_334663)]</p>
<p>Zwar war das der erste dokumentierte Fall einer Motte in einem Computer. Doch das war mitnichten, wie oft angenommen, die Geburt des Begriffs Bug als Synonym für einen Fehler in einem System. Dazu kam es weitaus früher, nämlich <strong>Ende des 19. Jahrhunderts</strong> durch unseren alten Bekannten <strong>Thomas Edison</strong>:</p>
<blockquote>
<p>‘Bugs’ — as such little faults and difficulties are called — show themselves and months of intense watching, study and labor are requisite before commercial success or failure is certainly reached.<br>
Thomas Edison an Theodore Puskas, 1878 [<a href="https://www.computerworld.com/article/2515435/moth-in-the-machine--debugging-the-origins-of--bug-.html">COMP1</a>]</p></blockquote>
<p>Der Begriff fand dann sogar Einzug in das <strong>Oxford English Dictionary</strong>:</p>
<blockquote>
<p>a defect or fault in a machine, plan, or the like.</p></blockquote>
<p>Dort wird als Quelle die <strong>Pall Mall Gazette</strong> angegeben [<a href="https://daily.jstor.org/the-bug-in-the-computer-bug-story/">JSTO1</a>]:</p>
<blockquote>
<p>“Mr [Thomas] Edison… had been up the two previous nights discovering a ‘bug’ in his phonograph — an expression for solving a difficulty, and implying that some imaginary insect had secreted itself inside and is causing all the trouble.<br>
Thomas Edison, March 11, 1889</p></blockquote>
<p>Es sollte auch erwähnt werden, dass <strong>Dr. Hopper</strong> die Motte weder gefunden noch in das Logbuch geklebt, sondern nur den ikonischen Kommentar darunter verfasste [<a href="https://www.pcwelt.de/article/1484644/die-beruhmtesten-bugs-der-it-geschichte.html">PCWE1</a>].</p>
<p>Nichtsdestotrotz sollten wir erfurchtsvoll anerkennen, dass die Motte in Panel F ihr Leben dafür gelassen hat, dem Begriff Bug zum Durchbruch zu verhelfen, ihn zu prägen. Danke, Motte.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> IT-Geschichte, Softwarefehler, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 31 - Der allererste Bug - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 30 - Die falsche Fehlermeldung</title>
      <link>http://localhost:1313/2023/2023-05-22-nerd-enzyklop%C3%A4die-30---die-falsche-fehlermeldung/</link>
      <pubDate>Mon, 22 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-22-nerd-enzyklop%C3%A4die-30---die-falsche-fehlermeldung/</guid>
      <description>
Mitte der 1990er Jahre startete in den USA ein besonderer Internet-Provider seinen Dienst: WebTV Networks Incorporated. In der Regel benötigte man zu dieser …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Anekdote aus der &#39;Nerd Enzyklopädie&#39; über einen peinlichen Fehler im Registrierungsprozess des frühen Internetdienstes WebTV. Ein falsch konfigurierter Filter für Benutzernamen führte dazu, dass jede Eingabe als &#39;schlechtes Wort&#39; (&#39;That&#39;s a bad word.&#39;) abgewiesen wurde, was die Bedeutung gründlicher Tests unterstreicht.</p>
          
          
          <p><strong>Hauptthemen:</strong> WebTV, Internetgeschichte, Softwarefehler, Debugging, Benutzerverwaltung, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-22-nerd-enzyklop%C3%A4die-30---die-falsche-fehlermeldung/image1.png" alt=""></p>
<p>Mitte der 1990er Jahre startete in den USA ein besonderer Internet-Provider seinen Dienst: <strong>WebTV</strong> <strong>Networks Incorporated</strong>. In der Regel benötigte man zu dieser Zeit für den Zugang zum Internet ein Modem, das zwischen Telefon-Dose und Computer angeschlossen wurde. WebTV funktionierte mit einer <strong>Set-Top-Box</strong> und einem <strong>Fernseher</strong> und ermöglichte so den Zugang zum Internet auch ohne Computer. Der Werbe-Slogan lautete:</p>
<blockquote>
<p>You’re surfing the Web with a remote control in one hand and a handful of cheese puffs in the other. Now that’s progress.</p></blockquote>
<p>Am <strong>18. September 1996</strong> wollte das Unternehmen seinen Dienst der Öffentlichkeit zugänglich machen. Ab diesem Datum war es möglich, ein Benutzerkonto für WebTV anzulegen. Einen Tag vorher saßen Techniker, Programmier und Gründer zusammen, um den Prozess der Benutzeranmeldung zu prüfen und das System auf Fehler zu untersuchen.</p>
<p>Bei einer Benutzeranmeldung ist es üblich, bestimmte anzügliche oder geschützte Begriffe für den Namen des Kontos zu verhindern. Seien es Beleidigungen oder reservierte Begriff wie „<strong>admin</strong>“, „<strong>root“</strong> und so weiter. Bei WebTV setzte man dazu auf eine Datei, die diese gesperrten Begriff enthielt. Die Datei war folgendermaßen aufgebaut:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    admin.*   
</span></span><span class="line"><span class="ln">2</span><span class="cl">    User names may not start with “admin”.   
</span></span><span class="line"><span class="ln">3</span><span class="cl">    postmaster   
</span></span><span class="line"><span class="ln">4</span><span class="cl">    You’re not the postmaster.   
</span></span><span class="line"><span class="ln">5</span><span class="cl">    poop   
</span></span><span class="line"><span class="ln">6</span><span class="cl">    That’s a bad word.   
</span></span><span class="line"><span class="ln">7</span><span class="cl">    weenie That’s a bad word.
</span></span></code></pre></div><p>Jeder Eintrag bestand demnach aus zwei Zeilen. Die <strong>erste Zeile</strong> enthielt einen regulären Ausdruck, der den nicht zugelassenen Begriff beschreibt. Die <strong>zweite Zeile</strong> beinhaltet die Fehlermeldung, sollte jemand versuchen den Begriff für sein Benutzerkonto zu verwenden. Wenn also jemand ein Konto mit dem Benutzernamen <strong>admin</strong> einrichten wollte, wurde ihm das mit der Fehlermeldung “<strong>User names may not start with ‘admin’”</strong> verweigert.</p>
<p>Einer der Techniker hatte beim Anlegen der Datei einen Fehler gemacht. Er wollte die Datei in zwei Listen unterteilen: Eine Liste mit geschützten Namen (<strong>admin</strong>, <strong>postmaster</strong>, root, …) sowie eine Liste mit anzüglichen, obszönen Namen (<strong>fuck</strong>, <strong>poop</strong>, …). Zur besseren Lesbarkeit trente er die beiden Listen durch eine leere Zeile:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    admin.* User names may not start with “admin”.   
</span></span><span class="line"><span class="ln">2</span><span class="cl">    postmaster You&#39;re not the postmaster.  
</span></span><span class="line"><span class="ln">3</span><span class="cl">      
</span></span><span class="line"><span class="ln">4</span><span class="cl">    fuck  
</span></span><span class="line"><span class="ln">5</span><span class="cl">    That&#39;s a bad word.
</span></span></code></pre></div><p>Aber auch die leere Zeile wurde vom System als regulärer Ausdruck interpretiert. Und dieser passte zu jeder Eingabe! Die Folge war, dass der Schutzmechanismus beim Anlegen eines Benutzerkontos auf jeden Namen reagierte und die darauffolgende Zeile, wie programmiert, als Fehlermeldung an die Benutzer:in zurückgab. Und in diesem Fall war das:</p>
<p><img src="/2023/2023-05-22-nerd-enzyklop%C3%A4die-30---die-falsche-fehlermeldung/image2.png" alt=""></p>
<p style="text-align: center;font-style:italic">
Die falsche Fehlermeldung bei der Anmeldung zu WebTV [[FADD1](https://fadden.com/tech/images/fkdialog.jpg)]
</p>
<p>Der Fehler wurde natürlich umgehend behoben. Als WebTV am nächsten Tag der Öffentlichkeit zugänglich gemacht wurde, kam es dem Vernehmen nach zu keinen beleidigenden Zwischenfällen.</p>
<p>Der Vorfall verdeutlich jedenfalls wie wichtig es ist, ein System in einer geschützten Umgebung ausgiebig zu testen.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> IT-Geschichte, Softwarefehler, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 30 - Die falsche Fehlermeldung - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 29 - Programmieren mit Emojis</title>
      <link>http://localhost:1313/2023/2023-05-19-nerd-enzyklop%C3%A4die-29---programmieren-mit-emojis/</link>
      <pubDate>Fri, 19 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-19-nerd-enzyklop%C3%A4die-29---programmieren-mit-emojis/</guid>
      <description>
Texte bestehen aus Sätzen, Sätze bestehen aus Wörtern und Wörter bestehen aus Buchstaben bzw. genauer Schriftzeichen. Wir alle kennen es, das lateinische …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine unterhaltsame Erkundung aus der &#39;Nerd Enzyklopädie&#39; über das Programmieren mit Emojis. Der Artikel erklärt die Grundlagen der Zeichenkodierung (Unicode, UTF-8) und beleuchtet die (begrenzten) Möglichkeiten, Emojis in gängigen Programmiersprachen zu verwenden. Zudem wird &#39;Emojicode&#39; vorgestellt, eine Programmiersprache, die ausschließlich auf Emojis basiert.</p>
          
          
          <p><strong>Hauptthemen:</strong> Programmierung, Emojis, Unicode, Zeichenkodierung, Programmiersprachen, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-19-nerd-enzyklop%C3%A4die-29---programmieren-mit-emojis/image1.png" alt=""></p>
<p>Texte bestehen aus Sätzen, Sätze bestehen aus Wörtern und Wörter bestehen aus Buchstaben bzw. genauer Schriftzeichen. Wir alle kennen es, das lateinische Alphabet, arabische Ziffern aber auch kyrillische Schriftzeichen oder die Sinogramme der chinesischen Schrift. All diese Symbole versteht der Computer dank einer großen Tabelle oder auch „ Zeichensatz“. Als Quasi-Standard hat sich in den letzten Jahren <strong>Unicode</strong> etabliert.</p>
<h2 id="hefte-raus-lerneinheit">Hefte raus, Lerneinheit!</h2>
<p>Ein <strong>Zeichensatz</strong> (engl. „<strong>character set</strong>“) beschreibt die Menge aller verfügbaren Zeichen. Das wäre z.B. ein sehr kleiner Zeichensatz, der nur die Großbuchstaben des lateinischen Alphabets darstellen kann:</p>
<pre><code>[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z]
</code></pre>
<p>Wird jedem Zeichen eine numerische Position zugeordnet, der sogenannte. „<strong>codepoint</strong>“, spricht man von einem <strong>kodierten Zeichensatz</strong> („<strong>coded character set</strong>“). Uns kleines Biespiel sieht dann so aus:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">  1 -&gt; A  
</span></span><span class="line"><span class="ln">2</span><span class="cl">  2 -&gt; B  
</span></span><span class="line"><span class="ln">3</span><span class="cl">  3 -&gt; C  
</span></span><span class="line"><span class="ln">4</span><span class="cl">  …  
</span></span><span class="line"><span class="ln">5</span><span class="cl">  26 -&gt; Z
</span></span></code></pre></div><p>Sehr weit verbreitet ist der Zeichensatz <strong>UCS</strong> (<strong>Universal Coded Character Set</strong>), besser bekannt <strong>Unicode,</strong> der in der <strong>ISO 10646</strong> definiert ist. Theoretisch umfasst Unicode einen Bereich von <strong>1.114.112</strong> codepoints. Diese sind in <strong>17 Ebenen</strong> (<strong>planes</strong>) zu je <strong>16 Bit</strong> aufgeteilt, also 65.536 codepoints pro Ebene. Aufgrund verschiedener technischer Vorgaben sind effektiv <strong>1.111.998</strong> codepoints nutzbar. Unicode enthält nicht nur die uns bekannten Buchstaben von A bis Z, Zahlen und Schriftzeichen anderer Sprachen, sondern mittlerweile auch Emojis:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">😆🫠😇
</span></span></code></pre></div><p>Um jedes der über 1 Mio. Zeichen ansprechen zu können, kann man auf <strong>UTF-32</strong> (<strong>Unicode Transformation Format</strong>) nutzen. UTF-32 besitzt einen 32 Bit (4 Byte) großen Adress-Bereich, um damit jedes beliebige Zeichen in Unicode zu kodieren. Das ist simpel, aber auch eine irrsinnige Platzverschwendung. Der häufigste deutsche Buchstabe „e“ wird wie folgt in UTF-32 kodiert:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    00 00 00 65
</span></span></code></pre></div><p>In binär:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    00000000000000000000000001100101
</span></span></code></pre></div><p>Ein Adress-Bereich mit 4 Byte um ein Zeichen abzubilden, für das 1 Byte ausreicht? Um Platz zu sparen, wurden Algorithmen entwickelt, die zwar etwas aufwendiger codieren, dafür aber weniger Platz verbrauchen. Sehr weit verbreitet ist <strong>UTF-8</strong>, eine — wenn man so will — „dynamische“ Kodierung.</p>
<p>UTF-8 wurde <strong>1992</strong> von <strong>Ken Thompson</strong> und <strong>Rob Pike</strong> entwickelt, zwei Programmierern des Betriebssystems <strong>Plan9</strong> (benannt nach dem gleichnamigen Film „<strong>Plan9 from outer Space</strong>“ von <strong>Ed Wood</strong>, dem angeblich „schlechtesten Science Fiction Film aller Zeiten“) [<a href="https://de.wikipedia.org/wiki/Plan_9_%28Betriebssystem%29">WIKI14</a>].</p>
<p>UTF-8 kodiert den ersten Bereich von Unicode mit 7 Bit — das erste Bit bzw. höchstwertige Bit ist immer 0. Das „e“ wird also folgendermaßen kodiert:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    65
</span></span></code></pre></div><p>In binär:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    01100101
</span></span></code></pre></div><p>Man belegt also nur noch 1 Byte anstatt 4. Will man exotische, also höherwertige Zeichen aus Unicode kodieren, hängt UTF-8 weitere Bytes an, bei denen die höchstwertigen Bits ebenfalls fest gesetzt werden. Das Euro-Zeichen wird in UTF-8 mit 3 Bytes dargestellt:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    E2 82 AC
</span></span></code></pre></div><p>In binär:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    11100010 10000010 10101100
</span></span></code></pre></div><h2 id="zurück-zum-thema">Zurück zum Thema</h2>
<p>Wie du siehst, sind Buchstaben für den Computer auch nur bestimmte Orte in einer großen Tabelle. Da die Unicode-Tabelle auch Emojis umfasst, sollte es doch eigentlich möglich sein, Emojis als Bezeichner für Funktionen und Variablen zu nutzen?</p>
<p>Ganz so leicht ist es leider nicht. Die gängigen Programmiersprachen haben einen festgelegten Bereich von Zeichen, die für derartige Deklarationen zulässig sind. Ein Ausweg sind <strong>Emoticons</strong>, also Zeichen, die als Emoji interpretiert werden können. Vor allem nicht-lateinische Schriften bieten eine Menge Möglichkeiten. In <strong>JavaScript</strong> ist z.B. folgendes möglich:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl">    <span class="k">var</span> <span class="err">ツ</span> <span class="o">=</span> <span class="err">„</span><span class="n">smile</span><span class="err">“</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln">2</span><span class="cl">    <span class="k">var</span> <span class="err">ൠ</span> <span class="o">=</span> <span class="err">„</span><span class="n">alien</span><span class="err">“</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln">3</span><span class="cl">    <span class="n">function</span> <span class="err">ಠ</span><span class="n">_ಠ</span> <span class="p">(){</span><span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="err">“</span><span class="n">Viel</span> <span class="n">Spaß</span> <span class="n">beim</span> <span class="n">Refactoring</span><span class="o">!</span><span class="err">”</span><span class="p">);}</span>
</span></span></code></pre></div><p>Es gibt allerdings auch eine Programmiersprache, die ausschließlich auf Emojis basiert: Emojicode [<a href="https://www.emojicode.org/">EMOJI1</a>]. Erfunden wurde die Sprache von <strong>Theo Weidmann</strong>. Und so sieht „<strong>Hello World</strong>“ in Emojicode aus:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    🏁 🍇  
</span></span><span class="line"><span class="ln">2</span><span class="cl">    😀 🔤Hello World!🔤❗️  
</span></span><span class="line"><span class="ln">3</span><span class="cl">    🍉
</span></span></code></pre></div>
        
        
        <div class="tags">
          <p><strong>Tags:</strong> Programmierung, Emojis, Nerd-Enzyklopädie, Sprache</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 29 - Programmieren mit Emojis - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 28 - Damönen aus der Nase</title>
      <link>http://localhost:1313/2023/2023-05-16-nerd-enzyklop%C3%A4die-28---dam%C3%B6nen-aus-der-nase/</link>
      <pubDate>Tue, 16 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-16-nerd-enzyklop%C3%A4die-28---dam%C3%B6nen-aus-der-nase/</guid>
      <description>
In der Informatik gibt es den Begriff des „undefinierten Verhaltens“ (undefined behaviour) [WIKI7]: Wenn eine Software bzw. Code auf unterschiedlichen Systemen …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Erklärung aus der &#39;Nerd Enzyklopädie&#39; über das Konzept des &#39;undefinierten Verhaltens&#39; in der Informatik, insbesondere in der Programmiersprache C. Der Artikel beleuchtet den Ursprung des humorvollen Ausdrucks &#39;nasal demons&#39; und demonstriert anhand eines einfachen C-Code-Beispiels die unvorhersehbaren Konsequenzen, wenn ein Compiler auf undefiniertes Verhalten trifft.</p>
          
          
          <p><strong>Hauptthemen:</strong> C-Programmierung, Undefined Behavior, Compiler, Softwareentwicklung, Nerd-Kultur, Programmiersprachen</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-16-nerd-enzyklop%C3%A4die-28---dam%C3%B6nen-aus-der-nase/image1.png" alt=""></p>
<p>In der Informatik gibt es den Begriff des <strong>„undefinierten Verhaltens“</strong> (<strong>undefined behaviour</strong>) [<a href="https://en.wikipedia.org/wiki/Undefined_behavior">WIKI7</a>]: Wenn eine Software bzw. Code auf unterschiedlichen Systemen zu unterschiedlichen Ergebnissen führt, was natürlich nicht vorkommen darf, spricht man von eben diesem „undefinierten Verhalten“. In der Programmiersprache C hat sich dafür der Begriff „<strong>nasal demons</strong>“ etabliert. Den Ursprung hat dieser Ausspruch in der Usenet Gruppe <strong>comp.std.c</strong> und einer Diskussion in <strong>1992</strong>. Ein Nutzer meinte damals:</p>
<blockquote>
<p>“When the compiler encounters [a given undefined construct] it is legal for it to make demons fly out of your nose” [<a href="http://catb.org/jargon/html/N/nasal-demons.html">CATB</a>]</p></blockquote>
<p>Übersetzt also: Trifft der Compiler auf ein „<strong>undefiniertes Konstrukt</strong>“, sollte es ihm erlaubt sein, Dämonen aus deiner Nase fliegen zu lassen.</p>
<p>Ein einfaches Beispiel in C ist z.B. dieses [<a href="https://accu.org/journals/overload/21/115/maudel_1857/">ACCU1</a>]:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    bool b;  
</span></span><span class="line"><span class="ln">2</span><span class="cl">    if (b)  
</span></span><span class="line"><span class="ln">3</span><span class="cl">      printf(“b is true\n”);  
</span></span><span class="line"><span class="ln">4</span><span class="cl">    if (!b)  
</span></span><span class="line"><span class="ln">5</span><span class="cl">      printf(“b is false\n”);
</span></span></code></pre></div><p>B wird als Boolesche Variable deklariert, aber nicht initialisiert. Es ist also nicht eindeutig klar, ob B wahr oder falsch ist. Der Compiler darf machen, “was er will”. Wie z.B. <strong>Dämonen aus deiner Nase fliegen</strong> lassen…</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> C, Programmierung, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 28 - Damönen aus der Nase - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 27 - Die Geschichte von Mel</title>
      <link>http://localhost:1313/2023/2023-05-13-nerd-enzyklop%C3%A4die-27---die-geschichte-von-mel/</link>
      <pubDate>Sat, 13 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-13-nerd-enzyklop%C3%A4die-27---die-geschichte-von-mel/</guid>
      <description>
Die “Geschichte von Mel“ ist eine Reminiszenz an die frühen Jahre der Informationstechnologie. In der Geschichte verarbeitet Ed Nather seine Erlebnisse als …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Nacherzählung der berühmten Anekdote &#39;Die Geschichte von Mel&#39; aus der Computerprogrammierung. Der Artikel beleuchtet das Genie des legendären Programmierers Mel Kaye, seine unkonventionellen Optimierungstechniken in Assemblersprache und die Herausforderungen, die sein selbstmodifizierender Code für andere Entwickler darstellte, insbesondere am Beispiel eines manipulierten Blackjack-Spiels.</p>
          
          
          <p><strong>Hauptthemen:</strong> Computergeschichte, Programmierung, Assemblersprache, Folklore, Nerd-Kultur, Softwareentwicklung</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-13-nerd-enzyklop%C3%A4die-27---die-geschichte-von-mel/image1.png" alt=""></p>
<p>Die “<strong>Geschichte von Mel</strong>“ ist eine Reminiszenz an die frühen Jahre der Informationstechnologie. In der Geschichte verarbeitet <strong>Ed Nather</strong> seine Erlebnisse als Softwareentwickler bei der <strong>Royal McBee Computer Corporation</strong>, einem Hersteller von Computern.</p>
<p>In <strong>1956</strong> vertrieb die Royal McBee zusammen mit der <strong>General Precision Inc</strong>. den <strong>LGP-30</strong>, einen „<strong>röhrenbestückten Magnettrommelrechner</strong>“ [<a href="http://computermuseum.informatik.uni-stuttgart.de/dev/lgp30/">STUT1</a>]. Der Rechner kostete damals beeindruckende <strong>47.000 USD</strong>, was heute in etwa <strong>470.000 USD</strong> entspricht [<a href="https://en.wikipedia.org/wiki/LGP-30">WIKI8</a>].</p>
<p><strong>Melvin „Mel“ Kaye</strong> (geb. <strong>Kornitzky</strong>), Nathers Kollege, entwickelte für diesen Computer ein BlackJack-Spiel, das sich sehr großer Beliebtheit erfreute und z.B. auf Messen zu Demonstrationszwecken vorgeführt wurde.</p>
<p>Mit dem <strong>RPC 4000</strong> veröffentlichte die RoyalBee in <strong>1960</strong> einen leistungsfähigeren Nachfolger für den LGP-30. Das <strong>230-kg-Ungetüm</strong> ging damals für saftige <strong>87.500 USD</strong> über die hoffentlich stabile Ladentheke [<a href="https://en.wikipedia.org/wiki/LGP-30">WIKI8</a>]. Um auf Messen weiterhin für Unterhaltung zu sorgen, wurde Kaye damit beauftragt, sein BlackJack-Spiel auf den RPC 4000 zu portieren.<br>
Auf Anraten des Vertriebs bat die Geschäftsführung Kaye darum, einen Schalter einzubauen, mit dem sich einstellen lässt, dass der Computer verliert. Mutmaßlich, um den interessierten Käufen auf den Messen wohlwollend zu begegnen.</p>
<p>Nather porträtiert Kaye als <strong>Archetypen eines ethischen Hackers</strong>. Ein exzellenter Softwareentwickler mit Prinzipien. Kaye kam dem Wunsch der Geschäftsführung nicht ganz nach. Er implementierte eine umgekehrte Funktion und so sorgte der Schalter dafür, dass der Computer immer gewinnt.</p>
<p>Ein Ärgernis für die Geschäftsführung und den Vertrieb. Da Kaye die RoyalBee kurz darauf verließ, offensichtlich weil sich seine Werte nicht mit denen des Unternehmens deckten [<a href="https://melsloop.com/docs/the-story-of-mel/pages/preface">MELS1</a>], wurde Nather damit beauftragt, den „Bug“ zu beheben. Und das fiel ihm nicht sonderlich leicht, dafür hatte Kaye mit einigen programmatischen Hürden gesorgt.<br>
Nather beschreibt sein Vorgehen als Abenteuer und Kaye als „<strong>unbesungenes Genie</strong>“. Die technischen Finessen und Tricks, die Kaye in den Quellcode eingebaut hatte, beeindruckten Nather zutiefst:</p>
<blockquote>
<p>When the light went on it nearly blinded me.<br>
(The Story of Mel, Ed Nather, 1983)</p></blockquote>
<p>So berichtet Nather von Endlosschleifen und Quellcode, der sich selber modifizierte. Letztlich gelang es Nather nicht, den Bug zu beheben, vielleicht auch aus Respekt vor dessen Schöpfer. Also blieb die Funktion des Schalters bestehen: Er sorgte weiterhin dafür, dass der Computer gewinnt.</p>
<p>Wann genau sich die Geschichte zugetragen hat, ist nicht sicher überliefert. Nather verarbeitet das Geschehen in Gedichtform und veröffentlichte dies am <strong>21. Mai 1983</strong> im Usenet [<a href="http://www.catb.org/jargon/html/story-of-mel.html">CATB1</a>].</p>
<p>Vermutlich hätten wir nie erfahren, um wen es sich bei „Mel“ handelt. Nather hatte Kaye nicht direkt namentlich erwähnt. Erst in <strong>2012</strong> begann der Programmierer <strong>Anthony Cuozzo</strong> die Hintergründe der Geschichte zu recherchieren. Per E-Mail nahem er Kontakt zum vermeintlichen Kaye auf und erhielt genau eine Antwort [<a href="https://melsloop.com/docs/the-story-of-mel/pages/mel-kaye-cv">MELS2</a>]:</p>
<blockquote>
<p>Mel Kaye <a href="mailto:rimel3@roadrunner.com">rimel3@roadrunner.com</a><br>
Tue, Apr 17, 2012 at 12:01 PM<br>
To: acuozzo@<em><strong>.</strong></em>**<em><strong>.</strong></em><br>
— -<br>
Yes, I did, many, many years ago I worked for both of them.<br>
I believe I worked for Royal McBee first.<br>
Mel Kaye</p></blockquote>
<p>Danach hörte er nie wieder etwas von ihm.</p>
<p><em>Melvin Kaye verstarb 2018.</em></p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Computergeschichte, Programmierung, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 27 - Die Geschichte von Mel - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 26 - FOCAL</title>
      <link>http://localhost:1313/2023/2023-05-10-nerd-enzyklop%C3%A4die-26---focal/</link>
      <pubDate>Wed, 10 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-10-nerd-enzyklop%C3%A4die-26---focal/</guid>
      <description>
FOCAL (für Formulating On-line Calculations in Algebraic Language) ist eine Programmiersprache, die 1968 erstmals vorgestellt wurde. Entwickelt wurde sie von …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine historische Erkundung aus der &#39;Nerd Enzyklopädie&#39; über die Programmiersprache FOCAL (Formulating On-line Calculations in Algebraic Language), entwickelt 1968 von Richard Merrill (DEC). Der Artikel beleuchtet FOCALs Einsatz auf PDP-Computern, seine Ähnlichkeit mit BASIC, die Gründe für seine begrenzte Popularität (u.a. durch eine Anekdote über Microsoft) und seinen kurzen zweiten Frühling in der Sowjetunion.</p>
          
          
          <p><strong>Hauptthemen:</strong> Programmiersprachen, Computergeschichte, DEC, BASIC, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-10-nerd-enzyklop%C3%A4die-26---focal/image1.png" alt=""></p>
<p><strong>FOCAL</strong> (für <strong>Formulating On-line Calculations in Algebraic Language</strong>) ist eine Programmiersprache, die <strong>1968</strong> erstmals vorgestellt wurde. Entwickelt wurde sie von <strong>Richard Merrill</strong> von <strong>DEC</strong>, Digital Equipment Corporation.</p>
<p>FOCAL war für den Einsatz auf den <strong>PDP</strong> Computern gedacht (<strong>Programed Data Processors</strong>). <strong>1969</strong> veröffentliche <strong>Jim Storer,</strong> damals Schüler an der <strong>Lexington High School</strong>, für den <strong>PDP-8</strong> das in FOCAL geschrieben Spiel <strong>Lunar Lander</strong>. Der Programmcode bestand aus nur 40 Zeilen! FOCAL ist vergleichbar mit <strong>BASIC</strong>; aber bei weitem nicht so populär. Ein Grund war sicherlich die strenge Lizenzierungs-Politik von DEC. Aber auch <strong>Microsoft</strong> könnte, wenn man diese Spekulation zulässt, seinen Teil zum Misserfolg von FOCAL beigetragen haben.</p>
<p>Microsoft vertrieb damals einen FOCAL-Interpreter. <strong>1980</strong> wurde der Verkauf aber eingestellt. Der Grund ist banal: Nachdem eine Bestellung für diese Software einging, konnte man das <strong>Master-Tape</strong> nicht mehr finden, um eine Kopie anzufertigen. Die Bestellung wurde kurzerhand mit dem Hinweis storniert, dass das Produkt nicht mehr verkauft wird. Dass es vermutlich einfach nur „verloren“ ging, behielt man für sich [<a href="https://devblogs.microsoft.com/oldnewthing/20200616-00/?p=103869">MICR3</a>].</p>
<p>In der damaligen Sowjetunion erlebte FOCAL Mitte der <strong>1980er</strong> Jahre einen zweiten Frühling. Der russische Heimcomputer <strong>Electronica BK</strong>, eine Kopie des <strong>PDP-11</strong>, wurde zusammen mit FOCAL ausgeliefert. Aber auch dort wurde FOCAL später durch BASIC verdrängt…</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Programmiersprache, IT-Geschichte, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 26 - FOCAL - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 25 - Bare Metal Programming</title>
      <link>http://localhost:1313/2023/2023-05-07-nerd-enzyklop%C3%A4die-25---bare-metal-programming/</link>
      <pubDate>Sun, 07 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-07-nerd-enzyklop%C3%A4die-25---bare-metal-programming/</guid>
      <description>
Übersetzt heißt „bare metal programming“ etwa so viel wie „Programmieren am reinen Metall“. Gemeint ist damit, dass man eine Software entwickelt, die direkt …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Anekdote aus der &#39;Nerd Enzyklopädie&#39;, die das Konzept des &#39;Bare Metal Programming&#39; veranschaulicht. Der Artikel erzählt die Geschichte eines Entwicklers, der bei einem Programmfehler auf einem &#39;discrete component&#39; Computer buchstäblich mit einem Schraubenzieher in die Hardware eingreifen musste, um das System zu stoppen.</p>
          
          
          <p><strong>Hauptthemen:</strong> Programmierung, Hardware, Computergeschichte, Nerd-Kultur, Softwareentwicklung</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-07-nerd-enzyklop%C3%A4die-25---bare-metal-programming/image1.png" alt=""></p>
<p>Übersetzt heißt „bare metal programming“ etwa so viel wie „Programmieren am reinen Metall“. Gemeint ist damit, dass man eine Software entwickelt, die direkt mit der Hardware kommuniziert, ohne Umwege über Bibliotheken, Schnittstellen oder ein Betriebssystem.</p>
<p>Ein Entwickler, dessen Name nicht überliefert ist, weshalb das ganze vielleicht eher der Kategorie „sympathische Legende“ zuzuordnen ist, nahm den Begriff des „Bare Metal Programmings“ Ende der der 1980er etwas zu wörtlich. Er arbeitete an einem „discrete component“ Computer, also einem Computer, bei dem die Transistoren sichtbar im Gerät verbaut sind (der erste Supercomputer, der IBM 7030 von 1961, bestand aus 169.100 Transistoren. Damit benötigte alleine die CPU eine Fläche von knapp 83qm [<a href="http://ed-thelen.org/comp-hist/vs-ibm-stretch.html">EDTH1</a>].)</p>
<p>Das Programm unseres Entwicklers schien jedenfalls einen Bug zu haben, weshalb er versucht hat das Programm zu stoppen. Was ihm nicht gelang, da das System — bugbedingt — alle Steuersignale ignorierte. Auch der Versuch den Computer selber anzuhalten, war nicht von Erfolg gekrönt. Da er das Gerät — aus Angst vor Datenverlust — nicht einfach ausschalten wollte, rief er einen Techniker dazu.</p>
<p>Bei dieser Art von Computern konnte man recht leicht feststellen, an welcher Stelle ein Programm bzw. eine einzelne Anweisung verarbeitet wurde, da die zuständigen Komponenten ja buchstäblich sicht- und greifbar waren. Man sah sich also zu einer ungewöhnlichen Maßnahme gezwungen, die wohl nicht deutlicher zeigen konnte, wie „Bare Metal Programming“ auch aussehen kann: Der Computer wurde geöffnet, um mit einem Schraubenzieher einen Kurzschluss an der Komponente zu erzeugen, von der man annahm, dass sie für den Bug verantwortlich war [<a href="https://yarchive.net/comp/tales.html">YARC1</a>].</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Programmierung, Hardware, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 25 - Bare Metal Programming - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 24 - Zeichenketten braten</title>
      <link>http://localhost:1313/2023/2023-05-04-nerd-enzyklop%C3%A4die-24---zeichenketten-braten/</link>
      <pubDate>Thu, 04 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-04-nerd-enzyklop%C3%A4die-24---zeichenketten-braten/</guid>
      <description>
Nerd-Enzyklopädie #24
Ganz frei nach dem Motto: Es gibt nichts, was man nicht braucht (oder so ähnlich) hat man sich bei der Programmiersprache C wohl gedacht …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Vorstellung der C-Funktion &#39;strfry&#39; aus der &#39;Nerd Enzyklopädie&#39;. Der Artikel erklärt, wie diese Funktion eine Zeichenkette zufällig neu anordnet, um ein Anagramm zu erzeugen, und beleuchtet die Kuriosität solcher Funktionen in Programmiersprachen.</p>
          
          
          <p><strong>Hauptthemen:</strong> C-Programmierung, Zeichenketten, Algorithmen, Nerd-Kultur, Programmiersprachen</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-04-nerd-enzyklop%C3%A4die-24---zeichenketten-braten/image1.png" alt=""></p>
<p>Nerd-Enzyklopädie #24</p>
<p>Ganz frei nach dem Motto: Es gibt nichts, was man nicht braucht (oder so ähnlich) hat man sich bei der <strong>Programmiersprache C</strong> wohl gedacht und eine Funktion implementiert, die aus einer Zeichenkette ein Anagram erzeugt [<a href="https://man7.org/linux/man-pages/man3/strfry.3.html">MAN1</a>]:</p>
<pre><code>strfry
</code></pre>
<p>Ausgesprochen steht <strong>strfry</strong> für „<strong>string fry</strong>“, also „<strong>Zeichenkette braten</strong>“ und diese Funktion macht nichts anderes, als die Zeichen eines Strings zufällig neu anzuordnen:</p>
<pre><code>strfy(„Hello World“)  
eoWloHl dlr
</code></pre>
<p>Guten Appetit.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> C, Programmierung, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 24 - Zeichenketten braten - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 23 - 30 x 10 = 1.000</title>
      <link>http://localhost:1313/2023/2023-05-01-nerd-enzyklop%C3%A4die-23---30-x-10--1.000/</link>
      <pubDate>Mon, 01 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-01-nerd-enzyklop%C3%A4die-23---30-x-10--1.000/</guid>
      <description>
Wenn du deinen Python-Nachlass mit ein wenig Pfeffer würzen willst, empfiehlt es sich, die „Definition eines Integers“ zu ändern. Wenn du in Python eine Zahl …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Demonstration aus der &#39;Nerd Enzyklopädie&#39;, die zeigt, wie man in Python die interne Darstellung von Integer-Objekten mittels &#39;ctypes&#39; manipuliert. Der Artikel präsentiert ein Code-Beispiel, das dazu führt, dass eine scheinbar einfache Multiplikation wie &#39;30 * 10&#39; ein unerwartetes Ergebnis von &#39;1000&#39; liefert, und warnt vor den daraus resultierenden Debugging-Herausforderungen.</p>
          
          
          <p><strong>Hauptthemen:</strong> Python, Speichermanagement, Programmierung, Debugging, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> advanced</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-01-nerd-enzyklop%C3%A4die-23---30-x-10--1.000/image1.png" alt=""></p>
<p>Wenn du deinen Python-Nachlass mit ein wenig Pfeffer würzen willst, empfiehlt es sich, die „Definition eines Integers“ zu ändern. Wenn du in Python eine Zahl verwendest, nehmen wir die 30, verwendet Python die 30 als Referenz auf ein Objekt im Speicher, in dem wiederum der Wert 30 hinterlegt wird. Die 30 ist also ein Verweis auf ein Objekt, das den tatsächlichen Wert enthält. In der Regel sollten Verweis und Wert gleich sein, sonst wird das mit der Mathematik schwierig.</p>
<p>Schwierig? Das mögen Nerds doch!</p>
<p>Mit dieser Funktion kannst du einen derartigen Verweis anpassen und einen abweichenden Wert hinterlegen:</p>
<pre><code>import ctypes   
def reference(val):  
  return ctypes.cast(id(val), ctypes.POINTER(ctypes.c_int))
</code></pre>
<p>Und so aktivierst du den „Spaß“:</p>
<pre><code>reference(30)[6] = 100
</code></pre>
<p>Willst du nun mit der Ziffer 30 mathematische Operationen durchführen, erzeugt das interessante Ergebnisse:</p>
<pre><code>&gt;&gt;&gt; 30 * 10  
&gt;&gt;&gt; 1000
</code></pre>
<p>Viel Spaß beim Debuggen!</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Python, Code-Trick, Nerd-Enzyklopädie, Debugging</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 23 - 30 x 10 = 1.000 - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>code_demonstration</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 22 - Läuft darauf Doom?</title>
      <link>http://localhost:1313/2023/2023-04-28nerd-enzyklop%C3%A4die-22---l%C3%A4uft-darauf-doom/</link>
      <pubDate>Fri, 28 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-04-28nerd-enzyklop%C3%A4die-22---l%C3%A4uft-darauf-doom/</guid>
      <description>
Doom ist ein sehr erfolgreicher und für damalige Verhältnisse fortschrittlicher 1st-Person-Shooter von id Software aus dem Jahre 1993. Zusammen mit seinem …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieser Artikel behandelt Die Nerd Enzyklopädie 22 - Läuft darauf Doom? und bietet praktische Einblicke in das Thema.</p>
          
          
          <p><strong>Hauptthemen:</strong> Web, IT, Tools</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p><img src="/2023/2023-04-28nerd-enzyklop%C3%A4die-22---l%C3%A4uft-darauf-doom/image1.png" alt=""></p>
<p><strong>Doom</strong> ist ein sehr erfolgreicher und für damalige Verhältnisse fortschrittlicher <strong>1st-Person-Shooter</strong> von <strong>id Software</strong> aus dem Jahre <strong>1993</strong>. Zusammen mit seinem Nachfolger <strong>Doom 2</strong> stand Doom zwischen <strong>1994</strong> und <strong>2011</strong> zwar auf der Liste jugendgefährdender Schriften, das tat dem Erfolg aber keinen Abbruch.</p>
<p>Doom kann mittlerweile zum „<strong>kulturellen Erbe der Spieleindustrie</strong>“ gezählt werden, es diente und dient immer noch als Inspiration für andere Spiele und entwickelte sich im Laufe der Jahre zu einem recht erfolgreichen Franchise mit Filmen, Brettspielen und sogar Büchern.</p>
<p>Der Quell-Code von Doom wurde <strong>2011</strong> zur freien Verfügung gestellt und konnte so modifiziert werden, um das Spiel auch auf anderen Geräten zum Laufen zu bringen. Das war der Startschuss für eine ganz besondere Herausforderung die der Frage folgt: Auf welche technischen Geräte lässt sich das Spiel portieren? Kurz: „<strong>Läuft darauf Doom</strong>“ (<strong>Will it run Doom</strong>)?</p>
<p>Dabei geht es nicht nur um Geräte, die für die Ausführung von Spielen konzipiert sind, also Computer oder Konsolen, sondern auch um ungewöhnliche Dinge wie Mobiltelefone oder Kameras. Nicht ungewöhnlich genug? Das ist eine, sicher unvollständige Liste, von Geräten, auf denen sich Doom spielen lässt:</p>
<p>• ein Oszilloskop [<a href="https://www.youtube.com/watch?v=xZaKlLyikKg">YOUT2</a>]<br>
• ein Drucker [<a href="https://youtu.be/XLHx3vO7KJM">YOUT3</a>]<br>
• eine Anzeigetafel für Werbung [<a href="https://www.youtube.com/watch?v=PxIGuMif1Nk">YOUT4</a>]<br>
• LeapTV, einem Lernsystem für Kinder [<a href="https://www.youtube.com/watch?v=AbnhyR8NwcI">YOUT5</a>]<br>
• ein Geldautomaten [<a href="https://youtu.be/PW5ELKTivbE">YOUT6</a>]<br>
• ein Piano [<a href="https://youtu.be/sJu997jwBcA">YOUT7</a>]<br>
• ein Toaster [<a href="https://itrunsdoom.tumblr.com/post/107805988348/the-prophecy-has-been-fulfilled">TUMB1</a>]<br>
• innerhalb von Teletext [<a href="https://www.youtube.com/watch?v=rIgQV4ClmQ0">YOUT9</a>]<br>
• als Weihnachtsbaumschmuck [<a href="https://www.youtube.com/watch?v=u9ODhV40aEI">YOUT10</a>]<br>
• innerhalb von Notepad [<a href="https://www.youtube.com/watch?v=a3VoEyaqMo">YOUT11</a>]<br>
• auf einem Lego-Stein [<a href="https://www.youtube.com/watch?v=o76U0JPrMFk">YOUT12</a>]</p>
<p>Und natürlich läuft Doom auch innerhalb von Doom — #<strong>Doomception</strong>![<a href="https://youtu.be/wbnfYBFKD1g">YOUT8</a>]</p>
<p><img src="/2023/2023-04-28nerd-enzyklop%C3%A4die-22---l%C3%A4uft-darauf-doom/image2.png" alt=""></p>
<p style="text-align: center;font-style:italic">
Doom in Teletext? Läuft! [[YOUT9](https://www.youtube.com/watch?v=rIgQV4ClmQ0)]
</p>

        
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 22 - Läuft darauf Doom? - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>guide</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 21 - 00000000000000000021e800c1e8df51b22c1588e5a624bea17e9faa34b2dc4a</title>
      <link>http://localhost:1313/2023/2023-04-25-nerd-enzyklop%C3%A4die-21---00000000000000000021e800c1e8df51b22c1588e5a624bea17e9faa34b2dc4a/</link>
      <pubDate>Tue, 25 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-04-25-nerd-enzyklop%C3%A4die-21---00000000000000000021e800c1e8df51b22c1588e5a624bea17e9faa34b2dc4a/</guid>
      <description>
Bei dieser Zeichenkette handelt es sich um einen Hash, der im Sommer 2018 durch die „internet’sche Bitcoin-Blase“ geisterte. Wer verstehen will wie anfällig …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieser Artikel behandelt Die Nerd Enzyklopädie 21 - 00000000000000000021e800c1e8df51b22c1588e5a624bea17e9faa34b2dc4a und bietet praktische Einblicke in das Thema.</p>
          
          
          <p><strong>Hauptthemen:</strong> Web, IT, Tools</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p><img src="/2023/2023-04-25-nerd-enzyklop%C3%A4die-21---00000000000000000021e800c1e8df51b22c1588e5a624bea17e9faa34b2dc4a/image1.png" alt=""></p>
<p>Bei dieser Zeichenkette handelt es sich um einen Hash, der im Sommer <strong>2018</strong> durch die „<strong>internet’sche Bitcoin-Blase</strong>“ geisterte. Wer verstehen will wie anfällig die Bitcoin-Szene für aufmerksamkeitsgenerierende Effekthascherei ist, der sollte sich mit diesem Hash beschäftigen:</p>
<p><img src="/2023/2023-04-25-nerd-enzyklop%C3%A4die-21---00000000000000000021e800c1e8df51b22c1588e5a624bea17e9faa34b2dc4a/image2.png" alt=""></p>
<p style="text-align: center;font-style:italic">
Quelle: [TWIT2]
</p>
<p>Doch bevor ich erkläre, was daran so besonders ist, zunächst ein paar Details — du willst hier ja auch etwas lernen.<br>
Zunächst einmal die offensichtlichen Unklarheiten: Ein Hash ist eine Art Ableitung einer beliebigen Information. Das können ein Text, ein Bild oder irgendwelche anderen digitalen Daten sein. Man schiebt diese Informationen durch einen relativ komplexen Algorithmus, wie z.B. den weit verbreiteten SHA-256 (Secure Hash Algorithm 256). Das Ergebnis ist ein Hash und in der Fachsprache nennt man den Vorgang „kryptologische Hash-Funktion“. Der Hash verändert sich, sobald die eingegebene Information auch nur um ein Zeichen abweicht. Es ist äußerst selten, also wirklich sehr sehr selten, dass zwei unterschiedliche Eingaben zum gleichen Hash führen. Was immer gleich ist: Die Länge des Hashes: Er besteht aus 32 Byte wobei jedes Byte eine Größe von 8 Bit hat. 32 x 8 = 256 — du erkennst die Zusammenhänge?<br>
„32 Byte? Das Ding da oben ist aber 64 Zeichen lang!“ wirst du jetzt vermutlich reklamieren. Korrekt. Aber warum? Es folgt ein kurzer Ausflug in die verrückte Welt der Stellenwertsysteme:<br>
Wie kann man im binären Zahlensystem, in dem ja nur zwei Symbole zur Verfügung stehen (0 und 1), einen höheren Wert als 1 darstellen? Indem wir mehrere Stellen benutzen. Verteilt man das Symbol 1 auf 8 Stellen, kann man so den Wert 255 darstellen — wie das genau funktioniert habe ich im 1. Teil erklärt):</p>
<pre><code>  11111111
</code></pre>
<p>Im <strong>Hexadezimalsystem</strong> stehen uns <strong>16 Symbole</strong> zur Verfügung, da wir hier nicht nur die Zahlen von 0 bis 9 sondern auch die Buchstaben von A bis F verwenden dürfen. So sieht die Zuordnung aus:</p>
<p><img src="/2023/2023-04-25-nerd-enzyklop%C3%A4die-21---00000000000000000021e800c1e8df51b22c1588e5a624bea17e9faa34b2dc4a/image3.png" alt=""></p>
<p>Das Hexaedzimalsystem und die Zurodnung der ersten 16 Stellen</p>
<p>Der Wert <strong>255</strong> wird folgendermaßen geschrieben:</p>
<pre><code>FF
</code></pre>
<p>Man könnte auch ein Stellenwertsystem mit mehr als 16 Zeichen verwenden, z.B. das <strong>Sexagesimalsystem</strong> (<strong>Basis 60</strong>) der <strong>Sumerer</strong>:</p>
<p><img src="/2023/2023-04-25-nerd-enzyklop%C3%A4die-21---00000000000000000021e800c1e8df51b22c1588e5a624bea17e9faa34b2dc4a/image4.png" alt=""></p>
<p style="text-align: center;font-style:italic">
Sexagesimalsystem zur Basis 60 der Sumerer
</p>
<p>Die Zeichen mögen exotisch anmutend, tatsächlich benutzen wir das System aber in unserem Alltag: In der Zeitmessung und zur Angabe von geografischen Längen und Breiten. Der Wert <strong>255</strong> wird hier als <strong>4’15</strong>, also <strong>4 Minuten und 15 Sekunden</strong>, dargestellt.</p>
<p>Aber zurück zu unserem Hash: Ein <strong>SHA-256</strong> <strong>Hash</strong> besteht aus <strong>32 Bytes</strong> in hexadezimaler Schreibweise. Und da ein Byte aus 8 Bit entsteht, benötigt die Darstellung des höchstens Wertes (nämlich FF) zwei Stellen. Damit besteht der Hash also effektiv aus <strong>64 Zeichen</strong>. In binärer Schreibweise, also bei Verwendung von 0 und 1, hat der Hash eine Länge von <strong>256 Zeichen</strong> und so schließt sich der Kreis!</p>
<h1 id="von-der-mathematik-zur-magie">Von der Mathematik zur Magie…</h1>
<p>Das war ganz schön kompliziert und deswegen widmen wir uns jetzt etwas einfacherem: Was ist denn an dem Hash so besonders? Es handelt sich um den Hash eines sogenannten Blocks einer sogenannten <strong>Blockchain</strong> (und zwar der sogenannten Kryptowährung Bitcoin und dem Block mit der Nummer <strong>528.249</strong> [<a href="https://explorer.btc.com/btc/block/00000000000000000021e800c1e8df51b22c1588e5a624bea17e9faa34b2dc4a">BTC1</a>]). In <strong>2018</strong> führte dieser Hash zu Verwirrung und Begeisterung zugleich. Die Szene beschrieb den Hash sogar als…“<strong>magisch</strong>”. Aber warum?</p>
<p>Wie eben beschrieben entsteht ein Hash wenn eine bestimmte Information durch einen Algorithmus modifiziert wird. Bei der Bitcoin-Blockchain gibt es <strong>komplexe Regeln</strong>, die diese Berechnung sehr aufwendig machen. Unter anderem ist ein Hash durch eine bestimmte Anzahl führender Nullen gekennzeichnet. Dadurch entsteht eine rechnerische Schwierigkeit, die nicht nur als Voraussetzung für die <strong>Sicherheit</strong> der Blockhchain herhalten muss, sondern auch für <strong>Wettbewerb</strong> unter den Teilnehmer:innen sorgt (und auch für den oft kritisierten <strong>hohen Energieverbrauch</strong> der Bitcoin-Blockchain verantwortlich ist). Diejenige, die diese „<strong>kryptologische Aufgabe</strong>“ zuerst löst, wird belohnt. So die Kurzfassung.</p>
<p>Die auffällige große Anzahl führender Nullen ist aber nicht der Aufregung wert. Sie ist beeindruckend, aber keine Seltenheit. Die Aufmerksamkeit richtete sich vielmehr auf die ersten Zeichen nach den Nullen:</p>
<pre><code>21E8
</code></pre>
<p>Hier kommt <strong>Zahlensymbolik</strong> ins Spiel. So wird die <strong>21</strong> gerne mit der maximal möglichen Menge von Bitcoins assoziiert, nämlich <strong>21 Mio</strong>. Diese Grenze ist im Bitcoin-Protokoll fest verankert und wird aufgrund einiger Regeln irgendwann Anfang des nächsten Jahrhunderts erreicht.</p>
<p><strong>E8</strong> steht für die <strong>Liesche-Gruppe</strong>, ein wichtiges und gleichzeitig kompliziertes mathematisches Konstrukt, das für viele Forscher einer <strong>universellen Weltformel</strong> nahekommen soll, aber eben noch nicht tut.</p>
<p>Da ein Hash das Resultat einer aufwendigen mathematischen Funktion ist, kann man ihn nicht nach Belieben erzeugen, um “geheime” Botschaften zu übermitteln. Grund genug, hinter diesem besonderen Hash und der <strong>E128</strong> eine geheime Botschaft aus der Zukunft zu vermuten, die vielleicht sogar vom Bitcoin-Erfinder <strong>Satoshi Nakamoto</strong> persönlich stammt.</p>
<p>Zahlreiche Portale beschäftigten sich mit dem Phänonem, es wurde darüber getwittert und Blockchain-Influencer befassten sich in aufgeregten YouTube-Clips mit dem Ereignis. Tatsächlich ist diese Kombination aber reiner Zufall, der gar nicht so unwahrscheinlich ist. Laut <strong>Andrew Miller</strong>, Assistenzprofessor an der University of Illinois, kommt es im Schnitt nämlich alle <strong>455</strong> Tage zu einer derartigen Erscheinung [<strong>BUSIN1</strong>]. Zuletzt beim Block <strong>475.118 im</strong> <strong>Juli 2017</strong> [<strong>BTC2</strong>]. Also: Viel Aufregung um nichts. Oder: Ein ganz normaler Tag in der Bitcoin-Community…</p>

        
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 21 - 00000000000000000021e800c1e8df51b22c1588e5a624bea17e9faa34b2dc4a - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>guide</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 20 - Elvis und Raumschiffe</title>
      <link>http://localhost:1313/2023/2023-04-22-nerd-enzyklop%C3%A4die-20---elvis-und-raumschiffe/</link>
      <pubDate>Sat, 22 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-04-22-nerd-enzyklop%C3%A4die-20---elvis-und-raumschiffe/</guid>
      <description>
Wer sich mit der Entwicklung von Software beschäftigt wird früher oder später über seltsam anmutende Abkürzungen stolpern mit denen sich ausufernder …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Erklärung aus der &#39;Nerd Enzyklopädie&#39; über zwei spezielle Operatoren in Programmiersprachen: den &#39;Elvis Operator&#39; (&#39;?:&#39;), der einen Standardwert zuweist, wenn eine Variable null oder falsch ist, und den &#39;Spaceship Operator&#39; (&#39;&lt;=&gt;&#39;), der einen Drei-Wege-Vergleich durchführt. Der Artikel beleuchtet die Herkunft ihrer ungewöhnlichen Namen.</p>
          
          
          <p><strong>Hauptthemen:</strong> Programmierung, Operatoren, Programmiersprachen, Nerd-Kultur, Humor</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-04-22-nerd-enzyklop%C3%A4die-20---elvis-und-raumschiffe/image1.png" alt=""></p>
<p>Wer sich mit der Entwicklung von Software beschäftigt wird früher oder später über seltsam anmutende Abkürzungen stolpern mit denen sich ausufernder Programmcode zu einem kompakten Kunstwerk aufwerten lässt. Dazu zählen z.B. <strong>ternäre Operatoren,</strong> die langweilige **if-then-**Bedingungen in einfache Einzeiler verwandeln:</p>
<pre><code>sAllGoodMan = foo == bar ? true : false;
</code></pre>
<p>Hier wird die boolesche Variable <strong>sAllGoodMan</strong> auf <strong>True</strong> gesetzt, wenn die Werte von <strong>foo</strong> und <strong>bar</strong> identisch sind, andernfalls ist <strong>sAllGoodMan =</strong> <strong>False</strong>.<br>
Weitaus weniger bekannt ist die gehobene Variante des ternären Operators, der sogenannte <strong>Elvis-Operator,</strong> der nur aus einem Fragezeichen gefolgt von einem Doppelpunkt besteht:</p>
<pre><code>?:
</code></pre>
<p>Und was kann der Elvis-Operator, außer gut aussehen und nicht singen? Er weist einer Variable einen Standard-Wert zu, wenn eine andere Variable <strong>Null</strong> oder <strong>Falsch</strong> ist:</p>
<pre><code>myValue = aValue ?: „default“;
</code></pre>
<p>Wenn die Variable <strong>aValue</strong> nicht gesetzt wurde und damit <strong>Null</strong> oder <strong>Falsch</strong> ist (die Interpretation von „nicht gesetzt“ kann von der jeweiligen Programmiersprache abhängen), wird der Variable myValue der Standard-Wert default zugewiesen. Das funktioniert natürlich auch mit dem Rückgabewert von Funktionen:</p>
<pre><code>Name = getName(‚id‘) ?: „John Doe“;
</code></pre>
<p>Kann kein Name ermittelt werden, wird als Standardname „<strong>John Doe</strong>“ verwendet.</p>
<p>Seinen Namen hat der Elvis-Operator von dem Fragezeichen, das zusammen mit dem Doppelpunkt ein Emoticon darstellt, das an Elvis Presley erinnern soll.</p>
<p>Eine andere weniger bekannte Abkürzung ist der <strong>Spaceship-Operator</strong>:</p>
<pre><code>&lt;==&gt;
</code></pre>
<p>Dieser führt einen <strong>3-Wege-Vergleich</strong> durch und heißt deswegen ganz offiziell eigentlich <strong>Drei-Wege-Vergleichsoperator</strong>. Der Spaceship-Operator erlaubt zwei Element auf drei Arten zu vergleichen, größer, kleiner oder gleich:</p>
<pre><code>A &lt; B, A == B, A &gt; B
</code></pre>
<p>Der Spaceship-Operator fasst die drei Vergleiche zusammen und liefert -1 für kleiner, 0 für genau gleich groß und +1 für größer als zurück.</p>
<p>Die Verbindung zu einem Raumschiff geht angeblich auf das Spiel <strong>Star Trek</strong> von <strong>1971</strong> zurück — dort wurde ein Raumschiff genau so abgebildet: <strong>&lt;==&gt;</strong>.<br>
Die Fraktion der <strong>StarWars-Fans</strong> sieht das anders. Dort wird behauptet, dass <strong>&lt;==&gt;</strong> eher an den <strong>Tie Fighter</strong> aus Star Wars erinnert.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Programmierung, Operatoren, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 20 - Elvis und Raumschiffe - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 19 - Das Brieftauben-Protokoll</title>
      <link>http://localhost:1313/2023/2023-04-19-nerd-enzyklop%C3%A4die-19---das-brieftauben-protokoll/</link>
      <pubDate>Wed, 19 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-04-19-nerd-enzyklop%C3%A4die-19---das-brieftauben-protokoll/</guid>
      <description>Schon mal was von IPoAC gehört? Dabei handelt es sich um eine Abkürzung für „IP over Avian Carriers“ was soviel heißt wie „Internet-Protokoll via gefiedertem …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Erkundung aus der &#39;Nerd Enzyklopädie&#39; über das &#39;IP over Avian Carriers&#39; (IPoAC) Protokoll, auch bekannt als &#39;Brieftauben-Protokoll&#39;. Der Artikel beschreibt die Entstehung dieses Aprilscherzes als offiziellen RFC, seine Aktualisierung für IPv6 und einen realen Testlauf in Norwegen, der die Grenzen der Datenübertragung per Brieftaube aufzeigt.</p>
          
          
          <p><strong>Hauptthemen:</strong> Internet-Protokolle, Netzwerktechnik, Humor, RFC, Nerd-Kultur, Kuriositäten</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Schon mal was von <strong>IPoAC</strong> gehört? Dabei handelt es sich um eine Abkürzung für „<strong>IP over Avian Carriers</strong>“ was soviel heißt wie „<strong>Internet-Protokoll via gefiedertem Träger”</strong>. Die Idee für dieses Protokoll wurde 1999 als Aprilscherz vorgestellt.</p>
<p><img src="/2023/2023-04-19-nerd-enzyklop%C3%A4die-19---das-brieftauben-protokoll/image1.png" alt=""></p>
<p style="text-align: center;font-style:italic">
craiyon.com: “Internet protocol over Avian Carriers”
</p>
<p>Das Internet Protokoll (IP) ist ein elementarer Bestandteil der Kommunikation im <em>Trommelwirbel</em> <strong>Internet</strong>! Es bildet die Grundlage für den elektronischen Datenaustausch zwischen zwei Computern. Beim <strong>IPoAC</strong> werden die Daten nicht elektronisch übermittelt, sondern mithilfe von <strong>Brieftauben</strong>.<br>
Auch wenn das ganze nur als Scherz gedacht war, fand <strong>IPoAC</strong> Einzug in ein sogenanntes <strong>Request for Comment</strong> (genauer der <strong>RFC1149</strong> [<a href="https://datatracker.ietf.org/doc/html/rfc1149">RFCE1</a>]) — ein offizielles Dokument zur Spezifikation von Standards. In <strong>2011</strong> wurde das Protokoll aktualisiert, um mit <strong>IPv6</strong> kompatibel zu sein.</p>
<p>In <strong>2021</strong> kam es in Norwegen sogar zu einem Testlauf des sonderbaren Protokolls. Dabei wurden Daten in <strong>neun Pakete</strong> aufgeteilt und mithilfe von <strong>neun Tauben</strong> über eine Strecke von <strong>fünf Kilometern</strong> übertragen. Die Übertragung dauerte <strong>zwei Stunden</strong> und nur <strong>vier Pakete</strong> wurden erfolgreich übermittelt. Da soll sich noch mal einer über das schlechte Mobilfunknetz beschweren!</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Netzwerk, IT-Geschichte, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 19 - Das Brieftauben-Protokoll - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 18 - Willkommen auf Null Island</title>
      <link>http://localhost:1313/2023/2023-04-16-nerd-enzyklop%C3%A4die-18---willkommen-auf-null-island/</link>
      <pubDate>Sun, 16 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-04-16-nerd-enzyklop%C3%A4die-18---willkommen-auf-null-island/</guid>
      <description>Die geografischen Koordinaten 0° Nord und 0° Ost zeigen auf einem Punkt im Atlantik vor der West-Küste Afrikas. Eigentlich gibt es dort nicht viel zu sehen, …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Einführung in &#39;Null Island&#39; aus der &#39;Nerd Enzyklopädie&#39;, eine fiktive Insel am Nullmeridian und Äquator (0°N, 0°O). Der Artikel erklärt, wie dieser geografische Punkt als &#39;Auffangbecken&#39; für Fehler in geografischen Systemen dient, wenn Ortsdaten nicht korrekt verarbeitet werden können, und beleuchtet die humorvolle Community, die sich um dieses Konzept gebildet hat.</p>
          
          
          <p><strong>Hauptthemen:</strong> Geografie, Kartographie, GPS, Softwarefehler, Datenqualität, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Die geografischen Koordinaten <strong>0° Nord und 0° Ost</strong> zeigen auf einem Punkt im <strong>Atlantik</strong> vor der West-Küste <strong>Afrikas</strong>. Eigentlich gibt es dort nicht viel zu sehen, außer Wasser, noch mehr Wasser, ganz viel Wasser, ab und zu mal ein Fisch und natürlich die <strong>PIRATA</strong>-Boje.</p>
<p><img src="/2023/2023-04-16-nerd-enzyklop%C3%A4die-18---willkommen-auf-null-island/image1.png" alt=""></p>
<p style="text-align: center;font-style:italic">
Null Island oder nur eine Boje? [[WIKI6](https://de.wikipedia.org/wiki/Null_Island)]
</p>
<p>Bei dieser Ortsangabe handelt es sich nämlich um eine Art Hilfsmittel, um Fehler in geografischen Systemen, Datenbanken oder Programmen abzufangen. Da <em>Null</em> für das Fehlen von Daten oder auch die fehlerhafte Rückmeldung eines Programmes stehen kann, führt ein Problem bei der Verarbeitung geografischer Daten eben zu <em>Null —</em> also 0 und damit zu der Koordinate <strong>0 Grad Nord und 0 Grad Ost</strong>.</p>
<p>Seit 2011 hat sich eine kleine Fan-Gemeinde der Aufgabe unterworfen, an diesem Ort der fiktiven Insel <strong>Null Island</strong> ein Gesicht zu geben. So erschuf man unter anderem eine Flagge, geografische Informationen und sogar eine eigene Sprache für Null Island.</p>
<p>Tatsächlich passiert auf dieser nicht existierenden Insel sehr viel: Jedes Mal wenn es in irgendeiner Software zu Problemen mit Ortsangaben kommt, werden die restlichen Daten Null Island zugeordnet. Deine Fitness-App hatte keine Verbindung zu den GPS-Satelliten? Dann verläuft die Fahrrad-Route jetzt wohl über Null Island. Beim Fotografieren stand kein GPS- Signal zur Verfügung? Dann wurde das Foto wohl auf Null Island gemacht! Und damit dürfte Null Island wohl einer der belebtesten Orte auf diesem Planeten sein.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Geografie, IT-Geschichte, Nerd-Enzyklopädie, Kuriosität</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 18 - Willkommen auf Null Island - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 17 - Fuenf — In your Face</title>
      <link>http://localhost:1313/2023/2023-04-13-nerd-enzyklop%C3%A4die-17---fuenf--in-your-face/</link>
      <pubDate>Thu, 13 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-04-13-nerd-enzyklop%C3%A4die-17---fuenf--in-your-face/</guid>
      <description>“Fuenf — In your Face” ist der Name eines Werkes von Farbrausch, einer Gruppe aus der Demo Szene, die laut pouet.net seit 2000 aktiv ist [POUE1].
Aber was ist …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Einführung in die Demoszene und ihre Geschichte, am Beispiel der berühmten 5-Byte-Demo &#39;Fuenf — In your Face&#39; der Gruppe Farbrausch. Der Artikel erklärt, wie Demos als audiovisuelle Kunstwerke technische und kreative Fähigkeiten unter extremen Größenbeschränkungen demonstrieren und wie sich die Demoszene aus der Warez-Szene entwickelte.</p>
          
          
          <p><strong>Hauptthemen:</strong> Demoszene, Computerkultur, Programmierung, Retrocomputing, Nerd-Kultur, Softwareentwicklung</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>“<strong>Fuenf — In your Face</strong>” ist der Name eines Werkes von <strong>Farbrausch</strong>, einer Gruppe aus der Demo Szene, die laut pouet.net seit 2000 aktiv ist [<a href="https://www.pouet.net/groups.php?which=322&amp;order=release&amp;reverse=1">POUE1</a>].</p>
<p>Aber was ist die Demo-Szene? Dieser Begriff beschreibt eine der ältesten Communities des digitalen Zeitalters. Demos sind musikalisch untermalte und animierte Grafiken, die die technischen und kreativen Fähigkeiten einer Gruppe zur Schau stellen — also demonstrieren — sollen. Eine Art digitales audiovisuelles Aushängeschild.</p>
<p><img src="/2023/2023-04-13-nerd-enzyklop%C3%A4die-17---fuenf--in-your-face/image1.png" alt=""></p>
<p style="text-align: center;font-style:italic">
craiyon.com: “democe scene around 2000”
</p>
<p>Die Demo-Szene ist auch eng vernüpft mit der “Warez-Szene”, <strong>Warez</strong> steht für Raubkopien. Raubkopien waren schon immer ein Problem, erst Recht um 1980 herum. Damals wie auch heute erforderte das Anfertigen einer Raubkopie ein gewisses technisches Verständnis, um den Kopierschutz mit mal mehr mal weniger Aufwand zu umgehen. Dieser Vorgang wird als „cracken“ bezeichnet, also „aufbrechen“.</p>
<p>Die Gruppen, die für die Raubkopie verantwortlich waren, versahen <em>gecrackte</em> Software mit einem Intro, das beim Start der Software angezeigt wurde. Das waren in der Regel digitale Musik-Videos, die den Namen der Cracker-Gruppe kunstvoll in Szene setzen sollen. Diese Intros wurden anfangs <strong>Cracktros</strong> genannt.</p>
<p>Mit der Zeit wurde dem Erstellen der Cracktros mehr Bedeutung beigemessen, wohl auch weil es oft aufwendiger war, beeindruckende Cracktros mit geringem Speicherbedarf zu produzieren, als den Kopierschutz zu umgehen. Diese Visitenkarte musste ja mit dem Spiel ausgeliefert und irgendwie auf den Datenträger gequetscht werden. Speicherplatz war damals eine wertvolle Ressource. Auf einer 1,44 MByte-Diskette, die ein komplettes Spiel enthielt, gab es eigentlich keinen Platz für aufwendige Animationen.</p>
<p>Aus dem <strong>Cracktros</strong> wurden schließlich Demos, die auf speziellen Demo-Disks verteilt wurden. Aus der Not wurde eine Tugend und schließlich der Wettbewerb, mit möglichst wenig Code beeindruckende Animationen zu erschaffen.</p>
<p>Die Demo-Szene war geboren und nabelte sich recht schnell von ihrem bösen Geschwister, der Raubkopierer-Szene, ab. Eine dieser Gruppen war die aus Deutschland stammende Gruppe <strong>Farbrausch.</strong> Seit <strong>2000</strong> liefert Farbrausch recht ansehnliche Werke ab, <strong>fuenf (in your face)</strong> gehört vermutlich eher nicht dazu und ist vielmehr einer der ersten klassischen Troll-Versuche des Internets: Es handelt sich dabei um ein 5 Byte große Demo vom <strong>29. Dezember 2001</strong>, von der man zunächst großes erwartet.</p>
<p>Letztlich handelt es sich aber nur um ziemlich anstrengende <strong>Störgeräusche</strong>, die sogar dazu führen konnten, dass der Computer nicht mehr auf Eingaben reagieren. Farbrausch verstand dieses “Werk” als Antwort auf eine ähnliche Produktion der Demogruppe <strong>TEXTEM</strong>, die nur <strong>6 Byte</strong> groß war.</p>
<p>Das sind die <strong>5 Byte</strong>, mit denen Farbrausch vermutlich für die eine oder andere akustische Irritation sorgte:</p>
<pre><code>95 cd 21 eb fc
</code></pre>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Demoszene, IT-Geschichte, Nerd-Enzyklopädie, Kultur</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 17 - Fuenf — In your Face - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 16 - USERSEEUSERDO</title>
      <link>http://localhost:1313/2023/2023-04-10-nerd-enzyklop%C3%A4die-16---userseeuserdo/</link>
      <pubDate>Mon, 10 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-04-10-nerd-enzyklop%C3%A4die-16---userseeuserdo/</guid>
      <description>„User See User Do“ ist eine Anspielung auf das englische Sprichwort “Monkey See, Monkey Do“, was in etwa so viel heißt wie “Was der Affe sieht, das macht er …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Erklärung aus der &#39;Nerd Enzyklopädie&#39; über die &#39;USERSEEUSERDO&#39;-Funktion in Windows 3.1. Der Artikel beleuchtet, wie diese Funktion zur Simulation von Benutzerverhalten für Stresstests des Betriebssystems eingesetzt wurde und ihren Namen vom Sprichwort &#39;Monkey See, Monkey Do&#39; ableitet.</p>
          
          
          <p><strong>Hauptthemen:</strong> Windows, Software Testing, Betriebssysteme, IT-Geschichte, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>„<strong>User See User Do</strong>“ ist eine Anspielung auf das englische Sprichwort “<strong>Monkey See, Monkey Do</strong>“, was in etwa so viel heißt wie “Was der Affe sieht, das macht er nach”. So weit, so despektierlich.<br>
Bei <strong>USER­SEE­USER­DO</strong> handelt es sich um eine Funktion innerhalb von <strong>Windows 3.1</strong>., die die Entwickler<em>innen dazu genutzt haben, Stresstests durchzuführen. Das Ziel der Funktion ist es, das Verhalten der Nutzer</em>innen zu simulieren, mit all seinen vielleicht nicht ganz so sinnvollen Ausprägungen, um die Funktionalität des Betriebssystems auch unter den widrigsten Bedingungen zu prüfen. [<a href="https://devblogs.microsoft.com/oldnewthing/20190731-00/?p=102743">MICR2</a>]</p>
<p><img src="/2023/2023-04-10-nerd-enzyklop%C3%A4die-16---userseeuserdo/image1.png" alt=""></p>
<p style="text-align: center;font-style:italic">
crayion.com: “Monkey See, Monkey Do”
</p>
        
        
        <div class="tags">
          <p><strong>Tags:</strong> Windows, Testing, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 16 - USERSEEUSERDO - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 15 - Der O’Reilly Zoo</title>
      <link>http://localhost:1313/2023/2023-04-07-nerd-enzyklop%C3%A4die-15---der-oreilly-zoo/</link>
      <pubDate>Fri, 07 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-04-07-nerd-enzyklop%C3%A4die-15---der-oreilly-zoo/</guid>
      <description>Wer sich in die faszinierenden Tiefen der Informationstechnologie wagt wird früher oder später über O’Reilly stolpern. Einem Verlag für Computerbücher, 1978 von …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Erkundung aus der &#39;Nerd Enzyklopädie&#39; über die Entstehungsgeschichte der ikonischen Tierillustrationen auf den Covern der O&#39;Reilly Computerbücher. Der Artikel erzählt, wie die Illustratorin Ellie Friedmann durch historische Tierstiche inspiriert wurde und wie Tim O&#39;Reilly das Alleinstellungsmerkmal dieser Designs erkannte, die später auch dazu dienten, auf bedrohte Tierarten aufmerksam zu machen.</p>
          
          
          <p><strong>Hauptthemen:</strong> O&#39;Reilly, IT-Geschichte, Buchdesign, Branding, Nerd-Kultur, Publishing</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Wer sich in die faszinierenden Tiefen der Informationstechnologie wagt wird früher oder später über <strong>O’Reilly</strong> stolpern. Einem Verlag für Computerbücher, <strong>1978</strong> von <strong>Tim O’Reilly</strong> in den <strong>USA</strong> gegründet. Den Büchern von O’Reilly gebührt ein fester Platz in den Regalen jeder Nerd-Bücherei. Ja, die digitale Revolution verschafft mitunter auch den altertümlichen Informationsträgern eine gewisse Daseinsberechtigung.</p>
<p><img src="/2023/2023-04-07-nerd-enzyklop%C3%A4die-15---der-oreilly-zoo/image1.png" alt=""></p>
<p style="text-align: center;font-style:italic">
craiyon.com: “draw an o’reilly animal”
</p>
<p>Eine Eigenschaft prägt fast alle diese Bücher: Auf dem Cover prangt unter dem Titel ein handgezeichnetes Tier [<a href="http://animals.oreilly.com/">OREI1</a>, <a href="https://www.oreilly.com/content/a-short-history-of-the-oreilly-animals/">OREI2</a>], sozusagen das Erkennungszeichen von O´Reilly. Aber das war nicht immer so.<br>
Mitte der 80er Jahre plante O’Reilly den Verkauf seiner Bücher auf eine neue Ebene zu heben und beauftragte die Marketing-Abteilung damit, neue Wege der Vermarktung zu finden. Eine Mitarbeiterin im Marketing stieß während der Suche nach Inspiration auf ihre Nachbarin, die Illustratorin <strong>Ellie Friedmann</strong>, die sie um Entwürfe für das Buch-Cover bat.</p>
<p>Friedmann tat sich anfangs schwer, stammten die Themen der Bücher doch aus einer ihr völlig unbekannten Welt. Linux und Netzwerke waren Mitte der <strong>1980er</strong> Jahre eher eine Randerscheinung. Bei der Suche nach Ideen stieß sie auf <strong>Tier-Gravuren</strong> aus dem <strong>19. Jahrhundert</strong>. Sie beschäftigte sich mit den Eigenschaften der Tiere und den Fachbegriffen aus den Büchern und war so inspiriert, dass sie ein ganzes Wochenende damit verbrachte, Vorschläge anzufertigen, die ihre Nachbarin dann der Marketing-Abteilung vorstellen konnte.</p>
<p>Dort war man zunächst kaum begeistert von den Tieren. Sie wurden als seltsam und sogar angsteinflössend aufgenommen. Tim O’Reilly sah das anders und erkannte das Alleinstellungsmerkmal. Von nun an sollten Tier-Zeichnungen einen Großteil der Bücher prägen. Für Friedman erfüllt die Darstellung der Tiere später auch einen höheren Zweck, abseits des schnöden Marketings. Sie will damit das öffentliche Interesse für die Bedrohung der Tiere wecken, deren Existenz von <strong>Jagd</strong>, <strong>Wilderei</strong> und der <strong>Zerstörung</strong> von Lebensraum bedroht ist.</p>
<p><strong>Ellie Friedmann</strong> arbeitet seit <strong>1986</strong> für den O’Reilly-Verlag, mittlerweile in der Funktion des <strong>Director of Brand Management</strong>.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> O&#39;Reilly, IT-Geschichte, Nerd-Enzyklopädie, Kultur</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 15 - Der O’Reilly Zoo - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 14 - FCKGW-RHQQ2-YXRKT-8TG6W-2B7Q8</title>
      <link>http://localhost:1313/2023/2023-04-04-nerd-enzyklop%C3%A4die-14---fckgw-rhqq2-yxrkt-8tg6w-2b7q8/</link>
      <pubDate>Tue, 04 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-04-04-nerd-enzyklop%C3%A4die-14---fckgw-rhqq2-yxrkt-8tg6w-2b7q8/</guid>
      <description>Hätte ich diese Zeichenfolge vor 20 Jahren veröffentlicht, würde morgen vermutlich der Staatsanwalt an meine Tür klopfen. Heute kann ich damit ein T-Shirt …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine historische Anekdote aus der &#39;Nerd Enzyklopädie&#39; über den berüchtigten Windows XP Volumenlizenzschlüssel &#39;FCKGW-RHQQ2-YXRKT-8TG6W-2B7Q8&#39;. Der Artikel beleuchtet die Geschichte dieses Schlüssels, seine Verbreitung durch Hacker, Microsofts Reaktion und die Entwicklung von Lizenzschutzmechanismen in der Softwareindustrie.</p>
          
          
          <p><strong>Hauptthemen:</strong> Softwarepiraterie, Lizenzmanagement, Windows XP, IT-Geschichte, Nerd-Kultur, Hacking</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Hätte ich diese Zeichenfolge vor 20 Jahren veröffentlicht, würde morgen vermutlich der Staatsanwalt an meine Tür klopfen. Heute kann ich damit ein T-Shirt bedrucken und beim Verband der Software-Industrie sorglos über die Flure flanieren.</p>
<p>Es handelt sich hierbei um einen <strong>Lizenzschlüssel</strong>, der Ende der <strong>1990er</strong> Jahre zu zweifelhafter Berühmtheit gelangte. Die Software-Industrie versuchte (damals wie auch heute) ihre Produkte mit <strong>Lizenzschlüsseln</strong> vor unerwünschten Kopien zu schützen. Diese mussten beim ersten Start der Software eingegeben werden, um das Programm nutzen zu können. So auch beim Betriebsystem <strong>Windows XP</strong>, das am <strong>28. August 2001</strong> erschien. Microsoft verteilte dafür unter anderem auch sogenannte Volumen-Lizenzschlüssel, die Unternehmen nutzen konnten, um gleich mehrere Kopien von Windows zu aktivieren.</p>
<p>Der Hacker-Gruppe <strong>devil’s0wn</strong> gelang <strong>35 Tage</strong> vor dem offiziellen Start von Windows XP der Coup schlechthin: Sie gelangten an eine Kopie des Betriebssystem und brachten diese zusammen mit dem funktionierenden Volumen-Lizenzschlüssel <strong>FCKGW-RHQQ2-YXRKT-8TG6W-2B7Q8</strong> in Umlauf.<br>
Das Foto einer selbstgebrannten CD und diesem Schlüssel machte im Internet die Runde und kann durchaus als Mittelfinger in Richtung Microsoft gedeutet werden:</p>
<p><img src="/2023/2023-04-04-nerd-enzyklop%C3%A4die-14---fckgw-rhqq2-yxrkt-8tg6w-2b7q8/image1.png" alt=""></p>
<p style="text-align: center;font-style:italic">
  Die legendäre Aufnahme der Raubkopie von Windows XP einen Monat bevor das Betriebssystem offiziell erscheinen sollte.
</p>
<p>Microsoft reagierte relativ spät und setzte den Schlüssel erst im August <strong>2004</strong> auf eine Blockier-Liste, um die weitere Nutzung zu unterbinden. Die Zeichenfolge sicherte sich trotzdem einen Platz in der IT-Popkultur und wird mittlerweile sogar auf T-Shirts vertrieben.</p>
<p>Andere berühmte Lizenzschlüssel sind z.B. die <strong>111–1111111</strong> und die <strong>000–0000007</strong> für <strong>Window 95</strong>. Die Mechanismen, um die Gültigkeit von Lizenzschlüsseln zu bewerten, waren damals noch nicht sehr ausgereift. Heutzutage muss man die Software aufwendig aktivieren oder benötigt eine Internetverbindung, um die Rechtmäßigkeit der Kopie prüfen zu können. In Windows 95 gab es ein paar einfache Regeln, nach denen der Lizenzschlüssel überprüft wurde. Im Prinzip bestand der Schlüssel nur aus einer Datumsangabe und einer Zahl, deren <strong>Quersumme 7</strong> ergibt [<a href="https://infosecwriteups.com/reversing-microsofts-windows95-product-key-check-mechanism-ca7e825014b6">INFOS1</a>]. Natürlich gab es auch Ausnahmen, so wurden auch 10 mal die 1 oder die James-Bond-Zeichenfolge akzeptiert.</p>
<p>Mittlerweile sind die Methoden der Software-Industrie weitaus ausgefeilter. So kann z.B. über eine ständige Internet-Verbindung die Validität geprüft werden. Oder es gibt Launcher, die die jeweilige Software starten und den Lizenz-Status überwachen.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Windows, IT-Geschichte, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 14 - FCKGW-RHQQ2-YXRKT-8TG6W-2B7Q8 - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 13 - Total hours wasted here = 42</title>
      <link>http://localhost:1313/2023/2023-04-01-nerd-enzyklop%C3%A4die-13---total-hours-wasted-here-42/</link>
      <pubDate>Sat, 01 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-04-01-nerd-enzyklop%C3%A4die-13---total-hours-wasted-here-42/</guid>
      <description>Dass Entwickler*innen einen speziellen Humor haben sollte bekannt sein. Und es gibt keinen Ort, an dem das klarer wird, als im Quellcode. Ein ikonisches …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Erkundung aus der &#39;Nerd Enzyklopädie&#39; über den speziellen Humor von Entwicklern, der sich in Quellcode-Kommentaren und unkonventionellen Programmierpraktiken widerspiegelt. Der Artikel beleuchtet das berühmte &#39;total_hours_wasted_here = 42&#39;-Meme und präsentiert weitere Beispiele für witzige, zynische oder selbstironische Code-Kommentare und &#39;quick and dirty&#39;-Lösungen.</p>
          
          
          <p><strong>Hauptthemen:</strong> Programmierung, Softwareentwicklung, Humor, Nerd-Kultur, Code-Qualität, Douglas Adams</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Dass Entwickler*innen einen speziellen Humor haben sollte bekannt sein. Und es gibt keinen Ort, an dem das klarer wird, als im Quellcode. Ein ikonisches Beispiel ist dieser subtile Hinweis auf die „Komplexität“ des entsprechenden Code-Bereichs:</p>
<pre><code>// total_hours_wasted_here = 42
</code></pre>
<p>Die <strong>42</strong> ist eine Anspielung auf das Buch “<strong>Per Anhalter durch die Galaxis</strong>” von <strong>Douglas Adams</strong>. Ein Supercomputer gibt darin die Antwort <strong>42</strong> auf „<strong>die ultimative Frage nach dem Leben, dem Universum und dem ganzen Rest</strong>“.</p>
<p>Die 42 wird oft als Verweis auf diese Szene verwendet, wenn eine Zahlenangabe erforderlich ist. So auch in jener flapsigen Dokumentation ist, gerne auch eingebettet in einen zynischen Kommentar zur Code-Qualität:</p>
<pre><code>// Dear maintainer:   
// Once you are done trying to ‘optimize’ this routine,  
// and have realized what a terrible mistake that was,   
// please increment the following counter as a warning   
// to the next guy:   
//  
// total_hours_wasted_here = 42
</code></pre>
<p>In der IT hat sich für derartigen Code der Begriff „quick and dirty“ eingebürgert. Die Lösung ist vielleicht nicht schön, aber dafür schnell implementiert. Wer auch immer sich später mit dem Quellcode auseinander setzt bzw. auseinander setzen muss, wird davon sicherlich nicht begeistert sein. Aber das dürfte wohl auch zum Berufsrisiko gehören.</p>
<p>Noch nicht genug Nerd-Humor? In der Community hat sich dankenswerterweise ein sportlicher Ergeiz entwickelt, möglichst einfallsreichen Quellcode zu produzieren. Wie wäre es mit einem angepassten <strong>Error-Handling</strong>?</p>
<pre><code>Exception up = new Exception(“Something is really wrong.”);  
throw up:
</code></pre>
<p>Oder einer <strong>Selbsterkenntnis</strong> wie dieser:</p>
<pre><code>// drunk, fix later
</code></pre>
<p>Dann hätten wir noch umgekehrte boolsche Werte in der <strong>Programmiersprache C</strong>:</p>
<pre><code>#define TRUE FALSE
</code></pre>
<p>Eine überraschende Offenbarung:</p>
<pre><code>return 1; # returns 1
</code></pre>
<p>Mein persönlicher Favorit: mathematische Trickserein:</p>
<pre><code>// I can’t divide with zero, so I have to divide with something very similar  
result = number / 0.00000000000001;
</code></pre>
<p>Noch mehr unterhaltsame Code-Kuriositäten, die ein ganzes Buch füllen würden, gibt es auf <strong>Stackoverflow</strong>: [<a href="https://stackoverflow.com/questions/184618/what-is-the-best-comment-in-source-code-you-have-ever-encountered">STACK1</a>].</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Programmierung, Humor, Nerd-Enzyklopädie, Kultur</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 13 - Total hours wasted here = 42 - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>cultural_analysis</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 12 - A CPU is literally a rock that we tricked into thinking</title>
      <link>http://localhost:1313/2023/2023-03-28-nerd-enzyklop%C3%A4die-12---a-cpu-is-literally-a-rock-that-we-tricked-into-thinking/</link>
      <pubDate>Tue, 28 Mar 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-03-28-nerd-enzyklop%C3%A4die-12---a-cpu-is-literally-a-rock-that-we-tricked-into-thinking/</guid>
      <description>Eine CPU ist nicht mehr als ein zerbröselter Felsen in den der Blitz eingeschlagen hat.
In Gänze lautet dieses wunderbare Bonmot:
If you ever code something …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Erkundung aus der &#39;Nerd Enzyklopädie&#39; über das Bonmot &#39;A CPU is literally a rock that we tricked into thinking&#39;. Der Artikel beleuchtet die wörtliche Wahrheit hinter dieser Aussage, indem er die Zusammensetzung einer CPU aus Silizium (Quarzsand) erklärt und auf ein Video von Intel verweist, das den Herstellungsprozess dokumentiert.</p>
          
          
          <p><strong>Hauptthemen:</strong> Computerhardware, CPU, Silizium, Informatik, Nerd-Kultur, Humor</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Eine CPU ist nicht mehr als ein zerbröselter Felsen in den der Blitz eingeschlagen hat.</p>
<p>In Gänze lautet dieses wunderbare Bonmot:</p>
<blockquote>
<p>If you ever code something that “feels like a hack but it works,” just remember that a CPU is literally a rock that we tricked into thinking […] first you have to flatten the rock and put lightning inside it […]<br>
@daisyowl am 15.03.2017 auf Twitter [<a href="https://twitter.com/daisyowl/status/841806379962646532">TWIT1</a>]</p></blockquote>
<p>Die Verfasserin spielt damit darauf an, dass nicht jede programmatische Lösung so elegant ist, wie man es sich vielleicht wünscht. Und schließlich besteht die CPU ja auch nur aus “<strong>elektrifiziertem Sand</strong>”: Das wichtigste Bauteil, das für die Berechnungen im Computer zuständig ist besteht zu einem Großteil aus <strong>Silizium</strong> und das wird in der Regel aus <strong>Quarzsand</strong> gewonnen. Der Strom stammt dann zwar nicht aus einem Blitz, das rundet das Bild aber passend ab.</p>
<p>Ob <strong>Intel</strong> sich von dem Tweet hat inspirieren lassen oder selber auf diese Idee kam, ist nicht überliefert. Jedenfalls hat man in <strong>2020</strong> die Herstellung der CPU in einem Video dokumentiert — vom Quarzsand bis zur Elektrifizierung [<a href="https://www.youtube.com/watch?v=_VMYPLXnd7E">YOUT1</a>].</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Hardware, Nerd-Enzyklopädie, Humor, Informatik</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 12 - A CPU is literally a rock that we tricked into thinking - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 11 - Der kleine Bobby Tables</title>
      <link>http://localhost:1313/2023/2023-03-25-nerd-enzyklop%C3%A4die-11---der-kleine-bobby-tables/</link>
      <pubDate>Sat, 25 Mar 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-03-25-nerd-enzyklop%C3%A4die-11---der-kleine-bobby-tables/</guid>
      <description>Der kleine Robert „Bobby” Tables ist Gegenstand eines Comics von xkcd (einer recht legendären Sammlung von Web-Comics von Randall Munroe). Der Comic über …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Erklärung aus der &#39;Nerd Enzyklopädie&#39; über den berühmten xkcd-Comic &#39;Der kleine Bobby Tables&#39; und die von ihm illustrierte Sicherheitslücke: SQL-Injection. Der Artikel erläutert, wie bösartiger SQL-Code über Eingabefelder in Datenbanken eingeschleust werden kann, um unerwünschte Aktionen auszuführen, und betont die Notwendigkeit der Validierung von Benutzereingaben.</p>
          
          
          <p><strong>Hauptthemen:</strong> SQL Injection, Web-Sicherheit, Datenbanken, Programmierung, Nerd-Kultur, xkcd</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Der kleine <strong>Robert</strong> „<strong>Bobby” Tables</strong> ist Gegenstand eines Comics von <strong>xkcd</strong> (einer recht legendären Sammlung von Web-Comics von <strong>Randall Munroe</strong>). Der Comic über besagten <strong>Bobby Tales</strong> trägt den Titel “<strong>Exploits of a Mom</strong>” [<a href="https://xkcd.com/327/">XKCD2</a>]. Ein <strong>Exploit</strong> beschreibt die Ausnutzung einer Sicherheitslücke in Computer-Systemen. In dem Comic geht es um einen Schüler, dessen Mutter ihren Sohn folgendem Namen verleiht — natürlich nur temporär:</p>
<pre><code>Robert’); DROP TABLE Students; — 
</code></pre>
<p>Das, was hinter dem Vornamen steht, mag wie Hieroglyphen oder ein Tippfehler aussehen. In der Tat handelt es sich aber um eine <strong>SQL-Anweisung</strong>, also den Befehl, die Tabelle mit dem Namen „<strong>Students</strong>“ zu löschen. Der Comic thematisiert damit die Sicherheitslücke <strong>SQL-Injection</strong>.</p>
<p>Dabei wird über eine Eingabemaske eine spezielle Zeichenfolge an das System übergeben, das diese ungeprüft übernimmt und so zu einer ungewünschten Aktion „überrumpelt“ wird. Das Ziel muss nicht unbedingt das Löschen von Daten sein, auch der Abruf von kritischen Informationen wie Passwörtern ist denkbar.</p>
<p>Die Moral der Geschichte, die sich an die Entwickler<em>innen von Eingabeformularen oder Datenbank-Schnittstellen wendet: Prüfe die Eingabe deiner Nutzer</em>innen.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> SQL, Sicherheit, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 11 - Der kleine Bobby Tables - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 10 - Brainfuck</title>
      <link>http://localhost:1313/2023/2023-03-22-nerd-enzyklop%C3%A4die-10---brainfuck/</link>
      <pubDate>Wed, 22 Mar 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-03-22-nerd-enzyklop%C3%A4die-10---brainfuck/</guid>
      <description>Die Behauptung ist natürlich starker Tobak. Bei Brainfuck handelt es sich um eine sogenannte “esoterische Programmiersprache”, entworfen vom Schweizer Urban …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Einführung aus der &#39;Nerd Enzyklopädie&#39; in die esoterische Programmiersprache Brainfuck. Der Artikel erklärt die acht minimalistischen Befehle der Sprache, demonstriert ihre Komplexität anhand eines &#39;Hello World!&#39;-Beispiels und beleuchtet ihren Zweck als Lernwerkzeug oder Coding-Challenge, anstatt für den produktiven Einsatz.</p>
          
          
          <p><strong>Hauptthemen:</strong> Programmiersprachen, Esoterische Programmierung, Informatik, Nerd-Kultur, Algorithmen</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Die Behauptung ist natürlich starker Tobak. Bei <strong>Brainfuck</strong> handelt es sich um eine sogenannte “<strong>esoterische Programmiersprache</strong>”, entworfen vom Schweizer <strong>Urban Müller</strong>. Brainfuck sollte eigentlich leicht zu lernen sein, da sie gerade einmal <strong>acht Befehle</strong> umfasst, die jeweils nur aus <strong>einem Zeichen</strong> bestehen. Was soll da schon schief gehen?</p>
<p>Eine ganze Menge. Denn diese besondere Eigenschaft dürfte das Programmieren ein wenig erschweren. Was nicht heißt, dass es unmöglich ist. Probier es doch mal aus. Das sind die acht Befehle, die du kennen musst:</p>
<pre><code>+ Wert der aktuellen Zelle inkrementieren  
- Wert der aktuellen Zelle dekremeWentieren  
&gt; Zeiger inkrementieren  
&lt; Zeiger dekrementieren  
[ Schleifen-Start  
] Schleifen-Ende  
. aktuellen Zellenwert ausgeben (zur Standardausgabe)  
, aktuellen Zellenwert einlesen (von Standardausgabe)
</code></pre>
<p>Fertig? Herzlich Glückwunsch, du kannst jetzt „Brainfuck“! und hast nun bestimmt kein Problem damit, diese „<strong>Hello World!</strong>“-Implementierung in Brainfuck zu verstehen [<a href="https://en.wikipedia.org/wiki/Brainfuck">WIKI13</a>]:</p>
<pre><code>++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt; — -.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++. — — — . — — — — .&gt;&gt;+.&gt;++.
</code></pre>
<p><strong>Brainfuck</strong> ist für den produktiven Einsatz natürlich kaum geeignet, sondern eher um das Konzept der Programmierung zu vermitteln oder für eine gemütliche Coding-Challenge am sonntäglichen Frühstückstisch.</p>
<p>Übrigens: Die Programmiersprache mit den meisten Keywords, nämlich <strong>217</strong>, heißt <strong>Visual Basic</strong>. [<a href="https://github.com/e3b0c442/keywords#c-ansi-c89-32-keywords">GITH2</a>].</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Programmiersprache, Nerd-Enzyklopädie, Humor, Informatik</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 10 - Brainfuck - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 9 - Der Streisand-Effekt</title>
      <link>http://localhost:1313/2023/2023-03-19-nerd-enzyklop%C3%A4die-9---der-streisand-effekt/</link>
      <pubDate>Sun, 19 Mar 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-03-19-nerd-enzyklop%C3%A4die-9---der-streisand-effekt/</guid>
      <description>Der Streisand-Effekt ist für die meisten sicherlich ein alter Hut, gehört aber auch in dieses illustre Kompendium der digitalen Phänomene. Der Streisand-Effekt …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Erklärung aus der &#39;Nerd Enzyklopädie&#39; über den &#39;Streisand-Effekt&#39;, ein Phänomen, bei dem der Versuch, Informationen zu unterdrücken, unbeabsichtigt zu deren weiterer Verbreitung führt. Der Artikel beleuchtet den Ursprung des Begriffs anhand des Rechtsstreits von Barbara Streisand um ein Luftbild ihres Anwesens und die tatsächliche Prägung des Begriffs durch Mike Masnick im Zusammenhang mit einem &#39;Pissoir&#39;-Fall.</p>
          
          
          <p><strong>Hauptthemen:</strong> Internet-Phänomene, Datenschutz, Medienrecht, Zensur, Nerd-Kultur, Informationskontrolle</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Der <strong>Streisand-Effekt</strong> ist für die meisten sicherlich ein alter Hut, gehört aber auch in dieses illustre Kompendium der digitalen Phänomene. Der Streisand-Effekt kann seine Dynamik vor allem auf Grund der schier endlosen Verbreitungsmöglichkeiten des Internets entfalten. Aber wie kam es dazu und welche Rolle spielen Pissoirs?</p>
<h3 id="am-anfang-war-die-erosion">Am Anfang war die Erosion…</h3>
<p>In <strong>2003</strong> fertige <strong>Kenneth Adelmann</strong> für <strong>pictopia.com</strong> zahlreiche Luftaufnahmen der kalifornischen Küste an, um die dort vorherrschende <strong>Erosion</strong> zu dokumentieren. Auf einer der <strong>12.000 (!) Aufnahmen</strong> war auch das Anwesen von <strong>Barbara Streisand</strong> zu sehen. Die war davon aber kaum angetan, wohl in Sorge um Ihre Privatsphäre (<strong>Google</strong> <strong>StreetView</strong>, Streisands Endgegner, startete übrigens erst 4 Jahre später). Also verklagte sie Adelmann prompt auf Schadensersatz in Höhe von <strong>50 Mio. USD.</strong></p>
<p><img src="/2023/2023-03-19-nerd-enzyklop%C3%A4die-9---der-streisand-effekt/image1.png" alt=""></p>
<p style="text-align: center;font-style:italic">
Das Grundstück von Barbara Streisand um 2003 an der Küste Kaliforniens ([WIKI12](https://de.wikipedia.org/wiki/Streisand-Effekt#/media/Datei:Streisand_Estate.jpg))
</p>
<p>Natürlich wusste die Öffentlichkeit bisher nicht, wo sich das Anwesen von Streisand befand. Und vermutlich hätte sie es auch nicht erfahren, denn das Thema Küstenerosion — ein wichtiges Forschungsthema — dürfte für einen Smalltalk am Stammtisch nicht gerade geeignet sein. Bis dahin wurde die Aufnahme <strong>6 mal</strong> aufgerufen [<a href="https://www.techdirt.com/2015/01/08/10-years-everyones-been-using-streisand-effect-without-paying-now-im-going-to-start-issuing-takedowns/">TECHD1</a>].</p>
<p>Mit der Klage änderte sich das. Das öffentliche Interesse war geweckt. Leider nicht zugunsten des Küstenschutzes, sondern für diese eine Luftaufnahme, die sich schlagartig im Internet verbreitete und im ersten Monat <strong>420.00 Aufrufe</strong> generierte. Die Position von Streisands Küstendomizil war nun gar nicht mehr so unbekannt. Barbara Streisand hatte mir ihrer Klage genau das Gegenteil erreicht und sich damit auch einen Platz in der Popkultur gesichert — abseits von ihrer musikalischen Leistung: Der Streisand-Effekt beschreibt den hilflosen und ungeschickten Versuch eine unbeliebte und noch nicht sehr weit verbreitet Information zu unterdrücken, was ihre Bekanntheit in der Öffentlichkeit erst erhöht. Doch das war nicht die Geburtsstunde des Begriffs!</p>
<p>Erst in <strong>2005</strong> wurde der „Streisand-Effekt“ erstmals erwähnt: Auf der Seite <strong>urinal.net</strong> gibt es Aufnahmen von Toiletten. Unter anderem aus dem <strong>Marco Beach Ocean Resort</strong>. Und das Ressort hat den Betreiber der Seite in 2005 abgemahnt. In der Folge erlangte die Aufnahme dieses Pissoirs eine gewisse Aufmerksamkeit im Internet. <strong>Mike Manik</strong>, Autor des Online-Magazins <strong>Techdirt</strong>, berichtete über diesen ungewollten Popularitäts-Zuwachs und nannte das den „Streisand-Effekt“ [<a href="https://www.techdirt.com/2015/01/08/10-years-everyones-been-using-streisand-effect-without-paying-now-im-going-to-start-issuing-takedowns/">TECHD1</a>].</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Internet, Datenschutz, Nerd-Enzyklopädie, Phänomen</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 9 - Der Streisand-Effekt - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>cultural_analysis</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 8 - Hello World hat einen Bug</title>
      <link>http://localhost:1313/2023/2023-03-16-nerd-enzyklop%C3%A4die-8---hello-world-hat-einen-bug/</link>
      <pubDate>Thu, 16 Mar 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-03-16-nerd-enzyklop%C3%A4die-8---hello-world-hat-einen-bug/</guid>
      <description>Hello World! hat einen Bug Solltest du jemals in den erhabenen Genuss kommen eine Programmiersprache erlernen zu dürfen, wird deine erste Lektion vermutlich die …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieser Artikel behandelt Die Nerd Enzyklopädie 8 - Hello World hat einen Bug und bietet praktische Einblicke in das Thema.</p>
          
          
          <p><strong>Hauptthemen:</strong> Web, IT, Tools</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <h2 id="hello-world-hat-einenbug">Hello World! hat einen Bug</h2>
<p>Solltest du jemals in den erhabenen Genuss kommen eine Programmiersprache  erlernen zu dürfen, wird deine erste Lektion vermutlich die Ausgabe von „hello world!“ behandeln.  Ein Klassiker, beliebt bei Jung und Alt und so etwas wie der Running Gag in der Programmierer-Szene. (Das Verständnis für Nerd-Humor muss man sich übrigens hart erarbeiten.)</p>
<p>Der erste nachvollziehbare Beleg für diese Tradition geht auf Brian Kernighan zurück. Dieser verfasste für die Bell Laboratories eine Anleitung zur Programmierung mit B (Überraschung: der Nachfolger von B ist übrigens C). Dort wurde „hello, world“ aber nur als Beispiel-Ausgabe eines Programmes verwendet. Erst in einer späteren Anleitung für die Programmiersprache C von 1978 führte Kernighan dann die heute gewohnte Variante ein:</p>
<pre><code>main( ) \{

printf(&quot;hello, world\\n“);

\}
</code></pre>
<p>(Das \n am Ende steht für „new line“).</p>
<p>Wie dem auch sei: Die Umsetzung dieses einfachen Beispiel ist in den allermeisten Programmiersprachen nicht korrekt, sie hat einen Bug. Aber warum? </p>
<p>Unter Linux gibt es unter /dev das Gerät /dev/null — sendet man Ausgaben an dieses Gerät, passiert in der Regel gar nichts. /dev/null hat einen weniger bekannten Verwandten, nämlich /dev/full, das einen vollen Speicher simulieren soll. Sendet man eine Nachricht an diese Gerät, gibt es die Fehlermeldung zurück, das kein Speicher verfügbar ist:</p>
<pre><code>echo &quot;Hello World!&quot; \&gt; /dev/full  
echo: write error: No space left on device1  
echo $?  
1
</code></pre>
<p>Die Rückmeldung ist 1, was soviel bedeutet wie: Ein Fehler ist aufgetreten. Die Idee dahinter ist, dass man prüfen kann, wie ein Programm auf Fehlermeldungen reagiert. Was aber passiert, wenn man die Ausgabe der C-Implementierung von „hello, world“ zu diesem Gerät schickt?</p>
<pre><code>gcc hello.c -o hello  
./hello \&gt; /dev/full  
echo $?  
0
</code></pre>
<p>Die Rückmeldung ist 0  - also: „Kein Fehler aufgetreten„, was natürlich nicht stimmen kann. Auch die Implementierungen in anderen mitunter sehr populären Sprachen zeigen dieses Verhalten.</p>
<p>Das Hello-World-Programm ist zwar simpel und erfüllt seinen Zweck; setzt man allerdings strenge Qualitäts-Maßstäbe an, erfordert das die Berücksichtigung aller denkbaren Situationen. Und das ist hier nicht der Fall. „hello, world„ hat also - streng genommen - einen Bug.</p>

        
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 8 - Hello World hat einen Bug - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>guide</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 7 - Das allererste Easter-Egg</title>
      <link>http://localhost:1313/2023/2023-03-13-nerd-enzyklop%C3%A4die-7---das-allererste-easter-egg/</link>
      <pubDate>Mon, 13 Mar 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-03-13-nerd-enzyklop%C3%A4die-7---das-allererste-easter-egg/</guid>
      <description>Als Easter Egg - also Osterei - wird eine versteckte Botschaft, Feature oder Gimmick in einem Programm, Computerspiel und eigentlich überall bezeichnet. Der …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine historische Erkundung aus der &#39;Nerd Enzyklopädie&#39; über die Ursprünge von &#39;Easter Eggs&#39; in Software und Spielen. Der Artikel beleuchtet frühe Beispiele wie den &#39;make love&#39;-Befehl und das Spiel &#39;Moonlander&#39;, konzentriert sich aber auf das erste bekannte Easter Egg in Ataris &#39;Adventure&#39; von Warren Robinett und die Prägung des Begriffs durch Steve Wright.</p>
          
          
          <p><strong>Hauptthemen:</strong> Computergeschichte, Gaming, Softwareentwicklung, Easter Egg, Nerd-Kultur, Atari</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Als Easter Egg - also Osterei - wird eine versteckte Botschaft, Feature oder Gimmick in einem Programm, Computerspiel und eigentlich überall bezeichnet. Der Kreativität sind keine Grenzen gesetzt. So z.B. der Aufkleber mit dem Intel-Logo auf der CPU-Verpackung, der auf der Rückseite wie das Innenleben einer CPU aussieht [REDDI1].</p>
<p>Das erste bekannte Easter Egg überhaupt  befindet sich im <strong>make</strong>-Befehl der Computer <strong>PDP-6</strong> und <strong>PDP-10.</strong> Führte man den Befehl mit dem Argument <strong>love</strong> gab es die Ausgabe <strong>not war</strong> zurück, bevor es die Ausführung fortführte:</p>
<pre><code>$ make love

not war
</code></pre>
<p><strong>Moonlander (1973)</strong> von <strong>Jack Burness</strong> von <strong>DEC</strong> (Digital Equipment Corporation) war das erste Spiel mit einer versteckten Funktion. Bewegte man sich lange genug horizontal, erschien irgendwann ein McDonalds Restaurant. Das Spiel wurde für den <strong>GT40</strong> entwickelt und diente eher dazu, die Fähigkeiten des Terminals zu demonstrieren. 1979 adaptierte <strong>Atari</strong> mit <strong>Lunar Lander</strong> das Konzept und entwickelte daraus ein „echtes“ Spiel.</p>
<p>Der Begriff Easter Egg wurde allerdings erst in <strong>1979</strong> geprägt und zwar bei eben jenem Unternehmen: <strong>Atari</strong>. Das Management von Atari hatte ja bekanntermaßen ein schwieriges Verhältnis zu seinen Mitarbeitern (siehe —&gt; Die Entstehungsgeschichte von Activision). Einerseits war man nicht an Gehaltsverhandlungen interessiert, andererseits hielt man es nicht für nötig, die Namen der Entwickler beim Abspann der Spiele zu erwähnen. Heutzutage eine Selbstverständlichkeit. Also die Erwähnung, nicht die Nicht-Erwähnung.</p>
<p>Der Grund für diese Praxis: Man wollte verhindern, dass die Konkurrenz weiß, wen sie bei Atari abwerben muss. Der Entwickler des Spiels <strong>Adventure</strong>, <strong>Warren Roinett</strong>, wählte eine ganz besondere Form des Protests: Er verewigte sich mit diesen Worten innerhalb eines Raum, der im Spiel nur schwer zu erreichen war:</p>
<p><img src="/2023/2023-03-13-nerd-enzyklop%C3%A4die-7---das-allererste-easter-egg/Adventure_EastereggPNG.png" alt=""></p>
<p style="text-align: center;font-style:italic">
„Created by Warren Robinett“ in Ataris Adventure, 1979 \[WIKI4\]
</p>
<p>Das Easter Egg wurde erst nach dem Weggang von <strong>Robinett</strong> entdeckt. Der 15-jährige <strong>Adam Clayton</strong> aus Salt Lake City fand die „geheime Botschaft“ und beschrieb in einem Brief an Atari, welche Schritte notwendig waren, um in den versteckten Raum zu gelangen (ob jemand anders die Entdeckung vor ihm gemacht hat, ist nicht übermittelt). <strong>Adam Clayton</strong> wurde später selber Software-Entwickler, entwickelte sogar Spiele für die Atari-System und arbeitet heute für <strong>Warner Bros Entertainment</strong>.</p>
<p>Die Begeisterung seitens Atari hielt sich in Grenzen. Da Robinett das Unternehmen bereits verlassen hat, machte man sich im Quellcode auf die Suche nach dem Easter Egg. <strong>Brad Stewart</strong> fand die entsprechende Stelle, tat sich aber auch schwer damit, die Nachricht zu entfernen. Weniger aus technischer Sicht, vielmehr aus rebellischem Antrieb. Er hielt mehr davon, die Nachricht durch „Fixed by Brad Stewart“ zu ersetzen [WARR1].</p>
<p>Atari verzichtete schließlich auf die Anpassung des Spiels, nicht nur, weil die Herstellung eines neue ROM-Masters - sozusagen die Vorlage für die Massenproduktion - etwa <strong>10.000 USD</strong> gekostet hätte. <strong>Steve Wright</strong>, damals Direktor für Software Development bei Atari, fand Gefallen an der Idee einer versteckten Botschaft und wählte dafür den Begriff „Easter Egg“. In vielen Spielem (und wie gesagt auch in anderen Produkten) sollten fortan diese kleinen versteckten Botschaften zu finden sein.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Gaming, IT-Geschichte, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 7 - Das allererste Easter-Egg - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 6 - Die Entstehungsgeschichte von Activision</title>
      <link>http://localhost:1313/2023/2023-03-10-nerd-enzyklop%C3%A4die-6---die-entstehungsgeschichte-von-activision/</link>
      <pubDate>Fri, 10 Mar 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-03-10-nerd-enzyklop%C3%A4die-6---die-entstehungsgeschichte-von-activision/</guid>
      <description>Activision gehört zu den erfolgreichsten Unternehmen der Videospiel-Industrie und die Entstehung ist eng verknüpft mit dem Untergang eines Videospiel-Pioniers: …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieser Artikel behandelt Die Nerd Enzyklopädie 6 - Die Entstehungsgeschichte von Activision und bietet praktische Einblicke in das Thema.</p>
          
          
          <p><strong>Hauptthemen:</strong> Web, IT, Tools</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p><strong>Activision</strong> gehört zu den erfolgreichsten Unternehmen der Videospiel-Industrie und die Entstehung ist eng verknüpft mit dem Untergang eines Videospiel-Pioniers: <strong>Atari</strong>. Der Grund: Fehlentscheidungen und Ignoranz [<a href="https://www.gameinformer.com/b/features/archive/2013/02/26/activisionaries-how-four-programmers-changed-the-game-industry-forever.aspx">GAME1</a>].</p>
<p><img src="/2023/2023-03-10-nerd-enzyklop%C3%A4die-6---die-entstehungsgeschichte-von-activision/IMAGE1.jpg" alt=""></p>
<p style="text-align: center;font-style:italic">
Nein, nicht Facebooks Metaverse, sondern Pitfall von Activision!
</p>
<p>Aber von Anfang an: Atari wurde 1972 von <strong>Nolan Bushnell</strong> und <strong>Ted Dabney</strong> gegründet. Atari produzierte sowohl Spielecomputer als auch Spiele und war zu der Zeit genau das, was man heute als „Start-Up“ bezeichnen würde: Gute Stimmung, gutes Produkt.</p>
<p>Das wohl erste populäre Computerspiel <strong>Pong</strong> stammte von Atari. Der <strong>Atari 2600</strong> ist eine der ersten Konsolen und kann wohl mit Fug und Recht als Kulturgut bezeichnet werden. Ab Mai 1974 arbeitete sogar der spätere Apple-Gründer <strong>Steve Jobs</strong> für Atari. Kurzum: Es lief bei Atari.</p>
<p>Trotz des Erfolg des Unternehmens konnte nicht genug Kapital aufgebracht werden, um die Forschung für neue Technologien voranzutreiben. Das Unternehmen wurde deshalb 1976 an <strong>Warner Communications</strong> verkauft — schon damals ein bedeutender Player in der Unterhaltungsindustrie.</p>
<p><strong>Bushnell</strong> musste das Unternehmen 1978 verlassen, um Platz zu machen für <strong>Raymond Kassar</strong>. Und mit Warner und Kassar endete die lockere Start-Up-Mentalität. Kostenoptimierung und Disziplin standen von nun an auf der Tagesordnung. „<strong>The days of hot-tubbing in the office were over</strong>“, so Crane [<a href="https://www.gamedeveloper.com/business/the-history-of-activision">GAME2</a>].</p>
<p>Die Sparkur hatte Erfolg: Anfang 1979 veröffentlichte das Management die Zahlen für das Vorjahr. Das Unternehmen machte mit dem Verkauf von Spiele-Cartridges einen Gewinn von <strong>100 Mio. USD</strong>. Es ging steil bergauf.</p>
<p>Die vier Top-Programmierer <strong>David Crane</strong>, <strong>Larry Kaplan</strong>, <strong>Alan Miller</strong>, and <strong>Bob Whitehead</strong> konnten sich darüber nicht so richtig freuen. Zusammen hatten die vier mehr als die Hälfte der Spiele produziert, gleichzeitig verdienten sie aber gerade einmal <strong>22.000 USD pro Jahr.</strong></p>
<p>Sie beschwerten sich bei Kassar und forderten ihren Anteil am Erfolg. Doch der winkte ab. Für ihn war die Entwicklungsarbeit nicht wertvoller als z.B. die Montage der Cartridges am Fließband [<a href="https://www.gamedeveloper.com/business/the-history-of-activision">GAME2</a>]. Seine Devise lautete „Kostenreduzierung um jeden Preis“. Gehaltserhöhungen und Boni kamen für ihn nicht infrage. Eine fatale Fehlentscheidung.</p>
<p>Die vier Entwickler verließen das Unternehmen, um <strong>Activision</strong> zu gründen. 1981 verließ auch <strong>Jay Miner</strong>, Chefentwickler für die Atari-Heimcomputer, das Unternehmen und gründete seinerseits <strong>Amiga</strong> — ein weiteres populäres Videospiel-Unternehmen.</p>
<p>In einem Interview mit der InfoWorld in 1983 beschrieben Kaplan und Cane die damalige Situation und wie Kassar auf ihre Gehaltsforderungen reagierte:</p>
<p>‘I’ve dealt with your kind before. You’re a dime a dozen. You’re not unique. Anybody can do ­a ­cartridge.’” (Kassar laut Kaplan in InfoWorld, 1983)</p>
<p>Zwischen den beiden Unternehmen entbrannte ein Konflikt, vermutlich auch getrieben durch den angekratzten Stolz von Atari. Dabei gab es dafür keinen Grund: Die Spiele von Activision waren durchaus erfolgreich und wirkten sich so auch auf den Verkauf der Atari-Konsolen aus.</p>
<p>Kassar musste Atari 1983 nach einem Börsenskandal verlassen. Das Unternehmen versank in der Folge in der Bedeutungslosigkeit, wechselte mehrfach den Besitzer und meldete 2013 Insolvenz an. Dank einer Crowdfunding Kampagne in 2020 gelang mit der Retro-Konsole <strong>Atari VCS</strong> die, naja, sagen wir mal “Rückkehr”. Atari ist neben Nintendo, Sony oder Microsoft eher ein kleines Licht am Entertainment-Firmament.</p>
<p>Activision war 3 Jahre nach seiner Gründung bereits <strong>300 Mio. USD</strong> wert. Der Erfolg von Activision beflügelte die ganze Branche. Nachahmer überschwemmten den Markt mit Spielen, die lange nicht mit der Qualität von Activision mithalten konnten. Ein Preiskampf entbrannte und schließlich platzte die Blase. Viele Spiele-Hersteller gingen pleite und auch Activision machte ein paar harte Jahr durch.</p>
<p>Das Unternehmen wurde umbenannt, aufgekauft, musste ebenfalls Insolvenz anmelden und erweiterte sein Portfolio. Mitte der 1980er Jahre hatten die vier Gründer das Unternehmen schon wieder verlassen. Miller und Whitehead gründeten <strong>Accolade</strong>. Kaplan kehrte als Vizepräsident zurück zu Atari. Crane verließt Activision als letzter und gründete mit <strong>Gary Kitzen</strong> <strong>Absolute Entertainment</strong>.</p>
<p>Heute ist Activision der zweitgrößte Spielehersteller der Welt mit über 4.000 Mitarbeitern.</p>

        
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 6 - Die Entstehungsgeschichte von Activision - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>guide</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 5 - Gesehen, gelacht, F8</title>
      <link>http://localhost:1313/2023/2023-03-07-nerd-enzyklop%C3%A4die-5---gesehen-gelacht-f8/</link>
      <pubDate>Tue, 07 Mar 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-03-07-nerd-enzyklop%C3%A4die-5---gesehen-gelacht-f8/</guid>
      <description>Dieser fröhliche Ausspruch geht auf eine populäre Software zurück bzw. auf eine ganze Software-Familie: Die alternativen Dateimanager. Einer ihrer ältesten und …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieser Artikel aus der &#39;Nerd Enzyklopädie&#39; beleuchtet die Herkunft des Ausdrucks &#39;Gesehen, gelacht, F8&#39; im Kontext der frühen Computer-Dateiverwaltung. Er erklärt die Rolle des Norton Commanders und seiner Klone, wie dem Total Commander, und wie die Funktionstaste F8 zum Löschen von Dateien zu einem humorvollen Ausdruck für das Verwerfen enttäuschender Software oder Medien wurde.</p>
          
          
          <p><strong>Hauptthemen:</strong> Computergeschichte, Dateimanager, Norton Commander, Total Commander, DOS, Tastenkombinationen, Nerd-Kultur, Humor</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Dieser fröhliche Ausspruch geht auf eine populäre Software zurück bzw. auf eine ganze Software-Familie: Die alternativen Dateimanager. Einer ihrer ältesten und wichtigsten Vertreter ist der sagenumwobene <strong>Norton Commander</strong>. Jeder Nerd sollte bei diesem Anblick feuchte Augen bekommen:</p>
<p><img src="/2023/2023-03-07-nerd-enzyklop%C3%A4die-5---gesehen-gelacht-f8/image.png" alt=""></p>
<p style="text-align: center;font-style:italic">
Der Norton Commander Version 5 (1995) [[WIKI3](https://de.wikipedia.org/wiki/Norton_Commander)]
</p>
<p>Der Norton Commander wurde 1984 unter dem Namen <strong>VisualDOS</strong> (VDOS, DOS steht für Disc Operating System) von <strong>John Socha</strong> entwickelt und später von <strong>Peter Norton Computing</strong> vertrieben. DOS war seinerzeit ein Betriebsystem, das ohne grafische Benutzeroberfläche auskam. Für viele Anwender*innnen heutzutage vermutlich eine seltsame Vorstellung.</p>
<p>Mithilfe des Norton Commanders konnte man nicht nur Dateioperationen bequem durchführen, sondern hatte auch andere nützliche Funktionen an zentraler Stelle zur Verfügung. Selbst als mit <strong>Microsoft Windows</strong> eine grafische Benutzeroberfläche zur Verfügung stand, galt der Norton Commander noch als willkommene Alternative zum hauseigenem und etwas sperrigen Dateimanager. Der Norton Commander wird seit 2000 nicht mehr weiterentwickelt. Mittlerweile gibt es zahlreiche Ableger und Klone für alle gängigen Betriebssysteme und sogar für Smartphones. Der <a href="https://www.ghisler.com/deutsch.htm"><strong>Total Commander</strong> von Christian Ghisler</a> dürfte wohl zum bekanntesten Vertreter dieser Gattung gehören.</p>
<p>Wie dem auch sei: Dateien und Ordner ließen sich schnell über die <strong>Funktionstaste F8</strong> löschen. Ein Tastenkürzel, das von den meisten Norton-Commander-Klonen weiterhin unterstützt wird. Wenn man vom Unterhaltungswert eines Spiels, einer Software oder eines Videos enttäuscht war, wurde es so einfach vom Computer entfernt. So entstand der Ausruf „gesehen“ (das Spiel getestet, das Video angesehen, …) „gelacht“ (im Sinne einer abwertenden Beurteilung) und „F8“ (Löschen!).</p>
<p>Gesehen. Gelacht. F8…</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Computergeschichte, Dateimanager, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 5 - Gesehen, gelacht, F8 - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 4 - RegExen — Jetzt hast du zwei Probleme</title>
      <link>http://localhost:1313/2023/2023-03-04-nerd-enzyklop%C3%A4die-4---regexen--jetzt-hast-du-zwei-probleme/</link>
      <pubDate>Sat, 04 Mar 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-03-04-nerd-enzyklop%C3%A4die-4---regexen--jetzt-hast-du-zwei-probleme/</guid>
      <description>Reguläre Ausdrücke sind umstritten: Geliebt als vielseitiges Werkzeug, verdammt als undurchschaubare Fehlerquelle. Nicht ohne Grund heißt es: Reguläre Ausdrücke …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle und kritische Auseinandersetzung mit regulären Ausdrücken (RegEx) und dem bekannten Programmierer-Meme &#39;Jetzt hast du zwei Probleme&#39;. Der Artikel beleuchtet die Komplexität, den Missbrauch und die Sicherheitsrisiken (Catastrophic Backtracking, ReDOS) von RegEx und verfolgt die Ursprünge des berühmten Zitats.</p>
          
          
          <p><strong>Hauptthemen:</strong> Reguläre Ausdrücke, Programmierung, Softwareentwicklung, Sicherheit, Nerd-Kultur, Algorithmen</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>Reguläre Ausdrücke sind umstritten: Geliebt als vielseitiges Werkzeug, verdammt als undurchschaubare Fehlerquelle. Nicht ohne Grund heißt es: Reguläre Ausdrücke lösen ein Problem und schaffen zwei neue.<br>
Woher kommt diese Hassliebe?</p>
<h2 id="eine-exotische-tierart">Eine exotische Tierart</h2>
<p>Reguläre Ausdrücke, kurz RegExen, sind mitunter schwer zu entwickeln und irgendwann kaum noch lesbar. Das erschwert das Debugging, also die Fehlersuche. Wie wäre es zum Beispiel mit diesem Schmuckstück:</p>
<pre><code>^(?=.*[A-Z].*[A-Z])(?=.*[!@#$&amp;*])(?=.*[0–9].*[0–9])(?=.*[a-z].*[a-z].*[a-z]).{8}$
</code></pre>
<p>Na, erkannt? Diese RegExe überprüft ob eine Passwort-Zeichenfolge bestimmten Sicherheitsanforderungen entspricht. Diesen Hinweis kann man im Quellcode vielleicht noch dokumentieren. Aber was wenn sich die Sicherheitsanforderungen im Detail ändern?</p>
<h2 id="mit-kanonen-auf-spatzen">Mit Kanonen auf Spatzen…</h2>
<p>RegExen werden außerdem gerne dort eingesetzt, wo eigentlich bessere, standardisierte Lösungen vorhanden sind, wie z.B. für das Parsen von XML [<a href="https://flapenguin.me/xml-regex">FLAP1</a>]:</p>
<pre><code>\s*  
(?(?=&lt;)  
  (?&lt;opentag&gt;  
    &lt; \s*  
    (?&lt;tagname&gt;\w+)  
    (?&lt;attibute&gt;  
      \s+  
      (?&lt;attrname&gt;[^\s&gt;]+)  
      =  
      (?&lt;attrquote&gt;&quot;|'|)  
      (?&lt;attrvalue&gt;[^\s&quot;'&gt;]+)  
      (\k{attrquote})  
    )*  
    \s*  
    (?&lt;selfclosing&gt;\/\s*)?  
    &gt;  
  )  
  (?(&lt;selfclosing&gt;)|  
    (?&lt;children&gt;(?R))  
    (?&lt;closetag&gt;&lt;\s* \/ \s* \k{tagname} \s*&gt;)  
  )  
|  
  (?&lt;text&gt;[^&lt;]*)  
)*  
\s*
</code></pre>
<p>Was aussieht als wäre deine Katze auf der Tastatur eingeschlafen, ist eine funktionsfähige RegExe. Mit genau einem Vorteil: Wenn man den Ausdruck Stück für Stück zerpflückt, um ihn zu verstehen, kann man viel über die Möglichkeiten regulärer Ausdrücke lernen. Im produktiven Betrieb sollte man trotzdem auf alternative Ansätze zurückgreifen, um mit XML-Daten zu arbeiten. Wie z.B. XML-Parser, die soll es ja wirklich geben.</p>
<h2 id="backtracking">Backtracking</h2>
<p>RegExen können auch zu handfesten Sicherheitsproblemen führen. Die Ursache liegt in der Art, wie RegExen verarbeitet werden. Sie durchlaufen einen String zeichenweise, bis eine Bedingung nicht mehr erfüllt wird und springen dann zu dem Zeichen zurück, an dem der Ausdruck vielleicht einen anderen Lösungsweg nehmen kann. Dieses Vorgehen nennt man <strong>Backtracking</strong>, also Rückverfolgung. Diese Funktion kann aber zu einem Rückkopplungs-Effekt führen, wodurch die Dauer der Verarbeitung exponentiell ansteigt. Die Folge nennt man „Catastrophic Backtracking“, eine wichtige Grundlage für <a href="https://medium.com/@nitinpatel_20236/what-are-evil-regexes-7b21058c747e">ReDOS</a> (<a href="https://medium.com/@nitinpatel_20236/what-are-evil-regexes-7b21058c747e">Regular Expression Denial Of Service</a>) Angriffe [<a href="https://www.regular-expressions.info/catastrophic.html">REGU1</a>]. Ein einfaches Beispiel ist dieser reguläre Ausdruck [<a href="https://medium.com/@nitinpatel_20236/what-are-evil-regexes-7b21058c747e">MEDI1</a>]:</p>
<pre><code>(x+x+)+y.
</code></pre>
<p>Diese RegExe lässt sich sicherlich optimieren, sie soll auch nur zeigen, wie schnell die Verarbeitung eskalieren kann. Als Test-String dient diese einfache Zeichenkette:</p>
<pre><code>xxxxxy
</code></pre>
<p>Die Verarbeitung erfordert in diesem Fall in <strong>123 Schritte</strong>. Passen wir die Zeichenkette nun etwas an:</p>
<pre><code>xxxxxxxxxxxxxy
</code></pre>
<p>Mehr als <strong>38.000 Schritte</strong> sind jetzt erforderlich, um den regulären Ausdruck zu prüfen. Mit dem richtigen regulären Ausdruck und der passenden Zeichenkette kann ein Browser „mühelos“ zum Absturz gebracht werden.</p>
<p>Der Einsatz von regulären Ausdrücken ist also streitbar. Übrigens: Dem Netscape Entwickler <strong>Jamie Zawinski</strong> wird zugeschrieben, diese Erkenntnis als erster in Worte gefasst zu haben. Er stellte bereits <strong>1997</strong> fest [<a href="https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/">CODI1</a>]:</p>
<blockquote>
<p>Some people, when confronted with a problem, think “I know, I’ll use regular expressions.” Now they have two problems.</p></blockquote>
<p>Dieser Ausspruch geht wiederum auf <strong>David Tilbrook</strong> zurück, der sich (selber nur vage) erinnert, wie er <strong>1985</strong> auf einer Konferenz in <strong>Dublin</strong> die Nutzung des Kommandozeilen-Tools <strong>awk</strong> kommentiert [<a href="http://regex.info/blog/2006-09-15/247">REGE1</a>]:</p>
<blockquote>
<p>“If you have a problem and you think awk is the solution, then you have two problems.”</p></blockquote>
<p><strong>RegExen</strong> und <strong>awk</strong> sind nicht die einzigen zweifelhaften Tools, auch <a href="http://regex.info/blog/2006-09-15/247">Perl</a> hat einen gewissen Ruf. Aber vermutlich ist das nur eine besondere Art von Nerd-Humor, vor der niemand sicher ist:</p>
<p><img src="/2023/2023-03-04-nerd-enzyklop%C3%A4die-4---regexen--jetzt-hast-du-zwei-probleme/image.png" alt=""></p>
<p style="text-align: center;font-style:italic">
Bildquelle [[XKCD1](https://xkcd.com/1171/)]
</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> RegEx, Programmierung, Sicherheit, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 4 - RegExen — Jetzt hast du zwei Probleme - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie - 640K Speicher sind genug</title>
      <link>http://localhost:1313/2023/2023-03-01-die-nerd-enzyklop%C3%A4die---640k-speicher-sind-genug/</link>
      <pubDate>Wed, 01 Mar 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-03-01-die-nerd-enzyklop%C3%A4die---640k-speicher-sind-genug/</guid>
      <description>Diese Aussage gehört wohl in jedes gut gepflegte Informatik-Seminar: Bill Gates unterlag anscheinend dem Irrglauben, dass 640 KByte Arbeitsspeicher für Computer …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Untersuchung aus der &#39;Nerd Enzyklopädie&#39; über das berühmte, aber oft falsch zugeschriebene Zitat von Bill Gates: &#39;640K Speicher sind genug&#39;. Der Artikel entlarvt den Mythos, dass Gates diese Aussage je gemacht hat, und verfolgt die Ursprünge der Fehlzuschreibung in verschiedenen Publikationen, während er die Hartnäckigkeit des Gerüchts beleuchtet.</p>
          
          
          <p><strong>Hauptthemen:</strong> IT-Geschichte, Bill Gates, Microsoft, Computerhardware, Mythen, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Diese Aussage gehört wohl in jedes gut gepflegte Informatik-Seminar: Bill Gates unterlag anscheinend dem Irrglauben, dass 640 KByte Arbeitsspeicher für Computer genügen würden. Wir alle wissen, dass selbst unsere Armbanduhren ein vielfaches davon benötigen.</p>
<p>Bereits 1981 soll sich Bill Gates dieses umstrittene Bonmot abgerungen haben und es kursiert immer noch  durch das Internet und ominöse IT-Vorlesungen.Dabei erklärte Gates knapp 15 Jahre später, dass die Aussage gar nicht von ihm stammt. Seine Erklärung ergibt durchaus Sinn: Der damals erschienene IBM PC konnte mit bis zu 640 KB Arbeitsspeicher ausgerüstet werden. Kam es jemals vor, dass sich Software-Entwickler mit den gegebenen Ressourcen zufrieden geben? Das Ausreizen technischer Grenzen ist wohl eher eine sportliche Disziplin in der IT. Man kann also annehmen, dass Gates eher der gegenteiligen Ansicht war [<a href="https://abcnews.go.com/Technology/PCWorld/story?id=5214635">GO1</a>]:</p>
<blockquote>
<p>&ldquo;Do you realize the pain the industry went through while the IBM PC was limited to 640K? The machine was going to be 512K at one point, and we kept pushing it up. I never said that statement &mdash; I said the opposite of that.”</p>
<p><em>Bill Gates gegenüber Bloomberg Business News, 1996</em></p></blockquote>
<p>Woher stammt das angebliche Zitat? Ein erster Hinweis findet sich in der Zeitschrift &ldquo;InfoWorld” vom 29. April 1985 [<a href="https://books.google.de/books?id=2C4EAAAAMBAJ&amp;lpg=PA5&amp;vq=%22nobody%20would%22&amp;pg=PA5">INFOW1</a>] - allerdings ohne Hinweis auf ein eventuell statt gefundenes Interview:</p>
<p>When we set the upper limit of PC-DOS at 640K, we thought nobody would ever need that much memory.</p>
<p><img src="/2023/2023-03-01-die-nerd-enzyklop%C3%A4die---640k-speicher-sind-genug/Unbekannt2.png" alt=""></p>
<p style="text-align: center;font-style:italic">
William Gates, chairman of Microsoft in InfoWorld, 1985
</p>
<p>Von dem zweifelhaften Kontext abgesehen, ist diese Aussage auch weit entfernt von: &ldquo;640 KByte sind genug&rdquo;. Das gleiche Magazin veröffentlichte einige Jahre später ein ähnliches Zitat - aber auch hier ohne Hinweis auf den Kontext, wie z.B. ein Interview:</p>
<blockquote>
<p>&ldquo;640K ought to be enough for anyone”</p>
<p><em>Bill Gates, InfoWorld, 1990</em></p></blockquote>
<p>Knapp fünf Jahre später griff die Washington Post die Aussage im Rahmen einer Zitatesammlung mit dem Titel &ldquo;If They Only Knew&rdquo; (&ldquo;Wenn sie nur wüssten&rdquo;) auf. Hier hieß es, dass Gates die besagte Aussage 1981 machte.</p>
<p>Es folgte eine Kaskade von Referenzen, wie z.B. im Buch &ldquo;The Experts Speak: The Definitive Compendium of Authoritative Misinformation” mit einem Verweis auf die Washing Post [<a href="https://quoteinvestigator.com/2011/09/08/640k-enough/1">QUOTE1</a>].</p>
<p>Die Beweislage ist also relativ dünn und sogar widersprüchlich. Der Recherche-Blog Quote Investigator hat den Wahrheitsgehalt untersucht - und gibt ausreichend Anlass zur Skepsis [<a href="https://quoteinvestigator.com/2011/09/08/640k-enough/1">QUOTE1</a>]. Trotzdem hält sich das Gerücht hartnäckig; das Computer-Magazin chip glaubte noch 2016 daran:</p>
<p><img src="/2023/2023-03-01-die-nerd-enzyklop%C3%A4die---640k-speicher-sind-genug/Unbekannt.png" alt=""></p>
<p style="text-align: center;font-style:italic">
Bildquelle \[[CHIP1](https://www.chip.de/news/640-kB-sollten-genug-sein-Die-groessten-Technik-Irrtuemer-der-Geschichte_92787690.html)\]
</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> IT-Geschichte, Microsoft, Nerd-Enzyklopädie, Mythos</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie - 640K Speicher sind genug - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Primes - Animations-Engine</title>
      <link>http://localhost:1313/2023/2023-02-24/2023-02-24-primes/</link>
      <pubDate>Fri, 24 Feb 2023 08:04:44 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-02-24/2023-02-24-primes/</guid>
      <description>&ldquo;Primes&rdquo; ist eine in JavaScript geschriebene Web-App, die Primzahlen auf einer Spirale visualisiert. Die Darstellung lässt sich durch zahlreiche …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine kurze Vorstellung der Web-Anwendung &#39;Primes&#39;, die in JavaScript entwickelt wurde. Die Anwendung visualisiert Primzahlen auf einer Spirale und bietet zahlreiche anpassbare und animierbare Parameter zur Darstellung.</p>
          
          
          <p><strong>Hauptthemen:</strong> JavaScript, Primzahlen, Datenvisualisierung, Web-Anwendung, Mathematik</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>&ldquo;Primes&rdquo; ist eine in JavaScript geschriebene Web-App, die Primzahlen auf einer Spirale visualisiert. Die Darstellung lässt sich durch zahlreiche Paramater anpasen, viele Parameter lassen sich animieren.</p>
<p><a href="https://primes.nickyreinert.de">https://primes.nickyreinert.de</a></p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> JavaScript, Visualisierung, Mathematik, Projekt</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>projekte</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Primes - Animations-Engine - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>project_showcase</dc:type>
      
      
    </item><item>
      <title>Freecoffee - Der Stullen-Generator</title>
      <link>http://localhost:1313/2023/2023-02-24/2023-02-24-freecoffee/</link>
      <pubDate>Fri, 24 Feb 2023 07:44:21 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-02-24/2023-02-24-freecoffee/</guid>
      <description>https://freecoffee.de
Eine in JavaScript geschriebene Oberfläche, um belegte Brote (vulgo Stullen) randomisiert zu belegen.
</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine kurze Vorstellung der Web-Anwendung &#39;Freecoffee&#39;, einem in JavaScript entwickelten &#39;Stullen-Generator&#39;, der zufällige Beläge für belegte Brote generiert.</p>
          
          
          <p><strong>Hauptthemen:</strong> JavaScript, Web-Anwendung, Generatoren, Humor, Kulinarisches</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><a href="https://freecoffee.de">https://freecoffee.de</a></p>
<p>Eine in JavaScript geschriebene Oberfläche, um belegte Brote (vulgo Stullen) randomisiert zu belegen.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> JavaScript, Projekt, Humor, Web-App</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>projekte</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Freecoffee - Der Stullen-Generator - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>project_showcase</dc:type>
      
      
    </item>
  </channel>
</rss>