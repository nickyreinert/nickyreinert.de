<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" 
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Algorithmen auf Nicky Reinert</title>
    <link>https://nickyreinert.de/topics/algorithmen/</link>
    <description>Blog &amp; Projekte von Nicky Reinert (Institut für digitale Herausforderungen): Webentwicklung &amp; Software Development, SEO &amp; Analytics, Hosting &amp; DevOps, WordPress &amp; Hugo, Tools &amp; Projekte, Datenschutz und digitale Kultur – plus Texte zu KI sowie Autismus &amp; Gesellschaft.</description>
    <generator>Hugo 0.148.2</generator>
    <language>de</language>
    <managingEditor></managingEditor>
    <webMaster></webMaster>
    <copyright></copyright>
    <lastBuildDate>Mon, 01 Jan 2024 12:19:31 +0100</lastBuildDate><atom:link href="https://nickyreinert.de/topics/algorithmen/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>Die Nerd Enzyklopädie 43 - 0x5f3759df</title>
      <link>https://nickyreinert.de/2024/2024-01-01-nerd-enzyklop%C3%A4die-43---0x5f3759df/</link>
      <pubDate>Mon, 01 Jan 2024 12:19:31 +0100</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2024/2024-01-01-nerd-enzyklop%C3%A4die-43---0x5f3759df/</guid>
      <description>In der Informationstechnologie gibt es zwei wichtige Innovationstreiber: Die Porno-Industrie und die Spiele-Industrie. Quake III ist ein wegweisender Vertreter …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine detaillierte Erkundung aus der &#39;Nerd Enzyklopädie&#39; über den berühmten &#39;Fast Inverse Square Root&#39;-Algorithmus (&#39;0x5f3759df&#39;) aus dem Quellcode von Quake III. Der Artikel erklärt die mathematischen Grundlagen der Vektornormierung, die Funktionsweise des Algorithmus mit seinem &#39;evil floating point bit hack&#39; und der &#39;magischen Konstante&#39;, und beleuchtet die ungeklärte Urheberschaft sowie die heutige Relevanz.</p>
          
          
          <p><strong>Hauptthemen:</strong> Algorithmen, Computergrafik, Floating Point, Programmierung, IT-Geschichte, Nerd-Kultur, Quake III</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> advanced</p>
          
        </div>
        
        
        <p>In der Informationstechnologie gibt es zwei wichtige Innovationstreiber: Die <strong>Porno-Industrie</strong> und die <strong>Spiele-Industrie</strong>. <strong>Quake III</strong> ist ein wegweisender Vertreter der Spiele-Industrie. Der Pionier unter den Ego-Shootern wurde <strong>1999</strong> veröffentlicht, eroberte die Herzen der spielenden Gemeinde im Sturm und glänzte mit für die damaligen Verhältnisse herausragenden optischen Effekten. Und das trotz vergleichsweise geringer Anforderungen an die Hardware.</p>
<p><img src="/2024/2024-01-01-nerd-enzyklop%C3%A4die-43---0x5f3759df/image_1.png" alt=""></p>
<p>Nerd-Enzyklopädie #43</p>
<p>Um das zu ermöglichen nutzte <strong>Quake</strong> die „<strong>fast inverse square root</strong>“ (zu Deutsch klingt es etwas sperriger: „Schnelle umgekehrte Quadratwurzel”).</p>
<p>Aber… warum? Um in einer dreidimensionalen Welt bestimmte physikalische Effekt zu simulieren, nutzt man <strong>Vektoren</strong>. Nehmen wir z.B. die Berechnung von <strong>Lichtreflektionen</strong>: Um den Einfalls- und Ausfallswinkel auf einer beliebigen Fläche korrekt zu berechnen, benötigt man einen Vektor, genau genommen einen <strong>normierten Vektor</strong>.</p>
<p>Die Formel für die Berechnung des Betrages eines Vektor (sprich seiner „Länge“) sieht folgendermaßen aus:</p>
<p><img src="/2024/2024-01-01-nerd-enzyklop%C3%A4die-43---0x5f3759df/image_2.png" alt=""></p>
<p>Wer in der Schule gut aufgepasst hat, sollte davon nicht sonderlich beeindruckt sein. Es handelt sich im Prinzip um den <strong>Satz des Pythagoras</strong> <strong>auf Steroiden</strong>.</p>
<p>Ein <strong>normierter Vektor</strong> hat einen Betrag von 1, die Richtung bleibt unverändert:</p>
<p><img src="/2024/2024-01-01-nerd-enzyklop%C3%A4die-43---0x5f3759df/image_3.png" alt=""></p>
<p>Um einen Vektor zu normieren, multipliziert man ihm mit dem Kehrwert seines Betrages:</p>
<p><img src="/2024/2024-01-01-nerd-enzyklop%C3%A4die-43---0x5f3759df/image_4.png" alt=""></p>
<p>Diese Formel muss <strong>millionenfach</strong> ausgeführt werden, wenn man eine Lichtbrechung mit einer halbwegs ansehnlichen Qualität in einem Spiel erzeugen möchte.</p>
<p>Für die Summen und Potenzen (das sind ja letztlich auch nur Summen) ist das kein Problem, wohl aber für die Wurzel bzw. den Kehrwert der Wurzel — die <strong>inverse square root</strong>.</p>
<p>Anfangs behalf man sich mit riesigen Tabellen, die die Ergebnisse zahlreicher Berechnungen enthielten. Das sprengt irgendwann den Rahmen und man musste eine andere Lösung finden. Und diese ist und war <strong>elegant und rebellisch</strong> zugleich — der „<strong>fast inverse square root</strong>“ Algorithmus:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln"> 1</span><span class="cl">    <span class="ne">float</span> <span class="n">Q_rsqrt</span><span class="p">(</span> <span class="ne">float</span> <span class="n">number</span> <span class="p">)</span>  
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="p">{</span>  
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">        <span class="n">long</span> <span class="n">i</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">        <span class="ne">float</span> <span class="n">x2</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">        <span class="k">const</span> <span class="ne">float</span> <span class="n">threehalfs</span> <span class="o">=</span> <span class="mf">1.5</span><span class="n">F</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">        <span class="n">x2</span> <span class="o">=</span> <span class="n">number</span> <span class="o">*</span> <span class="mf">0.5</span><span class="n">F</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="n">y</span> <span class="o">=</span> <span class="n">number</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        <span class="n">i</span> <span class="o">=</span> <span class="o">*</span> <span class="p">(</span> <span class="n">long</span> <span class="o">*</span> <span class="p">)</span> <span class="o">&amp;</span><span class="n">y</span><span class="p">;</span> <span class="o">//</span> <span class="n">evil</span> <span class="n">floating</span> <span class="n">point</span> <span class="n">bit</span> <span class="n">level</span> <span class="n">hacking</span>  
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="n">i</span> <span class="o">=</span> <span class="mh">0x5f3759df</span> <span class="o">-</span> <span class="p">(</span> <span class="n">i</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span> <span class="p">);</span> <span class="o">//</span> <span class="n">what</span> <span class="n">the</span> <span class="n">fuck</span><span class="err">?</span>   
</span></span><span class="line"><span class="ln">10</span><span class="cl">        <span class="n">y</span> <span class="o">=</span> <span class="o">*</span> <span class="p">(</span> <span class="ne">float</span> <span class="o">*</span> <span class="p">)</span> <span class="o">&amp;</span><span class="n">i</span><span class="p">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y</span> <span class="o">*</span> <span class="p">(</span> <span class="n">threehalfs</span> <span class="o">-</span> <span class="p">(</span> <span class="n">x2</span> <span class="o">*</span> <span class="n">y</span> <span class="o">*</span> <span class="n">y</span> <span class="p">)</span> <span class="p">);</span> <span class="o">//</span> <span class="mi">1</span><span class="n">st</span> <span class="n">iteration</span>  
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="o">//</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y</span> <span class="o">*</span> <span class="p">(</span> <span class="n">threehalfs</span> <span class="o">-</span> <span class="p">(</span> <span class="n">x2</span> <span class="o">*</span> <span class="n">y</span> <span class="o">*</span> <span class="n">y</span> <span class="p">)</span> <span class="p">);</span> <span class="o">//</span> <span class="mi">2</span><span class="n">nd</span> <span class="n">iteration</span><span class="p">,</span> <span class="n">this</span> <span class="n">can</span> <span class="n">be</span> <span class="n">removed</span>  
</span></span><span class="line"><span class="ln">12</span><span class="cl">        <span class="k">return</span> <span class="n">y</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="p">}</span>
</span></span></code></pre></div><p>In dieser Funktion passieren einige spannende, um nicht zu sagen verrückte Dinge. Wie zum Beispiel der „<strong>evil floating point bit hack</strong>“.</p>
<p>Dazu ein kurzer Ausflug in das mysteriöse Reich der <strong>Fließkommazahlen</strong>: Diese zeichnen sich durch eine spezielle Art der Speicherung aus, damit in unseren binär geprägten Computern (Nullen und Einsen) auch <strong>Dezimalzahlen</strong> verarbeiten werden können. Dazu wird die Dezimalzahl als Kombination von <strong>Vorzeichen</strong>, <strong>Exponent</strong> und <strong>Mantisse</strong> abgespeichert: Das <strong>IEEE-754</strong> Format!</p>
<p>Der Nachteil: Beim Zurückrechnen kann es zu Ungenauigkeiten kommen. So wird der Wert 3,3 nach IEEE-754 binär abgespeichert:</p>
<p><code>01000001001000011001100110011010</code></p>
<p>Berechnet man diesen Wert zurück in ein Dezimalzahl, erhält man:</p>
<p><code>3.2999999523162841796875</code></p>
<p>Nicht schön, aber selten und meistens auch ausreichend genau.</p>
<p>Der „<strong>evil floating point bit hack</strong>“ schnappt sich den binären Wert der Fließkommazahl und interpretiert ihn schlicht als Ganzzahl, ohne die aufwendige Berechnung nach <strong>IEEE-754</strong>. Aus 3,3 wird damit der „evil integer“ <strong>1.079.194.419</strong>.</p>
<p>Als nächstes kommt es zu einer unter Fachleuten auch als <strong>What-The-Fuck-Transformation</strong> bezeichneten <strong>What-The-Fuck-Transformation</strong>. Unser „evil integer“ wird zunächst per <strong>Bitshift</strong> halbiert (ein bitweises verschieben nach links oder rechts kommt einer Multiplikation oder Division mit 2 gleich — probier es mal aus!). Das Ergebnis wird von einer <strong>höchstseltsamen Konstante</strong> abgezogen. Da ist sie — sie ist wunderschön:</p>
<p><code>0x5f3759df</code></p>
<p>Der dezimale Wert dieser mathematischen Grazie ist <strong>1.597.463.007</strong> — nicht sonderlich spannend. Behandelt man den Wert aber ebenfalls als Fließkommazahl nach <strong>IEEE-754</strong>, erhält man diese Kombination aus Exponent und Mantisse:</p>
<p><code>0.10111110.01101110101100111011111</code></p>
<p>Daraus ergibt sich ein <strong>Exponent</strong> von <strong>63</strong> und die <strong>Mantisse</strong> mit <strong>1,43243014812469482421875</strong>. Zusammen errechnet sich daraus die ziemlich große Zahl: <strong>13.211.836.172.961.054.720</strong> Und das ist eine ziemlich gute Annäherung an die Wurzel von <code>2¹²⁷</code>, nämlich <code>13.043.817.825.332.782.212,349…</code></p>
<p>Das Ergebnis dieser wahnwitzigen Operation wird nun über einen umgedrehten „<strong>evil floating point hack</strong>“ zurück in eine Fließkommazahl „umgewandelt“.</p>
<p>Abschließend findet noch ein weiterer kleiner Trick aus der wunderbaren Welt der Mathematik Anwendung: Mittels des <strong>Newton-Verfahrens</strong> erfolgt eine Korrektur des bisherigen Ergebnisses.</p>
<p>Schließlich kann die Funktion den <strong>Kehrwert einer Wurzel</strong> in etwa genauso gut bestimmen, wie eine konventionelle Berechnung, aber weitaus schneller.</p>
<p>Diese geniale Optimierung der Berechnung wird übrigens oft alleine <strong>John Carmack</strong> zugeschrieben, einem der Schöpfer von <strong>Quake III</strong>. Tatsächlich führen die Wurzeln (<strong>no pun intended…</strong>) aber viel weiter zurück. So basiert die Funktion wohl auf den Arbeiten vieler schlauer Köpfe.</p>
<p>Bereits <strong>1974</strong> tauchte eine ähnliche Routine im Quellcode für den <strong>PDP-11</strong> auf [<a href="https://minnie.tuhs.org/cgi-bin/utree.pl?file=V5%2Fusr%2Fsource%2Fs3%2Fsqrt.s"><strong>TUHS1</strong></a>]. In einem Quellcode von <strong>1993</strong> findet sich ein Kommentar mit dem Verweis auf eine wissenschaftliche Arbeit von <strong>William Kahan</strong> und <strong>K.C. Ng</strong> aus <strong>1983</strong>, in dem sie genau diese optimierte Methode beschreiben. Kahan gilt übrigens als „Architekt“ der IEEE-Fließkommazahlen-Aritmetik. <strong>1997</strong> präsentierte <strong>Jim Blinn</strong> in den „Floating-point tricks“ eine vergleichbare Funktion, dort noch ohne die „magische Konstante“ [<a href="https://ieeexplore.ieee.org/document/595279">IEEE2</a>].</p>
<p>Aber zurück zu John Carnack, der die Urheberschaft ganz explizit von sich wies:</p>
<blockquote>
<p>Not me, and I don’t think it is Michael [Abrash]. Terje Matheson perhaps?</p>
<p>~John Carmack, per E-Mail in 2004</p></blockquote>
<p>Der nächste „Verdächtige“ wäre <strong>Gary Tarolli</strong>, <strong>NVidia</strong>-Mitarbeiter der ersten Stunde und Mitbegründer von <strong>3Dfx</strong>. Dieser räumte ein, Mitte der 1990er Jahre die besagte Funktion genutzt und vielleicht sogar optimiert zu haben, weißt aber die eigentliche Urheberschaft ebenfalls von sich [<a href="https://www.beyond3d.com/content/articles/8/">BEYON1</a>].</p>
<p>Die Spur führt schließlich zu <strong>Greg Walsh</strong>, Ende der 1980er Jahre Entwickler bei der <strong>Ardent Computer Corporation</strong>. Inspiriert von der Arbeit seines Kollegen, dem Informatiker und Mathematiker <strong>Cleve Moler</strong>, Autor von <strong>MatLab</strong>, war es wohl Walsh, der die berüchtigte Funktion entwickelte.</p>
<p>Übrigens: Auch zwischen Moler und Kahan gibt es eine Verbindung. Zwar ist nicht klar wie eng die Bekanntschaft war, aber sie sind sich zumindest einmal über den Weg gelaufen [<a href="https://blogs.mathworks.com/cleve/2014/07/07/floating-point-numbers/">MATH1</a>].</p>
<p>Zurück zu Ardent: Das Unternehmen wurde damals unter anderem von <strong>Kubota</strong> “finanziell unterstützt”, einem japanischen Mischkonzern. Für Kubota arbeitete seinerzeit auch <strong>Gary Tarolli</strong>! So gelang der Quellcode wohl in die Hände von Tarolli. Die Verbindung zu John Carmack und <strong>id Software</strong> entstand dann vermutlich über <strong>Brian Hook</strong>, einem der ersten Angestellten von 3Dfx und später auch Entwickler bei id Software [<a href="https://www.quakewiki.net/profile-retro-interview-brian-hook/">QUAKE1</a>]. Und so schließt sich der Kreis…</p>
<p>Der <strong>Fast Inverse Square Root Algorithmus</strong> hat nichts an Faszination eingebüßt, vielleicht aber etwas an Bedeutung. Moderne Computer ermöglichen mittlerweile — dank hoher Leistung und angepasster Befehlssätze — eine sehr schnelle Berechnung von Wurzeln und deren Kehrwerten.</p>
<p>Hinter der mysteriösen Konstante und der merkwürdigen Optimierung steckt also eine verworrene Geschichte und am Ende fast schon der tragische Untergang in die Bedeutungslosigkeit. Wenn das kein Material für einen <strong>Nerd-Blockbuster</strong> ist…</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Algorithmus, Programmierung, Nerd-Enzyklopädie, IT-Geschichte, Quake</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 43 - 0x5f3759df - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 24 - Zeichenketten braten</title>
      <link>https://nickyreinert.de/2023/2023-05-04-nerd-enzyklop%C3%A4die-24---zeichenketten-braten/</link>
      <pubDate>Thu, 04 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2023/2023-05-04-nerd-enzyklop%C3%A4die-24---zeichenketten-braten/</guid>
      <description>
Nerd-Enzyklopädie #24
Ganz frei nach dem Motto: Es gibt nichts, was man nicht braucht (oder so ähnlich) hat man sich bei der Programmiersprache C wohl gedacht …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Vorstellung der C-Funktion &#39;strfry&#39; aus der &#39;Nerd Enzyklopädie&#39;. Der Artikel erklärt, wie diese Funktion eine Zeichenkette zufällig neu anordnet, um ein Anagramm zu erzeugen, und beleuchtet die Kuriosität solcher Funktionen in Programmiersprachen.</p>
          
          
          <p><strong>Hauptthemen:</strong> C-Programmierung, Zeichenketten, Algorithmen, Nerd-Kultur, Programmiersprachen</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-04-nerd-enzyklop%C3%A4die-24---zeichenketten-braten/image1.png" alt=""></p>
<p>Nerd-Enzyklopädie #24</p>
<p>Ganz frei nach dem Motto: Es gibt nichts, was man nicht braucht (oder so ähnlich) hat man sich bei der <strong>Programmiersprache C</strong> wohl gedacht und eine Funktion implementiert, die aus einer Zeichenkette ein Anagram erzeugt [<a href="https://man7.org/linux/man-pages/man3/strfry.3.html">MAN1</a>]:</p>
<pre><code>strfry
</code></pre>
<p>Ausgesprochen steht <strong>strfry</strong> für „<strong>string fry</strong>“, also „<strong>Zeichenkette braten</strong>“ und diese Funktion macht nichts anderes, als die Zeichen eines Strings zufällig neu anzuordnen:</p>
<pre><code>strfy(„Hello World“)  
eoWloHl dlr
</code></pre>
<p>Guten Appetit.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> C, Programmierung, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 24 - Zeichenketten braten - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 10 - Brainfuck</title>
      <link>https://nickyreinert.de/2023/2023-03-22-nerd-enzyklop%C3%A4die-10---brainfuck/</link>
      <pubDate>Wed, 22 Mar 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2023/2023-03-22-nerd-enzyklop%C3%A4die-10---brainfuck/</guid>
      <description>Die Behauptung ist natürlich starker Tobak. Bei Brainfuck handelt es sich um eine sogenannte “esoterische Programmiersprache”, entworfen vom Schweizer Urban …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Einführung aus der &#39;Nerd Enzyklopädie&#39; in die esoterische Programmiersprache Brainfuck. Der Artikel erklärt die acht minimalistischen Befehle der Sprache, demonstriert ihre Komplexität anhand eines &#39;Hello World!&#39;-Beispiels und beleuchtet ihren Zweck als Lernwerkzeug oder Coding-Challenge, anstatt für den produktiven Einsatz.</p>
          
          
          <p><strong>Hauptthemen:</strong> Programmiersprachen, Esoterische Programmierung, Informatik, Nerd-Kultur, Algorithmen</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Die Behauptung ist natürlich starker Tobak. Bei <strong>Brainfuck</strong> handelt es sich um eine sogenannte “<strong>esoterische Programmiersprache</strong>”, entworfen vom Schweizer <strong>Urban Müller</strong>. Brainfuck sollte eigentlich leicht zu lernen sein, da sie gerade einmal <strong>acht Befehle</strong> umfasst, die jeweils nur aus <strong>einem Zeichen</strong> bestehen. Was soll da schon schief gehen?</p>
<p>Eine ganze Menge. Denn diese besondere Eigenschaft dürfte das Programmieren ein wenig erschweren. Was nicht heißt, dass es unmöglich ist. Probier es doch mal aus. Das sind die acht Befehle, die du kennen musst:</p>
<pre><code>+ Wert der aktuellen Zelle inkrementieren  
- Wert der aktuellen Zelle dekremeWentieren  
&gt; Zeiger inkrementieren  
&lt; Zeiger dekrementieren  
[ Schleifen-Start  
] Schleifen-Ende  
. aktuellen Zellenwert ausgeben (zur Standardausgabe)  
, aktuellen Zellenwert einlesen (von Standardausgabe)
</code></pre>
<p>Fertig? Herzlich Glückwunsch, du kannst jetzt „Brainfuck“! und hast nun bestimmt kein Problem damit, diese „<strong>Hello World!</strong>“-Implementierung in Brainfuck zu verstehen [<a href="https://en.wikipedia.org/wiki/Brainfuck">WIKI13</a>]:</p>
<pre><code>++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt; — -.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++. — — — . — — — — .&gt;&gt;+.&gt;++.
</code></pre>
<p><strong>Brainfuck</strong> ist für den produktiven Einsatz natürlich kaum geeignet, sondern eher um das Konzept der Programmierung zu vermitteln oder für eine gemütliche Coding-Challenge am sonntäglichen Frühstückstisch.</p>
<p>Übrigens: Die Programmiersprache mit den meisten Keywords, nämlich <strong>217</strong>, heißt <strong>Visual Basic</strong>. [<a href="https://github.com/e3b0c442/keywords#c-ansi-c89-32-keywords">GITH2</a>].</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Programmiersprache, Nerd-Enzyklopädie, Humor, Informatik</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 10 - Brainfuck - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 4 - RegExen — Jetzt hast du zwei Probleme</title>
      <link>https://nickyreinert.de/2023/2023-03-04-nerd-enzyklop%C3%A4die-4---regexen--jetzt-hast-du-zwei-probleme/</link>
      <pubDate>Sat, 04 Mar 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2023/2023-03-04-nerd-enzyklop%C3%A4die-4---regexen--jetzt-hast-du-zwei-probleme/</guid>
      <description>Reguläre Ausdrücke sind umstritten: Geliebt als vielseitiges Werkzeug, verdammt als undurchschaubare Fehlerquelle. Nicht ohne Grund heißt es: Reguläre Ausdrücke …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle und kritische Auseinandersetzung mit regulären Ausdrücken (RegEx) und dem bekannten Programmierer-Meme &#39;Jetzt hast du zwei Probleme&#39;. Der Artikel beleuchtet die Komplexität, den Missbrauch und die Sicherheitsrisiken (Catastrophic Backtracking, ReDOS) von RegEx und verfolgt die Ursprünge des berühmten Zitats.</p>
          
          
          <p><strong>Hauptthemen:</strong> Reguläre Ausdrücke, Programmierung, Softwareentwicklung, Sicherheit, Nerd-Kultur, Algorithmen</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>Reguläre Ausdrücke sind umstritten: Geliebt als vielseitiges Werkzeug, verdammt als undurchschaubare Fehlerquelle. Nicht ohne Grund heißt es: Reguläre Ausdrücke lösen ein Problem und schaffen zwei neue.<br>
Woher kommt diese Hassliebe?</p>
<h2 id="eine-exotische-tierart">Eine exotische Tierart</h2>
<p>Reguläre Ausdrücke, kurz RegExen, sind mitunter schwer zu entwickeln und irgendwann kaum noch lesbar. Das erschwert das Debugging, also die Fehlersuche. Wie wäre es zum Beispiel mit diesem Schmuckstück:</p>
<pre><code>^(?=.*[A-Z].*[A-Z])(?=.*[!@#$&amp;*])(?=.*[0–9].*[0–9])(?=.*[a-z].*[a-z].*[a-z]).{8}$
</code></pre>
<p>Na, erkannt? Diese RegExe überprüft ob eine Passwort-Zeichenfolge bestimmten Sicherheitsanforderungen entspricht. Diesen Hinweis kann man im Quellcode vielleicht noch dokumentieren. Aber was wenn sich die Sicherheitsanforderungen im Detail ändern?</p>
<h2 id="mit-kanonen-auf-spatzen">Mit Kanonen auf Spatzen…</h2>
<p>RegExen werden außerdem gerne dort eingesetzt, wo eigentlich bessere, standardisierte Lösungen vorhanden sind, wie z.B. für das Parsen von XML [<a href="https://flapenguin.me/xml-regex">FLAP1</a>]:</p>
<pre><code>\s*  
(?(?=&lt;)  
  (?&lt;opentag&gt;  
    &lt; \s*  
    (?&lt;tagname&gt;\w+)  
    (?&lt;attibute&gt;  
      \s+  
      (?&lt;attrname&gt;[^\s&gt;]+)  
      =  
      (?&lt;attrquote&gt;&quot;|'|)  
      (?&lt;attrvalue&gt;[^\s&quot;'&gt;]+)  
      (\k{attrquote})  
    )*  
    \s*  
    (?&lt;selfclosing&gt;\/\s*)?  
    &gt;  
  )  
  (?(&lt;selfclosing&gt;)|  
    (?&lt;children&gt;(?R))  
    (?&lt;closetag&gt;&lt;\s* \/ \s* \k{tagname} \s*&gt;)  
  )  
|  
  (?&lt;text&gt;[^&lt;]*)  
)*  
\s*
</code></pre>
<p>Was aussieht als wäre deine Katze auf der Tastatur eingeschlafen, ist eine funktionsfähige RegExe. Mit genau einem Vorteil: Wenn man den Ausdruck Stück für Stück zerpflückt, um ihn zu verstehen, kann man viel über die Möglichkeiten regulärer Ausdrücke lernen. Im produktiven Betrieb sollte man trotzdem auf alternative Ansätze zurückgreifen, um mit XML-Daten zu arbeiten. Wie z.B. XML-Parser, die soll es ja wirklich geben.</p>
<h2 id="backtracking">Backtracking</h2>
<p>RegExen können auch zu handfesten Sicherheitsproblemen führen. Die Ursache liegt in der Art, wie RegExen verarbeitet werden. Sie durchlaufen einen String zeichenweise, bis eine Bedingung nicht mehr erfüllt wird und springen dann zu dem Zeichen zurück, an dem der Ausdruck vielleicht einen anderen Lösungsweg nehmen kann. Dieses Vorgehen nennt man <strong>Backtracking</strong>, also Rückverfolgung. Diese Funktion kann aber zu einem Rückkopplungs-Effekt führen, wodurch die Dauer der Verarbeitung exponentiell ansteigt. Die Folge nennt man „Catastrophic Backtracking“, eine wichtige Grundlage für <a href="https://medium.com/@nitinpatel_20236/what-are-evil-regexes-7b21058c747e">ReDOS</a> (<a href="https://medium.com/@nitinpatel_20236/what-are-evil-regexes-7b21058c747e">Regular Expression Denial Of Service</a>) Angriffe [<a href="https://www.regular-expressions.info/catastrophic.html">REGU1</a>]. Ein einfaches Beispiel ist dieser reguläre Ausdruck [<a href="https://medium.com/@nitinpatel_20236/what-are-evil-regexes-7b21058c747e">MEDI1</a>]:</p>
<pre><code>(x+x+)+y.
</code></pre>
<p>Diese RegExe lässt sich sicherlich optimieren, sie soll auch nur zeigen, wie schnell die Verarbeitung eskalieren kann. Als Test-String dient diese einfache Zeichenkette:</p>
<pre><code>xxxxxy
</code></pre>
<p>Die Verarbeitung erfordert in diesem Fall in <strong>123 Schritte</strong>. Passen wir die Zeichenkette nun etwas an:</p>
<pre><code>xxxxxxxxxxxxxy
</code></pre>
<p>Mehr als <strong>38.000 Schritte</strong> sind jetzt erforderlich, um den regulären Ausdruck zu prüfen. Mit dem richtigen regulären Ausdruck und der passenden Zeichenkette kann ein Browser „mühelos“ zum Absturz gebracht werden.</p>
<p>Der Einsatz von regulären Ausdrücken ist also streitbar. Übrigens: Dem Netscape Entwickler <strong>Jamie Zawinski</strong> wird zugeschrieben, diese Erkenntnis als erster in Worte gefasst zu haben. Er stellte bereits <strong>1997</strong> fest [<a href="https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/">CODI1</a>]:</p>
<blockquote>
<p>Some people, when confronted with a problem, think “I know, I’ll use regular expressions.” Now they have two problems.</p></blockquote>
<p>Dieser Ausspruch geht wiederum auf <strong>David Tilbrook</strong> zurück, der sich (selber nur vage) erinnert, wie er <strong>1985</strong> auf einer Konferenz in <strong>Dublin</strong> die Nutzung des Kommandozeilen-Tools <strong>awk</strong> kommentiert [<a href="http://regex.info/blog/2006-09-15/247">REGE1</a>]:</p>
<blockquote>
<p>“If you have a problem and you think awk is the solution, then you have two problems.”</p></blockquote>
<p><strong>RegExen</strong> und <strong>awk</strong> sind nicht die einzigen zweifelhaften Tools, auch <a href="http://regex.info/blog/2006-09-15/247">Perl</a> hat einen gewissen Ruf. Aber vermutlich ist das nur eine besondere Art von Nerd-Humor, vor der niemand sicher ist:</p>
<p><img src="/2023/2023-03-04-nerd-enzyklop%C3%A4die-4---regexen--jetzt-hast-du-zwei-probleme/image.png" alt=""></p>
<p style="text-align: center;font-style:italic">
Bildquelle [[XKCD1](https://xkcd.com/1171/)]
</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> RegEx, Programmierung, Sicherheit, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 4 - RegExen — Jetzt hast du zwei Probleme - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Wie funktioniert der SHA256 Algorithmus…im Detail? (Teil&amp;nbsp;1/2)</title>
      <link>https://nickyreinert.de/2021/2021-10-31-wie-funktioniert-der-sha256-algorithmusim-detail-teil-1-2/</link>
      <pubDate>Sun, 31 Oct 2021 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2021/2021-10-31-wie-funktioniert-der-sha256-algorithmusim-detail-teil-1-2/</guid>
      <description>SHA-256 (Secure Hash Algorithm) ist der Name einer “kryptologischen Hashfunktion”. SHA-256 ist Teil einer ganzen Gruppe von Algorithmen, mit dem gleichen Ziel: …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieser Artikel ist der erste Teil einer detaillierten Erklärung des SHA-256 Algorithmus. Er behandelt die Grundlagen kryptologischer Hashfunktionen, die Bedeutung von Hashes in der Blockchain-Technologie und führt in binäre Zahlen und grundlegende bitweise Operationen wie XOR, AND, Negation, Shift und Rotate ein, die für das Verständnis des Algorithmus unerlässlich sind.</p>
          
          
          <p><strong>Hauptthemen:</strong> SHA-256, Kryptographie, Hashfunktionen, Blockchain, Bitcoin, Binäre Operationen, Python, Algorithmen</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> advanced</p>
          
        </div>
        
        
        <p>SHA-256 (Secure Hash Algorithm) ist der Name einer “kryptologischen Hashfunktion”. <a href="https://de.wikipedia.org/wiki/SHA-2">SHA-256 ist Teil einer ganzen Gruppe von Algorithmen</a>, mit dem gleichen Ziel: Die Erzeugung eines Hashes, der resistent gegen Kollisionen ist, dessen Berechnung nur in eine Richtung funktioniert und eine feste Länge hat. Im folgenden Artikel beschreibe ich die einzelnen Schritte die der Algorithmus vornimmt, um einen Hash zu erzeugen.</p>
<p><em>Im ersten Teil kümmern wir uns um die Vorbereitungen, im <a href="https://nickyreinert.de/blog/2021/10/31/wie-funktioniert-der-sha256-algorithmusim-detail-teil-2-2/">zweiten Teil</a> geht es an den eigentlichen Algorithmus. Der Sourcecode</em> <a href="https://gist.github.com/nickyreinert/00d631fe9a90108924b1df6e911c8cd5"><em>liegt auf Github</em></a><em>.</em></p>
<h3 id="was-wirst-dulernen">Was wirst du lernen?</h3>
<p>Neben dem Erzeugen eines SHA-256 wirst du hier vor allem den Umgang mit binären Zahlen und binäre Rechenoperationen wie <strong>XOR</strong>, <strong>AND</strong> usw kennenleren. Ich gehe allerdings davon aus, dass ein Grundverständnis für binäre Zahlen vorhanden ist, der Fokus liegt auf dem Algorithmus. <strong>10</strong> sollte in deinem Kopf also entweder für die <strong>zehn</strong> oder eine <strong>zwei</strong> stehen. (Oder auch <strong>zwölf</strong>, wenn du das <strong>Duodezimalsystem</strong> magst.)</p>
<h3 id="vorwort">Vorwort</h3>
<p>Bricht man das auf eine maximal laienhafte Beschreibung herunter, passiert bei einer krytpologischen Hash-Funktion das folgende: Ein Ausgangs-Text <strong>beliebiger</strong> Länge wird so verarbeitet, dass daraus einen Ergebnis-Text (<em>der</em> <em>Hash</em>) mit der <strong>immer gleichen</strong> Länge entsteht. Es ist nahezu unmöglich, aus dem Hash den Ausgangs-Text zu berechnen. Außerdem kann man fast sicher davon ausgehen, dass jeder Ausgangs-Text <strong>einen anderen Hash</strong> erzeugt. Ändere ich nur ein Zeichen, wirkt sich das drastisch auf den Ausgangs-Text aus. Ein derartiger Algorithmus ist daher zB prädestiniert, Texte, sprich Nachrichten, zu verfizieren. Man spricht deswegen auch von einer Prüfsumme.</p>
<p>Und das ist die Grundlage einer Technologie, die in jüngster Vergangenheit immer mehr von sich Reden macht: Die <strong>Blockchain</strong>, Basis für Kryptowährungen wie zB den <strong>Bitcoin</strong>. Bei der Blockchain sind, und auch das nur laienhaft heruntergebrochen, die Einträge des “Kassenbuches” sicher vor Manipulation, weil eben die Änderung eines historischen Wertes (zB Buchungsvorganges) unweigerlich eine drastische Änderung der daraus erzeugten Prüfsummen nach sich ziehen würde. Um den Blockchain-Apologeten gleich den Wind aus den Segeln zu nehmen zitiere ich mal Fefe, sinngemäß: <a href="https://ptrace.fefe.de/Blockchain/#46">Es geht auch einfacher</a>. Ich gebrauche Bitcoin hier auch nur als Buzzword, aus Marketing-Gründen. :]</p>
<p>Um dich nun aber auch zum Weiterlesen zu motivieren, ein wichtiger Hinweis:</p>
<p>Der Algorithmus wird dazu verwendet, die nächsten Einträge der Blockchain zu berechnen. Genau genommen wird hier ein bestimmter Hash vorgegeben, der errechnet werden soll (das berüchtigte <em>Mining</em>). Die Belohnung für die korrekte Berechnung sind Bitcoins. Das Problem: Diese Berechnung ist <strong>sehr,</strong> <strong>sehr aufwendig</strong>, denn wie schon oben geschrieben: Sie funktioniert nur in eine Richtung. Die <em>Miner</em> müssen also unsagbar viele Berechnungen durchführen, um einen Ziel-Wert zu errechnen. Und der Miner, der die Berechnung am schnellsten ausführt, wird dafür auch belohnt. Gelingt es dir also, wider erwarten, den Algorithmus zu optimieren, kannst du im Mining-Business ganz groß rauskommen. Das klingt doch nach einer Herausforderung, oder? ;)</p>
<p><img src="/2021/2021-10-31-wie-funktioniert-der-sha256-algorithmusim-detail-teil-1-2/images/image2.png" alt=""></p>
<p>Quelle: <a href="https://peakd.com/deutsch/@marcus0alameda/dagobert-gold-bitcoin-perfektion">https://peakd.com/deutsch/@marcus0alameda/dagobert-gold-bitcoin-perfektion</a></p>
<blockquote>
<p>Disclaimer: Ich habe den ganzen Algorithmus in Python nachgebaut. Python ist aus Performance-Sicht sicher nicht die beste Option, um SHA-256 zu berechnen und der Umgang mit binären oder hexadezimalen Werten ist etwas unbequem. Python eignet sich dank Jupyter aber am ehesten dazu, einen komplexen Algorithmus Schritt-für-Schritt zu beschreiben.</p></blockquote>
<h3 id="einführung">Einführung</h3>
<p>Bevor wir uns an die Schleifen machen, müssen wir uns um ein paar Funktionen kümmern, die wir später dazu nutzen, um <strong>binäre Zahlen</strong> ein wenig durchzumischen.</p>
<blockquote>
<p>Hinweis 1: Ich verzichte im folgenden auf die Präfixe der Zahlensystem, wie zB 0b für binär, um den Text übersichtlich zu halten. Ich gehe davon aus, dass folgendes bekannt ist: 0 =&gt; Falsch und 1 =&gt; Wahr</p></blockquote>
<blockquote>
<p>Hinweis 2: Im Kontext von SHA-256 entspricht ein Wort (bzw word) genau 32 Bit. In der Regel entspricht 1 Word = 2 Byte = 16 Bit.</p></blockquote>
<h4 id="das-explizite-oderxor">Das explizite Oder (XOR)</h4>
<p>Das explizite Oder (<strong>Entweder-Oder</strong>) ist ein elementarer logischer, bitweise Operator. Der Ausgang der Operation ist nur dann wahr, wenn exakt ein Zustand wahr ist (im Vergleich dazu ist das Ergebnis bei dem “einfachen“ <strong>OR</strong> übrigens dann wahr, wenn mindestens ein Operand wahr ist oder beide).</p>
<p>Es werden also zwei Werte folgendermaßen verarbeitet:</p>
<p><img src="images/image.png" alt=""></p>
<p>XOR: nur wenn genau ein Wert wahr (1) ist, ist die entsprechende Stelle im Ergebnis wahr (1)</p>
<p>Die Implementierung in Python erfolgt mit dem <strong>Zirkumflex</strong>:</p>
<p># 110 ^ 100<br>
# 010</p>
<h4 id="das-logische-undand"><strong>Das logische Und (AND)</strong></h4>
<p>Der AND-Operator ist ebenfalls recht geläufig und vergleichsweise simpel. Analog zu XOR ist das Ergebnis wahr, wenn exakt beide (bzw. alle) Operanden wahr sind.</p>
<p><img src="/2021/2021-10-31-wie-funktioniert-der-sha256-algorithmusim-detail-teil-1-2/images/image-4.png" alt=""></p>
<p>AND: Nur wenn beide Werte einer Stelle wahr sind, ist die Stelle im Ergebnis wahr</p>
<p>Die Implementierung in Python erfolgt mit dem <strong>kaufmännischen Und</strong>:</p>
<p># 110 &amp; 100<br>
# 100</p>
<h4 id="die-negierung-nope">Die Negierung (Nope?)</h4>
<p>Jetzt wirds seltsam: Auch dafür gibt es einen Operator: Der bitweise Operator <strong>Negierung</strong> dreht Werte um. Aus 0 wird 1, aus 1 wird 0.</p>
<p><img src="images/image-3.png" alt=""></p>
<p>Die Negierung kehrt Werte bitweise um. Nicht mehr aber auch nich weniger.</p>
<p>Die Implementierung in Python erfolgt mit der <strong>Tilde —</strong> meinem Lieblingszeichen!</p>
<p># ~110<br>
# 001</p>
<h4 id="die-shift-operation"><strong>Die Shift-Operation</strong></h4>
<p>Die Shift-Funktion ist eine elementare binäre Rechenoperation, bei der die einzelnen Stellen eines binären Werts <strong>nach links oder rechts geschoben</strong> werden. Die freien Stellen auf der jeweils anderen Seite werden mit 0 aufgefüllt.</p>
<p><img src="/2021/2021-10-31-wie-funktioniert-der-sha256-algorithmusim-detail-teil-1-2/images/image-6.png" alt=""></p>
<p>Shift nach links um eine Stelle, aus 6 wird 12</p>
<p>Und jetzt gibt es hoffentlich einen positiven Knick in der Lernkurve: Wenn du genau hinschaust, fällt dir etwas auf und lass mich dir versichern, es handelt sich nicht um einen Zufall: 12 ist das Produkt aus 6 und 2. Das deutet auf ein interessanten Nebeneffekt: Ein Shift kommt einer Multiplikation bzw. Division mit 2 gleich. Ein Shift um mehrere Stellen entspricht demnach einer Multiplikation mit einer Potenz zur Basis 2 besteht. Klingt kompliziert, deswegen ein Beispiel:</p>
<p>Anstatt 139 * 2 ^17 kannst du die binäre Darstellung von 139, also 10001011, um 17 Stellen nach links shiften. Das Ergebnis: 1000101100000000000000000. Zähl gerne nach, rechts der 1 eins gibt es jetzt 17 Nullen.</p>
<p>In Python ist der binäre Shift mit dem <strong>Doppelpfeil</strong> implementiert:</p>
<p># 110 &raquo; 1<br>
# 011</p>
<p># 110 &laquo; 2<br>
# 000</p>
<h4 id="die-rotate-funktion">Die Rotate-Funktion</h4>
<p><strong>Rotate</strong> bedeutet, dass ein die Werte einer (binären) Zahl in eine Richtung verschoben werden. Und das erklärt man am besten an einem Beispiel. Die folgende Zahlenreihe soll um einen Zähler nach links rotiert werden. Die Zahl auf der linken Seite fällt also heraus und wir rechts wieder angehangen. Die anderen Zahlen rücken eine Position nach links.</p>
<p><img src="/2021/2021-10-31-wie-funktioniert-der-sha256-algorithmusim-detail-teil-1-2/images/image-5.png" alt=""></p>
<p>Rotate eines binären Wertes um eine Stelle nach links, aus 6wird 5</p>
<p>Das funktioniert in beide Richtungen und mit beliebig vielen Stellen. Die entsprechende Funktion (<a href="https://stackoverflow.com/a/59005609/2360229">Kudos an so</a>) sieht so aus:</p>
<p>def rotate(value, rotations, width = 32):<br>
if int(rotations) != abs(int(rotations)):<br>
rotations = width + int(rotations)<br>
return (int(value) &laquo; (width - (rotations%width)) | (int(value) &raquo; (rotations % width))) &amp; ((1 &laquo; width) - 1)</p>
<h4 id="die-sigma-funktionen">Die Sigma-Funktionen</h4>
<p>Insgesamt werden vier sogenannte <strong>Sigma-Funktionen</strong> verwendet. <strong>σ0</strong> und <strong>σ1</strong> (das kleine Sigma) bzw. <strong>Σ0</strong> und <strong>Σ1</strong> (das große Sigma, vielen bekannt als das Summen-Zeichen). Alle funktionen werden mit einem binären Wert aufgerufen und geben diesen binären Wert in veränderter Form zurück.</p>
<p>σ0 (<strong>sigma0</strong>) läuft folgendermaßen ab:</p>
<ul>
<li>der Ausgangs-Wert wird um 7 <strong>Stellen</strong> nach <strong>rechts rotiert</strong></li>
<li>der Ausgangs-Wert wird um <strong>18 Stellen</strong> nach <strong>rechts rotiert</strong></li>
<li>der Ausgangs-Wert wird um <strong>3 Stellen</strong> nach <strong>rechts geshifted</strong></li>
</ul>
<p>Daraus entstehen drei unterschiedliche Werte, die miteinander <strong>XOR-Verknüpft</strong> werden. Die Funktion dazu in Python:</p>
<p>def sigma0(word):<br>
part1 = bin(rotate(int(word, 2), 7, 32))<br>
part2 = bin(rotate(int(word, 2), 18, 32))<br>
part3 = bin(int(word, 2) &raquo; 3)<br>
return bin(int(part1, 2) ^ int(part2, 2) ^ int(part3, 2))[2:].zfill(32)</p>
<blockquote>
<p><strong>Wichtiger Hinweis</strong>: Ich arbeite mit bin() und in(s, 2), um die Ausgaben und Eingaben leserlich und vor allem nachvollziehbar zu machen. Außerdem sorge ich mit [2:] dafür, dass die binäre Darstellung ohne <strong>0b</strong> auskommt. Das kommt dem Lernzweck zugute, da die binären Operationen an dezimalen Werten schwerer nachvollziehbar sind. Mit zfill(32) (<strong>zero fill</strong>) wird der binäre Wert nach links um so viele Nullen erweitert, um immer <strong>32 Stellen</strong> zu umfassen. Teilweise erleichtert das die Übersicht, andererseits erfüllt das später auch eine Längen-Vorgabe. Die obere Funktion kann also auch folgendermaßen vereinfacht werden:</p></blockquote>
<p>def sigma0(word):<br>
part1 = rotate(word, 7, 32)<br>
part2 = rotate(word, 18, 32)<br>
part3 = word &raquo; 3<br>
return part1 ^ part2  ^ part3</p>
<p>Bei σ1 (<strong>sigma1</strong>) sieht es ganz ähnlich aus:</p>
<ul>
<li>der Ausgangs-Wert wird um <strong>17 Stellen</strong> nach <strong>rechts rotiert</strong></li>
<li>der Ausgangs-Wert wird um <strong>19 Stellen</strong> nach <strong>rechts rotiert</strong></li>
<li>der Ausgangs-Wert wird um <strong>10</strong> <strong>Stellen</strong> nach <strong>rechts geshifted</strong></li>
</ul>
<p>Daraus entstehen drei unterschiedliche Werte, die miteinander <strong>XOR-Verknüpft</strong> werden. Die Funktion dazu in Python:</p>
<p>def sigma0(word):<br>
part1 = bin(rotate(int(word, 2), 7, 32))<br>
part2 = bin(rotate(int(word, 2), 18, 32))<br>
part3 = bin(int(word, 2) &raquo; 3)<br>
return bin(int(part1, 2) ^ int(part2, 2) ^ int(part3, 2))[2:].zfill(32)</p>
<p>Nun zu Σ0 (<strong>Sigma0</strong>). Auch hier keine großen Überaschungen, hier nun ohne <strong>Shift:</strong></p>
<ul>
<li>der Ausgangs-Wert wird um <strong>2 Stellen</strong> nach <strong>rechts rotiert</strong></li>
<li>der Ausgangs-Wert wird um <strong>13 Stellen</strong> nach <strong>rechts rotiert</strong></li>
<li>der Ausgangs-Wert wird um <strong>22</strong> <strong>Stellen</strong> nach <strong>rechts rotiert</strong></li>
</ul>
<p>Auch hier werden die jeweiligen Ergebnisse final <strong>XOR-Verknüpftg</strong>. In Python also:</p>
<p>def upper_sigma0(word):<br>
part1 = bin(rotate(int(word, 2), 2, 32))<br>
part2 = bin(rotate(int(word, 2), 13, 32))<br>
part3 = bin(rotate(int(word, 2), 22, 32))<br>
return bin(int(part1, 2) ^ int(part2, 2) ^ int(part3, 2))[2:].zfill(32)</p>
<p>Kommen wir zum letzten Teilnehmer unserer illustren griechischen Runde: Σ1 (<strong>Sigma1</strong>):</p>
<ul>
<li>der Ausgangs-Wert wird um <strong>6</strong> <strong>Stellen</strong> nach <strong>rechts rotiert</strong></li>
<li>der Ausgangs-Wert wird um <strong>11Stellen</strong> nach <strong>rechts rotiert</strong></li>
<li>der Ausgangs-Wert wird um <strong>25</strong> <strong>Stellen</strong> nach <strong>rechts rotiert</strong></li>
</ul>
<p>Und am Ende wieder die XOR-Verknüpfung. Python:</p>
<p>def upper_sigma1(word):<br>
part1 = bin(rotate(int(word, 2), 6, 32))<br>
part2 = bin(rotate(int(word, 2), 11, 32))<br>
part3 = bin(rotate(int(word, 2), 25, 32))<br>
return bin(int(part1, 2) ^ int(part2, 2) ^ int(part3, 2))[2:].zfill(32)</p>
<h4 id="wahl-undmehrheit">Wahl und <strong>Mehrheit</strong></h4>
<p>Bleiben wir noch etwas bei den Griechen und wechseln in die Politik: Die Wahl und die Mehrheit, englisch: <strong>choose</strong> und <strong>majority</strong>.</p>
<p>Choose ist eine etwas komplexere Funktion, die drei binäre Werte verarbeitet und zwar wieder bitweise. Die Funktion geht durch die jeweiligen Stellen (x) des ersten Eingangswerts und prüft:</p>
<ul>
<li>Wenn <strong>x = 1</strong> dann nimm <strong>y</strong></li>
<li>Wenn <strong>x = 0</strong> dann nimm <strong>z</strong></li>
</ul>
<p>Y und z stehen für die jeweiligen Stellen des zweiten und dritten Eingangswertes. Wie kann man das programmatisch lösen? So:</p>
<p>def choose(word1, word2, word3):<br>
bin_word1 = (int(word1, 2))<br>
bin_word2 = (int(word2, 2))<br>
bin_word3 = (int(word3, 2))<br>
return bin((bin_word1 &amp; bin_word2) ^ (~bin_word1 &amp; bin_word3))[2:].zfill(32)</p>
<p>Zunächst werden also Wert 1 und Wert 2 logisch UND-verknüpft. Dann wird die Negierung von Wert 1 mit Wert 3 UND-verknüpft. Die beiden Zwischensummen werden abschließend durch XOR gejagt.</p>
<p>Majority prüft ganz einfach für jede Stelle der drei Eingangs-Werte, welcher Wert, 1 oder 0, häufiger vorkommt. Das sieht in Python so aus — hier erklär ich die logischen Operationen jetzt nicht noch mal, es werden einfach XOR und AND verknüpft:</p>
<p>def majority(word1, word2, word3):<br>
bin_word1 = (int(word1, 2))<br>
bin_word2 = (int(word2, 2))<br>
bin_word3 = (int(word3, 2))<br>
return bin((bin_word1 &amp; bin_word2) ^ (bin_word1 &amp; bin_word3) ^ (bin_word2 &amp; bin_word3))[2:].zfill(32)</p>
<p><strong>Primzahlen?</strong></p>
<p>Um noch ein anderes beliebtes Feld der Arithmetik abzudecken, lasst uns noch kurz über Primzahlen reden. Primzahlen sind mystisch. Und damit genau richtig für unser irdisches Vorhaben, das Mining zu optimieren.</p>
<p>SHA-256 nutzt Primzahlen als Grundlage für den Algorithmus. Was nicht bedeutet, dass das Ergebnis durchschaubar wäre.</p>
<p>Wir fangen mal mit den ersten 64 Primzahlen an und bauen daraus einen Satz Konstanten. Selbstverständlich in Bitform.</p>
<p>first_64_prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311]</p>
<p>Diese werden nun aber auch noch ordentlich durch die Mangel genommen. Warum das erforderlich ist, kann ich nicht nachvollziehen. Aus meiner Sicht ist es ziemlich egal, welche Konstanten man verwendet werden, da sie immer gleich sind (deswegen ja <strong>konstant</strong>, diesmal übrigens aus dem lateinischen). Dahinter steckt also kein großes Geheimins.</p>
<p>Aus den 64 Primzahlen wird zuerst jeweils die dritte Wurzel gezogen. Dann wird der natürliche Teil entfernt (sprich alles vor dem Komma) und das Ergebnis mit 2³² (aka 4.294.967.296, was übrigens auch der Anzahl verfügbarer IPv4-Adressen entspricht — der 2. positive Knick in der heutigen Lernkurve?) multipliziert. Wie du oben ja gelernt und hoffentlich noch nicht vergessen hast, ist die Mulitplikation mit 2^32 ja eigentlich gar nicht so aufwendig im Bituniversum.</p>
<p>Das Ergebnis wird jedenfalls auf eine natürlich Zahl abgerundet — sprich alle Nachkommastellen entfernt. Wiederholt man das für die restlichen 63 Primzahlen, erhält man eine wohlgeformte Liste mit 64 Einträgen, die in etwa so aussehen, am Beispiel der notorischen Primzahl 2:</p>
<p>01000010100010100010111110011000</p>
<p>Oder als Hex-Wert:</p>
<p>0x428a2f98</p>
<p>Und im Dezimal-Zahlensystem:</p>
<p>1.116.352.408</p>
<p>Die Funktion dafür sieht folgendermaßen aus:</p>
<p>result_constants = []<br>
for prime_number in first_64_prime_numbers:<br>
cube_root = prime_number ** (1./3.)<br>
frac_part = cube_root - floor(cube_root)<br>
product = frac_part * (2**32)<br>
floored_product = floor(product)<br>
result_constants.append(bin(floored_product)[2:].zfill(32))</p>
<p>Das ganze nennen wir <strong>Ergebnis-Konstante</strong>, denn diese Liste ist der Anfang unsere finalen Ausgabe. Diese Liste heben wir gut auf und weil die Arbeit mit Primzahlen so befreiend ist, veranstalten wir für die ersten 8 Primzahlen einen ähnlichen Zirkus. Mit einem Unterschied: Als Grundlage dient diesmal die Quadrat-Wurzel:</p>
<p>compression_constants = []<br>
for prime_number in first_8_prime_numbers:<br>
square_root = prime_number ** (1./2.)<br>
frac_part = square_root - floor(square_root)<br>
product = frac_part * (2**32)<br>
floored_product = floor(product)<br>
compression_constants.append(bin(floored_product)[2:].zfill(32))</p>
<p>Die Namen haben übrigens eine Bedeutung, auf die ich später noch eingehe.</p>
<h3 id="epilog">Epilog</h3>
<p>Die Vorbereitungen sind damit abgeschlossen und wir können uns <a href="https://nickyreinert.de/blog/2021/10/31/wie-funktioniert-der-sha256-algorithmusim-detail-teil-2-2/">im zweiten Teil</a> dem eigentlichen Algorithmus widmen.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> SHA256, Kryptographie, Blockchain, Algorithmus, Python</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>anleitungen</category>
      
      <category>blog</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Wie funktioniert der SHA256 Algorithmus…im Detail? (Teil&amp;nbsp;1/2) - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_guide</dc:type>
      
      
    </item><item>
      <title>How to create a maze algorithm with JavaScript</title>
      <link>https://nickyreinert.de/2020/2020-05-11-how-to-create-a-maze-algorithm-with-javascript/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2020/2020-05-11-how-to-create-a-maze-algorithm-with-javascript/</guid>
      <description>Meine Herangehensweise, um ein Labyrinth in JavaScript zu bauen, ist weitaus ausführlicher auf Medium in Englisch veröffentlicht worden: …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Ein kurzer Verweis auf einen ausführlichen, englischsprachigen Artikel des Autors auf der Plattform Medium. Der verlinkte Artikel beschreibt, wie man einen Algorithmus zur Erstellung eines Labyrinths mit JavaScript entwickelt.</p>
          
          
          <p><strong>Hauptthemen:</strong> JavaScript, Algorithmen, Game-Development, Labyrinth</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Meine Herangehensweise, um ein Labyrinth in JavaScript zu bauen, ist weitaus ausführlicher auf Medium in Englisch veröffentlicht worden:</p>
<p><a href="https://medium.com/swlh/how-to-create-a-maze-with-javascript-36f3ad8eebc1">https://medium.com/swlh/how-to-create-a-maze-with-javascript-36f3ad8eebc1</a></p>
<p><img src="/2020/2020-05-11-how-to-create-a-maze-algorithm-with-javascript/images/maze.png" alt=""></p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> anleitung, javascript, labyrinth</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>How to create a maze algorithm with JavaScript - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>link_post</dc:type>
      
      
    </item><item>
      <title>Wie erstelle ich ein Labyrinth mit JavaScript?</title>
      <link>https://nickyreinert.de/2020/2020-04-11-wie-erstelle-ich-ein-labyrinth-mit-javascript/</link>
      <pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2020/2020-04-11-wie-erstelle-ich-ein-labyrinth-mit-javascript/</guid>
      <description>Durch Zufall bin ich irgendwann mal auf diesen BASIC-Einzeiler gestoßen, mit dem sich eine Art Pseudo-Labyrinth erstellen lässt. Ich habe versucht, das in Plain …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine detaillierte Schritt-für-Schritt-Anleitung zur prozeduralen Erzeugung eines Labyrinths mit reinem JavaScript und HTML. Das Tutorial entwickelt iterativ einen Algorithmus, der von einem einfachen Pfad bis zu einer komplexen Lösung mit dem &#39;Recursive Backtracker&#39;-Ansatz führt, um ein lösbares Labyrinth mit Sackgassen zu generieren.</p>
          
          
          <p><strong>Hauptthemen:</strong> JavaScript, Algorithmen, Game-Development, Prozedurale Generierung, HTML DOM</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>Durch Zufall bin ich irgendwann mal <a href="http://www.slate.com/articles/technology/books/2012/11/computer_programming_10_print_chr_205_5_rnd_1_goto_10_from_mit_press_reviewed.html">auf diesen BASIC-Einzeiler gestoßen</a>, mit dem sich eine Art Pseudo-Labyrinth erstellen lässt. Ich habe versucht, das <a href="https://htmlpreview.github.io/?https://github.com/nickyreinert/maze/blob/master/pseudo_maze.html">in Plain JavaScript</a> halbwegs kompakt nachzubauen. Dabei kann man kaum übersehen, dass es sich keineswegs um ein richtiges Labyrinth handelt, sondern eher um eine zufällige Anordnung von Strichen ohne Lösungsweg. Also habe ich mich gefragt, wie schwer es wohl sein kann, ein Labyrinth programmatisch und vor allem kompakt zu erzeugen. Dazu gibt es zwar <a href="https://en.wikipedia.org/wiki/Maze_generation_algorithm#Recursive_backtracker">eine Menge Lösungsansätze</a>, mein Ziel ist aber, die Herangehensweise zu beschreiben. Und da wir ja gerade alle zuhause abhängen, ist diese kleine Anleitung entstanden.</p>
<h2 id="vorbereitung">Vorbereitung</h2>
<p>Der aus meiner Sicht einfachste Ansatz ist es, eine Fläche mit schon gesetzten Wänden möglichst chaotisch zu durchpflügen. Wir brauchen also erstmal eine Fläche mit x * y Zellen, die jeweils mit Wänden voneinandern getrennt sind. In JavaScript sieht das folgendermaßen aus:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="n">function</span> <span class="n">createBlankMaze</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">var</span> <span class="n">rowIndex</span><span class="p">,</span> <span class="n">colIndex</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="k">var</span> <span class="n">table</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">createElement</span><span class="p">(</span><span class="s2">&#34;table&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="k">var</span> <span class="n">tbody</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">createElement</span><span class="p">(</span><span class="s2">&#34;tbody&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">rowIndex</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">rowIndex</span> <span class="o">&lt;=</span> <span class="n">mazeHeight</span><span class="p">;</span> <span class="n">rowIndex</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">        <span class="k">var</span> <span class="n">row</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">createElement</span><span class="p">(</span><span class="s2">&#34;tr&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">colIndex</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">colIndex</span> <span class="o">&lt;=</span> <span class="n">mazeWidth</span><span class="p">;</span> <span class="n">colIndex</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl">            <span class="k">var</span> <span class="n">col</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">createElement</span><span class="p">(</span><span class="s2">&#34;td&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">rowIndex</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">colIndex</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl">                <span class="n">col</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="s2">&#34;rgb(244,0,0)&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">                <span class="n">col</span><span class="o">.</span><span class="n">setAttribute</span><span class="p">(</span><span class="s2">&#34;type&#34;</span><span class="p">,</span> <span class="s2">&#34;start&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">
</span></span><span class="line"><span class="ln">20</span><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">rowIndex</span> <span class="o">==</span> <span class="n">mazeHeight</span> <span class="o">&amp;&amp;</span> <span class="n">colIndex</span> <span class="o">==</span> <span class="n">mazeWidth</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">                
</span></span><span class="line"><span class="ln">22</span><span class="cl">                <span class="n">col</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="s2">&#34;rgb(0,244,0)&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">                <span class="n">col</span><span class="o">.</span><span class="n">setAttribute</span><span class="p">(</span><span class="s2">&#34;type&#34;</span><span class="p">,</span> <span class="s2">&#34;finish&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">
</span></span><span class="line"><span class="ln">25</span><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">
</span></span><span class="line"><span class="ln">27</span><span class="cl">                <span class="n">col</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="s2">&#34;rgb(255,255,255)&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">
</span></span><span class="line"><span class="ln">29</span><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">            <span class="n">col</span><span class="o">.</span><span class="n">setAttribute</span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">,</span> <span class="s2">&#34;cell_&#34;</span> <span class="o">+</span> <span class="n">rowIndex</span> <span class="o">+</span> <span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="n">colIndex</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl">
</span></span><span class="line"><span class="ln">32</span><span class="cl">            <span class="n">row</span><span class="o">.</span><span class="n">appendChild</span><span class="p">(</span><span class="n">col</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl">
</span></span><span class="line"><span class="ln">34</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">35</span><span class="cl">
</span></span><span class="line"><span class="ln">36</span><span class="cl">        <span class="n">tbody</span><span class="o">.</span><span class="n">appendChild</span><span class="p">(</span><span class="n">row</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">37</span><span class="cl">
</span></span><span class="line"><span class="ln">38</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">39</span><span class="cl">    
</span></span><span class="line"><span class="ln">40</span><span class="cl">    <span class="n">table</span><span class="o">.</span><span class="n">appendChild</span><span class="p">(</span><span class="n">tbody</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">41</span><span class="cl">
</span></span><span class="line"><span class="ln">42</span><span class="cl">    <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">&#34;maze_container&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">appendChild</span><span class="p">(</span><span class="n">table</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">43</span><span class="cl">
</span></span><span class="line"><span class="ln">44</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Wir erzeugen also eine Tabelle mit 10 Zeilen und 10 Spalten und packen Sie am Ende in ein div mit der Id maze_container. Die &ldquo;Wände&rdquo; habe ich für jede Zelle mit CSS definiert:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">table td {
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl">    border: 1px #000000 solid;
</span></span><span class="line"><span class="ln">4</span><span class="cl">
</span></span><span class="line"><span class="ln">5</span><span class="cl">}
</span></span></code></pre></div><p>Der Eingang in rot befindet sich immer oben links, der Ausgang ist grün und unten rechts. Nun werden wir uns in einer Schleife vom Startfeld in Richtung Ziel bewegen. Mit jedem Schleifendurchlauf bewegen wir uns ein Feld weiter. Daraus entsteht erstmal ein Lösungsweg. Danach müssen natürlich noch die restlichen Felder bearbeitet werden. Dazu werden wir vom Lösungsweg aus Abzweige erzeugen. Los gehts.</p>
<h2 id="schritt-1-der-simpelste-lösungsweg">Schritt 1: Der simpelste Lösungsweg</h2>
<p>Um erstmal eine Schleife als Grundlage zu erhalten, beginnen wir mit einem sehr simplen Lösungsweg. Der geht ganz einfach 9 Felder nach rechts und 9 Felder nach unten. Wir nutzen dazu einfach eine Liste mit Anweisungen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">var</span> <span class="n">exits</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">];</span>
</span></span></code></pre></div><p><em>(Warum nicht 10, sondern 9? Sobald wir uns auf dem letzen Feld befinden, müssen wir uns nicht weiter bewegen.)</em></p>
<p>In einer Schleife gehen wir nun diese Liste durch und bewegen unseren Zähler entsprechend eine Zelle nach rechts oder unten:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="k">var</span> <span class="n">currentCell</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="k">var</span> <span class="n">rowIndex</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="k">var</span> <span class="n">colIndex</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="n">exitIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">exitIndex</span> <span class="o">&lt;</span> <span class="n">exits</span><span class="o">.</span><span class="n">length</span><span class="p">;</span> <span class="n">exitIndex</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="k">switch</span><span class="p">(</span><span class="n">exits</span><span class="p">[</span><span class="n">exitIndex</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">        <span class="k">case</span> <span class="s2">&#34;right&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">            <span class="n">colIndex</span> <span class="o">=</span> <span class="n">colIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">
</span></span><span class="line"><span class="ln">15</span><span class="cl">        <span class="k">case</span> <span class="s2">&#34;bottom&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl">            <span class="n">rowIndex</span> <span class="o">=</span> <span class="n">rowIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">
</span></span><span class="line"><span class="ln">20</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">
</span></span><span class="line"><span class="ln">22</span><span class="cl">    <span class="n">currentCell</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">&#34;cell_&#34;</span> <span class="o">+</span> <span class="n">rowIndex</span> <span class="o">+</span> <span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="n">colIndex</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">    
</span></span><span class="line"><span class="ln">24</span><span class="cl">    <span class="n">currentCell</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="s2">&#34;#f00000&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">
</span></span><span class="line"><span class="ln">26</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Hier werden noch keine Wände entfernt, sondern erstmal nur der Weg nachgezeichnet, um eine Idee für den Algorithmus zu bekommen. Und so sieht das aus:</p>
<p><img src="/2020/2020-04-11-wie-erstelle-ich-ein-labyrinth-mit-javascript/images/grafik-3-700x701.png" alt=""></p>
<h2 id="schritt-2-einen-funken-abwechslung">Schritt 2: Einen Funken Abwechslung</h2>
<p>Ein wenig Abwechslung erhalten wir, wenn wir uns einfach abwechselnd nach unten und rechts bewegen. Dazu füllen wir die Liste mit den Ausgängen einfach in einer Schleife:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">var</span> <span class="n">exits</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="n">exit</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">exit</span> <span class="o">&lt;=</span> <span class="n">mazeWidth</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">exit</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">
</span></span><span class="line"><span class="ln">5</span><span class="cl">    <span class="n">exits</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="s2">&#34;right&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">    <span class="n">exits</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="s2">&#34;bottom&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl">
</span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Das war es schon. Das Ergebnis sieht folgendermaßen aus:</p>
<p><img src="/2020/2020-04-11-wie-erstelle-ich-ein-labyrinth-mit-javascript/images/grafik-4-700x703.png" alt=""></p>
<h2 id="schritt-3-die-wände-einreißen">Schritt 3: Die Wände einreißen</h2>
<p>Nun sorgen wir dafür, dass tatsächlich ein Weg vom Start zum Ziel entsteht. Dazu werden einfach die Rahmen unten bzw. rechts entfernt, sobald wir uns in die entsprechende Richtung bewegen. Unsere Hauptschleife wird also etwas aufgebohrt.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="k">var</span>  <span class="n">currentCell</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">&#34;cell_1_1&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="n">exitIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">exitIndex</span> <span class="o">&lt;</span> <span class="n">exits</span><span class="o">.</span><span class="n">length</span><span class="p">;</span> <span class="n">exitIndex</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="n">exit</span> <span class="o">=</span> <span class="n">exits</span><span class="p">[</span><span class="n">exitIndex</span><span class="p">];</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="n">currentCell</span><span class="o">.</span><span class="n">style</span><span class="p">[</span><span class="s2">&#34;border-&#34;</span><span class="o">+</span><span class="n">exit</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;none&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="k">switch</span><span class="p">(</span><span class="n">exit</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="k">case</span> <span class="s2">&#34;right&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl">            <span class="n">colIndex</span> <span class="o">=</span> <span class="n">colIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl">        <span class="k">case</span> <span class="s2">&#34;bottom&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">
</span></span><span class="line"><span class="ln">18</span><span class="cl">            <span class="n">rowIndex</span> <span class="o">=</span> <span class="n">rowIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">
</span></span><span class="line"><span class="ln">21</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">
</span></span><span class="line"><span class="ln">23</span><span class="cl">    <span class="n">currentCell</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">&#34;cell_&#34;</span> <span class="o">+</span> <span class="n">rowIndex</span> <span class="o">+</span> <span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="n">colIndex</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">
</span></span><span class="line"><span class="ln">25</span><span class="cl">    <span class="n">currentCell</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="s2">&#34;#f00000&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">
</span></span><span class="line"><span class="ln">27</span><span class="cl">    <span class="k">switch</span><span class="p">(</span><span class="n">exit</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">
</span></span><span class="line"><span class="ln">29</span><span class="cl">        <span class="k">case</span> <span class="s2">&#34;right&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">
</span></span><span class="line"><span class="ln">31</span><span class="cl">            <span class="n">currentCell</span><span class="o">.</span><span class="n">style</span><span class="p">[</span><span class="s2">&#34;border-left&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;none&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl">
</span></span><span class="line"><span class="ln">34</span><span class="cl">        <span class="k">case</span> <span class="s2">&#34;bottom&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">35</span><span class="cl">
</span></span><span class="line"><span class="ln">36</span><span class="cl">        <span class="n">currentCell</span><span class="o">.</span><span class="n">style</span><span class="p">[</span><span class="s2">&#34;border-top&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;none&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">37</span><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">38</span><span class="cl">
</span></span><span class="line"><span class="ln">39</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">40</span><span class="cl">    
</span></span><span class="line"><span class="ln">41</span><span class="cl">    <span class="n">lastExit</span> <span class="o">=</span> <span class="n">exit</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">42</span><span class="cl">
</span></span><span class="line"><span class="ln">43</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Noch bevor die Schleife startet, legen wir fest, in welcher Zelle wir uns befinden. Nur so können wir den Rahmen entsprechend unseres Ausgangs entfernen. Dazu wird einfach die CSS-Eigenschaft auf &ldquo;none&rdquo; gesetzt. Außerdem entfernen wir in der nächsten Zelle jeweils den gegenüberliegenden Rahmen. Wenn wir die vorherige Zelle also nach rechts verlassen haben, müssen wir in der darauffolgenden Zelle den Rahmen links entfernen.</p>
<p>Außerdem muss die Schleife für die Erstellung unserer Ausgänge angepasst werden:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">for (exit = 1; exit &lt; mazeWidth; exit++) {
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl">    exits.push(&#34;right&#34;);
</span></span><span class="line"><span class="ln">4</span><span class="cl">    exits.push(&#34;bottom&#34;);
</span></span><span class="line"><span class="ln">5</span><span class="cl">
</span></span><span class="line"><span class="ln">6</span><span class="cl">}
</span></span></code></pre></div><p>Nun reichen uns nicht mehr nur 9 Schritte nach unten und rechts. Da wir nun für jedes Feld den unteren bzw. rechten Rahmen entfernen, müssen wir insgesamt 10 Felder in jede Richtung berücksichtigen. Das Ergebnis ist jetzt tatsächlich schon ein Irrgarten. Allerdings ein ziemlich einfacher:</p>
<p><img src="/2020/2020-04-11-wie-erstelle-ich-ein-labyrinth-mit-javascript/images/grafik-5-700x697.png" alt=""></p>
<h2 id="schritt-4-noch-mehr-abwechslung">Schritt 4: Noch mehr Abwechslung</h2>
<p>Der nächste Schritt ist naheliegend: Wir durchlaufen nicht einfach die Liste möglicher Ausgänge, sondern entscheiden zufällig, welcher Ausgang als nächstes kommt. Dazu muss die Schleifenbedinung allerdings etwas angepasst werden.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln"> 1</span><span class="cl">for (loop = 0; loop &lt; (mazeWidth + mazeHeight - 2); loop++) {
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    exitIndex = Math.floor(Math.random() * exits.length);
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    exit = exits[exitIndex];
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    exits.splice(exitIndex, 1);
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    currentCell.style[&#34;border-&#34;+exit] = &#34;none&#34;;
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">    switch(exit) {
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl">        case &#34;right&#34;:
</span></span><span class="line"><span class="ln">14</span><span class="cl">
</span></span><span class="line"><span class="ln">15</span><span class="cl">            colIndex = colIndex + 1;
</span></span><span class="line"><span class="ln">16</span><span class="cl">            break;
</span></span><span class="line"><span class="ln">17</span><span class="cl">
</span></span><span class="line"><span class="ln">18</span><span class="cl">        case &#34;bottom&#34;:
</span></span><span class="line"><span class="ln">19</span><span class="cl">
</span></span><span class="line"><span class="ln">20</span><span class="cl">            rowIndex = rowIndex + 1;
</span></span><span class="line"><span class="ln">21</span><span class="cl">            break;
</span></span><span class="line"><span class="ln">22</span><span class="cl">
</span></span><span class="line"><span class="ln">23</span><span class="cl">    }
</span></span><span class="line"><span class="ln">24</span><span class="cl">
</span></span><span class="line"><span class="ln">25</span><span class="cl">    currentCell = document.getElementById(&#34;cell_&#34; + rowIndex + &#34;_&#34; + colIndex);
</span></span><span class="line"><span class="ln">26</span><span class="cl">
</span></span><span class="line"><span class="ln">27</span><span class="cl">    currentCell.style.backgroundColor = &#34;#f00000&#34;;
</span></span><span class="line"><span class="ln">28</span><span class="cl">
</span></span><span class="line"><span class="ln">29</span><span class="cl">    switch(exit) {
</span></span><span class="line"><span class="ln">30</span><span class="cl">
</span></span><span class="line"><span class="ln">31</span><span class="cl">        case &#34;right&#34;:
</span></span><span class="line"><span class="ln">32</span><span class="cl">
</span></span><span class="line"><span class="ln">33</span><span class="cl">            currentCell.style[&#34;border-left&#34;] = &#34;none&#34;;
</span></span><span class="line"><span class="ln">34</span><span class="cl">            break;
</span></span><span class="line"><span class="ln">35</span><span class="cl">
</span></span><span class="line"><span class="ln">36</span><span class="cl">        case &#34;bottom&#34;:
</span></span><span class="line"><span class="ln">37</span><span class="cl">
</span></span><span class="line"><span class="ln">38</span><span class="cl">        currentCell.style[&#34;border-top&#34;] = &#34;none&#34;;
</span></span><span class="line"><span class="ln">39</span><span class="cl">            break;
</span></span><span class="line"><span class="ln">40</span><span class="cl">
</span></span><span class="line"><span class="ln">41</span><span class="cl">    }
</span></span><span class="line"><span class="ln">42</span><span class="cl">    
</span></span><span class="line"><span class="ln">43</span><span class="cl">    lastExit = exit;
</span></span><span class="line"><span class="ln">44</span><span class="cl">
</span></span><span class="line"><span class="ln">45</span><span class="cl">}
</span></span></code></pre></div><p>Die ersten drei Zeilen innerhalb der Zeile sind hier von Bedeutung. Zuerst wird der nächste Ausgang per Zufall bestimmt und in der Variable exit abgelegt. Danach wird dieser Eintrag auch aus der Liste möglicher Ausgänge entfernt. Das ist wichtig, da wir uns ja z.B. nicht mehr als 10 mal nach rechts bewegen können. Außerdem erzeugen wir so eine Art Gewichtung, die sich bei jedem Durchlauf verändert. Würden wir einfach nur per Zufall zwischen <em>rechts</em> und <em>unten</em> entscheiden, wäre das Ergebnis im Moment vielleicht ähnlich. Aber sobald wir auch die Richtungen <em>oben</em> und <em>links</em> dazu nehmen, ist das Ergebnis weitaus chaotischer.</p>
<p>Das Ergebnis ist immer noch recht banal, aber sieht schon etwas mehr nach Labyrinth aus:</p>
<p><img src="/2020/2020-04-11-wie-erstelle-ich-ein-labyrinth-mit-javascript/images/grafik-6-700x695.png" alt=""></p>
<h2 id="schritt-5-mehr-bewegungsfreiheit">Schritt 5: Mehr Bewegungsfreiheit</h2>
<p>Bisher haben wir uns nur nach rechts und unten bewegt. Nun wollen wir uns auch nach links und oben bewegen. Dazu noch mal eine wichtige Grundannahme: Wir müssen uns 9 mal nach rechts und unten bewegen, um zum Ziel zu kommen. Erst wenn wir uns ein mal nach rechts bewegt haben, können wir uns dafür ein mal nach linsk bewegen. Das gleiche gilt für oben und unten. Da ich nun vier Bewegungsfreiheiten haben, muss die Schleifenbedingung erneut angepasst werden. Diesmal können wir ja theoretisch jedes der 100 Felder belegen. Außerdem muss ich nun zusätzliche Rahmen entfernen.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln"> 1</span><span class="cl">while (loop &lt; ((mazeWidth * mazeHeight) - 1)) {
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    exitIndex = Math.floor(Math.random() * exits.length);
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    exit = exits[exitIndex];
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    exits.splice(exitIndex, 1);
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    currentCell.style[&#34;border-&#34;+exit] = &#34;none&#34;;
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">    switch(exit) {
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl">        case &#34;right&#34;:
</span></span><span class="line"><span class="ln">14</span><span class="cl">
</span></span><span class="line"><span class="ln">15</span><span class="cl">            colIndex = colIndex + 1;
</span></span><span class="line"><span class="ln">16</span><span class="cl">            exits.push(&#34;left&#34;);
</span></span><span class="line"><span class="ln">17</span><span class="cl">            break;
</span></span><span class="line"><span class="ln">18</span><span class="cl">
</span></span><span class="line"><span class="ln">19</span><span class="cl">        case &#34;bottom&#34;:
</span></span><span class="line"><span class="ln">20</span><span class="cl">
</span></span><span class="line"><span class="ln">21</span><span class="cl">            rowIndex = rowIndex + 1;
</span></span><span class="line"><span class="ln">22</span><span class="cl">            exits.push(&#34;top&#34;);
</span></span><span class="line"><span class="ln">23</span><span class="cl">            break;
</span></span><span class="line"><span class="ln">24</span><span class="cl">
</span></span><span class="line"><span class="ln">25</span><span class="cl">        case &#34;left&#34;:
</span></span><span class="line"><span class="ln">26</span><span class="cl">
</span></span><span class="line"><span class="ln">27</span><span class="cl">            colIndex = colIndex - 1;
</span></span><span class="line"><span class="ln">28</span><span class="cl">            exits.push(&#34;right&#34;);
</span></span><span class="line"><span class="ln">29</span><span class="cl">            break;
</span></span><span class="line"><span class="ln">30</span><span class="cl">
</span></span><span class="line"><span class="ln">31</span><span class="cl">        case &#34;top&#34;:
</span></span><span class="line"><span class="ln">32</span><span class="cl">
</span></span><span class="line"><span class="ln">33</span><span class="cl">            rowIndex = rowIndex - 1;
</span></span><span class="line"><span class="ln">34</span><span class="cl">            exits.push(&#34;bottom&#34;);
</span></span><span class="line"><span class="ln">35</span><span class="cl">            break;
</span></span><span class="line"><span class="ln">36</span><span class="cl">            
</span></span><span class="line"><span class="ln">37</span><span class="cl">    }
</span></span><span class="line"><span class="ln">38</span><span class="cl">
</span></span><span class="line"><span class="ln">39</span><span class="cl">    currentCell = document.getElementById(&#34;cell_&#34; + rowIndex + &#34;_&#34; + colIndex);
</span></span><span class="line"><span class="ln">40</span><span class="cl">
</span></span><span class="line"><span class="ln">41</span><span class="cl">    currentCell.style.backgroundColor = &#34;#f00000&#34;;
</span></span><span class="line"><span class="ln">42</span><span class="cl">
</span></span><span class="line"><span class="ln">43</span><span class="cl">    switch(exit) {
</span></span><span class="line"><span class="ln">44</span><span class="cl">
</span></span><span class="line"><span class="ln">45</span><span class="cl">        case &#34;right&#34;:
</span></span><span class="line"><span class="ln">46</span><span class="cl">
</span></span><span class="line"><span class="ln">47</span><span class="cl">            currentCell.style[&#34;border-left&#34;] = &#34;none&#34;;
</span></span><span class="line"><span class="ln">48</span><span class="cl">            break;
</span></span><span class="line"><span class="ln">49</span><span class="cl">
</span></span><span class="line"><span class="ln">50</span><span class="cl">        case &#34;bottom&#34;:
</span></span><span class="line"><span class="ln">51</span><span class="cl">
</span></span><span class="line"><span class="ln">52</span><span class="cl">        currentCell.style[&#34;border-top&#34;] = &#34;none&#34;;
</span></span><span class="line"><span class="ln">53</span><span class="cl">            break;
</span></span><span class="line"><span class="ln">54</span><span class="cl">
</span></span><span class="line"><span class="ln">55</span><span class="cl">        case &#34;left&#34;:
</span></span><span class="line"><span class="ln">56</span><span class="cl">
</span></span><span class="line"><span class="ln">57</span><span class="cl">            currentCell.style[&#34;border-right&#34;] = &#34;none&#34;;
</span></span><span class="line"><span class="ln">58</span><span class="cl">            break;
</span></span><span class="line"><span class="ln">59</span><span class="cl">
</span></span><span class="line"><span class="ln">60</span><span class="cl">        case &#34;top&#34;:
</span></span><span class="line"><span class="ln">61</span><span class="cl">
</span></span><span class="line"><span class="ln">62</span><span class="cl">            currentCell.style[&#34;border-bottom&#34;] = &#34;none&#34;;
</span></span><span class="line"><span class="ln">63</span><span class="cl">            break;
</span></span><span class="line"><span class="ln">64</span><span class="cl">
</span></span><span class="line"><span class="ln">65</span><span class="cl">    }
</span></span><span class="line"><span class="ln">66</span><span class="cl">    
</span></span><span class="line"><span class="ln">67</span><span class="cl">    lastExit = exit;
</span></span><span class="line"><span class="ln">68</span><span class="cl">
</span></span><span class="line"><span class="ln">69</span><span class="cl">    loop++;
</span></span><span class="line"><span class="ln">70</span><span class="cl">
</span></span><span class="line"><span class="ln">71</span><span class="cl">}
</span></span></code></pre></div><p>In der ersten _Switch-_Anweisung gibt es außerdem eine wichtige Anweisung. Wenn der nächste Ausgang nach rechts geht, ergänze ich die Liste möglicher Ausgänge um einen Ausgang nach links (analog natürlich für die anderen Richtungen):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">exits.push(&#34;left&#34;);
</span></span></code></pre></div><p>Und wie sieht das Ergebnis aus?</p>
<p><img src="/2020/2020-04-11-wie-erstelle-ich-ein-labyrinth-mit-javascript/images/grafik-8-700x703.png" alt=""></p>
<p>Ich würde sagen: Bescheiden. Das Problem ist, dass wir uns nach links bewegen, nachdem wir uns gerade erst nach rechts bewegt haben. Genauso dürfen wir uns nicht nach oben und gleich danach wieder nach unten bewegen.<br>
Wir müssen also etwas nachbessern. Wenn wir uns nun in z.B. der Zelle mit den Koordinaten x = 4 und y = 4 befinden, prüfen wir, ob die drei benachbarten Zellen bereits belegt sind (Hintergrundfarbe ist rot). Ist z.B. die rechte Nachbarzelle belegt, dürfen wir uns nicht nach rechts bewegen.<br>
Auch die Liste möglicher Ausgänge wird etwas anders organisiert:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">var</span> <span class="n">validExits</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">,</span> <span class="s2">&#34;left&#34;</span><span class="p">,</span> <span class="s2">&#34;top&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="k">var</span> <span class="n">remainingExits</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;right&#34;</span><span class="p">:</span> <span class="n">mazeWidth</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">:</span> <span class="n">mazeHeight</span><span class="p">,</span> <span class="s2">&#34;left&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">&#34;top&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">};</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="k">var</span> <span class="n">nextExits</span> <span class="o">=</span> <span class="p">[];</span>
</span></span></code></pre></div><p>Das Array <em>validExits</em> ist eine globale, nicht veränderbare Liste aller möglichen Ausgänge. Mit <em>remainingExits</em> führen wir ein Objekt ein, dass die Anzahl möglicher bzw. erforderlicher Ausgänge protokolliert. Und <em>nextExits</em> ist das Array, das bei jedem Schleifendurchlauf die möglichen Ausgänge anzeigt. Die überarbeitete Schleife sieht nun so aus:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">  1</span><span class="cl">while (loop &lt; ((mazeWidth * mazeHeight) - 1)) {
</span></span><span class="line"><span class="ln">  2</span><span class="cl">
</span></span><span class="line"><span class="ln">  3</span><span class="cl">    nextExits = [];
</span></span><span class="line"><span class="ln">  4</span><span class="cl">
</span></span><span class="line"><span class="ln">  5</span><span class="cl">    for (i = 0; i &lt; validExits.length; i++) {
</span></span><span class="line"><span class="ln">  6</span><span class="cl">
</span></span><span class="line"><span class="ln">  7</span><span class="cl">        switch(validExits[i]) {
</span></span><span class="line"><span class="ln">  8</span><span class="cl">
</span></span><span class="line"><span class="ln">  9</span><span class="cl">            case &#34;right&#34;:
</span></span><span class="line"><span class="ln"> 10</span><span class="cl">                nextPossibleCell = document.getElementById(&#34;cell_&#34; + rowIndex + &#34;_&#34; + (colIndex + 1));
</span></span><span class="line"><span class="ln"> 11</span><span class="cl">                break;
</span></span><span class="line"><span class="ln"> 12</span><span class="cl">
</span></span><span class="line"><span class="ln"> 13</span><span class="cl">            case &#34;left&#34;:
</span></span><span class="line"><span class="ln"> 14</span><span class="cl">                nextPossibleCell = document.getElementById(&#34;cell_&#34; + rowIndex + &#34;_&#34; + (colIndex - 1));
</span></span><span class="line"><span class="ln"> 15</span><span class="cl">                break;
</span></span><span class="line"><span class="ln"> 16</span><span class="cl">
</span></span><span class="line"><span class="ln"> 17</span><span class="cl">            case &#34;bottom&#34;:
</span></span><span class="line"><span class="ln"> 18</span><span class="cl">                nextPossibleCell = document.getElementById(&#34;cell_&#34; + (rowIndex + 1) + &#34;_&#34; + colIndex);
</span></span><span class="line"><span class="ln"> 19</span><span class="cl">                break;
</span></span><span class="line"><span class="ln"> 20</span><span class="cl">
</span></span><span class="line"><span class="ln"> 21</span><span class="cl">            case &#34;top&#34;:
</span></span><span class="line"><span class="ln"> 22</span><span class="cl">                nextPossibleCell = document.getElementById(&#34;cell_&#34; + (rowIndex - 1) + &#34;_&#34; + colIndex);
</span></span><span class="line"><span class="ln"> 23</span><span class="cl">                break;
</span></span><span class="line"><span class="ln"> 24</span><span class="cl">
</span></span><span class="line"><span class="ln"> 25</span><span class="cl">        }
</span></span><span class="line"><span class="ln"> 26</span><span class="cl">
</span></span><span class="line"><span class="ln"> 27</span><span class="cl">        if (nextPossibleCell == null || nextPossibleCell.style.backgroundColor != &#34;rgb(240, 0, 0)&#34;) {
</span></span><span class="line"><span class="ln"> 28</span><span class="cl">            
</span></span><span class="line"><span class="ln"> 29</span><span class="cl">            for (t = 0; t &lt; remainingExits[validExits[i]]; t++) {
</span></span><span class="line"><span class="ln"> 30</span><span class="cl">
</span></span><span class="line"><span class="ln"> 31</span><span class="cl">                nextExits.push(validExits[i]);
</span></span><span class="line"><span class="ln"> 32</span><span class="cl">
</span></span><span class="line"><span class="ln"> 33</span><span class="cl">            }
</span></span><span class="line"><span class="ln"> 34</span><span class="cl">
</span></span><span class="line"><span class="ln"> 35</span><span class="cl">        } 
</span></span><span class="line"><span class="ln"> 36</span><span class="cl">
</span></span><span class="line"><span class="ln"> 37</span><span class="cl">    }
</span></span><span class="line"><span class="ln"> 38</span><span class="cl">
</span></span><span class="line"><span class="ln"> 39</span><span class="cl">    exitIndex = Math.floor(Math.random() * nextExits.length);
</span></span><span class="line"><span class="ln"> 40</span><span class="cl">
</span></span><span class="line"><span class="ln"> 41</span><span class="cl">    exit = nextExits[exitIndex];
</span></span><span class="line"><span class="ln"> 42</span><span class="cl">
</span></span><span class="line"><span class="ln"> 43</span><span class="cl">    currentCell.style[&#34;border-&#34;+exit] = &#34;none&#34;;
</span></span><span class="line"><span class="ln"> 44</span><span class="cl">
</span></span><span class="line"><span class="ln"> 45</span><span class="cl">    switch(exit) {
</span></span><span class="line"><span class="ln"> 46</span><span class="cl">
</span></span><span class="line"><span class="ln"> 47</span><span class="cl">        case &#34;right&#34;:
</span></span><span class="line"><span class="ln"> 48</span><span class="cl">
</span></span><span class="line"><span class="ln"> 49</span><span class="cl">            colIndex = colIndex + 1;
</span></span><span class="line"><span class="ln"> 50</span><span class="cl">            remainingExits.left++;
</span></span><span class="line"><span class="ln"> 51</span><span class="cl">            remainingExits.right--;
</span></span><span class="line"><span class="ln"> 52</span><span class="cl">            break;
</span></span><span class="line"><span class="ln"> 53</span><span class="cl">
</span></span><span class="line"><span class="ln"> 54</span><span class="cl">        case &#34;bottom&#34;:
</span></span><span class="line"><span class="ln"> 55</span><span class="cl">
</span></span><span class="line"><span class="ln"> 56</span><span class="cl">            rowIndex = rowIndex + 1;
</span></span><span class="line"><span class="ln"> 57</span><span class="cl">            remainingExits.top++;
</span></span><span class="line"><span class="ln"> 58</span><span class="cl">            remainingExits.bottom--;
</span></span><span class="line"><span class="ln"> 59</span><span class="cl">            break;
</span></span><span class="line"><span class="ln"> 60</span><span class="cl">
</span></span><span class="line"><span class="ln"> 61</span><span class="cl">        case &#34;left&#34;:
</span></span><span class="line"><span class="ln"> 62</span><span class="cl">
</span></span><span class="line"><span class="ln"> 63</span><span class="cl">            colIndex = colIndex - 1;
</span></span><span class="line"><span class="ln"> 64</span><span class="cl">            remainingExits.left--;
</span></span><span class="line"><span class="ln"> 65</span><span class="cl">            remainingExits.right++;
</span></span><span class="line"><span class="ln"> 66</span><span class="cl">            break;
</span></span><span class="line"><span class="ln"> 67</span><span class="cl">
</span></span><span class="line"><span class="ln"> 68</span><span class="cl">        case &#34;top&#34;:
</span></span><span class="line"><span class="ln"> 69</span><span class="cl">
</span></span><span class="line"><span class="ln"> 70</span><span class="cl">            rowIndex = rowIndex - 1;
</span></span><span class="line"><span class="ln"> 71</span><span class="cl">            remainingExits.top--;
</span></span><span class="line"><span class="ln"> 72</span><span class="cl">            remainingExits.bottom++;
</span></span><span class="line"><span class="ln"> 73</span><span class="cl">            break;
</span></span><span class="line"><span class="ln"> 74</span><span class="cl">            
</span></span><span class="line"><span class="ln"> 75</span><span class="cl">    }
</span></span><span class="line"><span class="ln"> 76</span><span class="cl">
</span></span><span class="line"><span class="ln"> 77</span><span class="cl">    currentCell = document.getElementById(&#34;cell_&#34; + rowIndex + &#34;_&#34; + colIndex);
</span></span><span class="line"><span class="ln"> 78</span><span class="cl">
</span></span><span class="line"><span class="ln"> 79</span><span class="cl">    switch(exit) {
</span></span><span class="line"><span class="ln"> 80</span><span class="cl">
</span></span><span class="line"><span class="ln"> 81</span><span class="cl">        case &#34;right&#34;:
</span></span><span class="line"><span class="ln"> 82</span><span class="cl">
</span></span><span class="line"><span class="ln"> 83</span><span class="cl">            currentCell.style[&#34;border-left&#34;] = &#34;none&#34;;
</span></span><span class="line"><span class="ln"> 84</span><span class="cl">            break;
</span></span><span class="line"><span class="ln"> 85</span><span class="cl">
</span></span><span class="line"><span class="ln"> 86</span><span class="cl">        case &#34;bottom&#34;:
</span></span><span class="line"><span class="ln"> 87</span><span class="cl">
</span></span><span class="line"><span class="ln"> 88</span><span class="cl">            currentCell.style[&#34;border-top&#34;] = &#34;none&#34;;
</span></span><span class="line"><span class="ln"> 89</span><span class="cl">            break;
</span></span><span class="line"><span class="ln"> 90</span><span class="cl">
</span></span><span class="line"><span class="ln"> 91</span><span class="cl">        case &#34;left&#34;:
</span></span><span class="line"><span class="ln"> 92</span><span class="cl">
</span></span><span class="line"><span class="ln"> 93</span><span class="cl">            currentCell.style[&#34;border-right&#34;] = &#34;none&#34;;
</span></span><span class="line"><span class="ln"> 94</span><span class="cl">            break;
</span></span><span class="line"><span class="ln"> 95</span><span class="cl">
</span></span><span class="line"><span class="ln"> 96</span><span class="cl">        case &#34;top&#34;:
</span></span><span class="line"><span class="ln"> 97</span><span class="cl">
</span></span><span class="line"><span class="ln"> 98</span><span class="cl">            currentCell.style[&#34;border-bottom&#34;] = &#34;none&#34;;
</span></span><span class="line"><span class="ln"> 99</span><span class="cl">            break;
</span></span><span class="line"><span class="ln">100</span><span class="cl">
</span></span><span class="line"><span class="ln">101</span><span class="cl">    }
</span></span><span class="line"><span class="ln">102</span><span class="cl">    if (rowIndex == mazeHeight &amp;&amp; colIndex == mazeWidth) {
</span></span><span class="line"><span class="ln">103</span><span class="cl">
</span></span><span class="line"><span class="ln">104</span><span class="cl">        break;
</span></span><span class="line"><span class="ln">105</span><span class="cl">
</span></span><span class="line"><span class="ln">106</span><span class="cl">    }
</span></span><span class="line"><span class="ln">107</span><span class="cl">
</span></span><span class="line"><span class="ln">108</span><span class="cl">    currentCell.style.backgroundColor = &#34;#f00000&#34;;
</span></span><span class="line"><span class="ln">109</span><span class="cl">
</span></span><span class="line"><span class="ln">110</span><span class="cl">    lastExit = exit;
</span></span><span class="line"><span class="ln">111</span><span class="cl">
</span></span><span class="line"><span class="ln">112</span><span class="cl">    loop++;
</span></span><span class="line"><span class="ln">113</span><span class="cl">
</span></span><span class="line"><span class="ln">114</span><span class="cl">}
</span></span></code></pre></div><p>Hier wede ich noch mal ein paar Besonderheiten erläutern: Gleich zu Beginn der Schleife durchlaufen wir alle gültigen Ausgänge um so zu den nächsten möglichen Zellen zu kommen (<em>nextPossibleCell</em>). Nur wenn diese Zelle überhaupt existiert (wir uns also nicht am Rand des Irrgarten befinden) und nicht belegt ist (Hintergrundfarbe ist nicht rot), kann die entsprechende Bewegungsrichtung verwendet werden:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">[...]
</span></span><span class="line"><span class="ln">2</span><span class="cl">nextExits.push(validExits[i]);
</span></span><span class="line"><span class="ln">3</span><span class="cl">[...]
</span></span></code></pre></div><p>Danach folgt wieder die Zufallsbestimmung des nächsten Ausgangs. Die Protokollierung der restlichen Ausgänge erfolgt nun etwas anders, am Beispiel von Ausgang &ldquo;<em>rechts</em>&rdquo;:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">[...]
</span></span><span class="line"><span class="ln">2</span><span class="cl">remainingExits.left++;
</span></span><span class="line"><span class="ln">3</span><span class="cl">remainingExits.right--;
</span></span><span class="line"><span class="ln">4</span><span class="cl">[...]
</span></span></code></pre></div><p>Der Rest der Schleife bleibt unverändert. Und tatsächlich: Der Irrgarten sieht weitaus schöner aus:</p>
<p><img src="/2020/2020-04-11-wie-erstelle-ich-ein-labyrinth-mit-javascript/images/grafik-9-700x705.png" alt=""></p>
<p>Allerdings fehlt immer noch eine offensichtliche Kleinigkeit: Wir erreichen das Ziel nicht.</p>
<h2 id="schritt-6-das-sackgassenproblem">Schritt 6: Das Sackgassenproblem</h2>
<p>Wir erzeugen eine Sackgasse. Der Weg aus der Sackgasse sieht folgendermaßen aus: Wir müssen uns zurück bewegen. Bei jeder Zelle prüfen wir die möglichen Ausgänge und nehmen einfach einen anderen. Die bereits belegten Zellen bleiben weiterhin belegt.</p>
<p>Da wir nun in den Schleifenablauf eingreifen, führen wir eine Sicherung ein. So vermeiden wir, dass die Schleife z.B. unendlich läuft.</p>
<p>Außerdem führen wir ein weiteres Array <em>lastExits</em> ein, dass den aktuellen Weg protokolliert (das nennt sich übrigens <em><a href="https://en.wikipedia.org/wiki/Maze_generation_algorithm#Recursive_backtracker">recursive backtracker algorithmus</a>)</em> Gleich der Beginn der Schleife prüft nun erstmal unser Sicherungsnetz:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">while (loop &lt; ((mazeWidth * mazeHeight) - 1)) {
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl">    loopFuse++;
</span></span><span class="line"><span class="ln">4</span><span class="cl">
</span></span><span class="line"><span class="ln">5</span><span class="cl">    if (loopFuse &gt;= maxLoops) {break;}
</span></span><span class="line"><span class="ln">6</span><span class="cl">
</span></span><span class="line"><span class="ln">7</span><span class="cl">    [...]
</span></span></code></pre></div><p>Danach prüfen wir wie gehabt, welche Ausgänge noch nicht belegt sind. Und dann, bevor wir per Zufall den nächsten Ausgang bestimmen, bauen wir unsere Sackgassen-Schutz-Funktion ein:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln"> 1</span><span class="cl">[...]
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">if (nextExits.length == 0) {
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    lastCells.splice(lastCells.length - 1, 1);
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    console.log(&#34;Sackgasse. Einen Schritt zurück:&#34;);
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    rowIndex = lastCells[lastCells.length - 1][0];
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    colIndex = lastCells[lastCells.length - 1][1];
</span></span><span class="line"><span class="ln">10</span><span class="cl">    currentCell = document.getElementById(&#34;cell_&#34; + rowIndex + &#34;_&#34; + colIndex);
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">    continue;
</span></span><span class="line"><span class="ln">13</span><span class="cl">    
</span></span><span class="line"><span class="ln">14</span><span class="cl">}
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl">exitIndex = Math.floor(Math.random() * nextExits.length);
</span></span><span class="line"><span class="ln">17</span><span class="cl">
</span></span><span class="line"><span class="ln">18</span><span class="cl">[...]
</span></span></code></pre></div><p>Wenn wir uns in einer Sackgasse befinden, entfernen wir einfach die letzte Zelle aus <em>lastCells</em> und setzen den Zeige auf die Zelle davor. Dann verlassen wir den Schleifendurchlauf mit <em>continue.</em> Weiter unten müssen wir natürlich auch dafür sorgen, dass die jeweils aktuelle Zelle zu <em>lastCells</em> hinzugefügt wird:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">[...]
</span></span><span class="line"><span class="ln">2</span><span class="cl">lastCells.push([rowIndex, colIndex]);
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl">currentCell = document.getElementById(&#34;cell_&#34; + rowIndex + &#34;_&#34; + colIndex);
</span></span><span class="line"><span class="ln">5</span><span class="cl">
</span></span><span class="line"><span class="ln">6</span><span class="cl">[...]
</span></span></code></pre></div><p>Ganz am Ende der Schleife prüfen wir außerdem noch, ob wir uns vielleicht schon am Ziel befinden, um dann die Schleife zu verlassen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln"> 1</span><span class="cl">    [...]
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    if (rowIndex == mazeHeight &amp;&amp; colIndex == mazeWidth) {
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">        break;
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    }
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    currentCell.style.backgroundColor = &#34;#f00000&#34;;
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">    loop++;
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl">}
</span></span></code></pre></div><p>Das Ergebnis überzeugt: Wir erzeugen nun einen verzweigten Weg, der nicht nur nach rechts und unten geht, sondern sogar Sackgassen enthält:</p>
<p><img src="/2020/2020-04-11-wie-erstelle-ich-ein-labyrinth-mit-javascript/images/grafik-10-700x704.png" alt=""></p>
<h2 id="schritt-7-noch-mehr-sackgassen">Schritt 7: Noch mehr Sackgassen!</h2>
<p>Wie bekommen wir noch mehr Sackgassen in unser Labyrinth? Indem wir die echte Route abgehen und einfach von jeder Zelle aus eine neue Route starten? Ja. Das war auch mein erster Gedanke. Allerdings ist die aktuelle Zielroute oft von Sackgassen umgeben. Wenn wir diesen Weg wählen, könnten also weiterhin einige Felder unbearbeitet bleiben. Deshalb werden wir ziemlich schroff einfach jedes belegte Feld als Startpunkt für einen Abzweig nutzen. Das Erzeugen der Abzweigungen kommt natürlich ohne die Sackgassen-Schutz-Funktion aus.</p>
<p>Dazu müssen wir erstmal die aktuelle Logik in eine Funktion packen, die jetzt drei Parameter erwartet:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">startAtRow = 1;
</span></span><span class="line"><span class="ln">2</span><span class="cl">startAtCol = 1;
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl">addRoute(startARow, statrtAtCol, false);
</span></span></code></pre></div><p>Die Funktion <em>addRoute</em> sieht folgendermaßen aus. <em>False</em> bedeutet also, dass wir keinen Abzeig sondern erstmal die korrekte Route zum Ziel erzeugen wollen.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">  1</span><span class="cl"><span class="n">function</span> <span class="n">addRoute</span><span class="p">(</span><span class="n">startAtRow</span><span class="p">,</span> <span class="n">startAtCol</span><span class="p">,</span> <span class="n">createDetour</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">  2</span><span class="cl">
</span></span><span class="line"><span class="ln">  3</span><span class="cl">    <span class="k">var</span> <span class="n">validExits</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">,</span> <span class="s2">&#34;left&#34;</span><span class="p">,</span> <span class="s2">&#34;top&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="ln">  4</span><span class="cl">    <span class="k">var</span> <span class="n">remainingExits</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;right&#34;</span><span class="p">:</span> <span class="n">mazeWidth</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">:</span> <span class="n">mazeHeight</span><span class="p">,</span> <span class="s2">&#34;left&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">&#34;top&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">};</span>
</span></span><span class="line"><span class="ln">  5</span><span class="cl">    <span class="k">var</span> <span class="n">nextExits</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="ln">  6</span><span class="cl">    <span class="k">var</span> <span class="n">lastCells</span><span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="ln">  7</span><span class="cl">
</span></span><span class="line"><span class="ln">  8</span><span class="cl">    <span class="k">var</span> <span class="n">rowIndex</span> <span class="o">=</span> <span class="n">startAtRow</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">  9</span><span class="cl">    <span class="k">var</span> <span class="n">colIndex</span> <span class="o">=</span> <span class="n">startAtCol</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 10</span><span class="cl">    
</span></span><span class="line"><span class="ln"> 11</span><span class="cl">    <span class="k">var</span> <span class="n">currentCell</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">&#34;cell_&#34;</span> <span class="o">+</span> <span class="n">rowIndex</span> <span class="o">+</span> <span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="n">colIndex</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 12</span><span class="cl">
</span></span><span class="line"><span class="ln"> 13</span><span class="cl">    <span class="k">var</span> <span class="n">exit</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 14</span><span class="cl">
</span></span><span class="line"><span class="ln"> 15</span><span class="cl">    <span class="k">var</span> <span class="n">lastExit</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 16</span><span class="cl">
</span></span><span class="line"><span class="ln"> 17</span><span class="cl">    <span class="k">var</span> <span class="n">exitIndex</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 18</span><span class="cl">
</span></span><span class="line"><span class="ln"> 19</span><span class="cl">    <span class="k">var</span> <span class="n">loop</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 20</span><span class="cl">    <span class="k">var</span> <span class="n">loopFuse</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 21</span><span class="cl">    <span class="k">var</span> <span class="n">maxLoops</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">mazeWidth</span> <span class="o">*</span> <span class="n">mazeHeight</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 22</span><span class="cl">
</span></span><span class="line"><span class="ln"> 23</span><span class="cl">    <span class="k">var</span> <span class="n">nextPossibleCell</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 24</span><span class="cl">
</span></span><span class="line"><span class="ln"> 25</span><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">loop</span> <span class="o">&lt;</span> <span class="p">((</span><span class="n">mazeWidth</span> <span class="o">*</span> <span class="n">mazeHeight</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 26</span><span class="cl">
</span></span><span class="line"><span class="ln"> 27</span><span class="cl">        <span class="n">loopFuse</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 28</span><span class="cl">
</span></span><span class="line"><span class="ln"> 29</span><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">loopFuse</span> <span class="o">&gt;=</span> <span class="n">maxLoops</span><span class="p">)</span> <span class="p">{</span><span class="k">break</span><span class="p">;}</span>
</span></span><span class="line"><span class="ln"> 30</span><span class="cl">
</span></span><span class="line"><span class="ln"> 31</span><span class="cl">        <span class="n">nextExits</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="ln"> 32</span><span class="cl">
</span></span><span class="line"><span class="ln"> 33</span><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">validExits</span><span class="o">.</span><span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 34</span><span class="cl">
</span></span><span class="line"><span class="ln"> 35</span><span class="cl">            <span class="k">switch</span><span class="p">(</span><span class="n">validExits</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 36</span><span class="cl">
</span></span><span class="line"><span class="ln"> 37</span><span class="cl">                <span class="k">case</span> <span class="s2">&#34;right&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln"> 38</span><span class="cl">                    <span class="n">nextPossibleCell</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">&#34;cell_&#34;</span> <span class="o">+</span> <span class="n">rowIndex</span> <span class="o">+</span> <span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="p">(</span><span class="n">colIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
</span></span><span class="line"><span class="ln"> 39</span><span class="cl">                    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 40</span><span class="cl">
</span></span><span class="line"><span class="ln"> 41</span><span class="cl">                <span class="k">case</span> <span class="s2">&#34;left&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln"> 42</span><span class="cl">                    <span class="n">nextPossibleCell</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">&#34;cell_&#34;</span> <span class="o">+</span> <span class="n">rowIndex</span> <span class="o">+</span> <span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="p">(</span><span class="n">colIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="p">));</span>
</span></span><span class="line"><span class="ln"> 43</span><span class="cl">                    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 44</span><span class="cl">
</span></span><span class="line"><span class="ln"> 45</span><span class="cl">                <span class="k">case</span> <span class="s2">&#34;bottom&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln"> 46</span><span class="cl">                    <span class="n">nextPossibleCell</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">&#34;cell_&#34;</span> <span class="o">+</span> <span class="p">(</span><span class="n">rowIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="n">colIndex</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 47</span><span class="cl">                    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 48</span><span class="cl">
</span></span><span class="line"><span class="ln"> 49</span><span class="cl">                <span class="k">case</span> <span class="s2">&#34;top&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln"> 50</span><span class="cl">                    <span class="n">nextPossibleCell</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">&#34;cell_&#34;</span> <span class="o">+</span> <span class="p">(</span><span class="n">rowIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="n">colIndex</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 51</span><span class="cl">                    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 52</span><span class="cl">
</span></span><span class="line"><span class="ln"> 53</span><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 54</span><span class="cl">            
</span></span><span class="line"><span class="ln"> 55</span><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">nextPossibleCell</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 56</span><span class="cl">
</span></span><span class="line"><span class="ln"> 57</span><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="n">nextPossibleCell</span><span class="o">.</span><span class="n">getAttribute</span><span class="p">(</span><span class="s2">&#34;occupied&#34;</span><span class="p">)</span> <span class="o">!=</span> <span class="s2">&#34;true&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 58</span><span class="cl">                    
</span></span><span class="line"><span class="ln"> 59</span><span class="cl">                    <span class="k">for</span> <span class="p">(</span><span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="n">remainingExits</span><span class="p">[</span><span class="n">validExits</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span> <span class="n">t</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 60</span><span class="cl">
</span></span><span class="line"><span class="ln"> 61</span><span class="cl">                        <span class="n">nextExits</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">validExits</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="ln"> 62</span><span class="cl">
</span></span><span class="line"><span class="ln"> 63</span><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 64</span><span class="cl">
</span></span><span class="line"><span class="ln"> 65</span><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 66</span><span class="cl">
</span></span><span class="line"><span class="ln"> 67</span><span class="cl">            <span class="p">}</span> 
</span></span><span class="line"><span class="ln"> 68</span><span class="cl">
</span></span><span class="line"><span class="ln"> 69</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 70</span><span class="cl">
</span></span><span class="line"><span class="ln"> 71</span><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">nextExits</span><span class="o">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 72</span><span class="cl">
</span></span><span class="line"><span class="ln"> 73</span><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">createDetour</span> <span class="o">==</span> <span class="bp">true</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 74</span><span class="cl">
</span></span><span class="line"><span class="ln"> 75</span><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="n">colIndex</span> <span class="o">==</span> <span class="n">mazeWidth</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 76</span><span class="cl">                    <span class="n">rowIndex</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 77</span><span class="cl">                    <span class="n">colIndex</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 78</span><span class="cl">                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 79</span><span class="cl">                    <span class="n">colIndex</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 80</span><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 81</span><span class="cl">
</span></span><span class="line"><span class="ln"> 82</span><span class="cl">                <span class="n">currentCell</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">&#34;cell_&#34;</span> <span class="o">+</span> <span class="n">rowIndex</span> <span class="o">+</span> <span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="n">colIndex</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 83</span><span class="cl">
</span></span><span class="line"><span class="ln"> 84</span><span class="cl">                <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 85</span><span class="cl">
</span></span><span class="line"><span class="ln"> 86</span><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 87</span><span class="cl">                
</span></span><span class="line"><span class="ln"> 88</span><span class="cl">                <span class="n">lastCells</span><span class="o">.</span><span class="n">splice</span><span class="p">(</span><span class="n">lastCells</span><span class="o">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 89</span><span class="cl">
</span></span><span class="line"><span class="ln"> 90</span><span class="cl">                <span class="n">rowIndex</span> <span class="o">=</span> <span class="n">lastCells</span><span class="p">[</span><span class="n">lastCells</span><span class="o">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
</span></span><span class="line"><span class="ln"> 91</span><span class="cl">                <span class="n">colIndex</span> <span class="o">=</span> <span class="n">lastCells</span><span class="p">[</span><span class="n">lastCells</span><span class="o">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="ln"> 92</span><span class="cl">                <span class="n">currentCell</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">&#34;cell_&#34;</span> <span class="o">+</span> <span class="n">rowIndex</span> <span class="o">+</span> <span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="n">colIndex</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 93</span><span class="cl">
</span></span><span class="line"><span class="ln"> 94</span><span class="cl">                <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 95</span><span class="cl">            
</span></span><span class="line"><span class="ln"> 96</span><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 97</span><span class="cl">
</span></span><span class="line"><span class="ln"> 98</span><span class="cl">        <span class="p">}</span> 
</span></span><span class="line"><span class="ln"> 99</span><span class="cl">
</span></span><span class="line"><span class="ln">100</span><span class="cl">        <span class="n">exitIndex</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="n">floor</span><span class="p">(</span><span class="n">Math</span><span class="o">.</span><span class="n">random</span><span class="p">()</span> <span class="o">*</span> <span class="n">nextExits</span><span class="o">.</span><span class="n">length</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">101</span><span class="cl">
</span></span><span class="line"><span class="ln">102</span><span class="cl">        <span class="n">exit</span> <span class="o">=</span> <span class="n">nextExits</span><span class="p">[</span><span class="n">exitIndex</span><span class="p">];</span>
</span></span><span class="line"><span class="ln">103</span><span class="cl">
</span></span><span class="line"><span class="ln">104</span><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">createDetour</span> <span class="o">==</span> <span class="bp">false</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">105</span><span class="cl">
</span></span><span class="line"><span class="ln">106</span><span class="cl">            <span class="n">currentCell</span><span class="o">.</span><span class="n">style</span><span class="p">[</span><span class="s2">&#34;border-&#34;</span><span class="o">+</span><span class="n">exit</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;none&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">107</span><span class="cl">
</span></span><span class="line"><span class="ln">108</span><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">109</span><span class="cl">
</span></span><span class="line"><span class="ln">110</span><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">exit</span> <span class="o">==</span> <span class="s2">&#34;right&#34;</span> <span class="o">&amp;&amp;</span> <span class="n">colIndex</span> <span class="o">==</span> <span class="n">mazeWidth</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">rowIndex</span> <span class="o">==</span> <span class="n">mazeHeight</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="ln">111</span><span class="cl">                <span class="o">!</span><span class="p">(</span><span class="n">exit</span> <span class="o">==</span> <span class="s2">&#34;bottom&#34;</span> <span class="o">&amp;&amp;</span> <span class="n">colIndex</span> <span class="o">==</span> <span class="n">mazeWidth</span> <span class="o">&amp;&amp;</span> <span class="n">rowIndex</span> <span class="o">==</span> <span class="n">mazeHeight</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">112</span><span class="cl">
</span></span><span class="line"><span class="ln">113</span><span class="cl">                <span class="n">currentCell</span><span class="o">.</span><span class="n">style</span><span class="p">[</span><span class="s2">&#34;border-&#34;</span><span class="o">+</span><span class="n">exit</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;none&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">114</span><span class="cl">
</span></span><span class="line"><span class="ln">115</span><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="ln">116</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">117</span><span class="cl">        
</span></span><span class="line"><span class="ln">118</span><span class="cl">        <span class="k">switch</span><span class="p">(</span><span class="n">exit</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">119</span><span class="cl">
</span></span><span class="line"><span class="ln">120</span><span class="cl">            <span class="k">case</span> <span class="s2">&#34;right&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">121</span><span class="cl">
</span></span><span class="line"><span class="ln">122</span><span class="cl">                <span class="n">colIndex</span> <span class="o">=</span> <span class="n">colIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">123</span><span class="cl">                <span class="n">remainingExits</span><span class="o">.</span><span class="n">left</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">124</span><span class="cl">                <span class="n">remainingExits</span><span class="o">.</span><span class="n">right</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">125</span><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">126</span><span class="cl">
</span></span><span class="line"><span class="ln">127</span><span class="cl">            <span class="k">case</span> <span class="s2">&#34;bottom&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">128</span><span class="cl">
</span></span><span class="line"><span class="ln">129</span><span class="cl">                <span class="n">rowIndex</span> <span class="o">=</span> <span class="n">rowIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">130</span><span class="cl">                <span class="n">remainingExits</span><span class="o">.</span><span class="n">top</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">131</span><span class="cl">                <span class="n">remainingExits</span><span class="o">.</span><span class="n">bottom</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">132</span><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">133</span><span class="cl">
</span></span><span class="line"><span class="ln">134</span><span class="cl">            <span class="k">case</span> <span class="s2">&#34;left&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">135</span><span class="cl">
</span></span><span class="line"><span class="ln">136</span><span class="cl">                <span class="n">colIndex</span> <span class="o">=</span> <span class="n">colIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">137</span><span class="cl">                <span class="n">remainingExits</span><span class="o">.</span><span class="n">left</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">138</span><span class="cl">                <span class="n">remainingExits</span><span class="o">.</span><span class="n">right</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">139</span><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">140</span><span class="cl">
</span></span><span class="line"><span class="ln">141</span><span class="cl">            <span class="k">case</span> <span class="s2">&#34;top&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">142</span><span class="cl">
</span></span><span class="line"><span class="ln">143</span><span class="cl">                <span class="n">rowIndex</span> <span class="o">=</span> <span class="n">rowIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">144</span><span class="cl">                <span class="n">remainingExits</span><span class="o">.</span><span class="n">top</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">145</span><span class="cl">                <span class="n">remainingExits</span><span class="o">.</span><span class="n">bottom</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">146</span><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">147</span><span class="cl">                
</span></span><span class="line"><span class="ln">148</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">149</span><span class="cl">
</span></span><span class="line"><span class="ln">150</span><span class="cl">        <span class="n">lastCells</span><span class="o">.</span><span class="n">push</span><span class="p">([</span><span class="n">rowIndex</span><span class="p">,</span> <span class="n">colIndex</span><span class="p">]);</span>
</span></span><span class="line"><span class="ln">151</span><span class="cl">
</span></span><span class="line"><span class="ln">152</span><span class="cl">        <span class="n">currentCell</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">&#34;cell_&#34;</span> <span class="o">+</span> <span class="n">rowIndex</span> <span class="o">+</span> <span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="n">colIndex</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">153</span><span class="cl">
</span></span><span class="line"><span class="ln">154</span><span class="cl">        <span class="k">switch</span><span class="p">(</span><span class="n">exit</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">155</span><span class="cl">
</span></span><span class="line"><span class="ln">156</span><span class="cl">            <span class="k">case</span> <span class="s2">&#34;right&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">157</span><span class="cl">
</span></span><span class="line"><span class="ln">158</span><span class="cl">                <span class="n">currentCell</span><span class="o">.</span><span class="n">style</span><span class="p">[</span><span class="s2">&#34;border-left&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;none&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">159</span><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">160</span><span class="cl">
</span></span><span class="line"><span class="ln">161</span><span class="cl">            <span class="k">case</span> <span class="s2">&#34;bottom&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">162</span><span class="cl">
</span></span><span class="line"><span class="ln">163</span><span class="cl">                <span class="n">currentCell</span><span class="o">.</span><span class="n">style</span><span class="p">[</span><span class="s2">&#34;border-top&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;none&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">164</span><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">165</span><span class="cl">
</span></span><span class="line"><span class="ln">166</span><span class="cl">            <span class="k">case</span> <span class="s2">&#34;left&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">167</span><span class="cl">
</span></span><span class="line"><span class="ln">168</span><span class="cl">                <span class="n">currentCell</span><span class="o">.</span><span class="n">style</span><span class="p">[</span><span class="s2">&#34;border-right&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;none&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">169</span><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">170</span><span class="cl">
</span></span><span class="line"><span class="ln">171</span><span class="cl">            <span class="k">case</span> <span class="s2">&#34;top&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">172</span><span class="cl">
</span></span><span class="line"><span class="ln">173</span><span class="cl">                <span class="n">currentCell</span><span class="o">.</span><span class="n">style</span><span class="p">[</span><span class="s2">&#34;border-bottom&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;none&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">174</span><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">175</span><span class="cl">
</span></span><span class="line"><span class="ln">176</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">177</span><span class="cl">
</span></span><span class="line"><span class="ln">178</span><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">rowIndex</span> <span class="o">==</span> <span class="n">mazeHeight</span> <span class="o">&amp;&amp;</span> <span class="n">colIndex</span> <span class="o">==</span> <span class="n">mazeWidth</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">179</span><span class="cl">
</span></span><span class="line"><span class="ln">180</span><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">181</span><span class="cl">
</span></span><span class="line"><span class="ln">182</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">183</span><span class="cl">
</span></span><span class="line"><span class="ln">184</span><span class="cl">        <span class="n">currentCell</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="n">backgroundColorRoute</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">185</span><span class="cl">        <span class="n">currentCell</span><span class="o">.</span><span class="n">setAttribute</span><span class="p">(</span><span class="s2">&#34;occupied&#34;</span><span class="p">,</span> <span class="s2">&#34;true&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">186</span><span class="cl">
</span></span><span class="line"><span class="ln">187</span><span class="cl">        <span class="n">lastExit</span> <span class="o">=</span> <span class="n">exit</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">188</span><span class="cl">
</span></span><span class="line"><span class="ln">189</span><span class="cl">        <span class="n">loop</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">190</span><span class="cl">
</span></span><span class="line"><span class="ln">191</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">192</span><span class="cl">
</span></span><span class="line"><span class="ln">193</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>An der Funktionalität hat sich hier nicht viel geändert: Wir prüfen zuerst, welche Ausgänge von der aktuellen Zelle aus möglich sind. Direkt danach allerdings müssen wir, wenn es keine weiteren Ausgänge gibt, die Funktion verlassen - wir wollen ja diesmal explizit Sackgassen erzeugen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">if (createDetour == true) {
</span></span><span class="line"><span class="ln">2</span><span class="cl">  return false;
</span></span><span class="line"><span class="ln">3</span><span class="cl">[...]
</span></span></code></pre></div><p>Weiter unten gibt es eine weitere Besonderheit: Wenn wir den Abzweig erzeugen, darf dieser natürlich nicht &ldquo;aus Versehen&rdquo; zum Ziel führen. Wir prüfen also, ob wir uns direkt neben der Zielzelle befinden. In dem Fall wird der Rahmen nicht entfernt:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">[...]
</span></span><span class="line"><span class="ln">2</span><span class="cl">if (!(exit == &#34;right&#34; &amp;&amp; colIndex == mazeWidth - 1 &amp;&amp; rowIndex == mazeHeight) &amp;&amp;
</span></span><span class="line"><span class="ln">3</span><span class="cl">    !(exit == &#34;bottom&#34; &amp;&amp; colIndex == mazeWidth &amp;&amp; rowIndex == mazeHeight - 1) ) {
</span></span><span class="line"><span class="ln">4</span><span class="cl">
</span></span><span class="line"><span class="ln">5</span><span class="cl">    currentCell.style[&#34;border-&#34;+exit] = &#34;none&#34;;
</span></span><span class="line"><span class="ln">6</span><span class="cl">
</span></span><span class="line"><span class="ln">7</span><span class="cl">}
</span></span><span class="line"><span class="ln">8</span><span class="cl">[...]
</span></span></code></pre></div><p>Ganz am Ende der Schleife wird außerdem das Attribut <em>occupied</em> der Zelle auf <em>true</em> gesetzt. So müssen wir nicht mehr mit der Hintergrundfarbe arbeiten, um belegte Zellen zu erkennen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">[...]
</span></span><span class="line"><span class="ln">2</span><span class="cl">currentCell.setAttribute(&#34;occupied&#34;, &#34;true&#34;);
</span></span><span class="line"><span class="ln">3</span><span class="cl">[...]
</span></span></code></pre></div><p>Nun kommen wir zum Erzeugen der Abzweige. Wie schon angekündigt, durchlaufen wir einfach die Zellen, die bereits belegt (<em>occupied == true)</em> sind, um von dort aus unsere bewährte Routenerstellung - jedoch ohne Sackgassen-Schutz-Funktion, zu starten:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="n">n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">mazeWidth</span> <span class="o">*</span> <span class="n">mazeHeight</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">n</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">var</span> <span class="n">currentCell</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">&#34;cell_&#34;</span> <span class="o">+</span> <span class="n">startAtRow</span> <span class="o">+</span> <span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="n">startAtCol</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">currentCell</span><span class="o">.</span><span class="n">getAttribute</span><span class="p">(</span><span class="s2">&#34;occupied&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&#34;true&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="n">addRoute</span><span class="p">(</span><span class="n">startAtRow</span><span class="p">,</span> <span class="n">startAtCol</span><span class="p">,</span> <span class="bp">true</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">startAtCol</span> <span class="o">==</span> <span class="n">mazeWidth</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">        
</span></span><span class="line"><span class="ln">13</span><span class="cl">        <span class="n">startAtRow</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">        <span class="n">startAtCol</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">
</span></span><span class="line"><span class="ln">18</span><span class="cl">        <span class="n">startAtCol</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">
</span></span><span class="line"><span class="ln">20</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">
</span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Et voila: Ein Irrgarten:</p>
<p><img src="/2020/2020-04-11-wie-erstelle-ich-ein-labyrinth-mit-javascript/images/grafik-12-700x696.png" alt=""></p>
<p>Und auch wenn der Algorithmus teilweise etwas stumpf gestaltet ist, kann sich die Performance sehen lassen. Ein Labyrinth mit der Kantenlänge 100 x 100 dauert nur wenige Sekunden:</p>
<p><img src="/2020/2020-04-11-wie-erstelle-ich-ein-labyrinth-mit-javascript/images/grafik-13-700x699.png" alt=""></p>
<p>Natürlich gibt es an der einen oder anderen Stelle noch Optimierungspotential. Ich hab die ganze Logik noch mit einer Navigation und einer Stopp-Uhr ausgestattet. So sieht das ganze dann als Zeitvertreib für die Quarantäne aus: <a href="https://nickyreinert.github.io/maze/">https://nickyreinert.github.io/maze/</a></p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> anleitung, javascript, labyrinth</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Wie erstelle ich ein Labyrinth mit JavaScript? - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>tutorial</dc:type>
      
      
    </item>
  </channel>
</rss>