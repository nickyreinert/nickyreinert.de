<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" 
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Linux auf Nicky Reinert</title>
    <link>https://nickyreinert.de/topics/linux/</link>
    <description>Blog &amp; Projekte von Nicky Reinert (Institut für digitale Herausforderungen): Webentwicklung &amp; Software Development, SEO &amp; Analytics, Hosting &amp; DevOps, WordPress &amp; Hugo, Tools &amp; Projekte, Datenschutz und digitale Kultur – plus Texte zu KI sowie Autismus &amp; Gesellschaft.</description>
    <generator>Hugo 0.148.2</generator>
    <language>de</language>
    <managingEditor></managingEditor>
    <webMaster></webMaster>
    <copyright></copyright>
    <lastBuildDate>Thu, 05 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://nickyreinert.de/topics/linux/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>Wie funktionieren Dateirechte?</title>
      <link>https://nickyreinert.de/2020/2020-11-05-wie-funktionieren-dateirechte/</link>
      <pubDate>Thu, 05 Nov 2020 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2020/2020-11-05-wie-funktionieren-dateirechte/</guid>
      <description>Die korrekten Dateirechte sollten eine wichtige Rolle spielen, wenn du an einem Sicherheitskonzept für deine Webseite bzw. Wordpress arbeitest. Leider wird das …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine detaillierte Anleitung zum Verständnis und zur korrekten Konfiguration von Dateirechten auf einem Linux-Webserver, speziell für WordPress. Der Artikel erklärt die Grundlagen von Benutzern, Gruppen und den Rechten (Lesen, Schreiben, Ausführen) und demonstriert die Anwendung von `chmod` und `chown`. Es werden sichere, praxisnahe Konfigurationen und Skripte zur Härtung einer WordPress-Installation vorgestellt.</p>
          
          
          <p><strong>Hauptthemen:</strong> Linux, Server-Administration, Web-Sicherheit, WordPress, Dateirechte, SysAdmin</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> advanced</p>
          
        </div>
        
        
        <p>Die korrekten <strong>Dateirechte</strong> sollten eine wichtige Rolle spielen, wenn du an einem Sicherheitskonzept für deine Webseite bzw. Wordpress arbeitest. Leider wird das Thema Dateirechte oft stiefmütterlich behandelt, nicht zuletzt weil es fälschlicherweise als zu kompliziert angesehen wird. Dabei muss es das gar nicht sein: Das Grundprinzip ist einfach: Du willst nicht, dass jedermann Dateien <strong>ändern</strong>, <strong>ausführen</strong> oder <strong>lesen</strong> kann. Sicherlich gibt es feine Abstufungen. und genau die möchte ich hier erklären.</p>
<p>Achtung: Das Ziel dieses Beitrags ist nicht, dir eine fertige Lösung für deine WordPress-Installation bzw. dein Projekt zu geben. Das ist nicht möglich. Warum? Es gibt zig unterschiedliche Konfigurationen. Es mag allgemeingültige Lösungen geben, diese sind aber bei weitem nicht sicher. Stichwort: chmod 777 * -R</p>
<p>Du solltest nach der Lektüre aber das Konzept verstehen und vielleicht sogar in der Lage sein, die Dateirechte selbstständig zu setzen.</p>
<h2 id="die-grundlagen-wie-verarbeitet-ein-web-server-anfragen">Die Grundlagen: Wie verarbeitet ein Web-Server Anfragen?</h2>
<p>Jetzt fragst du dich sicherlich, was das mit Dateirechten zu tun hat? Was passiert, wenn du auf einer Webseite surfst? Folgende Vereinfachung dürfte das konzept hilfreich beschreibe: Der Web-Server schickt eine Datei an deinen Browser. Und du kannst Dateien an den Web-Server schicken, sprich hochladen. Wer also verstehen will, wie Dateirechte gesetzt werden müssen, sollte das Grundkonzept eines Servers verstehen.</p>
<p>Wie sieht diese Kommunikation mit dem Server also im Detail aus? Du schickst über deinen Browser eine Anfrage (<a href="https://nickyreinert.de/index.html">http://nickyreinert.de/index.html</a>) an den Server (was auch nur irgendein anderer Computer auf der Welt ist, egal ob in der Cloud oder in einem Keller). Auf dem Server laufen verschiedene Dienste - die verwirrenderweise auch als Server bezeichnet werden.</p>
<p><img src="https://pbs.twimg.com/media/D864DxrWsAAmvXi?format=png&amp;name=small" alt="Bild"></p>
<p>Die Cloud ist auch nur der Computer von jemand anders</p>
<p>Einer dieser Dienste ist der <strong><a href="https://de.wikipedia.org/wiki/Internetdienst#Die_Internetdienste_im_Einzelnen">HTTP-Dienst</a></strong>. Sehr verbreitet sind <strong>Apache2</strong> und <strong>nginx</strong>. Das Konzept ist bei beiden gleich: Sie empfangen deine Anfrage und schicken dir eine Antwort. Bei dieser Antwort unterscheidet man grob zwischen <strong>statische Inhalten</strong> (HTML-Datei, Texte, Bilder, &hellip;), die der <strong>HTTP-Dienst</strong> direkt zurückschickt und <strong>dynamischen Inhalten</strong>. Dynamische Inhalte müssen auf dem Server erst verarbeitet werden, wie z.B. Datenbankabfragen oder ganz simpel die Darstellung der aktuellen Uhrzeit: <a href="https://nickyreinert.de/dynamisch.php">https://nickyreinert.de/dynamisch.php</a>. Das ermöglicht ein <strong>PHP-Dienst</strong> bzw. <strong>PHP-Interpreter</strong>.</p>
<p>Im Kontext der Dateirechte muss man hier eine wichtige Unterscheidung treffen: Der PHP-Interpreter ist entweder Teil des HTTP-Dienstes (<strong>PHP-Modul</strong>). Damit ist z.B. <strong>Apache2</strong> in der Lage, die PHP-Datei quasi selber zu interpretieren, und den dynamischen Inhalt für die Antwort zu erzeugen. Oder der PHP-Dienst ist ein getrennt laufender Dienst bzw. Prozess, der über eine Schnittstelle (CGI) vom HTTP-Dienst angesprochen wird (<a href="http://www.php-faq.de/q/q-php-cgi-vs-modul.html">mehr dazu hier</a>).</p>
<p>Um Informationen auf dem Server zu speichern, gibt es zwei Möglichkeiten: Zum einen wäre da die Datenbank, wie z.B. <strong>MySQL</strong> oder <strong>MariaDB</strong>. Der PHP-Dienst nutzt die Datenbank, um Informationen abzulegen, die in der Regel volatil sind. Wie z.B. Kommentare oder Texte für deinen Blog. Und es gibt das <strong>Dateisystem</strong>. Ganz banal ausgedrückt ist das die Festplatte des Servers. Und genau dort brauchst du Dateirechte. Die folgende Abbildung zeigt die beiden oben erwähnten Konfigurationen: In der ersten Konfiguration sind HTTP- und PHP-Dienst getrennte Dienste, in der zweiten Konfiguration nutzt der HTTP-Dienst PHP als integriertes Modul.</p>
<p>Die Abbildung zeigt außerdem ein beispielhaftes Dateisystem mit einigen ausgewählten Dateien und Ordnern, die dir von WordPress bekannt vorkommen dürften.</p>
<ul>
<li>
<p><a href="https://www.nickyreinert.de/files/wie-funktionieren-dateirechte/Folie1.png"><img src="/2020/2020-11-05-wie-funktionieren-dateirechte/images/Folie1-700x394.png" alt=""></a></p>
</li>
<li>
<p><a href="https://www.nickyreinert.de/files/wie-funktionieren-dateirechte/Folie2.png"><img src="/2020/2020-11-05-wie-funktionieren-dateirechte/images/Folie2-700x394.png" alt=""></a></p>
</li>
</ul>
<p>Der vierte Dienst im Bunde ist übrigens der <strong>FTP-Dienst</strong>. Dieser ermöglicht es (in der Regel dem Web-Entwickler) sich per <strong>FTP</strong> auf den Server zu verbinden und Dateien über einen FTP-Client hochzuladen, zu bearbeiten oder zu löschen.</p>
<h2 id="lesen-schreiben-ausführen---was-bedeutet-das-eigentlich">Lesen, Schreiben, Ausführen - Was bedeutet das eigentlich?</h2>
<p>Wenn es um die Fähigkeit &ldquo;Ausführen&rdquo; geht, muss man streng zwischen Ordnern und Dateien unterscheiden. Das <strong>Ausführen</strong> von Dateien, egal welche Endung sie haben, ist in <strong>keiner Konfiguration notwendig</strong>! Das Ausführen von Ordern hingegen ermöglicht den Zugriff auf den Ordner. Jeder Ordner deiner WordPress-Installation darf also ausführbar sein.</p>
<p>Das <strong>Lesen</strong> eines Ordners ermöglicht einem Dienst, die Ordner-Inhalte aufzulisten. Das Lesen einer Datei ermöglicht einem Dienst den Inhalt einer Datei darzustellen. Und das ist bereits ein sicherheitskritisches Merkmal: Nicht jeder Dienst muss bzw. darf jede Datei lesen. Der HTTP-Dienst benötigt z.B. keinen lesenden Zugriff auf PHP-Dateien. Und erst Recht nicht auf z.B. die wp-config.php - in der sich ja das Passwort für die Datenbank befindet. Der HTTP-Dienst reicht die Anfrage für die dynamische PHP-Datei in der Regel an den PHP-Dienst weiter. Gleichwohl muss der HTTP-Dienst statische Inhalte lesen können. Vor allem bei den Leserechten gibt es also sehr viele Feinheiten zu beachten.</p>
<p>Wer <strong>Schreibrechte</strong> für einen Ordner hat, kann darin Dateien anlegen bzw. den Ordner löschen oder umbenennen. Das Schreibrecht für eine Datei ermöglicht das Löschen der Datei und das Ändern der Inhalte. Grundsätzlich sollte kein Dienst Schreibrechte im Dateisystem besitzen. So vermeidet man z.B., dass jemand Schadcode in eine PHP-Datei einfügt. Der PHP-Dienst kann Informationen in der Datenbank ablegen und für den HTTP-Dienst gibt es erstmal keinen Grund, überhaupt Dateien ändern oder anlegen zu müssen.</p>
<p>Natürlich gibt es Ausnahmen. Z.B. benötigt der PHP-Dienst Schreibrechte, wenn Dateien von WordPress oder der Plugins aktualisiert werden müssen. Oder ein Nutzer Dateien hochladen möchte (Hier kommt übrigens eine andere wichtige Sicherheitseinstellung zum Tragen: Man kann unterbinden, dass der PHP-Dienst Dateien aus dem Upload-Ordner als PHP-Dateien verarbeitet.)</p>
<p>Wie wir diese Dateirechte setzen, dazu gleich mehr.</p>
<h2 id="besitzrechte-einer-datei">Besitzrechte einer Datei</h2>
<p>Vorher schauen wir uns noch die Besitzverhältnisse von Dateien und Ordnern an. Diese lassen sich einem <strong>Besitzer</strong> und einer <strong>Gruppe</strong> zuordnen. Jeder der oben genannten Dienste kann, ganz abstrakt betracht, als <strong><em>Nutzer</em></strong> verstanden werden. Und damit entweder <strong>direkt Besitzer</strong> einer Datei oder eines Ordners sein. Oder <strong>indirekt</strong>, über die <strong>Gruppenzugehörigkeit</strong>.</p>
<p>Eine Datei gehört also zu einem Besitzer und zu einer Gruppe von Besitzern. Der Besitzer muss nicht zwingend Teil der Gruppe sein. Der <strong>Besitzer</strong> kann bestimmte Rechte für diese Datei besitzen, wie z.B. <strong>Lesen</strong> und <strong>Schreiben</strong>. Einer <strong>Gruppe</strong> von Besitzern werden auch individuelle Rechte zugesprochen, wie z.B. nur das <strong>Lesen</strong>. Und dann gibt es noch &ldquo;<strong>alle anderen</strong>&rdquo;, die vielleicht gar <strong>keine Zugriffsrechte</strong> auf eine Datei haben. Am Beispiel von <strong>index.html</strong> sieht das folgendermaßen aus:</p>
<p><em>index.html:</em></p>
<ul>
<li><strong>Besitzer</strong>: FTP-Dienst, darf lesen und schreiben,</li>
<li><strong>Gruppe</strong>: WWW-Data, darf lesen,</li>
<li><strong>alle andern</strong>: keine Rechte</li>
</ul>
<p>Und das enstpricht auch schon der klassischen Rechtevergabe von Dateien. Schreibrechte werden nur dem Besitzer eingeräumt. Die Gruppe darf bestenfalls lesen. Natürlich gibt es Sonderfälle, wie das Aktualisieren von WordPress oder von Plugins, dazu später mehr.</p>
<h2 id="wie-funktionieren-chown-und-chmod">Wie funktionieren chown und chmod?</h2>
<p>Du wirst es sicher schon mal gehört haben: Dateirechte werden mit <strong>chown</strong> und <strong>chmod</strong> konfiguriert. chown steht für &ldquo;change owner&rdquo; - also &ldquo;ändere den Besitzer&rdquo; und chmod für &ldquo;change mode&rdquo;, &ldquo;ändere den Modus&rdquo;.</p>
<p>Zu Demonstrationszwecken gehen wir von der folgenden Konfiguration aus, die zwar bei weitem nicht die sicherste, dafür aber weit verbreitet ist:</p>
<p>Die <em>Nutzer</em> für den PHP- und HTTP-Dienst sind in der Gruppe <strong>www-data</strong> zusammengefasst. Daneben gibt es den FTP-Dienst (<strong>ftp-user</strong>).</p>
<p><strong>Ftp-user</strong> bekommt alle Rechte: Lesen, Schreiben, usw. Die Nutzer der Gruppe <strong>www-data</strong> bekommen nur lesenden Zugriff - vorerst!</p>
<p>Jede Datei und jeder Ordner sollen dem <strong>ftp-user</strong> gehören, gleichzeitig aber auch zur Gruppe <strong>www-data</strong>. Das lässt sich mit <strong>chown</strong> folgendermaßen bewerkstelligen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">chown</span> <span class="n">ftp</span><span class="o">-</span><span class="n">user</span><span class="p">:</span><span class="n">www</span><span class="o">-</span><span class="n">data</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">www</span><span class="o">/*</span> <span class="o">--</span><span class="n">recursive</span>
</span></span></code></pre></div><p>Der erste Parameter definiert den Besitzer (ftp-user) und die Gruppenzugehörigkeit (www-data), immer getrent mit einem Doppelpunkt. Danach folgt der betroffene Ordner bzw. die Datei. Mit <strong>--recursive</strong> (oder kürzer <strong>-R</strong>) werden auch alle Unterordner und darin befindlichen Dateien angesprochen.</p>
<p>Bei den Dateirechten wird es etwas aufwendiger, zunächst der Aufruf:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">chmod</span> <span class="mi">640</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">www</span><span class="o">/*</span> <span class="o">-</span><span class="n">R</span>
</span></span></code></pre></div><p>Hier nutzen wir die Kurzschreibweise -R um alle Dateien und Ordner rekursiv zu ändern. Wichtig ist für uns die Ziffer hinter chmod: 640. Genau genommen handelt es sich um drei (oktale) Ziffern, nämlich 6, 4 und 0. Entsprechend der Position regeln sie die Zugriffsrechte für den</p>
<ul>
<li><strong>Besitzer</strong> (ftp-user, die 6 an erster Stelle),</li>
<li>die <strong>Gruppe</strong> (www-data) samt ihrer Mitglieder (HTTP-Dienst, die 4 an zweiter Stelle)</li>
<li>und an letzter Stelle alle anderen (<strong>others</strong> - die 0).</li>
</ul>
<p>Und wie entstehen die Ziffern 6, 4 und 0? Wir erinnern uns an die drei Zugriffsrechte:</p>
<ul>
<li>lesen,</li>
<li>schreiben sowie</li>
<li>ausführen.</li>
</ul>
<p>Jedes Recht besitzt einen Wert:</p>
<ul>
<li>Lesen (bzw. r für read) = 4</li>
<li>Schreiben (bzw. w für write) = 2</li>
<li>Ausführen (bzw. x für eXecute) = 1</li>
<li>Kein Recht = 0</li>
</ul>
<p><a href="https://www.nickyreinert.de/files/2227/berechnung-der-Dateirechte-fu%CC%88r-chmod.png"><img src="images/berechnung-der-Dateirechte-fu%CC%88r-chmod-300x167.png" alt="Die Berechnung der Dateirechte für chmod"></a></p>
<p>Die Berechnung der Dateirechte für chmod</p>
<p>Um Rechte zu kombinieren, bildet man deren Summe. Will man also alle Rechte vergeben, erechnet sich das folgendermaßen:</p>
<ul>
<li>Lesen + Schreiben + Ausführen = 4 + 2+ 1 = 7</li>
</ul>
<p>Nur Lese- und Schreibzugriff errechnet sich demnach so:</p>
<ul>
<li>Lesen + Schreiben = 6</li>
</ul>
<p>Die obene genannte chmod-Anweisung setzt also die folgenden Rechte um:</p>
<ul>
<li>Besitzer (ftp-user): 6 (Lesen, Schreiben)</li>
<li>Gruppe (www-data): 4 (Lesen)</li>
<li>Alle anderen (others): 0 (keine Rechte)</li>
</ul>
<p>Was heißt das? Der FTP-Nutzer darf als Besitzer alles: Dateien hochladen, löschen, bearbeiten usw. Jedes Mitglied der Gruppe www-data darf Dateien nur lesen. Jeder andere Nutzer (bzw. Dienst) darf gar nicht auf die Dateien in deinem WordPress-Projekt zugreifen. Das klingt sehr sicher, führt allerdings zu einem Problem: Dein Server dürfte so nicht funktionieren. Nimm als Beispiel diesen Aufruf: <a href="https://nickyreinert.de/ordner/">https://nickyreinert.de/ordner/</a></p>
<p>Die HTTP-Fehlermeldung <strong>403 Forbidden</strong> erscheint. Das sind die Zugriffsrechte für den Ordner, so wie wir sie eben gesetzt haben:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">drw-r----- 2 ftp-user www-data   4096 Okt 14 11:48 ordner/
</span></span></code></pre></div><p>In der zweiten Spalte sehen wir: Der Ordner gehört <strong>ftp-user</strong> und der Gruppe <strong>www-data</strong>.</p>
<p>Das <strong>d</strong> ganz am Anfang steht für <strong>directory</strong>, lies Ordner. Dann folgen die Dateirechte, die wir eben schon festgelegt haben: Zunächst drei Zeichen, die die Zugriffsrechte für den Besitzer (<strong>ftp-user</strong>) beschreiben: <strong>rw-</strong></p>
<p>Also Lesen (<strong>read)</strong> und Schreiben (<strong>write</strong>) (würde anstelle des <strong>-</strong> ein <strong>x</strong> stehen (<strong>eXecute)</strong>, stünde das für <strong>Ausführen</strong>). Die Gruppe <strong>www-data</strong> und alle ihre Mitglieder dürfen nur Lesen (r&ndash;). Alle anderen dürfen gar nichts (&mdash;).</p>
<p>Nun handelt es sich aber um einen Ordner. Ein Ordner kann aber nur &ldquo;betreten&rdquo; werden, wenn man die Genehmigung zum <strong>Ausführen</strong> hat. Weder der Besitzer noch die Gruppe hat diese Genehmigung. Unsere obere Anweisung reicht also nicht aus! Tatsächlich sollte man also <strong>Zugriffsrechte für Dateien und Ordner immer getrennt</strong> festlegen!</p>
<p>Berechtigung für alle Dateien:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">chmod</span> <span class="mi">640</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">www</span><span class="o">/*</span> <span class="o">-</span><span class="n">R</span>
</span></span></code></pre></div><p>Berechtigung für alle Ordner:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">chmod</span> <span class="mi">750</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">www</span><span class="o">/*</span> <span class="o">-</span><span class="n">R</span>
</span></span></code></pre></div><p>Du siehst, dass das Ermöglichen des Ausführens einfach durch das Addieren von 1 für die beiden ersten Positionen ermöglicht wird.</p>
<p>Tatsächlich findest du diese beiden Befehle auch in vielen Anleitungen zu Dateirechten und damit endet die Anleitung oft auch schon. Doch damit hast du ein Problem. Denn die zweite Anweisung überschreibt das Ergebnis der ersten Anweisung. Aber wir wollen doch Dateien und Ordner individuell einrichten! Abhilfe schafft der Befehl <strong>find</strong>, um Dateien und Ordner getrennt anzusprechen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">f</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">640</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">d</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">750</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span></code></pre></div><p>Der Parameter <strong>-type f</strong> liefert alle Dateien im angegeben Ordner zurück (f wie file, Datei). Der Punkt hinter htdocs in der ersten Zeile sorgt dafür, dass auch versteckte Dateien, wie z.B. die .htaccess-Datei, gefunden werden. Mit <strong>exec</strong> übergebe ich das Resultat von find, eine Liste die alle gefundenen Dateien enthält, an einen anderen Befehl. In dem Fall also <strong>chmod</strong>.</p>
<p>Vice versa für alle Ordner, die mit <strong>-type d</strong> gefunden werden. Hier wird mit chmod auch das Recht zum Ausführen vergeben.</p>
<h2 id="dateirechte-in-der-realität">Dateirechte in der Realität</h2>
<p>Das klingt erstmal recht einfach, hat aber drei Haken:</p>
<ol>
<li>Es gibt Dateien, die nur für den PHP-Dienst relevant sind, andere wiederum nur für den HTTP-Dienst. Man muss die Besitzrechte also etwas granularer vergeben.</li>
<li>Bei einem Update der Plugins oder WordPress müssen Dateien für die Gruppe www-data wenigstens temporär schreibbar sein.</li>
<li>Wenn man den Upload von Dateien zulassen möchte, muss der Ordner /wp-content/uploads dauerhaft beschreibbar sein.</li>
</ol>
<p>Es gibt also verschiedene <strong>Ordner- und Datei-Kategorien</strong>, die verschiedene Rechte erfordern. Die folgende Matrix zeigt, am Beispiel von WordPress, eine <strong>ideale</strong> Konfiguration:</p>
<p><a href="https://www.nickyreinert.de/files/wie-funktionieren-dateirechte/grafik-4.png"><img src="/2020/2020-11-05-wie-funktionieren-dateirechte/images/grafik-4-700x315.png" alt=""></a></p>
<p>Die **.htaccess-**Datei muss für den PHP-Dienst gar nicht sichtbar, geschweige denn beschreibbar sein. Die Datei <strong>wp-config.php</strong> wiederum sollte für den HTTP-Dienst unsichtbar sein. Generell müssen PHP-Dateien, also dynamische Ressourcen, für den HTTP-Dienst gar nicht sichtbar sein. Der Upload-Ordner ist hier beschreibbar, um das Hochladen von Datein zu ermöglichen. Wird ein Cache verwendet, muss natürlich auch dieser Ordner beschreibbar sein.</p>
<p>Solltest du, z.B. auf deinem eigenen Webspace, die Möglichkeit haben, Besitzrechte derart granular zu konfigurieren, kann dir die Matrix vielleicht als Inspiration dienen. In der Realität hilft das aber nicht weiter, da der PHP-Dienst als Modul entweder innerhalb des HTTP-Dienstes läuft oder beide Dienste unter einer Gruppe (www-data) laufen (<a href="https://binary-butterfly.de/artikel/dateirechte-wie-stelle-ich-das-bei-meinem-hoster-ein/">hier wird das Problem noch etwas genauer beleuchtet</a>). Die Konfiguration sieht dann in etwa so aus:</p>
<p><a href="https://www.nickyreinert.de/files/wie-funktionieren-dateirechte/grafik-5.png"><img src="/2020/2020-11-05-wie-funktionieren-dateirechte/images/grafik-5-700x288.png" alt=""></a></p>
<p>Nun stellst du dir sicher die Frage, wie du ein derartiges Setup möglichst unkompliziert einrichten kannst. Eins Vorweg: Ohne Zugriff auf die Shell wird das ziemlich aufwendig. Mit Zugriff auf die Kommandozeile kannst du die Dateirechte z.B. folgendermaßen setzen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">f</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">640</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">d</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">750</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/</span><span class="n">wp</span><span class="o">-</span><span class="n">content</span><span class="o">/</span><span class="n">uploads</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">f</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">660</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/</span><span class="n">wp</span><span class="o">-</span><span class="n">content</span><span class="o">/</span><span class="n">uploads</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">d</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">770</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/</span><span class="n">wp</span><span class="o">-</span><span class="n">content</span><span class="o">/</span><span class="n">cache</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">f</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">660</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/</span><span class="n">wp</span><span class="o">-</span><span class="n">content</span><span class="o">/</span><span class="n">cache</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">d</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">770</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span></code></pre></div><p>Wenn du Themes oder Plugins aktualisieren willst, musst du die Rechte folgendermaßen anpassen und somit Datein und Ordner schreibbar machen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/</span><span class="n">wp</span><span class="o">-</span><span class="n">content</span><span class="o">/</span><span class="n">themes</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">f</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">660</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/</span><span class="n">wp</span><span class="o">-</span><span class="n">content</span><span class="o">/</span><span class="n">themes</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">d</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">770</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/</span><span class="n">wp</span><span class="o">-</span><span class="n">content</span><span class="o">/</span><span class="n">plugins</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">f</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">660</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/</span><span class="n">wp</span><span class="o">-</span><span class="n">content</span><span class="o">/</span><span class="n">plugins</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">d</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">770</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span></code></pre></div><p>Beim Update von WordPress trifft das natürlich auf die ganze Installation zu:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">f</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">660</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">d</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">770</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span></code></pre></div><p>Wenn du keinen Zugriff auf die Kommandozeile hast, kannst du auch PHP nutzen, insofern du die Rechte dazu hast. Die Funktion lautet <a href="https://www.php.net/manual/de/function.chmod.php">chmod()</a>.</p>
<h2 id="ausführen-von-php-code-in-bestimmten-ordnern-unterbinden">Ausführen von PHP-Code in bestimmten Ordnern unterbinden</h2>
<p>Oben hatte ich das Problem mit dem Upload-Ordner angesprochen. Wenn Nutzer in der Lage sind, dort Dateien zu modifizieren oder abzulegen, ist das ein Sicherheitsrisiko. Du kannst das Risiko aber eindämmen, indem du dafür sorgst, dass Dateien in diesem Ordner schlicht nicht von PHP interpretiert, sprich ausgeführt, werden können.</p>
<p>So kann der Ordner beschreibbar bleiben, das Sicherheitsrisiko wird aber trotzdem reduziert. Dazu erstellst du eine .htaccess-Datei im uploads-Ordner mit diesem Inhalt:</p>
<p>SetHandler !
RemoveHandler .php .phtml .php3
RemoveType .php .phtml .php3
php_admin_value engine Off
php_flag engine off</p>
<p>Die beiden letzten Zeile sind redundant zu den vorherigen. Sie soll sicherstellen, dass PHP hier wirklich nicht funktioniert. Ein Angreifer ist somit vielleicht in der Lage, PHP-Code in diesem Ordner abzulegen aber nicht mehr, diesen auch auszuführen.</p>
<p>Bei nginx kannst du den Upload-Ordner einfach implizit von PHP abnabeln:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">$</span><span class="n">uri</span> <span class="o">!~</span> <span class="s2">&#34;^/uploads/&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl">   <span class="n">fastcgi_pass</span> <span class="n">unix</span><span class="p">:</span><span class="o">/</span><span class="n">run</span><span class="o">/</span><span class="n">php</span><span class="o">/</span><span class="n">php</span><span class="o">-</span><span class="n">fpm</span><span class="o">-$</span><span class="n">server</span><span class="o">.</span><span class="n">sock</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="fs_method">FS_METHOD</h2>
<p>Wenn du meinst, die Dateirechte korrekt vergeben zu haben und trotzdem fordert dich Wordpress beim Updaten auf, die FTP-Zugangsdaten einzugeben, setze diesen Parameter in der Datei wp-config.php:</p>
<p>define(&lsquo;FS_METHOD&rsquo;, &lsquo;direct&rsquo;);</p>
<p>WordPress weiß nun, dass es Dateien direkt anfassen darf, ohne den Umweg über den FTP-Nutzer zu gehen.</p>
<p>Dieser Parameter kann recht nützlich sein, wenn du die Dateirechte noch restriktiver vergeben willst, sprich: PHP gar keine Schreibrechte einräumst. Du musst dann einen FTP-Nutzer anlegen, über den WordPress sozusagen indirekt auf das Dateisystem zugreifen kann.</p>
<h2 id="wenig-aufwand-viel-nutzen">Wenig Aufwand, viel Nutzen</h2>
<p>Die Einarbeitung in die Benutzerrechte mit <strong>chmod</strong> mag anfangs vielleicht ungewohnt sein, mit etwa Übung hat man den Dreh aber recht schnell raus. Der Nutzen ist immens, denn die falsche Rechte-Vergabe ist ein häufiger Grund, warum bösartige Software sich überhaupt auf einem Server verbreiten kann. Es gibt noch eine Handvoll andere Maßnahmen, die relativ simpel und effektiv sind, denen ich mich in einem anderen Beitrag widmen möchte.</p>
<p>Zuguter Letzt: Willst du wissen, ob die Dateirechte in deiner Installation korrekt gesetzt wurden, kannst du auf dieses Script zurückgreifen. Ich habe dazu das Script von <a href="https://binary-butterfly.de/artikel/dateirechte-warum-eigentlich/">Ernesto Ruge</a> etwas überarbeitet, in der Funktionalität aber unverändert gelassen:</p>
<p><a href="https://www.nickyreinert.de/files/wie-funktionieren-dateirechte/grafik-7.png"><img src="/2020/2020-11-05-wie-funktionieren-dateirechte/images/grafik-7-700x366.png" alt=""></a></p>
<p>Die korrekten Datei und Ordner-Rechte für WordPress prüfen</p>
<p><a href="https://www.nickyreinert.de/files/wie-funktionieren-dateirechte/testFileFolderPermissions.php_-1.zip">testFileFolderPermissions.php_-1</a><a href="https://www.nickyreinert.de/files/wie-funktionieren-dateirechte/testFileFolderPermissions.php_-1.zip">Herunterladen</a></p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> chmod, dateirechte, sysop, wordpress</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>anleitungen</category>
      
      <category>hosting</category>
      
      <category>wordpress</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Wie funktionieren Dateirechte? - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>comprehensive_guide</dc:type>
      
      
    </item><item>
      <title>Den eigenen Web-Server sichern</title>
      <link>https://nickyreinert.de/2018/2018-08-23-den-eigenen-web-server-sichern/</link>
      <pubDate>Thu, 23 Aug 2018 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2018/2018-08-23-den-eigenen-web-server-sichern/</guid>
      <description>Die Datensicherung des eigenen, öffentlichen Webservers ist nicht nur wichtig, sie kann auch auf vielen Wegen geschehen und wirft vermutlich gerade deshalb sehr …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine umfassende Anleitung zur Erstellung einer automatisierten und sicheren Backup-Strategie für einen Webserver. Das Tutorial beschreibt den Einsatz von `duplicity` und GnuPG für verschlüsselte, inkrementelle Backups von Webseiten-Dateien und MySQL-Datenbanken. Es werden komplette Bash-Skripte zur Verfügung gestellt, die virtuelle Hosts automatisch erkennen und die Backups via WebDAV in der Cloud speichern.</p>
          
          
          <p><strong>Hauptthemen:</strong> Server-Administration, Backup, DevOps, Bash-Scripting, Web-Sicherheit, Linux</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> advanced</p>
          
        </div>
        
        
        <p>Die <strong>Datensicherung</strong> des eigenen, öffentlichen Webservers ist nicht nur wichtig, sie kann auch auf vielen Wegen geschehen und wirft vermutlich gerade deshalb sehr viele Fragen auf. Soll ich ein Image des ganzen Servers anlegen oder nur einzelne Ordner sichern? <strong>Wie oft</strong> muss ich ein Backup machen und wie gelange ich im Notfall an die Daten? Reicht es aus, z.B. als Wordpress-Nutzer, ein Plugin zu verwenden oder ist es sinnvoller externe Software zu nutzen?</p>
<p>Ich habe versucht ein paar solcher Fragen, auch für mich selber, zu beantworten und als Konsequenz daraus ein <strong>Backup-Strategie</strong> zu entwickeln und dann auch umzusetzen. Das Ziel ist ein gesunder <strong>Mittelweg zwischen Sicherheit und Bedienbarkeit</strong>. Da ich selber sehr oft mit Wordpress arbeite, soll dieser Beitrag vornehmlich die Wordpress-Nutzer ansprechen. Wenn du Wordpress allerdings nur als Service nutzt (z.B. auf wordpress.org), wird dir dieser Beitrag wenig weiterhelfen. Außerdem ist es sehr hilfreich, wenn du per <strong>SSH Zugriff</strong> auf deinen Server hast. Sicherlich gibt es auch Möglichkeiten, den hier aufgezeigten Weg ohne SSH zu beschreiten - wie das funktioniert, muss man aber im Einzelnen sehen.</p>
<h2 id="die-backup-strategie">Die Backup-Strategie</h2>
<h3 id="wo-soll-das-backup-gespeichert-werden">Wo soll das Backup gespeichert werden?</h3>
<p>Die erste Frage die ich mir gestellt habe war: <strong>Wo soll das Backup landen</strong>? Direkt auf dem Web-Server? Dann sind die Daten verloren, sobald der ganze Server weg ist. Auf einem Cloud-Speicher? Das ist bequem, birgt allerdings auch Probleme mit den <strong>Datenschutzgesetzen</strong>. Oder auf einem privaten NAS? Das ist aus Datenschutzsicht zwar in Ordnung, aber dann muss das NAS über das Internet erreichbar sein. Das wollte ich vermeiden.</p>
<p>Ich habe mich deshalb für einen Zwischenweg entschieden: Für den schnellen Zugriff lege ich das Backup <strong>auf dem Server</strong> ab. Gleichzeitig nutze ich das kostenlose Angebot von <a href="https://www.blaucloud.de/"><strong>blaucloud.de</strong></a>. Das ist ein Cloud-Speicher, dessen Server in Deutschland stehen. Außerdem unterstützt blaucloud, das auf nextcloud basiert, das WebDav-Protokoll. Zusätzlich, aber das ist nur ein Bonus. Außerdem habe ich auf meinem NAS eine Synchronisierung mit der blaucloud eingerichtet. Dadurch bleibt das NAS im Internet verborgen und ich habe trotzdem eine <strong>3. Kopie des Backups</strong> in meinen eigenen, sicheren vier Wänden.</p>
<h3 id="welche-software-soll-ich-nutzen">Welche Software soll ich nutzen?</h3>
<p>Die Auswahl von Plugins für automatische Backups mit Wordpress ist sehr umfangreich, einige davon sind kostenlos und die große Mehrheit ist sehr bequem zu bedienen. Die Backups laufen automatisch und auch die Wiederherstellung ist nur einen Mausklick entfernt. Das klingt paradiesisch, aber der Schein trügt. Zunächst halte ich es für absurd, ein System aus sich selber heraus zu sichern. Das ist wie ein <strong>Feuerlöscher</strong>, der bei <strong>Waldbrandgefahr</strong> zwischen den trockenen Bäumen steht.</p>
<p>Sicher kann ich mit den zahlreichen Wordpress-Plugins die Datenbank und das Dateisystem sichern. Aber der Prozess wird eben innerhalb eines System ausgeführt, das auch von außen erreichbar ist. Wenn nur ein anderes Plugin kompromittiert wird, gefährdet das die ganze Backup-Strategie. Außerdem muss ich, bei der Verwendung mehrerer Wordpress-Instanzen jedes Backup-Plugin einzeln pflegen.</p>
<p>Auch die regelmäßige Datensicherung, die viele Hoster von sich aus anbieten, reicht mir nicht aus, da diese nur minimal gesteuert werden kann und dort immer das ganze System gesichert wird, man also bei der Wiederherstellung nicht selektieren kann, welche Backup, welcher Ordner oder welche Datenbank zurück gespielt werden soll. Ich habe mich also für <strong>duplicity</strong> entschieden. <a href="http://duplicity.nongnu.org/"><strong>Duplicity</strong></a> wird über die Kommandozeile bedient (deshalb der notwendige SSH-Zugang), unterstützt viele Protokolle (FTP, <strong>WebDav</strong>, Amazon S3, rsync, &hellip;) und es gibt sogar eine grafische Benutzeroberfläche - wenn man doch nicht ohne kann. Außerdem bietet duplicity die Verschlüsselung mit <strong>GnuPG</strong> an und ist damit auch bestens geeignet, um die Datensicherung in der Cloud abzulegen.</p>
<h3 id="wie-oft-soll-ich-ein-backup-anlegen">Wie oft soll ich ein Backup anlegen?</h3>
<p>Die Frage sollte mich nicht länger beschäftigen, vor allem weil ich dazu <a href="https://blog.yadutaf.fr/2012/09/08/lazy-man-backup-strategy-with-duplicity-part-1/">einen sehr schönen Blog-Eintrag gefunden</a> habe. Dazu muss erklärt werden, dass <strong>duplicity</strong> mit <strong>inkrementellen Backups</strong> arbeitet. Dabei wird initial ein komplettes Backup angelegt. Danach werden nur noch die Änderungen an den zu sichernden Dateien erfasst. Für die Wiederherstellung muss also erst das letzte volle Backup zurückgespielt werden, um darauf dann die inkrementellen Backups &ldquo;anzuwenden. Der Backup-Plan lautet also wie folgt:</p>
<ul>
<li>es erfolgt initial eine volle Datensicherung</li>
<li>danach gibt es jeden Tag eine inkrementelle Datensicherung</li>
<li>jeden Monat erfolgt eine volle Datensicherung</li>
<li>inkrementelle, tägliche Backups, die älter sind als ein Monat, werden gelöscht</li>
<li>volle Backups, die älter als 12 Monate sind, werden gelöscht</li>
</ul>
<p>Im Notfall muss also zuerst das letzte volle Backup eingespielt werden, das nicht älter als ein Monat ist. Muss man Daten wiederherstellen, die älter sind als ein Monat, stehen diese immer nur für die monatlichen vollen Backups zur Verfügung. Für die Zeit vor 12 Monaten gibt es keine Datensicherung.</p>
<h3 id="welche-daten-sollen-gesichert-werden">Welche Daten sollen gesichert werden?</h3>
<p>Wie bereits erwähnt, stört mich bei den meisten Hostern, dass immer ein Backup des ganzen Servers angelegt wird. Da auf einem Server gerne aber mehr als eine Domain untergebracht ist, möchte ich die Datensicherung gerne je Domain und Datenbank durchführen. Mein Ziel ist es also, jeden Ordner im Dateisystem der einer (Sub-)Domain zugeordnet ist sowie jede Datenbank getrennt zu sichern. So kann ich eine Wiederherstellung auch punktuell anstoßen.</p>
<h2 id="vorbereitung">Vorbereitung</h2>
<p><em>Bevor es jetzt ans Eingemachte geht, der übliche Hinweis zur gebotenen <strong>Vorsicht</strong>: Wenn du nicht weißt, was hier passiert, lass dich von jemanden unterstützen, der weiß, was hier passiert. Wer auf der Konsole arbeitet, kann sehr schnell sehr viel falsch machen.</em></p>
<h3 id="duplicity-und-verschlüsselung-einrichten">Duplicity und Verschlüsselung einrichten</h3>
<p>Die erste Hürde, die du nehmen musst, ist die Installation von <strong>duplicity</strong>. Entweder du bekommst das über die Konsole selber hin - oder du fragst bei deinem Hoster nach. In vielen Fällen kann auch ein Shared Hostern das für dich installieren:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">sudo apt-get install duplicity
</span></span></code></pre></div><p>Als nächstes benötigst du <a href="https://www.gnupg.org/">GnuPG</a>. Das ist bei den meisten Hostern vorinstalliert. Sollte dem nicht so sein, fragst du entweder den Support oder erledigst das mit folgendem Befehl selber:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">sudo apt-get install gnupg2
</span></span></code></pre></div><p><a href="https://wiki.ubuntuusers.de/GnuPG/">GnuPG</a> ist ein Software zur <strong>Verschlüsselung</strong> von Informationen bzw. Dateien, das z.B. auch bei der Verschlüsselung von E-Mails zum Einsatz kommt. Für diesen Prozess werden zwei sogenannte <strong>Schlüssel</strong> benötigt - der private und der öffentliche Schlüssel. Der öffentliche Schlüssel dient dazu, die Daten zu verschlüsseln, mit dem privaten Schlüssel kannst du den Prozess &ldquo;umkehren&rdquo; - die Daten also entschlüsseln. Diese beiden Schlüssel müssen zunächst einmal erzeugt werden:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">gpg --gen-key
</span></span></code></pre></div><p>Du musst dazu ein paar Fragen beantworten. Die Frage nach der Schlüssel-Art beantwortest du mit 1, bzw. <em>RSA and RSA</em>. Als Schlüssellänge (<em>keysize</em>) empfiehlt sich 2.048 bits. Die Gültigkeitsdauer beträgt &ldquo;unendlich&rdquo;. Danach kannst, musst aber nicht, du deinen Namen und Kontaktdaten angeben. Abschließend wirst du nach einem Passwort für den privaten Schlüssel gefragt und aufgefordert durch ein paar zufällige Tasteneingaben eine Entropie zu erzeugen. Danach befindet sich im Ordner <strong><em>~/.gnupg</em></strong> dein Schlüsselpaar.</p>
<p><img src="/2018/2018-08-23-den-eigenen-web-server-sichern/images/gnupg.png" alt="Ein GnuPG Schlüsselpaar erzeugen"></p>
<p>Außerdem quittiert dir <strong>gnupg</strong> die Erstellung des Schlüsselpaars mit einer Statistik, aus der du dir die <strong>Id für den öffentlichen Schlüssel</strong> merken musst:</p>
<p><img src="/2018/2018-08-23-den-eigenen-web-server-sichern/images/gnupg-ausgabe.png" alt=""></p>
<h3 id="cloud-speicher-einrichten">Cloud-Speicher einrichten</h3>
<p>Der kostenlose <a href="https://www.blaucloud.de/">blaucloud</a>-Account für 5 GByte-Speicher ist ziemlich schnell eingerichtet. Dazu benötigst du nur einen beliebigen Benutzernamen, eine E-Mail-Adresse und ein Passwort. Über den Benutzerbnamen wird später auch deine Cloud erreichbar sein. Ich habe eine zufällige Zeichenkette verwendet, damit die Verbindung zur Funktion als Backup-Speicher nicht auf den ersten Blick ersichtlich ist (z.B. <em>qwertz123.blaucloud.de</em>). Danach musst du nur noch deine E-Mail-Adresse bestätigen und schon ist der Cloud-Speicher über folgende URL verfügbar:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">webdav://benutzername:passwor@benutzername.blaucloud.de/remote.php/webdav/
</span></span></code></pre></div><h3 id="mysql-benutzer-einrichten">MySQL-Benutzer einrichten</h3>
<p>Natürlich kannst du für das Backup einfach den Benutzer nutzen, den du auch für administrative Zwecke nutzt. Ich verrate dir aber kein Geheimnis wenn ich dir sage, dass es sehr sinnvoll ist, dafür einen eigenen Benutzer anzulegen, insofern deine Hosting-Umgebung das zulässt. Dazu führst du auf einer beliebigen Oberfläche (phpMyAdmin, MySQL Workbench oder direkt über das MySQL-CLI) folgende Query aus. Hier setzt du nur einen Benutzernamen und ein Passwort ein.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">GRANT LOCK TABLES, SELECT ON *.* TO &#39;USERNAME&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;PASSWORD&#39;;
</span></span><span class="line"><span class="ln">2</span><span class="cl">GRANT SHOW VIEW ON *.* TO &#39;USERNAME&#39;@&#39;localhost&#39;
</span></span></code></pre></div><p>Das ging schnell und hat auch gar nicht weh getan. ;)</p>
<h2 id="die-backup-strategie-umsetzen">Die Backup-Strategie umsetzen</h2>
<h3 id="die-zugangsdaten-ablegen">Die Zugangsdaten ablegen</h3>
<p>Die Informationen, die wir oben gesammelt haben, werden erstmal in der Datei <strong>backup.conf</strong> abgelegt. Bitte beachte, dass die Id für den öffentlichen Schlüssel nur ein Verweis ist. Die tatsächlichen Schlüssel liegen im Benutzerordner unter <em>~/.gnugpg/</em>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1"># mit diesem Wert steuerst du die Ausgabe von duplicity</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1"># je höher, desto mehr Debug-Nachrichten werden ausgegeben</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1"># das hilft bei der Fehlersuche</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="k">export</span> <span class="n">DUPLICITY_VERBOSITY</span><span class="o">=</span><span class="mi">2</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="c1"># die Passphrase ist das Passwort für den privaten Schlüssel</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1"># die Id für den öffentlichen Schlüssel wird utner GPG_PUP_KEY abgelegt</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="k">export</span> <span class="n">PASSPHRASE</span><span class="o">=</span><span class="n">secret_gpgp_key_password</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="k">export</span> <span class="n">GPG_PUB_KEY</span><span class="o">=</span><span class="n">public_gpgp_key_id</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="c1"># dieser Ordner wird für die lokalen Backups verwendet</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="k">export</span> <span class="n">BASE_PATH_BACKUP</span><span class="o">=/</span><span class="n">private</span><span class="o">-</span><span class="n">backup</span><span class="o">/</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="c1"># dieser Ordner enthält die temporären MySQL-Dumps sowie den Cache von duplicity</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="k">export</span> <span class="n">BASE_PATH_TEMP</span><span class="o">=/</span><span class="n">private</span><span class="o">-</span><span class="n">backup</span><span class="o">/</span><span class="n">temp</span><span class="o">/</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="k">export</span> <span class="n">LOG_FILE</span><span class="o">=</span><span class="n">backup</span><span class="o">.</span><span class="n">log</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="c1"># das sind die Zugangsdaten zu deinem WebDav-Anbieter</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="k">export</span> <span class="n">WEBDAV_USER</span><span class="o">=</span><span class="n">webdav_user</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="k">export</span> <span class="n">WEBDAV_PASSWORD</span><span class="o">=</span><span class="n">webdav_password</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="k">export</span> <span class="n">WEBDAV_URL</span><span class="o">=</span><span class="n">somewhere</span><span class="o">.</span><span class="n">server</span><span class="o">.</span><span class="n">de</span><span class="o">/</span><span class="n">webdav</span><span class="o">.</span><span class="n">php</span><span class="o">/</span><span class="n">folder</span><span class="o">/</span><span class="n">backup</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">
</span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="c1"># schließlich hinterlegst du noch eine E-Mail-Adresse </span>
</span></span><span class="line"><span class="ln">23</span><span class="cl"><span class="c1"># an die Fehlernachrichten geschickt werden </span>
</span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="k">export</span> <span class="n">SUPERVISOR_EMAIL</span><span class="o">=</span><span class="n">error_messages</span><span class="err">@</span><span class="n">foobar</span><span class="o">.</span><span class="n">com</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="c1"># und die E-Mail-Adresse des Absenders</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl"><span class="k">export</span> <span class="n">LOCAL_EMAIL</span><span class="o">=</span><span class="n">sender</span><span class="err">@</span><span class="n">foobar</span><span class="o">.</span><span class="n">com</span>
</span></span></code></pre></div><p>Die Zugangsdaten für den MySQL-Server gehören in eine andere Datei, nämlich <strong>database.conf</strong>:</p>
<p>[client]
user=mysql_user
password=mysql_password
host=localhost</p>
<h3 id="die-ordner-der-virtuellen-hosts-sichern">Die Ordner der virtuellen Hosts sichern</h3>
<p>Im Folgenden werde ich die Shell-Scripte und den Prozess ganz kurz erklären.</p>
<p>Zunächst will ich zwei Server-System unterstützen: nginx und apache2. Dazu frage ich den ersten Parameter ab:</p>
<p>if [[ $1 == &lsquo;apache&rsquo;  ]]
then</p>
<pre><code>    SERVER\_SOFTWARE='apache'
</code></pre>
<p>elif [[ $1 == &rsquo;nginx&rsquo;  ]]
then
SERVER_SOFTWARE=&lsquo;nginx&rsquo;</p>
<p>else</p>
<pre><code>    echo 'Keine Server-Architektur angegeben, probiere mal nginx oder apache'
</code></pre>
<p>fi</p>
<p>Wie oben schon angedeutet, will ich nicht einmal das ganze Dateisystem sichern, sondern nur <strong>relevante Ordner</strong>. Dazu muss ich erwähnen, dass ich für jede Domain eine Konfigurations-Datei angelegt habe - so ist es im übrigen auch üblich (siehe z.B. <em>/etc/apache2/sites-enabled/</em>). Jede dieser Dateien enthält den Verweis auf den Ordner der jeweiligen Domain (oft z.B. <em>/var/www/&hellip;</em>) Diese Informationen gilt es nun automatisch herauszufinden. Ich nutze dafür zunächst den folgenden Aufruf, der mir erstmal eine <strong>ungefilterte  Liste der gesamten Webserver-Konfiguration</strong> ausgibt:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">/usr/sbin/apache2ctl -S
</span></span></code></pre></div><p><img src="/2018/2018-08-23-den-eigenen-web-server-sichern/images/apachectl-ausgabe.png" alt=""></p>
<p>Die Ausgabe ist stark gekürzt und enthält natürlich mehr als nur eine Domain und diese auch immer doppelt - einmal für https und einmal für http. Ich benötige aus dieser Liste nun einmal den Pfad zur Konfigurations-Datei jeder Domain. Dazu reduziere ich die Ausgabe also auf die gewünschten Zeilen und extrahiere dann mit <em>awk</em> und <em>sed</em> den Verweis zu der jeweiligen Konfigurations-Datei. Das ist der komplette Aufruf:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">/usr/sbin/apache2ctl -S | grep &#34;port 80 namevhost&#34; | awk -F &#39; &#39; &#39;{ print $5 }&#39; | sed -E &#39;s/[:()]//g&#39; | sed -E &#39;s/[ 0-9]$//g&#39;
</span></span></code></pre></div><p>Das Ergebnis ist eine Liste von Konfigurationsdateien, die ich mit <em>grep</em> nach der Angabe des Ordners durchsuchen kann:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">grep -oE &#39;DocumentRoot \&#34;(.*)\&#34;&#39; $configFile | awk -F &#39; &#39; &#39;{ print $2 }&#39; | sed -E &#39;s/[&#34;]//g&#39;
</span></span></code></pre></div><p>Diesen Ordner kann ich dann an das Backup-Script übergeben, auf das ich später zurück kommen werden. Das ganze Script ist auf github verfügbar.</p>
<p>Ich muss hier allerdings erwähnen, dass das ganze eine <strong>kleinen Nachteil</strong> hat: Es werden nur aktivierte virtuelle Hosts erkannt. Wer zusätzliche andere Ordner sichern will, die z.B. nicht über die virtual host-Konfiguration genutzt werden, muss dies per Hand tun - doch dazu später mehr.</p>
<p>Für nginx nutze ich eine etwas einfachere Variante: Ich nehme einfach alle Dateien mit der Endung conf aus dem Konfigurations-Ordner von nginx. Das funktioniert eben nur, solange du die Konfiguration zentral an einem Ort verwaltest. Der ganze Abschnitt sieht dann so aus:</p>
<p>if [[ $SERVER_SOFTWARE == &lsquo;apache&rsquo; ]]
then
configFilesString=$(/usr/sbin/apache2ctl -S | grep &ldquo;port 80 namevhost&rdquo; | awk -F &rsquo; &rsquo; &lsquo;{ print $5 }&rsquo; | sed -E &rsquo;s/[:()]//g&rsquo; | sed -E &rsquo;s/[ 0-9]$//g&rsquo;)
configFiles=($(echo &ldquo;$configFilesString&rdquo; | tr &lsquo;,&rsquo; &rsquo; &lsquo;))</p>
<p>elif [[ $SERVER_SOFTWARE == &rsquo;nginx&rsquo; ]]
then</p>
<pre><code>    configFiles=(/etc/nginx/conf.d/\*.conf)
</code></pre>
<p>fi</p>
<p> </p>
<p><strong>Update November 2018:</strong></p>
<p><em>Da ich mittlerweile auf nginx und php-fpm umgestiegen bin, habe ich auch das Script entsprechend angepasst. Es kann nun für beide Server-Typen angewendet werden.</em></p>
<p>Nun kann ich jede Config-Datei einmal einlesen um herauszubekommen, an welcher Stelle im Dateisystem sich der Ordner mit dem Document Root befindet - den wollen wir ja schließlich sichern:</p>
<p>if [[ $SERVER_SOFTWARE == &lsquo;apache&rsquo; ]]
then</p>
<pre><code>srcFolder=$(grep -oE 'DocumentRoot \\&quot;(.\*)\\&quot;' $configFile | awk -F ' ' '{ print $2 }' | sed -E 's/\[&quot;\]//g')
dstFolder=$(basename $srcFolder)
</code></pre>
<p>elif [[ $SERVER_SOFTWARE == &rsquo;nginx&rsquo; ]]
then</p>
<pre><code>srcFolder=$(grep -oE 'root (.\*);' $configFile | awk -F ' ' '{ print $2 }' | sed -E 's/\[;\]//g')
dstFolder=$(basename ${srcFolder%htdocs})
</code></pre>
<p>fi</p>
<p> </p>
<h3 id="die-datenbanken-des-mysql-servers-sichern">Die Datenbanken des MySQL-Servers sichern</h3>
<p>Nun geht es an die Datenbanken. Dazu nutze ich den CLI-MySQL-Client und frage erstmal einfach alle Datenbanken ab:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">mysql --defaults-extra-file=database.conf -Bse &#39;show databases&#39;
</span></span></code></pre></div><p>Die Zugangsdaten zum Server übergebe ich in der Datei <strong>database.conf</strong>. Ich könnte das auch über die Kommandozeile tun, würde dann aber eine Warnung von MySQL erhalten, dass das nicht sicher sei:</p>
<blockquote>
<p><em>Warning: Using a password on the command line interface can be insecure.</em></p></blockquote>
<p>Da die Ausgabe von mysql nur einen String zurückgibt, muss ich den erst in ein Array umwandeln, dass ich dann durch-loopen kann. Dazu gibt es zwei Wege - den unteren finde ich etwas eleganter. Entscheide dich einfach für einen:</p>
<p>databasesArray=($(echo &ldquo;$databasesString&rdquo; | tr &lsquo;,&rsquo; &rsquo; &lsquo;))
IFS=&rsquo;_&rsquo; read -r -a databasesArray&laquo;&lt; &ldquo;$databasesString&rdquo;</p>
<p>Nun hast du also ein Array, dass deine Datenbanken enthält. Als nächstes brauchst du eine Schleife um für jede Datenbank ein Dump anzulegen:</p>
<p>ignoreDatabases=[&lsquo;information_schema,sys,performance_schema&rsquo;]
for database in &ldquo;${databasesArray[@]}&rdquo;
do</p>
<pre><code>    if \[\[ ! &quot; ${ignoreDatabases\[\*\]} &quot; == \*&quot;${database}&quot;\* \]\]
    then
        ...
    fi
</code></pre>
<p>done</p>
<p>Wie du siehst, habe ich noch eine Abfrage eingebaut, damit nicht benötigte System-Datenbanken ausgelassen werden. Jetzt kümmern wir uns um den eigentlichen Dump. Die folgenden Zeilen kommen an die Stelle mit den drei Punkten&hellip;</p>
<p>Jetzt werden die Daten aus der jeweiligen Datenbank gezogen. Wenn <strong>mysqldump</strong> einen Fehler zurück gibt, schicke ich mir diesen per E-Mail. Danach wird das Script aufgerufen, dass den Dump mit duplicity an einen &ldquo;sicheren&rdquo; Ort kopiert. Zum Abschluss wird der Dump wieder entfernt.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln"> 1</span><span class="cl">result=&#34;$( ( mysqldump --defaults-extra-file=database.conf ${database} &gt; ${BASE\_PATH\_TEMP}${database}.sql ) 2&gt;&amp;1 )&#34;
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">len=${#result}
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">if \[ &#34;$len&#34; -gt &#34;0&#34; \]
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">then
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">	echo $result | mail -s &#34;Error when dumping mysql database ${database}&#34; $SUPERVISOR\_EMAIL -r $LOCAL\_EMAIL
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">fi
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">./backupFilesystem.sh -f ${BASE\_PATH\_TEMP}${database}.sql -d &#34;${BASE\_PATH\_BACKUP}databases/${database}&#34;
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl">rm ${BASE\_PATH\_TEMP}${database}.sql
</span></span></code></pre></div><p> </p>
<p>Eine Sache gibt es zu beachten, die ich hier nicht weiter beschreiben: Ich nutze &ldquo;<strong>mail</strong>&rdquo; um die Fehlernachrichten zu versenden. Ihr könnte hier einen eigenen E-Mail-Client oder eine andere Variante der Fehlerbenachrichtigung nutzen, das bleibt euch überlassen.</p>
<h3 id="die-daten-mit-duplicity-verschlüsselt-sichern">Die Daten mit duplicity verschlüsselt sichern</h3>
<p>Nun geht es ans Eingemachte bzw. die tatsächliche Datensicherung. Das Script <strong>backupFilesystem.sh</strong> erwartet zwei Parameter: Die Dateien bzw. der Ordner, der gesichert werden soll und der Name des Zielordners.</p>
<p>Danach wird duplicity mehr als ein mal aufgerufen. Zunächst wird, wenn das letzte Vollbackup älter ist als 1 Monat, ein komplettes Backup angelegt. Danach wird duplicity angewiesen, Backups, die älter sind als 12 Monate, zu entfernen. Dann werden außerdem die inkrementellen Backups entfernt, die älter sind als 1 Monat. Das ganze wird einmal aufgerufen um die Backups lokal abzulegen und dann ein 2. Mal für den WebDav-Speicher.</p>
<p>Wer Ordner und Dateien <strong>manuell sichern</strong> will, kann also dieses Script mit den entsprechenden Parametern aufrufen.</p>
<h3 id="automatisieren-mit-cron">Automatisieren mit cron</h3>
<p>Jetzt muss der ganze Spaß natürlich noch automatisch laufen. Dazu werden die folgende Zeilen in die Datei <em>/etc/cron.d/dailyBackup</em> gepackt:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl"># m h dom mon dow user  command
</span></span><span class="line"><span class="ln">2</span><span class="cl">0 1 * * * root /bin/bash /backup/backupVirtualhosts.sh
</span></span><span class="line"><span class="ln">3</span><span class="cl">0 2 * * * root /bin/bash /backup/backupDatabase.sh
</span></span></code></pre></div><p>Willst du zusätzliche Ordner sichern, kannst du das über das Script <em>backupFilesystem.sh</em> tun, z.B:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">0 1 * * * root /bin/bash /backup/backupFilesystem.sh -f /home/ -d /private-backup/home/
</span></span></code></pre></div><h3 id="github">Github</h3>
<p>Die gesammelten Scripte und Vorlagen für die Konfigurationsdateien findest du auf <a href="https://github.com/nickyreinert/completeWebServerBackup">github.com</a>. Du kopierst einfach den Inhalt des Ordners <em>scripts</em> an einen Ort auf deinen Server, wie z.B. <em>/backup.</em></p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> backup, bash, hosting, shell, web-server</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>hosting</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Den eigenen Web-Server sichern - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>tutorial</dc:type>
      
      
    </item>
  </channel>
</rss>