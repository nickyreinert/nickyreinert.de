<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" 
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Programmierung auf Nicky Reinert</title>
    <link>https://nickyreinert.de/topics/programmierung/</link>
    <description>Blog &amp; Projekte von Nicky Reinert (Institut für digitale Herausforderungen): Webentwicklung &amp; Software Development, SEO &amp; Analytics, Hosting &amp; DevOps, WordPress &amp; Hugo, Tools &amp; Projekte, Datenschutz und digitale Kultur – plus Texte zu KI sowie Autismus &amp; Gesellschaft.</description>
    <generator>Hugo 0.148.2</generator>
    <language>de</language>
    <managingEditor></managingEditor>
    <webMaster></webMaster>
    <copyright></copyright>
    <lastBuildDate>Mon, 15 Jan 2024 12:19:31 +0100</lastBuildDate><atom:link href="https://nickyreinert.de/topics/programmierung/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>Die Nerd Enzyklopädie 45 - 80 Spalten und die Legende vom Pferdehintern</title>
      <link>https://nickyreinert.de/2024/2024-01-15-nerd-enzyklop%C3%A4die-45---80-spalten-und-die-legende-vom-pferdehintern/</link>
      <pubDate>Mon, 15 Jan 2024 12:19:31 +0100</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2024/2024-01-15-nerd-enzyklop%C3%A4die-45---80-spalten-und-die-legende-vom-pferdehintern/</guid>
      <description>Für die einen ist sie unerforschtes Land, für die anderen die linke Westentasche: Die Kommandozeile! Eine Eigenschaft eint die meisten Kommandozeilen-Programme …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Erkundung aus der &#39;Nerd Enzyklopädie&#39; über die Ursprünge des 80-Zeichen-Spaltenstandards in der Informatik. Der Artikel beleuchtet historische Einflüsse wie Schreibmaschinen und Lochkarten (insbesondere IBMs 80-Spalten-Lochkarten) und diskutiert die Lesbarkeitsargumente. Humorvoll wird die Verbindung zur &#39;Pferdehintern-Legende&#39; hergestellt, um die oft obskuren Ursprünge technischer Standards zu illustrieren.</p>
          
          
          <p><strong>Hauptthemen:</strong> Computergeschichte, Standardisierung, Programmierung, Typografie, Nerd-Kultur, Humor</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Für die einen ist sie unerforschtes Land, für die anderen die <strong>linke</strong> <strong>Westentasche</strong>: Die <strong>Kommandozeile</strong>! Eine Eigenschaft eint die meisten Kommandozeilen-Programme unter <strong>Windows</strong>, <strong>MacOS</strong> und <strong>Linux</strong>: Sie sind in der Standard-Konfiguration <strong>80 Zeichen</strong> bzw. <strong>Spalten</strong> breit. Dieser Standard begegnet einem auch an anderen Orten, wie in <strong>Code Editoren</strong> oder <strong>Style Guides</strong> von Programmiersprachen, die 80 Zeichen pro Zeile als sinnvollen Standard beschreiben.</p>
<p><img src="/2024/2024-01-15-nerd-enzyklop%C3%A4die-45---80-spalten-und-die-legende-vom-pferdehintern/image_1.png" alt=""></p>
<p>Es gibt viele Erklärungsversuche für dieses Standard-Maß. Der erste liegt in der Lesbarkeit:</p>
<p>Sind die Zeilen zu kurz,
muss man beim Lesen
öfter die Zeile
wechseln, was den
Lesefluss
erschwert.</p>
<p>Sind sie zu lang, ist es sehr schwer, einzelne Zeilen zu unterscheiden.</p>
<p>In der Typographie gelten deshalb <strong>40 bis 90 Zeichen</strong> pro Zeile als sinnvoll, ideal sind mindestens <strong>60 Zeichen</strong> [<a href="https://www.semanticscholar.org/paper/Markus-Itkonen-Typography-and-readability-Itkonen-groteski/4b67cd16136d47682f547619e705e2151d2b98df">SEMAN1</a>]. Das erklärt allerdings noch nicht, warum wir in der elektronischen Datenverarbeitung 80 Zeichen bevorzugen.</p>
<p>Einer weiterer Grund könnte die technische Limitierung alter <strong>Schreibmaschinen</strong> sein. Diese konnten in der Regel nur <strong>70 bis 80 Zeichen</strong> pro Zeile verarbeiten. Hier spielte auch die Breite des Papiers eine wichtige Rolle: Der US-Standard „<strong>Letter</strong>“ erlaubte mit seinem <strong>8,5 x 11 Zoll</strong> in etwa <strong>85 bis 102 Zeichen pro Zeile</strong> bei einer Schriftgröße von <strong>10 bis 12 Punkten</strong>. Berücksichtigt man den linken und rechten Rand, kam man auf <strong>55–78 Zeichen pro Zeile</strong> [<a href="https://en.wikipedia.org/wiki/Characters_per_line">WIKI15</a>].</p>
<p>Und dann gibt es noch diese Erklärung: Das 80-Zeichen-Limit stammte von den Terminals der <strong>1960er</strong> und <strong>1970er</strong> Jahre. Dort nutze man ebenfalls <strong>80 Spalten bei 24 bis 25 Zeilen</strong>. Damit orientierte man sich an den damals üblichen <strong>Lochkarten</strong>. Lochkarten waren zu dieser Zeit weit verbreitete Datenträger. Sie enthielten auf einer Zeile bis zu <strong>80 Löcher</strong>. Zwar gab es auch Lochkarten mit mehr oder weniger Spalten. Aber <strong>IBM</strong>, damals schon ein Big-Player, hatte <strong>80-Spalten-Lochkarten</strong> im Angebot und diese Konfiguration sozusagen als Standard etabliert [<a href="https://en.wikipedia.org/wiki/Punched_card">WIKI16</a>].</p>
<p>Warum IBM ausgerechnet 80 Löcher pro Zeile wählte, ist nicht sicher belegt. Einerseits aus den oben schon genannten ergonomischen Gründen, sicher aber auch aus technischen Gründen: So konnten genug Löcher mit einer sinnvollen Größe auf dem Standard-Papier untergebracht werden.</p>
<p>Mehr Löcher würden die Integrität der Lochkarten stören, kleinere Löchere wären anfälliger für Fehler und weniger und größere Löcher wären unwirtschaftlich. Außerdem basierten die IBM-Lochkarten auf einer weitaus älteren Maschine: <strong>Holleriths Tabulatormaschine</strong>. <strong>Herman Hollerith</strong> erfand die Tabulatormaschine um <strong>1890</strong>, um die US Volkszählung zu unterstützen.</p>
<p>Ab hier geht die Geschichte sehr verworrene Wege: Holleriths Lochkarten könnten auf den Lochkarten basieren, die <strong>Basile Bouchon</strong> um <strong>1725</strong> erfand, um seinen „<strong>automatischen Webstuhl</strong>“ zu steuern; damals noch einfaches perforiertes Papier. <strong>Bouchon</strong> hat sich für seine Entwicklung vermutlich am Standard für Banknoten orientiert: Um <strong>1400</strong> nutze man das Papierformat “<strong>British Imperial Foolscap</strong>“, um Banknoten zu drucken: Auf einer Seite wurden <strong>8 Banknoten</strong> in <strong>2 Spalten</strong> angeordnet. Man könnte nun noch etwas weiter gehen: Die Breite des Papiers lässt sich auf den Herstellungsprozess zurückführen: Die Spannweite der Arme der Arbeiter:innen während der Papierherstellung gibt ein natürliches Maß für die maximale Breite der Papierbögen vor.</p>
<p>Das Standardmaß „80 Zeichen pro Seite“ kann also, mit etwas Fantasie und Augenzwinkern, also auf die Spannbreite der Arme des Menschen zurückgeführt werden. Und das erinnert stark an die Herleitung der Durchmesser von <strong>Glasflaschen</strong>, der sich über <strong>Europaletten</strong>, die <strong>Spurbreite</strong> von <strong>Schienen</strong> schließlich auf die <strong>Breite von Pferdehintern</strong> zurückzuführen lässt: die sogenannte <strong>Pferdehintern-Geschichte</strong> (<strong>Horse Ass Story</strong>) — bei der es sich übrigens auch nur um eine urbane Legende handelt [<a href="https://parovoz.com/spravka/standardgauge-de.html">PARO1</a>].</p>
<p>Nachdem wir uns nun mühsam durch mehr als 600 Jahre Geschichte gekämpft haben, kommt ein klitzekleiner Dämpfer: Auch wenn <strong>80 Zeichen pro Zeile</strong> weit verbreitet sind, werden mitunter auch <strong>72, 79, 100, 132</strong> oder gar <strong>180</strong> Zeichen pro Zeile gerne als Standard genutzt [<a href="https://en.wikipedia.org/wiki/Characters_per_line">WIKI18</a>]. Und vermutlich versteckt sich hinter jeder dieser Angaben eine kleine Pferdehintern-Legende…</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> IT-Geschichte, Standard, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 45 - 80 Spalten und die Legende vom Pferdehintern - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 43 - 0x5f3759df</title>
      <link>https://nickyreinert.de/2024/2024-01-01-nerd-enzyklop%C3%A4die-43---0x5f3759df/</link>
      <pubDate>Mon, 01 Jan 2024 12:19:31 +0100</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2024/2024-01-01-nerd-enzyklop%C3%A4die-43---0x5f3759df/</guid>
      <description>In der Informationstechnologie gibt es zwei wichtige Innovationstreiber: Die Porno-Industrie und die Spiele-Industrie. Quake III ist ein wegweisender Vertreter …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine detaillierte Erkundung aus der &#39;Nerd Enzyklopädie&#39; über den berühmten &#39;Fast Inverse Square Root&#39;-Algorithmus (&#39;0x5f3759df&#39;) aus dem Quellcode von Quake III. Der Artikel erklärt die mathematischen Grundlagen der Vektornormierung, die Funktionsweise des Algorithmus mit seinem &#39;evil floating point bit hack&#39; und der &#39;magischen Konstante&#39;, und beleuchtet die ungeklärte Urheberschaft sowie die heutige Relevanz.</p>
          
          
          <p><strong>Hauptthemen:</strong> Algorithmen, Computergrafik, Floating Point, Programmierung, IT-Geschichte, Nerd-Kultur, Quake III</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> advanced</p>
          
        </div>
        
        
        <p>In der Informationstechnologie gibt es zwei wichtige Innovationstreiber: Die <strong>Porno-Industrie</strong> und die <strong>Spiele-Industrie</strong>. <strong>Quake III</strong> ist ein wegweisender Vertreter der Spiele-Industrie. Der Pionier unter den Ego-Shootern wurde <strong>1999</strong> veröffentlicht, eroberte die Herzen der spielenden Gemeinde im Sturm und glänzte mit für die damaligen Verhältnisse herausragenden optischen Effekten. Und das trotz vergleichsweise geringer Anforderungen an die Hardware.</p>
<p><img src="/2024/2024-01-01-nerd-enzyklop%C3%A4die-43---0x5f3759df/image_1.png" alt=""></p>
<p>Nerd-Enzyklopädie #43</p>
<p>Um das zu ermöglichen nutzte <strong>Quake</strong> die „<strong>fast inverse square root</strong>“ (zu Deutsch klingt es etwas sperriger: „Schnelle umgekehrte Quadratwurzel”).</p>
<p>Aber… warum? Um in einer dreidimensionalen Welt bestimmte physikalische Effekt zu simulieren, nutzt man <strong>Vektoren</strong>. Nehmen wir z.B. die Berechnung von <strong>Lichtreflektionen</strong>: Um den Einfalls- und Ausfallswinkel auf einer beliebigen Fläche korrekt zu berechnen, benötigt man einen Vektor, genau genommen einen <strong>normierten Vektor</strong>.</p>
<p>Die Formel für die Berechnung des Betrages eines Vektor (sprich seiner „Länge“) sieht folgendermaßen aus:</p>
<p><img src="/2024/2024-01-01-nerd-enzyklop%C3%A4die-43---0x5f3759df/image_2.png" alt=""></p>
<p>Wer in der Schule gut aufgepasst hat, sollte davon nicht sonderlich beeindruckt sein. Es handelt sich im Prinzip um den <strong>Satz des Pythagoras</strong> <strong>auf Steroiden</strong>.</p>
<p>Ein <strong>normierter Vektor</strong> hat einen Betrag von 1, die Richtung bleibt unverändert:</p>
<p><img src="/2024/2024-01-01-nerd-enzyklop%C3%A4die-43---0x5f3759df/image_3.png" alt=""></p>
<p>Um einen Vektor zu normieren, multipliziert man ihm mit dem Kehrwert seines Betrages:</p>
<p><img src="/2024/2024-01-01-nerd-enzyklop%C3%A4die-43---0x5f3759df/image_4.png" alt=""></p>
<p>Diese Formel muss <strong>millionenfach</strong> ausgeführt werden, wenn man eine Lichtbrechung mit einer halbwegs ansehnlichen Qualität in einem Spiel erzeugen möchte.</p>
<p>Für die Summen und Potenzen (das sind ja letztlich auch nur Summen) ist das kein Problem, wohl aber für die Wurzel bzw. den Kehrwert der Wurzel — die <strong>inverse square root</strong>.</p>
<p>Anfangs behalf man sich mit riesigen Tabellen, die die Ergebnisse zahlreicher Berechnungen enthielten. Das sprengt irgendwann den Rahmen und man musste eine andere Lösung finden. Und diese ist und war <strong>elegant und rebellisch</strong> zugleich — der „<strong>fast inverse square root</strong>“ Algorithmus:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln"> 1</span><span class="cl">    <span class="ne">float</span> <span class="n">Q_rsqrt</span><span class="p">(</span> <span class="ne">float</span> <span class="n">number</span> <span class="p">)</span>  
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="p">{</span>  
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">        <span class="n">long</span> <span class="n">i</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">        <span class="ne">float</span> <span class="n">x2</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">        <span class="k">const</span> <span class="ne">float</span> <span class="n">threehalfs</span> <span class="o">=</span> <span class="mf">1.5</span><span class="n">F</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">        <span class="n">x2</span> <span class="o">=</span> <span class="n">number</span> <span class="o">*</span> <span class="mf">0.5</span><span class="n">F</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="n">y</span> <span class="o">=</span> <span class="n">number</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        <span class="n">i</span> <span class="o">=</span> <span class="o">*</span> <span class="p">(</span> <span class="n">long</span> <span class="o">*</span> <span class="p">)</span> <span class="o">&amp;</span><span class="n">y</span><span class="p">;</span> <span class="o">//</span> <span class="n">evil</span> <span class="n">floating</span> <span class="n">point</span> <span class="n">bit</span> <span class="n">level</span> <span class="n">hacking</span>  
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="n">i</span> <span class="o">=</span> <span class="mh">0x5f3759df</span> <span class="o">-</span> <span class="p">(</span> <span class="n">i</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span> <span class="p">);</span> <span class="o">//</span> <span class="n">what</span> <span class="n">the</span> <span class="n">fuck</span><span class="err">?</span>   
</span></span><span class="line"><span class="ln">10</span><span class="cl">        <span class="n">y</span> <span class="o">=</span> <span class="o">*</span> <span class="p">(</span> <span class="ne">float</span> <span class="o">*</span> <span class="p">)</span> <span class="o">&amp;</span><span class="n">i</span><span class="p">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y</span> <span class="o">*</span> <span class="p">(</span> <span class="n">threehalfs</span> <span class="o">-</span> <span class="p">(</span> <span class="n">x2</span> <span class="o">*</span> <span class="n">y</span> <span class="o">*</span> <span class="n">y</span> <span class="p">)</span> <span class="p">);</span> <span class="o">//</span> <span class="mi">1</span><span class="n">st</span> <span class="n">iteration</span>  
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="o">//</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y</span> <span class="o">*</span> <span class="p">(</span> <span class="n">threehalfs</span> <span class="o">-</span> <span class="p">(</span> <span class="n">x2</span> <span class="o">*</span> <span class="n">y</span> <span class="o">*</span> <span class="n">y</span> <span class="p">)</span> <span class="p">);</span> <span class="o">//</span> <span class="mi">2</span><span class="n">nd</span> <span class="n">iteration</span><span class="p">,</span> <span class="n">this</span> <span class="n">can</span> <span class="n">be</span> <span class="n">removed</span>  
</span></span><span class="line"><span class="ln">12</span><span class="cl">        <span class="k">return</span> <span class="n">y</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="p">}</span>
</span></span></code></pre></div><p>In dieser Funktion passieren einige spannende, um nicht zu sagen verrückte Dinge. Wie zum Beispiel der „<strong>evil floating point bit hack</strong>“.</p>
<p>Dazu ein kurzer Ausflug in das mysteriöse Reich der <strong>Fließkommazahlen</strong>: Diese zeichnen sich durch eine spezielle Art der Speicherung aus, damit in unseren binär geprägten Computern (Nullen und Einsen) auch <strong>Dezimalzahlen</strong> verarbeiten werden können. Dazu wird die Dezimalzahl als Kombination von <strong>Vorzeichen</strong>, <strong>Exponent</strong> und <strong>Mantisse</strong> abgespeichert: Das <strong>IEEE-754</strong> Format!</p>
<p>Der Nachteil: Beim Zurückrechnen kann es zu Ungenauigkeiten kommen. So wird der Wert 3,3 nach IEEE-754 binär abgespeichert:</p>
<p><code>01000001001000011001100110011010</code></p>
<p>Berechnet man diesen Wert zurück in ein Dezimalzahl, erhält man:</p>
<p><code>3.2999999523162841796875</code></p>
<p>Nicht schön, aber selten und meistens auch ausreichend genau.</p>
<p>Der „<strong>evil floating point bit hack</strong>“ schnappt sich den binären Wert der Fließkommazahl und interpretiert ihn schlicht als Ganzzahl, ohne die aufwendige Berechnung nach <strong>IEEE-754</strong>. Aus 3,3 wird damit der „evil integer“ <strong>1.079.194.419</strong>.</p>
<p>Als nächstes kommt es zu einer unter Fachleuten auch als <strong>What-The-Fuck-Transformation</strong> bezeichneten <strong>What-The-Fuck-Transformation</strong>. Unser „evil integer“ wird zunächst per <strong>Bitshift</strong> halbiert (ein bitweises verschieben nach links oder rechts kommt einer Multiplikation oder Division mit 2 gleich — probier es mal aus!). Das Ergebnis wird von einer <strong>höchstseltsamen Konstante</strong> abgezogen. Da ist sie — sie ist wunderschön:</p>
<p><code>0x5f3759df</code></p>
<p>Der dezimale Wert dieser mathematischen Grazie ist <strong>1.597.463.007</strong> — nicht sonderlich spannend. Behandelt man den Wert aber ebenfalls als Fließkommazahl nach <strong>IEEE-754</strong>, erhält man diese Kombination aus Exponent und Mantisse:</p>
<p><code>0.10111110.01101110101100111011111</code></p>
<p>Daraus ergibt sich ein <strong>Exponent</strong> von <strong>63</strong> und die <strong>Mantisse</strong> mit <strong>1,43243014812469482421875</strong>. Zusammen errechnet sich daraus die ziemlich große Zahl: <strong>13.211.836.172.961.054.720</strong> Und das ist eine ziemlich gute Annäherung an die Wurzel von <code>2¹²⁷</code>, nämlich <code>13.043.817.825.332.782.212,349…</code></p>
<p>Das Ergebnis dieser wahnwitzigen Operation wird nun über einen umgedrehten „<strong>evil floating point hack</strong>“ zurück in eine Fließkommazahl „umgewandelt“.</p>
<p>Abschließend findet noch ein weiterer kleiner Trick aus der wunderbaren Welt der Mathematik Anwendung: Mittels des <strong>Newton-Verfahrens</strong> erfolgt eine Korrektur des bisherigen Ergebnisses.</p>
<p>Schließlich kann die Funktion den <strong>Kehrwert einer Wurzel</strong> in etwa genauso gut bestimmen, wie eine konventionelle Berechnung, aber weitaus schneller.</p>
<p>Diese geniale Optimierung der Berechnung wird übrigens oft alleine <strong>John Carmack</strong> zugeschrieben, einem der Schöpfer von <strong>Quake III</strong>. Tatsächlich führen die Wurzeln (<strong>no pun intended…</strong>) aber viel weiter zurück. So basiert die Funktion wohl auf den Arbeiten vieler schlauer Köpfe.</p>
<p>Bereits <strong>1974</strong> tauchte eine ähnliche Routine im Quellcode für den <strong>PDP-11</strong> auf [<a href="https://minnie.tuhs.org/cgi-bin/utree.pl?file=V5%2Fusr%2Fsource%2Fs3%2Fsqrt.s"><strong>TUHS1</strong></a>]. In einem Quellcode von <strong>1993</strong> findet sich ein Kommentar mit dem Verweis auf eine wissenschaftliche Arbeit von <strong>William Kahan</strong> und <strong>K.C. Ng</strong> aus <strong>1983</strong>, in dem sie genau diese optimierte Methode beschreiben. Kahan gilt übrigens als „Architekt“ der IEEE-Fließkommazahlen-Aritmetik. <strong>1997</strong> präsentierte <strong>Jim Blinn</strong> in den „Floating-point tricks“ eine vergleichbare Funktion, dort noch ohne die „magische Konstante“ [<a href="https://ieeexplore.ieee.org/document/595279">IEEE2</a>].</p>
<p>Aber zurück zu John Carnack, der die Urheberschaft ganz explizit von sich wies:</p>
<blockquote>
<p>Not me, and I don’t think it is Michael [Abrash]. Terje Matheson perhaps?</p>
<p>~John Carmack, per E-Mail in 2004</p></blockquote>
<p>Der nächste „Verdächtige“ wäre <strong>Gary Tarolli</strong>, <strong>NVidia</strong>-Mitarbeiter der ersten Stunde und Mitbegründer von <strong>3Dfx</strong>. Dieser räumte ein, Mitte der 1990er Jahre die besagte Funktion genutzt und vielleicht sogar optimiert zu haben, weißt aber die eigentliche Urheberschaft ebenfalls von sich [<a href="https://www.beyond3d.com/content/articles/8/">BEYON1</a>].</p>
<p>Die Spur führt schließlich zu <strong>Greg Walsh</strong>, Ende der 1980er Jahre Entwickler bei der <strong>Ardent Computer Corporation</strong>. Inspiriert von der Arbeit seines Kollegen, dem Informatiker und Mathematiker <strong>Cleve Moler</strong>, Autor von <strong>MatLab</strong>, war es wohl Walsh, der die berüchtigte Funktion entwickelte.</p>
<p>Übrigens: Auch zwischen Moler und Kahan gibt es eine Verbindung. Zwar ist nicht klar wie eng die Bekanntschaft war, aber sie sind sich zumindest einmal über den Weg gelaufen [<a href="https://blogs.mathworks.com/cleve/2014/07/07/floating-point-numbers/">MATH1</a>].</p>
<p>Zurück zu Ardent: Das Unternehmen wurde damals unter anderem von <strong>Kubota</strong> “finanziell unterstützt”, einem japanischen Mischkonzern. Für Kubota arbeitete seinerzeit auch <strong>Gary Tarolli</strong>! So gelang der Quellcode wohl in die Hände von Tarolli. Die Verbindung zu John Carmack und <strong>id Software</strong> entstand dann vermutlich über <strong>Brian Hook</strong>, einem der ersten Angestellten von 3Dfx und später auch Entwickler bei id Software [<a href="https://www.quakewiki.net/profile-retro-interview-brian-hook/">QUAKE1</a>]. Und so schließt sich der Kreis…</p>
<p>Der <strong>Fast Inverse Square Root Algorithmus</strong> hat nichts an Faszination eingebüßt, vielleicht aber etwas an Bedeutung. Moderne Computer ermöglichen mittlerweile — dank hoher Leistung und angepasster Befehlssätze — eine sehr schnelle Berechnung von Wurzeln und deren Kehrwerten.</p>
<p>Hinter der mysteriösen Konstante und der merkwürdigen Optimierung steckt also eine verworrene Geschichte und am Ende fast schon der tragische Untergang in die Bedeutungslosigkeit. Wenn das kein Material für einen <strong>Nerd-Blockbuster</strong> ist…</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Algorithmus, Programmierung, Nerd-Enzyklopädie, IT-Geschichte, Quake</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 43 - 0x5f3759df - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 29 - Programmieren mit Emojis</title>
      <link>https://nickyreinert.de/2023/2023-05-19-nerd-enzyklop%C3%A4die-29---programmieren-mit-emojis/</link>
      <pubDate>Fri, 19 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2023/2023-05-19-nerd-enzyklop%C3%A4die-29---programmieren-mit-emojis/</guid>
      <description>
Texte bestehen aus Sätzen, Sätze bestehen aus Wörtern und Wörter bestehen aus Buchstaben bzw. genauer Schriftzeichen. Wir alle kennen es, das lateinische …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine unterhaltsame Erkundung aus der &#39;Nerd Enzyklopädie&#39; über das Programmieren mit Emojis. Der Artikel erklärt die Grundlagen der Zeichenkodierung (Unicode, UTF-8) und beleuchtet die (begrenzten) Möglichkeiten, Emojis in gängigen Programmiersprachen zu verwenden. Zudem wird &#39;Emojicode&#39; vorgestellt, eine Programmiersprache, die ausschließlich auf Emojis basiert.</p>
          
          
          <p><strong>Hauptthemen:</strong> Programmierung, Emojis, Unicode, Zeichenkodierung, Programmiersprachen, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-19-nerd-enzyklop%C3%A4die-29---programmieren-mit-emojis/image1.png" alt=""></p>
<p>Texte bestehen aus Sätzen, Sätze bestehen aus Wörtern und Wörter bestehen aus Buchstaben bzw. genauer Schriftzeichen. Wir alle kennen es, das lateinische Alphabet, arabische Ziffern aber auch kyrillische Schriftzeichen oder die Sinogramme der chinesischen Schrift. All diese Symbole versteht der Computer dank einer großen Tabelle oder auch „ Zeichensatz“. Als Quasi-Standard hat sich in den letzten Jahren <strong>Unicode</strong> etabliert.</p>
<h2 id="hefte-raus-lerneinheit">Hefte raus, Lerneinheit!</h2>
<p>Ein <strong>Zeichensatz</strong> (engl. „<strong>character set</strong>“) beschreibt die Menge aller verfügbaren Zeichen. Das wäre z.B. ein sehr kleiner Zeichensatz, der nur die Großbuchstaben des lateinischen Alphabets darstellen kann:</p>
<pre><code>[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z]
</code></pre>
<p>Wird jedem Zeichen eine numerische Position zugeordnet, der sogenannte. „<strong>codepoint</strong>“, spricht man von einem <strong>kodierten Zeichensatz</strong> („<strong>coded character set</strong>“). Uns kleines Biespiel sieht dann so aus:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">  1 -&gt; A  
</span></span><span class="line"><span class="ln">2</span><span class="cl">  2 -&gt; B  
</span></span><span class="line"><span class="ln">3</span><span class="cl">  3 -&gt; C  
</span></span><span class="line"><span class="ln">4</span><span class="cl">  …  
</span></span><span class="line"><span class="ln">5</span><span class="cl">  26 -&gt; Z
</span></span></code></pre></div><p>Sehr weit verbreitet ist der Zeichensatz <strong>UCS</strong> (<strong>Universal Coded Character Set</strong>), besser bekannt <strong>Unicode,</strong> der in der <strong>ISO 10646</strong> definiert ist. Theoretisch umfasst Unicode einen Bereich von <strong>1.114.112</strong> codepoints. Diese sind in <strong>17 Ebenen</strong> (<strong>planes</strong>) zu je <strong>16 Bit</strong> aufgeteilt, also 65.536 codepoints pro Ebene. Aufgrund verschiedener technischer Vorgaben sind effektiv <strong>1.111.998</strong> codepoints nutzbar. Unicode enthält nicht nur die uns bekannten Buchstaben von A bis Z, Zahlen und Schriftzeichen anderer Sprachen, sondern mittlerweile auch Emojis:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">😆🫠😇
</span></span></code></pre></div><p>Um jedes der über 1 Mio. Zeichen ansprechen zu können, kann man auf <strong>UTF-32</strong> (<strong>Unicode Transformation Format</strong>) nutzen. UTF-32 besitzt einen 32 Bit (4 Byte) großen Adress-Bereich, um damit jedes beliebige Zeichen in Unicode zu kodieren. Das ist simpel, aber auch eine irrsinnige Platzverschwendung. Der häufigste deutsche Buchstabe „e“ wird wie folgt in UTF-32 kodiert:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    00 00 00 65
</span></span></code></pre></div><p>In binär:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    00000000000000000000000001100101
</span></span></code></pre></div><p>Ein Adress-Bereich mit 4 Byte um ein Zeichen abzubilden, für das 1 Byte ausreicht? Um Platz zu sparen, wurden Algorithmen entwickelt, die zwar etwas aufwendiger codieren, dafür aber weniger Platz verbrauchen. Sehr weit verbreitet ist <strong>UTF-8</strong>, eine — wenn man so will — „dynamische“ Kodierung.</p>
<p>UTF-8 wurde <strong>1992</strong> von <strong>Ken Thompson</strong> und <strong>Rob Pike</strong> entwickelt, zwei Programmierern des Betriebssystems <strong>Plan9</strong> (benannt nach dem gleichnamigen Film „<strong>Plan9 from outer Space</strong>“ von <strong>Ed Wood</strong>, dem angeblich „schlechtesten Science Fiction Film aller Zeiten“) [<a href="https://de.wikipedia.org/wiki/Plan_9_%28Betriebssystem%29">WIKI14</a>].</p>
<p>UTF-8 kodiert den ersten Bereich von Unicode mit 7 Bit — das erste Bit bzw. höchstwertige Bit ist immer 0. Das „e“ wird also folgendermaßen kodiert:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    65
</span></span></code></pre></div><p>In binär:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    01100101
</span></span></code></pre></div><p>Man belegt also nur noch 1 Byte anstatt 4. Will man exotische, also höherwertige Zeichen aus Unicode kodieren, hängt UTF-8 weitere Bytes an, bei denen die höchstwertigen Bits ebenfalls fest gesetzt werden. Das Euro-Zeichen wird in UTF-8 mit 3 Bytes dargestellt:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    E2 82 AC
</span></span></code></pre></div><p>In binär:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    11100010 10000010 10101100
</span></span></code></pre></div><h2 id="zurück-zum-thema">Zurück zum Thema</h2>
<p>Wie du siehst, sind Buchstaben für den Computer auch nur bestimmte Orte in einer großen Tabelle. Da die Unicode-Tabelle auch Emojis umfasst, sollte es doch eigentlich möglich sein, Emojis als Bezeichner für Funktionen und Variablen zu nutzen?</p>
<p>Ganz so leicht ist es leider nicht. Die gängigen Programmiersprachen haben einen festgelegten Bereich von Zeichen, die für derartige Deklarationen zulässig sind. Ein Ausweg sind <strong>Emoticons</strong>, also Zeichen, die als Emoji interpretiert werden können. Vor allem nicht-lateinische Schriften bieten eine Menge Möglichkeiten. In <strong>JavaScript</strong> ist z.B. folgendes möglich:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl">    <span class="k">var</span> <span class="err">ツ</span> <span class="o">=</span> <span class="err">„</span><span class="n">smile</span><span class="err">“</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln">2</span><span class="cl">    <span class="k">var</span> <span class="err">ൠ</span> <span class="o">=</span> <span class="err">„</span><span class="n">alien</span><span class="err">“</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln">3</span><span class="cl">    <span class="n">function</span> <span class="err">ಠ</span><span class="n">_ಠ</span> <span class="p">(){</span><span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="err">“</span><span class="n">Viel</span> <span class="n">Spaß</span> <span class="n">beim</span> <span class="n">Refactoring</span><span class="o">!</span><span class="err">”</span><span class="p">);}</span>
</span></span></code></pre></div><p>Es gibt allerdings auch eine Programmiersprache, die ausschließlich auf Emojis basiert: Emojicode [<a href="https://www.emojicode.org/">EMOJI1</a>]. Erfunden wurde die Sprache von <strong>Theo Weidmann</strong>. Und so sieht „<strong>Hello World</strong>“ in Emojicode aus:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    🏁 🍇  
</span></span><span class="line"><span class="ln">2</span><span class="cl">    😀 🔤Hello World!🔤❗️  
</span></span><span class="line"><span class="ln">3</span><span class="cl">    🍉
</span></span></code></pre></div>
        
        
        <div class="tags">
          <p><strong>Tags:</strong> Programmierung, Emojis, Nerd-Enzyklopädie, Sprache</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 29 - Programmieren mit Emojis - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 27 - Die Geschichte von Mel</title>
      <link>https://nickyreinert.de/2023/2023-05-13-nerd-enzyklop%C3%A4die-27---die-geschichte-von-mel/</link>
      <pubDate>Sat, 13 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2023/2023-05-13-nerd-enzyklop%C3%A4die-27---die-geschichte-von-mel/</guid>
      <description>
Die “Geschichte von Mel“ ist eine Reminiszenz an die frühen Jahre der Informationstechnologie. In der Geschichte verarbeitet Ed Nather seine Erlebnisse als …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Nacherzählung der berühmten Anekdote &#39;Die Geschichte von Mel&#39; aus der Computerprogrammierung. Der Artikel beleuchtet das Genie des legendären Programmierers Mel Kaye, seine unkonventionellen Optimierungstechniken in Assemblersprache und die Herausforderungen, die sein selbstmodifizierender Code für andere Entwickler darstellte, insbesondere am Beispiel eines manipulierten Blackjack-Spiels.</p>
          
          
          <p><strong>Hauptthemen:</strong> Computergeschichte, Programmierung, Assemblersprache, Folklore, Nerd-Kultur, Softwareentwicklung</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-13-nerd-enzyklop%C3%A4die-27---die-geschichte-von-mel/image1.png" alt=""></p>
<p>Die “<strong>Geschichte von Mel</strong>“ ist eine Reminiszenz an die frühen Jahre der Informationstechnologie. In der Geschichte verarbeitet <strong>Ed Nather</strong> seine Erlebnisse als Softwareentwickler bei der <strong>Royal McBee Computer Corporation</strong>, einem Hersteller von Computern.</p>
<p>In <strong>1956</strong> vertrieb die Royal McBee zusammen mit der <strong>General Precision Inc</strong>. den <strong>LGP-30</strong>, einen „<strong>röhrenbestückten Magnettrommelrechner</strong>“ [<a href="http://computermuseum.informatik.uni-stuttgart.de/dev/lgp30/">STUT1</a>]. Der Rechner kostete damals beeindruckende <strong>47.000 USD</strong>, was heute in etwa <strong>470.000 USD</strong> entspricht [<a href="https://en.wikipedia.org/wiki/LGP-30">WIKI8</a>].</p>
<p><strong>Melvin „Mel“ Kaye</strong> (geb. <strong>Kornitzky</strong>), Nathers Kollege, entwickelte für diesen Computer ein BlackJack-Spiel, das sich sehr großer Beliebtheit erfreute und z.B. auf Messen zu Demonstrationszwecken vorgeführt wurde.</p>
<p>Mit dem <strong>RPC 4000</strong> veröffentlichte die RoyalBee in <strong>1960</strong> einen leistungsfähigeren Nachfolger für den LGP-30. Das <strong>230-kg-Ungetüm</strong> ging damals für saftige <strong>87.500 USD</strong> über die hoffentlich stabile Ladentheke [<a href="https://en.wikipedia.org/wiki/LGP-30">WIKI8</a>]. Um auf Messen weiterhin für Unterhaltung zu sorgen, wurde Kaye damit beauftragt, sein BlackJack-Spiel auf den RPC 4000 zu portieren.<br>
Auf Anraten des Vertriebs bat die Geschäftsführung Kaye darum, einen Schalter einzubauen, mit dem sich einstellen lässt, dass der Computer verliert. Mutmaßlich, um den interessierten Käufen auf den Messen wohlwollend zu begegnen.</p>
<p>Nather porträtiert Kaye als <strong>Archetypen eines ethischen Hackers</strong>. Ein exzellenter Softwareentwickler mit Prinzipien. Kaye kam dem Wunsch der Geschäftsführung nicht ganz nach. Er implementierte eine umgekehrte Funktion und so sorgte der Schalter dafür, dass der Computer immer gewinnt.</p>
<p>Ein Ärgernis für die Geschäftsführung und den Vertrieb. Da Kaye die RoyalBee kurz darauf verließ, offensichtlich weil sich seine Werte nicht mit denen des Unternehmens deckten [<a href="https://melsloop.com/docs/the-story-of-mel/pages/preface">MELS1</a>], wurde Nather damit beauftragt, den „Bug“ zu beheben. Und das fiel ihm nicht sonderlich leicht, dafür hatte Kaye mit einigen programmatischen Hürden gesorgt.<br>
Nather beschreibt sein Vorgehen als Abenteuer und Kaye als „<strong>unbesungenes Genie</strong>“. Die technischen Finessen und Tricks, die Kaye in den Quellcode eingebaut hatte, beeindruckten Nather zutiefst:</p>
<blockquote>
<p>When the light went on it nearly blinded me.<br>
(The Story of Mel, Ed Nather, 1983)</p></blockquote>
<p>So berichtet Nather von Endlosschleifen und Quellcode, der sich selber modifizierte. Letztlich gelang es Nather nicht, den Bug zu beheben, vielleicht auch aus Respekt vor dessen Schöpfer. Also blieb die Funktion des Schalters bestehen: Er sorgte weiterhin dafür, dass der Computer gewinnt.</p>
<p>Wann genau sich die Geschichte zugetragen hat, ist nicht sicher überliefert. Nather verarbeitet das Geschehen in Gedichtform und veröffentlichte dies am <strong>21. Mai 1983</strong> im Usenet [<a href="http://www.catb.org/jargon/html/story-of-mel.html">CATB1</a>].</p>
<p>Vermutlich hätten wir nie erfahren, um wen es sich bei „Mel“ handelt. Nather hatte Kaye nicht direkt namentlich erwähnt. Erst in <strong>2012</strong> begann der Programmierer <strong>Anthony Cuozzo</strong> die Hintergründe der Geschichte zu recherchieren. Per E-Mail nahem er Kontakt zum vermeintlichen Kaye auf und erhielt genau eine Antwort [<a href="https://melsloop.com/docs/the-story-of-mel/pages/mel-kaye-cv">MELS2</a>]:</p>
<blockquote>
<p>Mel Kaye <a href="mailto:rimel3@roadrunner.com">rimel3@roadrunner.com</a><br>
Tue, Apr 17, 2012 at 12:01 PM<br>
To: acuozzo@<em><strong>.</strong></em>**<em><strong>.</strong></em><br>
— -<br>
Yes, I did, many, many years ago I worked for both of them.<br>
I believe I worked for Royal McBee first.<br>
Mel Kaye</p></blockquote>
<p>Danach hörte er nie wieder etwas von ihm.</p>
<p><em>Melvin Kaye verstarb 2018.</em></p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Computergeschichte, Programmierung, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 27 - Die Geschichte von Mel - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 25 - Bare Metal Programming</title>
      <link>https://nickyreinert.de/2023/2023-05-07-nerd-enzyklop%C3%A4die-25---bare-metal-programming/</link>
      <pubDate>Sun, 07 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2023/2023-05-07-nerd-enzyklop%C3%A4die-25---bare-metal-programming/</guid>
      <description>
Übersetzt heißt „bare metal programming“ etwa so viel wie „Programmieren am reinen Metall“. Gemeint ist damit, dass man eine Software entwickelt, die direkt …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Anekdote aus der &#39;Nerd Enzyklopädie&#39;, die das Konzept des &#39;Bare Metal Programming&#39; veranschaulicht. Der Artikel erzählt die Geschichte eines Entwicklers, der bei einem Programmfehler auf einem &#39;discrete component&#39; Computer buchstäblich mit einem Schraubenzieher in die Hardware eingreifen musste, um das System zu stoppen.</p>
          
          
          <p><strong>Hauptthemen:</strong> Programmierung, Hardware, Computergeschichte, Nerd-Kultur, Softwareentwicklung</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-07-nerd-enzyklop%C3%A4die-25---bare-metal-programming/image1.png" alt=""></p>
<p>Übersetzt heißt „bare metal programming“ etwa so viel wie „Programmieren am reinen Metall“. Gemeint ist damit, dass man eine Software entwickelt, die direkt mit der Hardware kommuniziert, ohne Umwege über Bibliotheken, Schnittstellen oder ein Betriebssystem.</p>
<p>Ein Entwickler, dessen Name nicht überliefert ist, weshalb das ganze vielleicht eher der Kategorie „sympathische Legende“ zuzuordnen ist, nahm den Begriff des „Bare Metal Programmings“ Ende der der 1980er etwas zu wörtlich. Er arbeitete an einem „discrete component“ Computer, also einem Computer, bei dem die Transistoren sichtbar im Gerät verbaut sind (der erste Supercomputer, der IBM 7030 von 1961, bestand aus 169.100 Transistoren. Damit benötigte alleine die CPU eine Fläche von knapp 83qm [<a href="http://ed-thelen.org/comp-hist/vs-ibm-stretch.html">EDTH1</a>].)</p>
<p>Das Programm unseres Entwicklers schien jedenfalls einen Bug zu haben, weshalb er versucht hat das Programm zu stoppen. Was ihm nicht gelang, da das System — bugbedingt — alle Steuersignale ignorierte. Auch der Versuch den Computer selber anzuhalten, war nicht von Erfolg gekrönt. Da er das Gerät — aus Angst vor Datenverlust — nicht einfach ausschalten wollte, rief er einen Techniker dazu.</p>
<p>Bei dieser Art von Computern konnte man recht leicht feststellen, an welcher Stelle ein Programm bzw. eine einzelne Anweisung verarbeitet wurde, da die zuständigen Komponenten ja buchstäblich sicht- und greifbar waren. Man sah sich also zu einer ungewöhnlichen Maßnahme gezwungen, die wohl nicht deutlicher zeigen konnte, wie „Bare Metal Programming“ auch aussehen kann: Der Computer wurde geöffnet, um mit einem Schraubenzieher einen Kurzschluss an der Komponente zu erzeugen, von der man annahm, dass sie für den Bug verantwortlich war [<a href="https://yarchive.net/comp/tales.html">YARC1</a>].</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Programmierung, Hardware, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 25 - Bare Metal Programming - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 23 - 30 x 10 = 1.000</title>
      <link>https://nickyreinert.de/2023/2023-05-01-nerd-enzyklop%C3%A4die-23---30-x-10--1.000/</link>
      <pubDate>Mon, 01 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2023/2023-05-01-nerd-enzyklop%C3%A4die-23---30-x-10--1.000/</guid>
      <description>
Wenn du deinen Python-Nachlass mit ein wenig Pfeffer würzen willst, empfiehlt es sich, die „Definition eines Integers“ zu ändern. Wenn du in Python eine Zahl …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Demonstration aus der &#39;Nerd Enzyklopädie&#39;, die zeigt, wie man in Python die interne Darstellung von Integer-Objekten mittels &#39;ctypes&#39; manipuliert. Der Artikel präsentiert ein Code-Beispiel, das dazu führt, dass eine scheinbar einfache Multiplikation wie &#39;30 * 10&#39; ein unerwartetes Ergebnis von &#39;1000&#39; liefert, und warnt vor den daraus resultierenden Debugging-Herausforderungen.</p>
          
          
          <p><strong>Hauptthemen:</strong> Python, Speichermanagement, Programmierung, Debugging, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> advanced</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-01-nerd-enzyklop%C3%A4die-23---30-x-10--1.000/image1.png" alt=""></p>
<p>Wenn du deinen Python-Nachlass mit ein wenig Pfeffer würzen willst, empfiehlt es sich, die „Definition eines Integers“ zu ändern. Wenn du in Python eine Zahl verwendest, nehmen wir die 30, verwendet Python die 30 als Referenz auf ein Objekt im Speicher, in dem wiederum der Wert 30 hinterlegt wird. Die 30 ist also ein Verweis auf ein Objekt, das den tatsächlichen Wert enthält. In der Regel sollten Verweis und Wert gleich sein, sonst wird das mit der Mathematik schwierig.</p>
<p>Schwierig? Das mögen Nerds doch!</p>
<p>Mit dieser Funktion kannst du einen derartigen Verweis anpassen und einen abweichenden Wert hinterlegen:</p>
<pre><code>import ctypes   
def reference(val):  
  return ctypes.cast(id(val), ctypes.POINTER(ctypes.c_int))
</code></pre>
<p>Und so aktivierst du den „Spaß“:</p>
<pre><code>reference(30)[6] = 100
</code></pre>
<p>Willst du nun mit der Ziffer 30 mathematische Operationen durchführen, erzeugt das interessante Ergebnisse:</p>
<pre><code>&gt;&gt;&gt; 30 * 10  
&gt;&gt;&gt; 1000
</code></pre>
<p>Viel Spaß beim Debuggen!</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Python, Code-Trick, Nerd-Enzyklopädie, Debugging</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 23 - 30 x 10 = 1.000 - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>code_demonstration</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 20 - Elvis und Raumschiffe</title>
      <link>https://nickyreinert.de/2023/2023-04-22-nerd-enzyklop%C3%A4die-20---elvis-und-raumschiffe/</link>
      <pubDate>Sat, 22 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2023/2023-04-22-nerd-enzyklop%C3%A4die-20---elvis-und-raumschiffe/</guid>
      <description>
Wer sich mit der Entwicklung von Software beschäftigt wird früher oder später über seltsam anmutende Abkürzungen stolpern mit denen sich ausufernder …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Erklärung aus der &#39;Nerd Enzyklopädie&#39; über zwei spezielle Operatoren in Programmiersprachen: den &#39;Elvis Operator&#39; (&#39;?:&#39;), der einen Standardwert zuweist, wenn eine Variable null oder falsch ist, und den &#39;Spaceship Operator&#39; (&#39;&lt;=&gt;&#39;), der einen Drei-Wege-Vergleich durchführt. Der Artikel beleuchtet die Herkunft ihrer ungewöhnlichen Namen.</p>
          
          
          <p><strong>Hauptthemen:</strong> Programmierung, Operatoren, Programmiersprachen, Nerd-Kultur, Humor</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-04-22-nerd-enzyklop%C3%A4die-20---elvis-und-raumschiffe/image1.png" alt=""></p>
<p>Wer sich mit der Entwicklung von Software beschäftigt wird früher oder später über seltsam anmutende Abkürzungen stolpern mit denen sich ausufernder Programmcode zu einem kompakten Kunstwerk aufwerten lässt. Dazu zählen z.B. <strong>ternäre Operatoren,</strong> die langweilige **if-then-**Bedingungen in einfache Einzeiler verwandeln:</p>
<pre><code>sAllGoodMan = foo == bar ? true : false;
</code></pre>
<p>Hier wird die boolesche Variable <strong>sAllGoodMan</strong> auf <strong>True</strong> gesetzt, wenn die Werte von <strong>foo</strong> und <strong>bar</strong> identisch sind, andernfalls ist <strong>sAllGoodMan =</strong> <strong>False</strong>.<br>
Weitaus weniger bekannt ist die gehobene Variante des ternären Operators, der sogenannte <strong>Elvis-Operator,</strong> der nur aus einem Fragezeichen gefolgt von einem Doppelpunkt besteht:</p>
<pre><code>?:
</code></pre>
<p>Und was kann der Elvis-Operator, außer gut aussehen und nicht singen? Er weist einer Variable einen Standard-Wert zu, wenn eine andere Variable <strong>Null</strong> oder <strong>Falsch</strong> ist:</p>
<pre><code>myValue = aValue ?: „default“;
</code></pre>
<p>Wenn die Variable <strong>aValue</strong> nicht gesetzt wurde und damit <strong>Null</strong> oder <strong>Falsch</strong> ist (die Interpretation von „nicht gesetzt“ kann von der jeweiligen Programmiersprache abhängen), wird der Variable myValue der Standard-Wert default zugewiesen. Das funktioniert natürlich auch mit dem Rückgabewert von Funktionen:</p>
<pre><code>Name = getName(‚id‘) ?: „John Doe“;
</code></pre>
<p>Kann kein Name ermittelt werden, wird als Standardname „<strong>John Doe</strong>“ verwendet.</p>
<p>Seinen Namen hat der Elvis-Operator von dem Fragezeichen, das zusammen mit dem Doppelpunkt ein Emoticon darstellt, das an Elvis Presley erinnern soll.</p>
<p>Eine andere weniger bekannte Abkürzung ist der <strong>Spaceship-Operator</strong>:</p>
<pre><code>&lt;==&gt;
</code></pre>
<p>Dieser führt einen <strong>3-Wege-Vergleich</strong> durch und heißt deswegen ganz offiziell eigentlich <strong>Drei-Wege-Vergleichsoperator</strong>. Der Spaceship-Operator erlaubt zwei Element auf drei Arten zu vergleichen, größer, kleiner oder gleich:</p>
<pre><code>A &lt; B, A == B, A &gt; B
</code></pre>
<p>Der Spaceship-Operator fasst die drei Vergleiche zusammen und liefert -1 für kleiner, 0 für genau gleich groß und +1 für größer als zurück.</p>
<p>Die Verbindung zu einem Raumschiff geht angeblich auf das Spiel <strong>Star Trek</strong> von <strong>1971</strong> zurück — dort wurde ein Raumschiff genau so abgebildet: <strong>&lt;==&gt;</strong>.<br>
Die Fraktion der <strong>StarWars-Fans</strong> sieht das anders. Dort wird behauptet, dass <strong>&lt;==&gt;</strong> eher an den <strong>Tie Fighter</strong> aus Star Wars erinnert.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Programmierung, Operatoren, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 20 - Elvis und Raumschiffe - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 17 - Fuenf — In your Face</title>
      <link>https://nickyreinert.de/2023/2023-04-13-nerd-enzyklop%C3%A4die-17---fuenf--in-your-face/</link>
      <pubDate>Thu, 13 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2023/2023-04-13-nerd-enzyklop%C3%A4die-17---fuenf--in-your-face/</guid>
      <description>“Fuenf — In your Face” ist der Name eines Werkes von Farbrausch, einer Gruppe aus der Demo Szene, die laut pouet.net seit 2000 aktiv ist [POUE1].
Aber was ist …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Einführung in die Demoszene und ihre Geschichte, am Beispiel der berühmten 5-Byte-Demo &#39;Fuenf — In your Face&#39; der Gruppe Farbrausch. Der Artikel erklärt, wie Demos als audiovisuelle Kunstwerke technische und kreative Fähigkeiten unter extremen Größenbeschränkungen demonstrieren und wie sich die Demoszene aus der Warez-Szene entwickelte.</p>
          
          
          <p><strong>Hauptthemen:</strong> Demoszene, Computerkultur, Programmierung, Retrocomputing, Nerd-Kultur, Softwareentwicklung</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>“<strong>Fuenf — In your Face</strong>” ist der Name eines Werkes von <strong>Farbrausch</strong>, einer Gruppe aus der Demo Szene, die laut pouet.net seit 2000 aktiv ist [<a href="https://www.pouet.net/groups.php?which=322&amp;order=release&amp;reverse=1">POUE1</a>].</p>
<p>Aber was ist die Demo-Szene? Dieser Begriff beschreibt eine der ältesten Communities des digitalen Zeitalters. Demos sind musikalisch untermalte und animierte Grafiken, die die technischen und kreativen Fähigkeiten einer Gruppe zur Schau stellen — also demonstrieren — sollen. Eine Art digitales audiovisuelles Aushängeschild.</p>
<p><img src="/2023/2023-04-13-nerd-enzyklop%C3%A4die-17---fuenf--in-your-face/image1.png" alt=""></p>
<p style="text-align: center;font-style:italic">
craiyon.com: “democe scene around 2000”
</p>
<p>Die Demo-Szene ist auch eng vernüpft mit der “Warez-Szene”, <strong>Warez</strong> steht für Raubkopien. Raubkopien waren schon immer ein Problem, erst Recht um 1980 herum. Damals wie auch heute erforderte das Anfertigen einer Raubkopie ein gewisses technisches Verständnis, um den Kopierschutz mit mal mehr mal weniger Aufwand zu umgehen. Dieser Vorgang wird als „cracken“ bezeichnet, also „aufbrechen“.</p>
<p>Die Gruppen, die für die Raubkopie verantwortlich waren, versahen <em>gecrackte</em> Software mit einem Intro, das beim Start der Software angezeigt wurde. Das waren in der Regel digitale Musik-Videos, die den Namen der Cracker-Gruppe kunstvoll in Szene setzen sollen. Diese Intros wurden anfangs <strong>Cracktros</strong> genannt.</p>
<p>Mit der Zeit wurde dem Erstellen der Cracktros mehr Bedeutung beigemessen, wohl auch weil es oft aufwendiger war, beeindruckende Cracktros mit geringem Speicherbedarf zu produzieren, als den Kopierschutz zu umgehen. Diese Visitenkarte musste ja mit dem Spiel ausgeliefert und irgendwie auf den Datenträger gequetscht werden. Speicherplatz war damals eine wertvolle Ressource. Auf einer 1,44 MByte-Diskette, die ein komplettes Spiel enthielt, gab es eigentlich keinen Platz für aufwendige Animationen.</p>
<p>Aus dem <strong>Cracktros</strong> wurden schließlich Demos, die auf speziellen Demo-Disks verteilt wurden. Aus der Not wurde eine Tugend und schließlich der Wettbewerb, mit möglichst wenig Code beeindruckende Animationen zu erschaffen.</p>
<p>Die Demo-Szene war geboren und nabelte sich recht schnell von ihrem bösen Geschwister, der Raubkopierer-Szene, ab. Eine dieser Gruppen war die aus Deutschland stammende Gruppe <strong>Farbrausch.</strong> Seit <strong>2000</strong> liefert Farbrausch recht ansehnliche Werke ab, <strong>fuenf (in your face)</strong> gehört vermutlich eher nicht dazu und ist vielmehr einer der ersten klassischen Troll-Versuche des Internets: Es handelt sich dabei um ein 5 Byte große Demo vom <strong>29. Dezember 2001</strong>, von der man zunächst großes erwartet.</p>
<p>Letztlich handelt es sich aber nur um ziemlich anstrengende <strong>Störgeräusche</strong>, die sogar dazu führen konnten, dass der Computer nicht mehr auf Eingaben reagieren. Farbrausch verstand dieses “Werk” als Antwort auf eine ähnliche Produktion der Demogruppe <strong>TEXTEM</strong>, die nur <strong>6 Byte</strong> groß war.</p>
<p>Das sind die <strong>5 Byte</strong>, mit denen Farbrausch vermutlich für die eine oder andere akustische Irritation sorgte:</p>
<pre><code>95 cd 21 eb fc
</code></pre>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Demoszene, IT-Geschichte, Nerd-Enzyklopädie, Kultur</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 17 - Fuenf — In your Face - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 13 - Total hours wasted here = 42</title>
      <link>https://nickyreinert.de/2023/2023-04-01-nerd-enzyklop%C3%A4die-13---total-hours-wasted-here-42/</link>
      <pubDate>Sat, 01 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2023/2023-04-01-nerd-enzyklop%C3%A4die-13---total-hours-wasted-here-42/</guid>
      <description>Dass Entwickler*innen einen speziellen Humor haben sollte bekannt sein. Und es gibt keinen Ort, an dem das klarer wird, als im Quellcode. Ein ikonisches …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Erkundung aus der &#39;Nerd Enzyklopädie&#39; über den speziellen Humor von Entwicklern, der sich in Quellcode-Kommentaren und unkonventionellen Programmierpraktiken widerspiegelt. Der Artikel beleuchtet das berühmte &#39;total_hours_wasted_here = 42&#39;-Meme und präsentiert weitere Beispiele für witzige, zynische oder selbstironische Code-Kommentare und &#39;quick and dirty&#39;-Lösungen.</p>
          
          
          <p><strong>Hauptthemen:</strong> Programmierung, Softwareentwicklung, Humor, Nerd-Kultur, Code-Qualität, Douglas Adams</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Dass Entwickler*innen einen speziellen Humor haben sollte bekannt sein. Und es gibt keinen Ort, an dem das klarer wird, als im Quellcode. Ein ikonisches Beispiel ist dieser subtile Hinweis auf die „Komplexität“ des entsprechenden Code-Bereichs:</p>
<pre><code>// total_hours_wasted_here = 42
</code></pre>
<p>Die <strong>42</strong> ist eine Anspielung auf das Buch “<strong>Per Anhalter durch die Galaxis</strong>” von <strong>Douglas Adams</strong>. Ein Supercomputer gibt darin die Antwort <strong>42</strong> auf „<strong>die ultimative Frage nach dem Leben, dem Universum und dem ganzen Rest</strong>“.</p>
<p>Die 42 wird oft als Verweis auf diese Szene verwendet, wenn eine Zahlenangabe erforderlich ist. So auch in jener flapsigen Dokumentation ist, gerne auch eingebettet in einen zynischen Kommentar zur Code-Qualität:</p>
<pre><code>// Dear maintainer:   
// Once you are done trying to ‘optimize’ this routine,  
// and have realized what a terrible mistake that was,   
// please increment the following counter as a warning   
// to the next guy:   
//  
// total_hours_wasted_here = 42
</code></pre>
<p>In der IT hat sich für derartigen Code der Begriff „quick and dirty“ eingebürgert. Die Lösung ist vielleicht nicht schön, aber dafür schnell implementiert. Wer auch immer sich später mit dem Quellcode auseinander setzt bzw. auseinander setzen muss, wird davon sicherlich nicht begeistert sein. Aber das dürfte wohl auch zum Berufsrisiko gehören.</p>
<p>Noch nicht genug Nerd-Humor? In der Community hat sich dankenswerterweise ein sportlicher Ergeiz entwickelt, möglichst einfallsreichen Quellcode zu produzieren. Wie wäre es mit einem angepassten <strong>Error-Handling</strong>?</p>
<pre><code>Exception up = new Exception(“Something is really wrong.”);  
throw up:
</code></pre>
<p>Oder einer <strong>Selbsterkenntnis</strong> wie dieser:</p>
<pre><code>// drunk, fix later
</code></pre>
<p>Dann hätten wir noch umgekehrte boolsche Werte in der <strong>Programmiersprache C</strong>:</p>
<pre><code>#define TRUE FALSE
</code></pre>
<p>Eine überraschende Offenbarung:</p>
<pre><code>return 1; # returns 1
</code></pre>
<p>Mein persönlicher Favorit: mathematische Trickserein:</p>
<pre><code>// I can’t divide with zero, so I have to divide with something very similar  
result = number / 0.00000000000001;
</code></pre>
<p>Noch mehr unterhaltsame Code-Kuriositäten, die ein ganzes Buch füllen würden, gibt es auf <strong>Stackoverflow</strong>: [<a href="https://stackoverflow.com/questions/184618/what-is-the-best-comment-in-source-code-you-have-ever-encountered">STACK1</a>].</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Programmierung, Humor, Nerd-Enzyklopädie, Kultur</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 13 - Total hours wasted here = 42 - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>cultural_analysis</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 11 - Der kleine Bobby Tables</title>
      <link>https://nickyreinert.de/2023/2023-03-25-nerd-enzyklop%C3%A4die-11---der-kleine-bobby-tables/</link>
      <pubDate>Sat, 25 Mar 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2023/2023-03-25-nerd-enzyklop%C3%A4die-11---der-kleine-bobby-tables/</guid>
      <description>Der kleine Robert „Bobby” Tables ist Gegenstand eines Comics von xkcd (einer recht legendären Sammlung von Web-Comics von Randall Munroe). Der Comic über …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Erklärung aus der &#39;Nerd Enzyklopädie&#39; über den berühmten xkcd-Comic &#39;Der kleine Bobby Tables&#39; und die von ihm illustrierte Sicherheitslücke: SQL-Injection. Der Artikel erläutert, wie bösartiger SQL-Code über Eingabefelder in Datenbanken eingeschleust werden kann, um unerwünschte Aktionen auszuführen, und betont die Notwendigkeit der Validierung von Benutzereingaben.</p>
          
          
          <p><strong>Hauptthemen:</strong> SQL Injection, Web-Sicherheit, Datenbanken, Programmierung, Nerd-Kultur, xkcd</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Der kleine <strong>Robert</strong> „<strong>Bobby” Tables</strong> ist Gegenstand eines Comics von <strong>xkcd</strong> (einer recht legendären Sammlung von Web-Comics von <strong>Randall Munroe</strong>). Der Comic über besagten <strong>Bobby Tales</strong> trägt den Titel “<strong>Exploits of a Mom</strong>” [<a href="https://xkcd.com/327/">XKCD2</a>]. Ein <strong>Exploit</strong> beschreibt die Ausnutzung einer Sicherheitslücke in Computer-Systemen. In dem Comic geht es um einen Schüler, dessen Mutter ihren Sohn folgendem Namen verleiht — natürlich nur temporär:</p>
<pre><code>Robert’); DROP TABLE Students; — 
</code></pre>
<p>Das, was hinter dem Vornamen steht, mag wie Hieroglyphen oder ein Tippfehler aussehen. In der Tat handelt es sich aber um eine <strong>SQL-Anweisung</strong>, also den Befehl, die Tabelle mit dem Namen „<strong>Students</strong>“ zu löschen. Der Comic thematisiert damit die Sicherheitslücke <strong>SQL-Injection</strong>.</p>
<p>Dabei wird über eine Eingabemaske eine spezielle Zeichenfolge an das System übergeben, das diese ungeprüft übernimmt und so zu einer ungewünschten Aktion „überrumpelt“ wird. Das Ziel muss nicht unbedingt das Löschen von Daten sein, auch der Abruf von kritischen Informationen wie Passwörtern ist denkbar.</p>
<p>Die Moral der Geschichte, die sich an die Entwickler<em>innen von Eingabeformularen oder Datenbank-Schnittstellen wendet: Prüfe die Eingabe deiner Nutzer</em>innen.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> SQL, Sicherheit, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 11 - Der kleine Bobby Tables - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 4 - RegExen — Jetzt hast du zwei Probleme</title>
      <link>https://nickyreinert.de/2023/2023-03-04-nerd-enzyklop%C3%A4die-4---regexen--jetzt-hast-du-zwei-probleme/</link>
      <pubDate>Sat, 04 Mar 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2023/2023-03-04-nerd-enzyklop%C3%A4die-4---regexen--jetzt-hast-du-zwei-probleme/</guid>
      <description>Reguläre Ausdrücke sind umstritten: Geliebt als vielseitiges Werkzeug, verdammt als undurchschaubare Fehlerquelle. Nicht ohne Grund heißt es: Reguläre Ausdrücke …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle und kritische Auseinandersetzung mit regulären Ausdrücken (RegEx) und dem bekannten Programmierer-Meme &#39;Jetzt hast du zwei Probleme&#39;. Der Artikel beleuchtet die Komplexität, den Missbrauch und die Sicherheitsrisiken (Catastrophic Backtracking, ReDOS) von RegEx und verfolgt die Ursprünge des berühmten Zitats.</p>
          
          
          <p><strong>Hauptthemen:</strong> Reguläre Ausdrücke, Programmierung, Softwareentwicklung, Sicherheit, Nerd-Kultur, Algorithmen</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>Reguläre Ausdrücke sind umstritten: Geliebt als vielseitiges Werkzeug, verdammt als undurchschaubare Fehlerquelle. Nicht ohne Grund heißt es: Reguläre Ausdrücke lösen ein Problem und schaffen zwei neue.<br>
Woher kommt diese Hassliebe?</p>
<h2 id="eine-exotische-tierart">Eine exotische Tierart</h2>
<p>Reguläre Ausdrücke, kurz RegExen, sind mitunter schwer zu entwickeln und irgendwann kaum noch lesbar. Das erschwert das Debugging, also die Fehlersuche. Wie wäre es zum Beispiel mit diesem Schmuckstück:</p>
<pre><code>^(?=.*[A-Z].*[A-Z])(?=.*[!@#$&amp;*])(?=.*[0–9].*[0–9])(?=.*[a-z].*[a-z].*[a-z]).{8}$
</code></pre>
<p>Na, erkannt? Diese RegExe überprüft ob eine Passwort-Zeichenfolge bestimmten Sicherheitsanforderungen entspricht. Diesen Hinweis kann man im Quellcode vielleicht noch dokumentieren. Aber was wenn sich die Sicherheitsanforderungen im Detail ändern?</p>
<h2 id="mit-kanonen-auf-spatzen">Mit Kanonen auf Spatzen…</h2>
<p>RegExen werden außerdem gerne dort eingesetzt, wo eigentlich bessere, standardisierte Lösungen vorhanden sind, wie z.B. für das Parsen von XML [<a href="https://flapenguin.me/xml-regex">FLAP1</a>]:</p>
<pre><code>\s*  
(?(?=&lt;)  
  (?&lt;opentag&gt;  
    &lt; \s*  
    (?&lt;tagname&gt;\w+)  
    (?&lt;attibute&gt;  
      \s+  
      (?&lt;attrname&gt;[^\s&gt;]+)  
      =  
      (?&lt;attrquote&gt;&quot;|'|)  
      (?&lt;attrvalue&gt;[^\s&quot;'&gt;]+)  
      (\k{attrquote})  
    )*  
    \s*  
    (?&lt;selfclosing&gt;\/\s*)?  
    &gt;  
  )  
  (?(&lt;selfclosing&gt;)|  
    (?&lt;children&gt;(?R))  
    (?&lt;closetag&gt;&lt;\s* \/ \s* \k{tagname} \s*&gt;)  
  )  
|  
  (?&lt;text&gt;[^&lt;]*)  
)*  
\s*
</code></pre>
<p>Was aussieht als wäre deine Katze auf der Tastatur eingeschlafen, ist eine funktionsfähige RegExe. Mit genau einem Vorteil: Wenn man den Ausdruck Stück für Stück zerpflückt, um ihn zu verstehen, kann man viel über die Möglichkeiten regulärer Ausdrücke lernen. Im produktiven Betrieb sollte man trotzdem auf alternative Ansätze zurückgreifen, um mit XML-Daten zu arbeiten. Wie z.B. XML-Parser, die soll es ja wirklich geben.</p>
<h2 id="backtracking">Backtracking</h2>
<p>RegExen können auch zu handfesten Sicherheitsproblemen führen. Die Ursache liegt in der Art, wie RegExen verarbeitet werden. Sie durchlaufen einen String zeichenweise, bis eine Bedingung nicht mehr erfüllt wird und springen dann zu dem Zeichen zurück, an dem der Ausdruck vielleicht einen anderen Lösungsweg nehmen kann. Dieses Vorgehen nennt man <strong>Backtracking</strong>, also Rückverfolgung. Diese Funktion kann aber zu einem Rückkopplungs-Effekt führen, wodurch die Dauer der Verarbeitung exponentiell ansteigt. Die Folge nennt man „Catastrophic Backtracking“, eine wichtige Grundlage für <a href="https://medium.com/@nitinpatel_20236/what-are-evil-regexes-7b21058c747e">ReDOS</a> (<a href="https://medium.com/@nitinpatel_20236/what-are-evil-regexes-7b21058c747e">Regular Expression Denial Of Service</a>) Angriffe [<a href="https://www.regular-expressions.info/catastrophic.html">REGU1</a>]. Ein einfaches Beispiel ist dieser reguläre Ausdruck [<a href="https://medium.com/@nitinpatel_20236/what-are-evil-regexes-7b21058c747e">MEDI1</a>]:</p>
<pre><code>(x+x+)+y.
</code></pre>
<p>Diese RegExe lässt sich sicherlich optimieren, sie soll auch nur zeigen, wie schnell die Verarbeitung eskalieren kann. Als Test-String dient diese einfache Zeichenkette:</p>
<pre><code>xxxxxy
</code></pre>
<p>Die Verarbeitung erfordert in diesem Fall in <strong>123 Schritte</strong>. Passen wir die Zeichenkette nun etwas an:</p>
<pre><code>xxxxxxxxxxxxxy
</code></pre>
<p>Mehr als <strong>38.000 Schritte</strong> sind jetzt erforderlich, um den regulären Ausdruck zu prüfen. Mit dem richtigen regulären Ausdruck und der passenden Zeichenkette kann ein Browser „mühelos“ zum Absturz gebracht werden.</p>
<p>Der Einsatz von regulären Ausdrücken ist also streitbar. Übrigens: Dem Netscape Entwickler <strong>Jamie Zawinski</strong> wird zugeschrieben, diese Erkenntnis als erster in Worte gefasst zu haben. Er stellte bereits <strong>1997</strong> fest [<a href="https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/">CODI1</a>]:</p>
<blockquote>
<p>Some people, when confronted with a problem, think “I know, I’ll use regular expressions.” Now they have two problems.</p></blockquote>
<p>Dieser Ausspruch geht wiederum auf <strong>David Tilbrook</strong> zurück, der sich (selber nur vage) erinnert, wie er <strong>1985</strong> auf einer Konferenz in <strong>Dublin</strong> die Nutzung des Kommandozeilen-Tools <strong>awk</strong> kommentiert [<a href="http://regex.info/blog/2006-09-15/247">REGE1</a>]:</p>
<blockquote>
<p>“If you have a problem and you think awk is the solution, then you have two problems.”</p></blockquote>
<p><strong>RegExen</strong> und <strong>awk</strong> sind nicht die einzigen zweifelhaften Tools, auch <a href="http://regex.info/blog/2006-09-15/247">Perl</a> hat einen gewissen Ruf. Aber vermutlich ist das nur eine besondere Art von Nerd-Humor, vor der niemand sicher ist:</p>
<p><img src="/2023/2023-03-04-nerd-enzyklop%C3%A4die-4---regexen--jetzt-hast-du-zwei-probleme/image.png" alt=""></p>
<p style="text-align: center;font-style:italic">
Bildquelle [[XKCD1](https://xkcd.com/1171/)]
</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> RegEx, Programmierung, Sicherheit, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 4 - RegExen — Jetzt hast du zwei Probleme - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item>
  </channel>
</rss>