<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" 
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Softwareentwicklung auf Nicky Reinert</title>
    <link>http://localhost:1313/topics/softwareentwicklung/</link>
    <description>Blog &amp; Projekte von Nicky Reinert (Institut für digitale Herausforderungen): Webentwicklung &amp; Software Development, SEO &amp; Analytics, Hosting &amp; DevOps, WordPress &amp; Hugo, Tools &amp; Projekte, Datenschutz und digitale Kultur – plus Texte zu KI sowie Autismus &amp; Gesellschaft.</description>
    <generator>Hugo 0.148.2</generator>
    <language>de</language>
    <managingEditor></managingEditor>
    <webMaster></webMaster>
    <copyright></copyright>
    <lastBuildDate>Sat, 10 Jun 2023 12:19:31 +0100</lastBuildDate><atom:link href="http://localhost:1313/topics/softwareentwicklung/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>Die Nerd Enzyklopädie 36 - Das kik &amp; left-pad Drama</title>
      <link>http://localhost:1313/2023/2023-06-10-nerd-enzyklop%C3%A4die-36---das-kik--left-pad-drama/</link>
      <pubDate>Sat, 10 Jun 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-06-10-nerd-enzyklop%C3%A4die-36---das-kik--left-pad-drama/</guid>
      <description>
NPM (Node Package Manager) ist ein Paket Manager für JavaScript und eine Plattform für Pakete, also Software, um die Funktionalität von JavaScript zu …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Nacherzählung des &#39;kik &amp; left-pad Dramas&#39; von 2016, das die JavaScript-Entwicklergemeinschaft erschütterte. Der Artikel erklärt, wie die Entfernung eines kleinen, aber weit verbreiteten npm-Pakets namens &#39;left-pad&#39; aufgrund eines Namensstreits zu weitreichenden Problemen in Tausenden von Softwareprojekten führte und die Fragilität moderner Software-Abhängigkeiten aufzeigte.</p>
          
          
          <p><strong>Hauptthemen:</strong> JavaScript, npm, Open Source, Softwareentwicklung, Abhängigkeiten, Nerd-Kultur, Fallstudie</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-06-10-nerd-enzyklop%C3%A4die-36---das-kik--left-pad-drama/image1.png" alt=""></p>
<p><strong>NPM (Node Package Manager)</strong> ist ein Paket Manager für <strong>JavaScript</strong> und eine Plattform für Pakete, also Software, um die Funktionalität von <strong>JavaScript</strong> zu erweitern. Es gibt einige Pakete, die sehr populär sind und in vielen JavaScript-Programmen verwendet werden. Dass das nicht nur praktisch ist sondern auch kritische Abhängigkeiten erzeugt, demonstrierte <strong>Azer Koçulu</strong> im Jahr <strong>2016</strong>.</p>
<p>Koçulu stellte damals über NPM eine Vielzahl von Paketen zur Verfügung, darunter auch <strong>kik</strong>, ein kaum bekanntes Paket, um Templates zu erstellen. kik ist aber auch der Name einer Messenger-App mit seinerzeit rund <strong>270. Mio</strong>. aktiven Nutzer:innen.<br>
Eines Tages erhielt Koculu Post von <strong>Bob Stratton</strong>, einem Rechtsanwalt, der die Interessen von <strong>Kik interactive</strong> vertrat, dem Unternehmen hinter dem Messenger. Stratton bat darum, dass Koculu sein Paket umbenennt, verwies dabei auf die eingetragene Handelsmarke und bot im Gegenzug sogar <strong>30.000 Dollar</strong> an.</p>
<p>Für Koculu war das keine Option, also nahm Stratton Kontakt mit NPM auf. Dort schlug man sich auf die Seite von Stratton, was Koculu nicht sonderlich wohlwollend aufnahm. Er fühlte sich als <strong>David</strong> im Kampf gegen <strong>Goliath</strong>. Koçulu gegen die seit jeher wenig beliebten Patentanwälte!</p>
<p>Seine Konsequenz: Er zog all seine <strong>273 Pakete</strong> von NPM zurück. Darunter befand sich auch „<strong>left-pad</strong>“, ein unscheinbares Paket, das nur aus 11 Zeilen bestand und lediglich dem Zweck diente, eine Zeichenkette mit einem bestimmten Wert zu befüllen.</p>
<p>Das löste eine Kaskade von Ereignissen aus: left-pad wurde von vielen Entwickler:innen in ihren Projekten genutzt, darunter auch Pakete, die wiederum in anderen Projekten genutzt wurden. So entstanden tausende Abhängigkeiten und Fehlermeldungen. Es kam zu massiven Problemen bei Updates und der Entwicklung, nur weil 11 Zeilen simpler JavaScript Code nicht mehr verfügbar waren.</p>
<p>Das Problem wurde zum Glück relativ schnell behoben. Innerhalb von 10 Minuten veröffentlichte <strong>Cameron Westland</strong> eine Alternative. Insgesamt dauerte die Fehlerbehebung <strong>2,5 Stunden</strong> [<a href="https://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm">NPM1</a>] [<a href="https://www.infoworld.com/article/3047177/how-one-yanked-javascript-package-wreaked-havoc.html">INFO4</a>].</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> JavaScript, npm, Open-Source, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 36 - Das kik &amp; left-pad Drama - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 28 - Damönen aus der Nase</title>
      <link>http://localhost:1313/2023/2023-05-16-nerd-enzyklop%C3%A4die-28---dam%C3%B6nen-aus-der-nase/</link>
      <pubDate>Tue, 16 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-16-nerd-enzyklop%C3%A4die-28---dam%C3%B6nen-aus-der-nase/</guid>
      <description>
In der Informatik gibt es den Begriff des „undefinierten Verhaltens“ (undefined behaviour) [WIKI7]: Wenn eine Software bzw. Code auf unterschiedlichen Systemen …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Erklärung aus der &#39;Nerd Enzyklopädie&#39; über das Konzept des &#39;undefinierten Verhaltens&#39; in der Informatik, insbesondere in der Programmiersprache C. Der Artikel beleuchtet den Ursprung des humorvollen Ausdrucks &#39;nasal demons&#39; und demonstriert anhand eines einfachen C-Code-Beispiels die unvorhersehbaren Konsequenzen, wenn ein Compiler auf undefiniertes Verhalten trifft.</p>
          
          
          <p><strong>Hauptthemen:</strong> C-Programmierung, Undefined Behavior, Compiler, Softwareentwicklung, Nerd-Kultur, Programmiersprachen</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-16-nerd-enzyklop%C3%A4die-28---dam%C3%B6nen-aus-der-nase/image1.png" alt=""></p>
<p>In der Informatik gibt es den Begriff des <strong>„undefinierten Verhaltens“</strong> (<strong>undefined behaviour</strong>) [<a href="https://en.wikipedia.org/wiki/Undefined_behavior">WIKI7</a>]: Wenn eine Software bzw. Code auf unterschiedlichen Systemen zu unterschiedlichen Ergebnissen führt, was natürlich nicht vorkommen darf, spricht man von eben diesem „undefinierten Verhalten“. In der Programmiersprache C hat sich dafür der Begriff „<strong>nasal demons</strong>“ etabliert. Den Ursprung hat dieser Ausspruch in der Usenet Gruppe <strong>comp.std.c</strong> und einer Diskussion in <strong>1992</strong>. Ein Nutzer meinte damals:</p>
<blockquote>
<p>“When the compiler encounters [a given undefined construct] it is legal for it to make demons fly out of your nose” [<a href="http://catb.org/jargon/html/N/nasal-demons.html">CATB</a>]</p></blockquote>
<p>Übersetzt also: Trifft der Compiler auf ein „<strong>undefiniertes Konstrukt</strong>“, sollte es ihm erlaubt sein, Dämonen aus deiner Nase fliegen zu lassen.</p>
<p>Ein einfaches Beispiel in C ist z.B. dieses [<a href="https://accu.org/journals/overload/21/115/maudel_1857/">ACCU1</a>]:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    bool b;  
</span></span><span class="line"><span class="ln">2</span><span class="cl">    if (b)  
</span></span><span class="line"><span class="ln">3</span><span class="cl">      printf(“b is true\n”);  
</span></span><span class="line"><span class="ln">4</span><span class="cl">    if (!b)  
</span></span><span class="line"><span class="ln">5</span><span class="cl">      printf(“b is false\n”);
</span></span></code></pre></div><p>B wird als Boolesche Variable deklariert, aber nicht initialisiert. Es ist also nicht eindeutig klar, ob B wahr oder falsch ist. Der Compiler darf machen, “was er will”. Wie z.B. <strong>Dämonen aus deiner Nase fliegen</strong> lassen…</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> C, Programmierung, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 28 - Damönen aus der Nase - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 27 - Die Geschichte von Mel</title>
      <link>http://localhost:1313/2023/2023-05-13-nerd-enzyklop%C3%A4die-27---die-geschichte-von-mel/</link>
      <pubDate>Sat, 13 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-13-nerd-enzyklop%C3%A4die-27---die-geschichte-von-mel/</guid>
      <description>
Die “Geschichte von Mel“ ist eine Reminiszenz an die frühen Jahre der Informationstechnologie. In der Geschichte verarbeitet Ed Nather seine Erlebnisse als …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Nacherzählung der berühmten Anekdote &#39;Die Geschichte von Mel&#39; aus der Computerprogrammierung. Der Artikel beleuchtet das Genie des legendären Programmierers Mel Kaye, seine unkonventionellen Optimierungstechniken in Assemblersprache und die Herausforderungen, die sein selbstmodifizierender Code für andere Entwickler darstellte, insbesondere am Beispiel eines manipulierten Blackjack-Spiels.</p>
          
          
          <p><strong>Hauptthemen:</strong> Computergeschichte, Programmierung, Assemblersprache, Folklore, Nerd-Kultur, Softwareentwicklung</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-13-nerd-enzyklop%C3%A4die-27---die-geschichte-von-mel/image1.png" alt=""></p>
<p>Die “<strong>Geschichte von Mel</strong>“ ist eine Reminiszenz an die frühen Jahre der Informationstechnologie. In der Geschichte verarbeitet <strong>Ed Nather</strong> seine Erlebnisse als Softwareentwickler bei der <strong>Royal McBee Computer Corporation</strong>, einem Hersteller von Computern.</p>
<p>In <strong>1956</strong> vertrieb die Royal McBee zusammen mit der <strong>General Precision Inc</strong>. den <strong>LGP-30</strong>, einen „<strong>röhrenbestückten Magnettrommelrechner</strong>“ [<a href="http://computermuseum.informatik.uni-stuttgart.de/dev/lgp30/">STUT1</a>]. Der Rechner kostete damals beeindruckende <strong>47.000 USD</strong>, was heute in etwa <strong>470.000 USD</strong> entspricht [<a href="https://en.wikipedia.org/wiki/LGP-30">WIKI8</a>].</p>
<p><strong>Melvin „Mel“ Kaye</strong> (geb. <strong>Kornitzky</strong>), Nathers Kollege, entwickelte für diesen Computer ein BlackJack-Spiel, das sich sehr großer Beliebtheit erfreute und z.B. auf Messen zu Demonstrationszwecken vorgeführt wurde.</p>
<p>Mit dem <strong>RPC 4000</strong> veröffentlichte die RoyalBee in <strong>1960</strong> einen leistungsfähigeren Nachfolger für den LGP-30. Das <strong>230-kg-Ungetüm</strong> ging damals für saftige <strong>87.500 USD</strong> über die hoffentlich stabile Ladentheke [<a href="https://en.wikipedia.org/wiki/LGP-30">WIKI8</a>]. Um auf Messen weiterhin für Unterhaltung zu sorgen, wurde Kaye damit beauftragt, sein BlackJack-Spiel auf den RPC 4000 zu portieren.<br>
Auf Anraten des Vertriebs bat die Geschäftsführung Kaye darum, einen Schalter einzubauen, mit dem sich einstellen lässt, dass der Computer verliert. Mutmaßlich, um den interessierten Käufen auf den Messen wohlwollend zu begegnen.</p>
<p>Nather porträtiert Kaye als <strong>Archetypen eines ethischen Hackers</strong>. Ein exzellenter Softwareentwickler mit Prinzipien. Kaye kam dem Wunsch der Geschäftsführung nicht ganz nach. Er implementierte eine umgekehrte Funktion und so sorgte der Schalter dafür, dass der Computer immer gewinnt.</p>
<p>Ein Ärgernis für die Geschäftsführung und den Vertrieb. Da Kaye die RoyalBee kurz darauf verließ, offensichtlich weil sich seine Werte nicht mit denen des Unternehmens deckten [<a href="https://melsloop.com/docs/the-story-of-mel/pages/preface">MELS1</a>], wurde Nather damit beauftragt, den „Bug“ zu beheben. Und das fiel ihm nicht sonderlich leicht, dafür hatte Kaye mit einigen programmatischen Hürden gesorgt.<br>
Nather beschreibt sein Vorgehen als Abenteuer und Kaye als „<strong>unbesungenes Genie</strong>“. Die technischen Finessen und Tricks, die Kaye in den Quellcode eingebaut hatte, beeindruckten Nather zutiefst:</p>
<blockquote>
<p>When the light went on it nearly blinded me.<br>
(The Story of Mel, Ed Nather, 1983)</p></blockquote>
<p>So berichtet Nather von Endlosschleifen und Quellcode, der sich selber modifizierte. Letztlich gelang es Nather nicht, den Bug zu beheben, vielleicht auch aus Respekt vor dessen Schöpfer. Also blieb die Funktion des Schalters bestehen: Er sorgte weiterhin dafür, dass der Computer gewinnt.</p>
<p>Wann genau sich die Geschichte zugetragen hat, ist nicht sicher überliefert. Nather verarbeitet das Geschehen in Gedichtform und veröffentlichte dies am <strong>21. Mai 1983</strong> im Usenet [<a href="http://www.catb.org/jargon/html/story-of-mel.html">CATB1</a>].</p>
<p>Vermutlich hätten wir nie erfahren, um wen es sich bei „Mel“ handelt. Nather hatte Kaye nicht direkt namentlich erwähnt. Erst in <strong>2012</strong> begann der Programmierer <strong>Anthony Cuozzo</strong> die Hintergründe der Geschichte zu recherchieren. Per E-Mail nahem er Kontakt zum vermeintlichen Kaye auf und erhielt genau eine Antwort [<a href="https://melsloop.com/docs/the-story-of-mel/pages/mel-kaye-cv">MELS2</a>]:</p>
<blockquote>
<p>Mel Kaye <a href="mailto:rimel3@roadrunner.com">rimel3@roadrunner.com</a><br>
Tue, Apr 17, 2012 at 12:01 PM<br>
To: acuozzo@<em><strong>.</strong></em>**<em><strong>.</strong></em><br>
— -<br>
Yes, I did, many, many years ago I worked for both of them.<br>
I believe I worked for Royal McBee first.<br>
Mel Kaye</p></blockquote>
<p>Danach hörte er nie wieder etwas von ihm.</p>
<p><em>Melvin Kaye verstarb 2018.</em></p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Computergeschichte, Programmierung, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 27 - Die Geschichte von Mel - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 25 - Bare Metal Programming</title>
      <link>http://localhost:1313/2023/2023-05-07-nerd-enzyklop%C3%A4die-25---bare-metal-programming/</link>
      <pubDate>Sun, 07 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-07-nerd-enzyklop%C3%A4die-25---bare-metal-programming/</guid>
      <description>
Übersetzt heißt „bare metal programming“ etwa so viel wie „Programmieren am reinen Metall“. Gemeint ist damit, dass man eine Software entwickelt, die direkt …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Anekdote aus der &#39;Nerd Enzyklopädie&#39;, die das Konzept des &#39;Bare Metal Programming&#39; veranschaulicht. Der Artikel erzählt die Geschichte eines Entwicklers, der bei einem Programmfehler auf einem &#39;discrete component&#39; Computer buchstäblich mit einem Schraubenzieher in die Hardware eingreifen musste, um das System zu stoppen.</p>
          
          
          <p><strong>Hauptthemen:</strong> Programmierung, Hardware, Computergeschichte, Nerd-Kultur, Softwareentwicklung</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-07-nerd-enzyklop%C3%A4die-25---bare-metal-programming/image1.png" alt=""></p>
<p>Übersetzt heißt „bare metal programming“ etwa so viel wie „Programmieren am reinen Metall“. Gemeint ist damit, dass man eine Software entwickelt, die direkt mit der Hardware kommuniziert, ohne Umwege über Bibliotheken, Schnittstellen oder ein Betriebssystem.</p>
<p>Ein Entwickler, dessen Name nicht überliefert ist, weshalb das ganze vielleicht eher der Kategorie „sympathische Legende“ zuzuordnen ist, nahm den Begriff des „Bare Metal Programmings“ Ende der der 1980er etwas zu wörtlich. Er arbeitete an einem „discrete component“ Computer, also einem Computer, bei dem die Transistoren sichtbar im Gerät verbaut sind (der erste Supercomputer, der IBM 7030 von 1961, bestand aus 169.100 Transistoren. Damit benötigte alleine die CPU eine Fläche von knapp 83qm [<a href="http://ed-thelen.org/comp-hist/vs-ibm-stretch.html">EDTH1</a>].)</p>
<p>Das Programm unseres Entwicklers schien jedenfalls einen Bug zu haben, weshalb er versucht hat das Programm zu stoppen. Was ihm nicht gelang, da das System — bugbedingt — alle Steuersignale ignorierte. Auch der Versuch den Computer selber anzuhalten, war nicht von Erfolg gekrönt. Da er das Gerät — aus Angst vor Datenverlust — nicht einfach ausschalten wollte, rief er einen Techniker dazu.</p>
<p>Bei dieser Art von Computern konnte man recht leicht feststellen, an welcher Stelle ein Programm bzw. eine einzelne Anweisung verarbeitet wurde, da die zuständigen Komponenten ja buchstäblich sicht- und greifbar waren. Man sah sich also zu einer ungewöhnlichen Maßnahme gezwungen, die wohl nicht deutlicher zeigen konnte, wie „Bare Metal Programming“ auch aussehen kann: Der Computer wurde geöffnet, um mit einem Schraubenzieher einen Kurzschluss an der Komponente zu erzeugen, von der man annahm, dass sie für den Bug verantwortlich war [<a href="https://yarchive.net/comp/tales.html">YARC1</a>].</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Programmierung, Hardware, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 25 - Bare Metal Programming - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 17 - Fuenf — In your Face</title>
      <link>http://localhost:1313/2023/2023-04-13-nerd-enzyklop%C3%A4die-17---fuenf--in-your-face/</link>
      <pubDate>Thu, 13 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-04-13-nerd-enzyklop%C3%A4die-17---fuenf--in-your-face/</guid>
      <description>“Fuenf — In your Face” ist der Name eines Werkes von Farbrausch, einer Gruppe aus der Demo Szene, die laut pouet.net seit 2000 aktiv ist [POUE1].
Aber was ist …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Einführung in die Demoszene und ihre Geschichte, am Beispiel der berühmten 5-Byte-Demo &#39;Fuenf — In your Face&#39; der Gruppe Farbrausch. Der Artikel erklärt, wie Demos als audiovisuelle Kunstwerke technische und kreative Fähigkeiten unter extremen Größenbeschränkungen demonstrieren und wie sich die Demoszene aus der Warez-Szene entwickelte.</p>
          
          
          <p><strong>Hauptthemen:</strong> Demoszene, Computerkultur, Programmierung, Retrocomputing, Nerd-Kultur, Softwareentwicklung</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>“<strong>Fuenf — In your Face</strong>” ist der Name eines Werkes von <strong>Farbrausch</strong>, einer Gruppe aus der Demo Szene, die laut pouet.net seit 2000 aktiv ist [<a href="https://www.pouet.net/groups.php?which=322&amp;order=release&amp;reverse=1">POUE1</a>].</p>
<p>Aber was ist die Demo-Szene? Dieser Begriff beschreibt eine der ältesten Communities des digitalen Zeitalters. Demos sind musikalisch untermalte und animierte Grafiken, die die technischen und kreativen Fähigkeiten einer Gruppe zur Schau stellen — also demonstrieren — sollen. Eine Art digitales audiovisuelles Aushängeschild.</p>
<p><img src="/2023/2023-04-13-nerd-enzyklop%C3%A4die-17---fuenf--in-your-face/image1.png" alt=""></p>
<p style="text-align: center;font-style:italic">
craiyon.com: “democe scene around 2000”
</p>
<p>Die Demo-Szene ist auch eng vernüpft mit der “Warez-Szene”, <strong>Warez</strong> steht für Raubkopien. Raubkopien waren schon immer ein Problem, erst Recht um 1980 herum. Damals wie auch heute erforderte das Anfertigen einer Raubkopie ein gewisses technisches Verständnis, um den Kopierschutz mit mal mehr mal weniger Aufwand zu umgehen. Dieser Vorgang wird als „cracken“ bezeichnet, also „aufbrechen“.</p>
<p>Die Gruppen, die für die Raubkopie verantwortlich waren, versahen <em>gecrackte</em> Software mit einem Intro, das beim Start der Software angezeigt wurde. Das waren in der Regel digitale Musik-Videos, die den Namen der Cracker-Gruppe kunstvoll in Szene setzen sollen. Diese Intros wurden anfangs <strong>Cracktros</strong> genannt.</p>
<p>Mit der Zeit wurde dem Erstellen der Cracktros mehr Bedeutung beigemessen, wohl auch weil es oft aufwendiger war, beeindruckende Cracktros mit geringem Speicherbedarf zu produzieren, als den Kopierschutz zu umgehen. Diese Visitenkarte musste ja mit dem Spiel ausgeliefert und irgendwie auf den Datenträger gequetscht werden. Speicherplatz war damals eine wertvolle Ressource. Auf einer 1,44 MByte-Diskette, die ein komplettes Spiel enthielt, gab es eigentlich keinen Platz für aufwendige Animationen.</p>
<p>Aus dem <strong>Cracktros</strong> wurden schließlich Demos, die auf speziellen Demo-Disks verteilt wurden. Aus der Not wurde eine Tugend und schließlich der Wettbewerb, mit möglichst wenig Code beeindruckende Animationen zu erschaffen.</p>
<p>Die Demo-Szene war geboren und nabelte sich recht schnell von ihrem bösen Geschwister, der Raubkopierer-Szene, ab. Eine dieser Gruppen war die aus Deutschland stammende Gruppe <strong>Farbrausch.</strong> Seit <strong>2000</strong> liefert Farbrausch recht ansehnliche Werke ab, <strong>fuenf (in your face)</strong> gehört vermutlich eher nicht dazu und ist vielmehr einer der ersten klassischen Troll-Versuche des Internets: Es handelt sich dabei um ein 5 Byte große Demo vom <strong>29. Dezember 2001</strong>, von der man zunächst großes erwartet.</p>
<p>Letztlich handelt es sich aber nur um ziemlich anstrengende <strong>Störgeräusche</strong>, die sogar dazu führen konnten, dass der Computer nicht mehr auf Eingaben reagieren. Farbrausch verstand dieses “Werk” als Antwort auf eine ähnliche Produktion der Demogruppe <strong>TEXTEM</strong>, die nur <strong>6 Byte</strong> groß war.</p>
<p>Das sind die <strong>5 Byte</strong>, mit denen Farbrausch vermutlich für die eine oder andere akustische Irritation sorgte:</p>
<pre><code>95 cd 21 eb fc
</code></pre>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Demoszene, IT-Geschichte, Nerd-Enzyklopädie, Kultur</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 17 - Fuenf — In your Face - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 13 - Total hours wasted here = 42</title>
      <link>http://localhost:1313/2023/2023-04-01-nerd-enzyklop%C3%A4die-13---total-hours-wasted-here-42/</link>
      <pubDate>Sat, 01 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-04-01-nerd-enzyklop%C3%A4die-13---total-hours-wasted-here-42/</guid>
      <description>Dass Entwickler*innen einen speziellen Humor haben sollte bekannt sein. Und es gibt keinen Ort, an dem das klarer wird, als im Quellcode. Ein ikonisches …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Erkundung aus der &#39;Nerd Enzyklopädie&#39; über den speziellen Humor von Entwicklern, der sich in Quellcode-Kommentaren und unkonventionellen Programmierpraktiken widerspiegelt. Der Artikel beleuchtet das berühmte &#39;total_hours_wasted_here = 42&#39;-Meme und präsentiert weitere Beispiele für witzige, zynische oder selbstironische Code-Kommentare und &#39;quick and dirty&#39;-Lösungen.</p>
          
          
          <p><strong>Hauptthemen:</strong> Programmierung, Softwareentwicklung, Humor, Nerd-Kultur, Code-Qualität, Douglas Adams</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Dass Entwickler*innen einen speziellen Humor haben sollte bekannt sein. Und es gibt keinen Ort, an dem das klarer wird, als im Quellcode. Ein ikonisches Beispiel ist dieser subtile Hinweis auf die „Komplexität“ des entsprechenden Code-Bereichs:</p>
<pre><code>// total_hours_wasted_here = 42
</code></pre>
<p>Die <strong>42</strong> ist eine Anspielung auf das Buch “<strong>Per Anhalter durch die Galaxis</strong>” von <strong>Douglas Adams</strong>. Ein Supercomputer gibt darin die Antwort <strong>42</strong> auf „<strong>die ultimative Frage nach dem Leben, dem Universum und dem ganzen Rest</strong>“.</p>
<p>Die 42 wird oft als Verweis auf diese Szene verwendet, wenn eine Zahlenangabe erforderlich ist. So auch in jener flapsigen Dokumentation ist, gerne auch eingebettet in einen zynischen Kommentar zur Code-Qualität:</p>
<pre><code>// Dear maintainer:   
// Once you are done trying to ‘optimize’ this routine,  
// and have realized what a terrible mistake that was,   
// please increment the following counter as a warning   
// to the next guy:   
//  
// total_hours_wasted_here = 42
</code></pre>
<p>In der IT hat sich für derartigen Code der Begriff „quick and dirty“ eingebürgert. Die Lösung ist vielleicht nicht schön, aber dafür schnell implementiert. Wer auch immer sich später mit dem Quellcode auseinander setzt bzw. auseinander setzen muss, wird davon sicherlich nicht begeistert sein. Aber das dürfte wohl auch zum Berufsrisiko gehören.</p>
<p>Noch nicht genug Nerd-Humor? In der Community hat sich dankenswerterweise ein sportlicher Ergeiz entwickelt, möglichst einfallsreichen Quellcode zu produzieren. Wie wäre es mit einem angepassten <strong>Error-Handling</strong>?</p>
<pre><code>Exception up = new Exception(“Something is really wrong.”);  
throw up:
</code></pre>
<p>Oder einer <strong>Selbsterkenntnis</strong> wie dieser:</p>
<pre><code>// drunk, fix later
</code></pre>
<p>Dann hätten wir noch umgekehrte boolsche Werte in der <strong>Programmiersprache C</strong>:</p>
<pre><code>#define TRUE FALSE
</code></pre>
<p>Eine überraschende Offenbarung:</p>
<pre><code>return 1; # returns 1
</code></pre>
<p>Mein persönlicher Favorit: mathematische Trickserein:</p>
<pre><code>// I can’t divide with zero, so I have to divide with something very similar  
result = number / 0.00000000000001;
</code></pre>
<p>Noch mehr unterhaltsame Code-Kuriositäten, die ein ganzes Buch füllen würden, gibt es auf <strong>Stackoverflow</strong>: [<a href="https://stackoverflow.com/questions/184618/what-is-the-best-comment-in-source-code-you-have-ever-encountered">STACK1</a>].</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Programmierung, Humor, Nerd-Enzyklopädie, Kultur</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 13 - Total hours wasted here = 42 - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>cultural_analysis</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 7 - Das allererste Easter-Egg</title>
      <link>http://localhost:1313/2023/2023-03-13-nerd-enzyklop%C3%A4die-7---das-allererste-easter-egg/</link>
      <pubDate>Mon, 13 Mar 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-03-13-nerd-enzyklop%C3%A4die-7---das-allererste-easter-egg/</guid>
      <description>Als Easter Egg - also Osterei - wird eine versteckte Botschaft, Feature oder Gimmick in einem Programm, Computerspiel und eigentlich überall bezeichnet. Der …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine historische Erkundung aus der &#39;Nerd Enzyklopädie&#39; über die Ursprünge von &#39;Easter Eggs&#39; in Software und Spielen. Der Artikel beleuchtet frühe Beispiele wie den &#39;make love&#39;-Befehl und das Spiel &#39;Moonlander&#39;, konzentriert sich aber auf das erste bekannte Easter Egg in Ataris &#39;Adventure&#39; von Warren Robinett und die Prägung des Begriffs durch Steve Wright.</p>
          
          
          <p><strong>Hauptthemen:</strong> Computergeschichte, Gaming, Softwareentwicklung, Easter Egg, Nerd-Kultur, Atari</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Als Easter Egg - also Osterei - wird eine versteckte Botschaft, Feature oder Gimmick in einem Programm, Computerspiel und eigentlich überall bezeichnet. Der Kreativität sind keine Grenzen gesetzt. So z.B. der Aufkleber mit dem Intel-Logo auf der CPU-Verpackung, der auf der Rückseite wie das Innenleben einer CPU aussieht [REDDI1].</p>
<p>Das erste bekannte Easter Egg überhaupt  befindet sich im <strong>make</strong>-Befehl der Computer <strong>PDP-6</strong> und <strong>PDP-10.</strong> Führte man den Befehl mit dem Argument <strong>love</strong> gab es die Ausgabe <strong>not war</strong> zurück, bevor es die Ausführung fortführte:</p>
<pre><code>$ make love

not war
</code></pre>
<p><strong>Moonlander (1973)</strong> von <strong>Jack Burness</strong> von <strong>DEC</strong> (Digital Equipment Corporation) war das erste Spiel mit einer versteckten Funktion. Bewegte man sich lange genug horizontal, erschien irgendwann ein McDonalds Restaurant. Das Spiel wurde für den <strong>GT40</strong> entwickelt und diente eher dazu, die Fähigkeiten des Terminals zu demonstrieren. 1979 adaptierte <strong>Atari</strong> mit <strong>Lunar Lander</strong> das Konzept und entwickelte daraus ein „echtes“ Spiel.</p>
<p>Der Begriff Easter Egg wurde allerdings erst in <strong>1979</strong> geprägt und zwar bei eben jenem Unternehmen: <strong>Atari</strong>. Das Management von Atari hatte ja bekanntermaßen ein schwieriges Verhältnis zu seinen Mitarbeitern (siehe —&gt; Die Entstehungsgeschichte von Activision). Einerseits war man nicht an Gehaltsverhandlungen interessiert, andererseits hielt man es nicht für nötig, die Namen der Entwickler beim Abspann der Spiele zu erwähnen. Heutzutage eine Selbstverständlichkeit. Also die Erwähnung, nicht die Nicht-Erwähnung.</p>
<p>Der Grund für diese Praxis: Man wollte verhindern, dass die Konkurrenz weiß, wen sie bei Atari abwerben muss. Der Entwickler des Spiels <strong>Adventure</strong>, <strong>Warren Roinett</strong>, wählte eine ganz besondere Form des Protests: Er verewigte sich mit diesen Worten innerhalb eines Raum, der im Spiel nur schwer zu erreichen war:</p>
<p><img src="/2023/2023-03-13-nerd-enzyklop%C3%A4die-7---das-allererste-easter-egg/Adventure_EastereggPNG.png" alt=""></p>
<p style="text-align: center;font-style:italic">
„Created by Warren Robinett“ in Ataris Adventure, 1979 \[WIKI4\]
</p>
<p>Das Easter Egg wurde erst nach dem Weggang von <strong>Robinett</strong> entdeckt. Der 15-jährige <strong>Adam Clayton</strong> aus Salt Lake City fand die „geheime Botschaft“ und beschrieb in einem Brief an Atari, welche Schritte notwendig waren, um in den versteckten Raum zu gelangen (ob jemand anders die Entdeckung vor ihm gemacht hat, ist nicht übermittelt). <strong>Adam Clayton</strong> wurde später selber Software-Entwickler, entwickelte sogar Spiele für die Atari-System und arbeitet heute für <strong>Warner Bros Entertainment</strong>.</p>
<p>Die Begeisterung seitens Atari hielt sich in Grenzen. Da Robinett das Unternehmen bereits verlassen hat, machte man sich im Quellcode auf die Suche nach dem Easter Egg. <strong>Brad Stewart</strong> fand die entsprechende Stelle, tat sich aber auch schwer damit, die Nachricht zu entfernen. Weniger aus technischer Sicht, vielmehr aus rebellischem Antrieb. Er hielt mehr davon, die Nachricht durch „Fixed by Brad Stewart“ zu ersetzen [WARR1].</p>
<p>Atari verzichtete schließlich auf die Anpassung des Spiels, nicht nur, weil die Herstellung eines neue ROM-Masters - sozusagen die Vorlage für die Massenproduktion - etwa <strong>10.000 USD</strong> gekostet hätte. <strong>Steve Wright</strong>, damals Direktor für Software Development bei Atari, fand Gefallen an der Idee einer versteckten Botschaft und wählte dafür den Begriff „Easter Egg“. In vielen Spielem (und wie gesagt auch in anderen Produkten) sollten fortan diese kleinen versteckten Botschaften zu finden sein.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Gaming, IT-Geschichte, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 7 - Das allererste Easter-Egg - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 4 - RegExen — Jetzt hast du zwei Probleme</title>
      <link>http://localhost:1313/2023/2023-03-04-nerd-enzyklop%C3%A4die-4---regexen--jetzt-hast-du-zwei-probleme/</link>
      <pubDate>Sat, 04 Mar 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-03-04-nerd-enzyklop%C3%A4die-4---regexen--jetzt-hast-du-zwei-probleme/</guid>
      <description>Reguläre Ausdrücke sind umstritten: Geliebt als vielseitiges Werkzeug, verdammt als undurchschaubare Fehlerquelle. Nicht ohne Grund heißt es: Reguläre Ausdrücke …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle und kritische Auseinandersetzung mit regulären Ausdrücken (RegEx) und dem bekannten Programmierer-Meme &#39;Jetzt hast du zwei Probleme&#39;. Der Artikel beleuchtet die Komplexität, den Missbrauch und die Sicherheitsrisiken (Catastrophic Backtracking, ReDOS) von RegEx und verfolgt die Ursprünge des berühmten Zitats.</p>
          
          
          <p><strong>Hauptthemen:</strong> Reguläre Ausdrücke, Programmierung, Softwareentwicklung, Sicherheit, Nerd-Kultur, Algorithmen</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>Reguläre Ausdrücke sind umstritten: Geliebt als vielseitiges Werkzeug, verdammt als undurchschaubare Fehlerquelle. Nicht ohne Grund heißt es: Reguläre Ausdrücke lösen ein Problem und schaffen zwei neue.<br>
Woher kommt diese Hassliebe?</p>
<h2 id="eine-exotische-tierart">Eine exotische Tierart</h2>
<p>Reguläre Ausdrücke, kurz RegExen, sind mitunter schwer zu entwickeln und irgendwann kaum noch lesbar. Das erschwert das Debugging, also die Fehlersuche. Wie wäre es zum Beispiel mit diesem Schmuckstück:</p>
<pre><code>^(?=.*[A-Z].*[A-Z])(?=.*[!@#$&amp;*])(?=.*[0–9].*[0–9])(?=.*[a-z].*[a-z].*[a-z]).{8}$
</code></pre>
<p>Na, erkannt? Diese RegExe überprüft ob eine Passwort-Zeichenfolge bestimmten Sicherheitsanforderungen entspricht. Diesen Hinweis kann man im Quellcode vielleicht noch dokumentieren. Aber was wenn sich die Sicherheitsanforderungen im Detail ändern?</p>
<h2 id="mit-kanonen-auf-spatzen">Mit Kanonen auf Spatzen…</h2>
<p>RegExen werden außerdem gerne dort eingesetzt, wo eigentlich bessere, standardisierte Lösungen vorhanden sind, wie z.B. für das Parsen von XML [<a href="https://flapenguin.me/xml-regex">FLAP1</a>]:</p>
<pre><code>\s*  
(?(?=&lt;)  
  (?&lt;opentag&gt;  
    &lt; \s*  
    (?&lt;tagname&gt;\w+)  
    (?&lt;attibute&gt;  
      \s+  
      (?&lt;attrname&gt;[^\s&gt;]+)  
      =  
      (?&lt;attrquote&gt;&quot;|'|)  
      (?&lt;attrvalue&gt;[^\s&quot;'&gt;]+)  
      (\k{attrquote})  
    )*  
    \s*  
    (?&lt;selfclosing&gt;\/\s*)?  
    &gt;  
  )  
  (?(&lt;selfclosing&gt;)|  
    (?&lt;children&gt;(?R))  
    (?&lt;closetag&gt;&lt;\s* \/ \s* \k{tagname} \s*&gt;)  
  )  
|  
  (?&lt;text&gt;[^&lt;]*)  
)*  
\s*
</code></pre>
<p>Was aussieht als wäre deine Katze auf der Tastatur eingeschlafen, ist eine funktionsfähige RegExe. Mit genau einem Vorteil: Wenn man den Ausdruck Stück für Stück zerpflückt, um ihn zu verstehen, kann man viel über die Möglichkeiten regulärer Ausdrücke lernen. Im produktiven Betrieb sollte man trotzdem auf alternative Ansätze zurückgreifen, um mit XML-Daten zu arbeiten. Wie z.B. XML-Parser, die soll es ja wirklich geben.</p>
<h2 id="backtracking">Backtracking</h2>
<p>RegExen können auch zu handfesten Sicherheitsproblemen führen. Die Ursache liegt in der Art, wie RegExen verarbeitet werden. Sie durchlaufen einen String zeichenweise, bis eine Bedingung nicht mehr erfüllt wird und springen dann zu dem Zeichen zurück, an dem der Ausdruck vielleicht einen anderen Lösungsweg nehmen kann. Dieses Vorgehen nennt man <strong>Backtracking</strong>, also Rückverfolgung. Diese Funktion kann aber zu einem Rückkopplungs-Effekt führen, wodurch die Dauer der Verarbeitung exponentiell ansteigt. Die Folge nennt man „Catastrophic Backtracking“, eine wichtige Grundlage für <a href="https://medium.com/@nitinpatel_20236/what-are-evil-regexes-7b21058c747e">ReDOS</a> (<a href="https://medium.com/@nitinpatel_20236/what-are-evil-regexes-7b21058c747e">Regular Expression Denial Of Service</a>) Angriffe [<a href="https://www.regular-expressions.info/catastrophic.html">REGU1</a>]. Ein einfaches Beispiel ist dieser reguläre Ausdruck [<a href="https://medium.com/@nitinpatel_20236/what-are-evil-regexes-7b21058c747e">MEDI1</a>]:</p>
<pre><code>(x+x+)+y.
</code></pre>
<p>Diese RegExe lässt sich sicherlich optimieren, sie soll auch nur zeigen, wie schnell die Verarbeitung eskalieren kann. Als Test-String dient diese einfache Zeichenkette:</p>
<pre><code>xxxxxy
</code></pre>
<p>Die Verarbeitung erfordert in diesem Fall in <strong>123 Schritte</strong>. Passen wir die Zeichenkette nun etwas an:</p>
<pre><code>xxxxxxxxxxxxxy
</code></pre>
<p>Mehr als <strong>38.000 Schritte</strong> sind jetzt erforderlich, um den regulären Ausdruck zu prüfen. Mit dem richtigen regulären Ausdruck und der passenden Zeichenkette kann ein Browser „mühelos“ zum Absturz gebracht werden.</p>
<p>Der Einsatz von regulären Ausdrücken ist also streitbar. Übrigens: Dem Netscape Entwickler <strong>Jamie Zawinski</strong> wird zugeschrieben, diese Erkenntnis als erster in Worte gefasst zu haben. Er stellte bereits <strong>1997</strong> fest [<a href="https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/">CODI1</a>]:</p>
<blockquote>
<p>Some people, when confronted with a problem, think “I know, I’ll use regular expressions.” Now they have two problems.</p></blockquote>
<p>Dieser Ausspruch geht wiederum auf <strong>David Tilbrook</strong> zurück, der sich (selber nur vage) erinnert, wie er <strong>1985</strong> auf einer Konferenz in <strong>Dublin</strong> die Nutzung des Kommandozeilen-Tools <strong>awk</strong> kommentiert [<a href="http://regex.info/blog/2006-09-15/247">REGE1</a>]:</p>
<blockquote>
<p>“If you have a problem and you think awk is the solution, then you have two problems.”</p></blockquote>
<p><strong>RegExen</strong> und <strong>awk</strong> sind nicht die einzigen zweifelhaften Tools, auch <a href="http://regex.info/blog/2006-09-15/247">Perl</a> hat einen gewissen Ruf. Aber vermutlich ist das nur eine besondere Art von Nerd-Humor, vor der niemand sicher ist:</p>
<p><img src="/2023/2023-03-04-nerd-enzyklop%C3%A4die-4---regexen--jetzt-hast-du-zwei-probleme/image.png" alt=""></p>
<p style="text-align: center;font-style:italic">
Bildquelle [[XKCD1](https://xkcd.com/1171/)]
</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> RegEx, Programmierung, Sicherheit, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 4 - RegExen — Jetzt hast du zwei Probleme - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item>
  </channel>
</rss>