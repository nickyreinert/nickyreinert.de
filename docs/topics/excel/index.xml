<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" 
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Excel auf Nicky Reinert</title>
    <link>https://nickyreinert.de/topics/excel/</link>
    <description>Blog &amp; Projekte von Nicky Reinert (Institut für digitale Herausforderungen): Webentwicklung &amp; Software Development, SEO &amp; Analytics, Hosting &amp; DevOps, WordPress &amp; Hugo, Tools &amp; Projekte, Datenschutz und digitale Kultur – plus Texte zu KI sowie Autismus &amp; Gesellschaft.</description>
    <generator>Hugo 0.148.2</generator>
    <language>de</language>
    <managingEditor></managingEditor>
    <webMaster></webMaster>
    <copyright></copyright>
    <lastBuildDate>Tue, 26 Sep 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://nickyreinert.de/topics/excel/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>Excel-Vorlage für ISO-Toleranzen</title>
      <link>https://nickyreinert.de/2017/2017-09-26-excel-vorlage-fuer-iso-toleranzen/</link>
      <pubDate>Tue, 26 Sep 2017 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2017/2017-09-26-excel-vorlage-fuer-iso-toleranzen/</guid>
      <description>Zur Berechnung der Passung von Welle und Bohrung werden verschiedene Parameter benötigt. Je nachdem, wie &ldquo;gut&rdquo; Welle und Bohrung zusammenpassen, …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieser Artikel stellt eine Excel-Vorlage zur Berechnung von ISO-Toleranzen für Wellen und Bohrungen vor. Die Vorlage ermöglicht die Bestimmung von Spiel-, Übergangs- und Übermaßpassungen basierend auf Nennmaß, Toleranz und Abmaßen und automatisiert die Berechnung der Passungsart.</p>
          
          
          <p><strong>Hauptthemen:</strong> Maschinenbau, Konstruktion, ISO Toleranzen, Passungen, Excel, Technische Berechnungen, Ingenieurwesen</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>Zur Berechnung der Passung von Welle und Bohrung werden verschiedene Parameter benötigt. Je nachdem, wie &ldquo;gut&rdquo; Welle und Bohrung zusammenpassen, spricht man von Übermaßpassung, Spielpassung oder Übergangspassung. Zur Berechnung kann auf diese Excel-Vorlage für <a href="http://www.pfeffer.ch/toleranzen.htm">ISO-Toleranzen</a> zurückgegriffen werden. Diese zeigt außerdem die Art der <a href="https://de.wikipedia.org/wiki/Passung">Passungen</a> bzw. die Toleranzgraden für Wellen und Bohrungen an.</p>
<h2 id="anwendung-der-excel-vorlage-für-iso-toleranzen">Anwendung der Excel-Vorlage für ISO-Toleranzen</h2>
<p>Die Eingabemaske erwartet folgende Parameter:</p>
<ul>
<li>Bezeichnung der Bohrung / Welle</li>
<li>das Nennmaß in Millimeter</li>
<li>die Maßtoleranz in Mikrometer</li>
<li>die oberen und unteren Abmaße in Mikrometer</li>
</ul>
<p>Die übrigen Abmessungen werden automatisch berechnet. Außerdem erkennt die Excel-Tabelle, um welche Art von Passung es sich handelt: <strong>Übermaßpassung</strong>, <strong>Spielpassung</strong> oder <strong>Übergangspassung</strong>.</p>
<h2 id="hinweise">Hinweise</h2>
<ul>
<li>Die Excel-Datei wurde mit Excel 2007 im XLSX-Format gespeichert. Das Arbeitsblatt erwartet zur korrekten Berechnung die Angabe des Nennmaßes (Nenndurchmesser) der Bohrung und der Welle. Weiterhin werden die Maßtoleranz sowie die jeweiligen oberen und unteren Abmaße benötigt. Die Eingabe erfolgt in den blauen Feldern mit normalen Zahlen; die Formatierung der Zellen ergänzt die Einheit selbstständig. Der Blattschutz kann jederzeit aufgehoben werden, er dient hier nur der Erleichterung der Eingaben.</li>
</ul>
<figure class="center"><img src="/2017/2017-09-26-excel-vorlage-fuer-iso-toleranzen/images/Eingabemaske-300x90.png"
    alt="Eingabemaske der Excel-Vorlage für ISO-Toleranzen und Darstellung für Welle / Bohrung" width="500">
</figure>

<ul>
<li>
<p>Da die Formeln WENN-DANN-Bedingungen enthalten, muss die Passung unbedingt angeben werden. Je nach Toleranzlage erfolgt die Angabe der unteren oder oberen Abmaße im entsprechend blau unterlegten Feld.</p>
</li>
<li>
<p>Um die Bedienung zu erleichterter</p>
</li>
<li>
<p><em>Wenn jemand die Toleranzwerte für Wellen und Bohrungen als CSV- oder Excel-Datei  zur Verfügung stellt, kann ich das Arbeitsblatt gerne derart modifizieren, dass die Toleranzparameter mit Angabe der Passung bereits automatisch erkannt werden.</em></p>
</li>
</ul>
<p>Download der <a href="https://nickyreinert.de/files/Excel-Vorlage-f%C3%BCr-ISO-Toleranzen.xlsx">Excel-Vorlage für ISO-Toleranzen</a></p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> bohrung, excel, ingenieurswesen, iso-toleranzen, passung, spielpassung, uebergangspassung, uebermasspassung, welle, Maschinenbau</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>office</category>
      
      <category>anleitungen</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Excel-Vorlage für ISO-Toleranzen - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>tool_review</dc:type>
      
      
    </item><item>
      <title>WordCloud in PowerPoint</title>
      <link>https://nickyreinert.de/2012/2012-07-23-wordcloud-in-powerpoint/</link>
      <pubDate>Mon, 23 Jul 2012 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2012/2012-07-23-wordcloud-in-powerpoint/</guid>
      <description>Du hast einen nicht allzu langen Text*, den du in eine WordCloud / TagCloud verwandeln möchtest, die du dann in PowerPoint verwenden kannst? Dann lade dir diese …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieser Artikel stellt eine Excel-VBA-Vorlage vor, mit der WordClouds für PowerPoint-Präsentationen erstellt werden können. Er beschreibt die Vorbereitung des Textes in Excel, die Funktionsweise des VBA-Skripts zur Wortzählung und -sortierung sowie die Generierung einer PowerPoint-Folie, auf der die Wörter entsprechend ihrer Häufigkeit grafisch dargestellt werden.</p>
          
          
          <p><strong>Hauptthemen:</strong> Microsoft Office, VBA Programmierung, Datenvisualisierung, PowerPoint, Excel, WordCloud</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>Du hast einen nicht allzu langen Text*, den du in eine WordCloud / TagCloud verwandeln möchtest, die du dann in PowerPoint verwenden kannst? Dann lade dir diese <a href="https://www.nickyreinert.de/files/wordcloud-in-powerpoint/WordCloud-Excel-Vorlage.xlsm">WordCloud-Excel-Vorlage</a> herunter. Die Datei enthält ein VBA-Script, das zuerst einen beliebigen Text in einzelne Wörter zerlegt und diese zählt und sortiert. Danach wird eine PowerPoint-Folie erstellt, in der die Wörter in einer WordCloud dargestellt werden. Je öfter das Wort vorkommt, desto größer erscheint es auf der Folie. Die Wörter sind einfache Textfelder und können danach bearbeitet oder verschoben werden.</p>
<p><img src="/2012/2012-07-23-wordcloud-in-powerpoint/images/WordCloud-in-PowerPoint-150x150.png" alt="WordCloud in PowerPoint"></p>
<p><strong>Vorbereitung in Excel</strong></p>
<p>Zunächst kopierst du deinen Text in das Feld für den Quelltext. Per VBA wird daraus bereits automatisch eine Liste mit den Häufigkeiten der Wörter erstellt.</p>
<p>Mit den Werten für die PowerPoint-Höhe und -Breite legst du die Abmessung der Folie in der Präsentation fest. Je größer die Folie, desto länger dauert das Rendern der WordCloud. Mit der Größe der Schriftart bestimmst du, wie groß das größte Wort ist. Über den Faktor Höhenkorrektur kannst du den vertikalen Abstand der Textfelder korrigieren. Über den Performance-Faktor lässt sich die Geschwindigkeit der Verarbeitung steuern. Je höher der Wert, desto schneller das Skript, aber auch schlechter die Berechnung der Platzierung der Textfelder für die Wörter. Der Top-Wert legt fest, wie viele Wörter verarbeitet werden sollen.</p>
<p>Wenn du alles fertig eingestellt hast, drückst du auf Start und VBA verrichtet seine Arbeit.</p>
<p>Fertig.</p>
<p><em>*VBA und der Algorithmus sind eher nicht für lange Texte geeignet. Ein Text mit 349 unterschiedlichen Wörtern und 584 Wörtern insgesamt wird in 55 Sekunden gerendert.</em></p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> excel, powerpoint, vba, wordcloud, Microsoft Office</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>office</category>
      
      <category>projekte</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>WordCloud in PowerPoint - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>how-to_guide</dc:type>
      
      
    </item><item>
      <title>Tutorial: Web-Scraping mit VBA - Teil 1</title>
      <link>https://nickyreinert.de/2010/2010-09-16-tutorial-web-scraping-mit-vba-teil-1/</link>
      <pubDate>Thu, 16 Sep 2010 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2010/2010-09-16-tutorial-web-scraping-mit-vba-teil-1/</guid>
      <description>In dieser kleinen Tutorial-Serie will ich anhand einer Online-Handy-Datenbank zeigen, wie man mit VBA Seiten aus dem Internet abruft und nach Informationen …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dies ist der erste Teil einer Tutorial-Reihe, die zeigt, wie man mit VBA in Excel Web-Scraping betreibt. Der Artikel erklärt die Grundlagen des Abrufens von Webseiten-Inhalten mittels &#39;WinHttpRequest&#39; und des Parsens von HTML, um eine Liste von Hersteller-Links von einer Handy-Datenbank-Website zu extrahieren.</p>
          
          
          <p><strong>Hauptthemen:</strong> VBA, Web-Scraping, Excel, HTML-Parsing, Automatisierung</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> advanced</p>
          
        </div>
        
        
        <p>In dieser kleinen Tutorial-Serie will ich anhand einer Online-Handy-Datenbank zeigen, wie man mit VBA Seiten aus dem Internet abruft und nach Informationen sucht, die sich dann in einer Tabelle abspeichern lassen. Warum VBA? Es gibt vermutlich elegantere Lösungen, doch Excel ist eine Software, die die meisten zuhause nutzen. Man benötigt also keine zusätzliche Entwicklungsumgebung. Außerdem hat diese Methode den  Vorteil, dass die Daten sofort zur weiteren Verarbeitung verfügbar sind. VBA ist vielleicht nicht die performanteste Programmiersprache, dafür aber relativ leicht zu beherrschen.</p>
<p><a href="http://www.rechtzweinull.de/archives/100-screen-scraping-wann-ist-das-auslesen-und-die-veroeffentlichung-fremder-daten-zulaessig.html">(FYI: Rechtliches zum Thema Web- oder Screen-Scraping)</a></p>
<p> 
Diese Artikelserie richtet sich an den fortgeschrittenen Nutzer. Für den Einsteiger gehe ich nicht auf grundlegendes Programmierwissen ein (was sind Klassen, welche Variablen-Typen bietet Excel, etc.pp.) und für den professionellen Softwareentwickler sind meine Codebeispiele vermutlich zu infantil. Ich habe aber die Erfahrung gemacht, dass VBA und Excel für kurzfristige und kleine Projekte dieser Art recht nützliche Hilfsmittel sind. Außerdem bin ich kein &ldquo;ausgebildeter Softwareentwickler&rdquo;, weshalb ich an der Stelle auch gleich darauf Hinweise, dass Verbesserungsvorschläge sehr gerne gesehen sind!</p>
<p>Welches wissen solltest du also mitbringen?  Da es um das Parsen von HTML-Code geht, solltest du zumindest Bescheid wissen, wenn ich von div- und a-Elementen und css-Klassen rede. Du solltest auch wissen, wie man in VBA Variablen deklariert oder was eine if-Abfrage ist.</p>
<p>Das Endergebnis ist eine Tabelle mit technischen Spezifikationen zu den Mobiltelefonen, die inside-handy.de listet. Insgesamt werden drei Routinen genutzt, die - in umgekehrter Reihenfolge des Vorgehens - folgende Aufgabe haben:</p>
<p>Die letzte Routine greift auf eine Liste von URL zu, die auf die Datenblätter der Geräte verweisen. Von dort wird der HTML-Quellcode nach den  technischen Informationen durchsucht.</p>
<p>Auf inside-handy.de sind die Geräte nach Herstellern sortiert. Jede Herstellerseite verweist auf die entsprechenden Geräte. Wir werden also jede Herstellerseite (bzw. den entsprechenden HTML-Code) zunächst nach den URL zu den Geräten durchsuchen. Diese Aufgabe übernimmt die zweite Routine bzw. Prozedur.</p>
<p>Die erste Routine schließlich liefert die Liste aller URL zu den Herstellern, die wir uns aus dem HTML-Code der Herstellerübersicht auf inside-handy.de laden. Und damit geht es nun los:</p>
<p>1. Die URL zu den Hersteller-Unterseiten auslesen - sub getManufacturer</p>
<p>1.1 Datei per HTTP von einem Server laden</p>
<p>Im ersten Schritt laden wir die komplette HTML-Datei in den Zwischenspeicher. Dazu gibt es mindesten zwei Methoden, die gängigste ist vermutlich die über <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa384106%28v=vs.85%29.aspx">WinHttpRequest</a>. Bevor du das nutzen kannst, musst du bei VBA unter Extras - Verweise jedoch erst die Microsoft HTML Object Library einbinden.</p>
<p>&lsquo;&lsquo;&lsquo;vba
Dim url As String
Dim result As String
Dim winHttpReq As Object
url = &ldquo;<a href="http://www.inside-handy.de/hersteller/handys%22">http://www.inside-handy.de/hersteller/handys"</a></p>
<p>Set winHttpReq = CreateObject(&ldquo;WinHttp.WinHttpRequest.5.1&rdquo;)
winHttpReq.Open &ldquo;GET&rdquo;, url, False
winHttpReq.send
result = winHttpReq.responseText
&rsquo;&rsquo;&rsquo;</p>
<p>Die Deklaration der Variablen erklärt sich von selbst. Nachdem ich eine Instanz vom WinHTTP-Objekt erzeugt habe, kann ich die Parameter übergeben. Dazu gehört neben der URL auch die Bestimmung des HTTP-Requests - nämlich GET. Der letzte, booleansche, Paramter gibt an, ob die Verbindung im asynchronen Modus geöffnet werden soll. Mit .send wird der Request tatsächlich ausgelöst und das Ergebni dann an die String-Variable result zurückgegeben. Dort befindet sich nun unser HTML-Code</p>
<p>Wir können unseren Request natürlich auch per POST absetzen und noch andere Header-Informationen anhängen:</p>
<p>&lsquo;&lsquo;&lsquo;vba
Set winHttpReq = CreateObject(&ldquo;WinHttp.WinHttpRequest.5.1&rdquo;)</p>
<p>winHttpReq.Open = &ldquo;Post&rdquo;, url, False
winHttpReq.setRequestHeader &ldquo;User-Agent&rdquo;, &ldquo;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)&rdquo;
winHttpReq.setRequestHeader &ldquo;Content-type&rdquo;, &ldquo;application/x-www-form-urlencoded&rdquo;
winHttpReq.send (URLEncode(&ldquo;username=user1&amp;password=secret&rdquo;) )</p>
<p>result = winHttpReq.responseText
&rsquo;&rsquo;&rsquo;</p>
<p>So ist es z.B. möglich, Formulardaten zu übermitteln, um an eine passwortgeschützte Seite oder die Ergebnisseite einer Suche zu gelangen. Dabei werden die POST-Daten als weiterer Parameter beim Senden mitgegeben. Eine weitere Möglichkeit ist die Durchführung einer HTTP-Authentifizierung:</p>
<p>&lsquo;&lsquo;&lsquo;vba
Dim HTTPREQUEST_SETCREDENTIALS_FOR_SERVER As Boolean</p>
<p>winHttpReq.Open &ldquo;GET&rdquo;, url, False
winHttpReq.SetCredentials &ldquo;user&rdquo;, &ldquo;password&rdquo;, HTTPREQUEST_SETCREDENTIALS_FOR_SERVER
winHttpReq.send
&rsquo;&rsquo;&rsquo;</p>
<p>Neben dem winHttpRequest-Objekt gibt es noch eine weniger elegante Methoden, in dem direkt eine Instanz des Internet Explorers erzeugt wird:</p>
<p>&lsquo;&lsquo;&lsquo;vba
Dim sPostData As String
Dim bPostData() As Byte
Dim WebBrowser: Set WebBrowser = CreateObject(&ldquo;InternetExplorer.Application&rdquo;)</p>
<p>WebBrowser.Visible = True</p>
<p>sPostData = URLEncode(&ldquo;username=user1&amp;password=secret&rdquo;)
ReDim bPostData(Len(sPostData) - 1)
bPostData = StrConv(sPostDataData, vbFromUnicode)</p>
<p>WebBrowser.navigate url, 2 + 4 + 8, , bPostData, &ldquo;Content-type: application/x-www-form-urlencoded&rdquo;
Do While WebBrowser.Busy
DoEvents
Loop
result = WebBrowser.document.body.innerHTML
WebBrowser.Quit
&rsquo;&rsquo;&rsquo;</p>
<p>Da diese Methode - wie gesagt - nicht sonderlich elegant ist, werde ich aber nicht weiter darauf eingehen.</p>
<p>Nun zurück zu unserem Skript. Den HTML-Code der Seite haben wir nun erstmal in einen String gelegt. Damit wir das HTML-Dokument bequem lesen können, erzeugen wir ein HTML-Document, an das wir den HTML-Code übergeben:</p>
<p>&lsquo;&lsquo;&lsquo;vba
Set HTMLDoc = New HTMLDocument
Set HTMLDoc = CreateObject(&ldquo;htmlfile&rdquo;)
HTMLDoc.Open
HTMLDoc.write (CStr(result))
HTMLDoc.Close
&rsquo;&rsquo;&rsquo;</p>
<p>Auch hier erklärt sich der Code fast von selber: Eine Instanz des Objektes erzeugen, diese Instanz zum &ldquo;Befüllen&rdquo; vorbereiten, den String übergebne und die Instanz wieder &ldquo;schließen&rdquo;. Soweit, so unkompliziert. Im nächsten Schritt geht es nun direkt an das Parsen des Quellcodes um die Links zu den Herstellerseiten zu erhalten. Die Schleife dazu ist nicht sehr aufwendig:</p>
<p>&lsquo;&lsquo;&lsquo;vba
Dim oneElement1, allElements1 As IHTMLElementCollection
Dim oneElement2, allElements2 As IHTMLElementCollection
Dim oneElement3, allElements3 As IHTMLElementCollection</p>
<pre><code>Worksheets(&quot;srcURL&quot;).Range(&quot;a2&quot;).Select
i = 0
Set allElements1 = HTMLDoc.getElementsByTagName(&quot;a&quot;)
      
i = 0
For Each oneElement1 In allElements1
    If oneElement1.parentElement.className = &quot;h\_img&quot; Then
        If oneElement1.parentElement.parentElement.ID = &quot;h\_alle&quot; Then
            If InStr(1, oneElement1.getAttribute(&quot;href&quot;), &quot;/tablets&quot;) &lt;= 0 Then
                Selection.Offset(i, 0).Value = Replace(oneElement1.getAttribute(&quot;href&quot;), &quot;about:&quot;, &quot;http://www.inside-handy.de&quot;)
                i = i + 1
            End If
        End If
        
    End If    
Next oneElement1
</code></pre>
<p>End Sub
&rsquo;&rsquo;&rsquo;</p>
<p>Wie bin ich vorgegangen? Ich habe mir zunächst den Quellcode der Seite angeschaut. Die Liste der Hersteller ist dort eine Tabelle mit den Logos der Unternehmen. Die gewünschte Information befindet sich in a-Elementen, die wiederum innerhalb eines div-Elements liegen. Das gemeinsame &ldquo;Oberelement&rdquo; ist ein div-Container mit der CSS-Klasse &ldquo;h_img&rdquo; bzw. einem weiterne div-Container (&ldquo;h_alle&rdquo;). Außerdem gibt es einen ausgeblendeten div-Container mit einer Liste von Tablet-Herstellern, diese haben den Begriff &ldquo;/tablet&rdquo; in der href-Angabe und müssen ignoriert werden.</p>
<p>&lsquo;&lsquo;&lsquo;html</p>
<div id="h\_alle">
	<div class="h\_img">
		<a href="/hersteller/xyz" title="Handys Hersteller: XYZ">
			<img />
		</a>
	</div>
</div>
'''
<p>Mit &ldquo;Set allElements1 = HTMLDoc.getElementsByTagName(&ldquo;a&rdquo;)&rdquo; lasse ich mir also erst alle a-Elemente aus dem Quellcode in meinen &ldquo;Container&rdquo; legen.</p>
<p>Mit der ersten for-each-Schleife durchlaufe ich nun diesen Container und prüfe mit den ersten zwei if-Abfragen, ob sich das a-Element unterhalb der erwähnten div-Container befindet. Da auf der Seite noch ein weitere identische div-Container mit diesen css-Klassen für die Liste der Tablet-Hersteller existiert, muss ich mit einer dritten if-Abfrage die URL des a-Elements überprüfen. Erst dann kann ich das Attribut des a-Elements auslesen und in mein Excel-Worksheet schreiben.</p>
<p>Fertig ist der erste Schritt - eine Liste der URL zu den jeweiligen Herstellern. Im nächsten Teil werde ich diese Liste durchgehen und von den jeweiligen Seiten die URL zu den Geräten auslesen.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> VBA, Excel, Web-Scraping, Tutorial</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>development</category>
      
      <category>office</category>
      
      <category>anleitungen</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Tutorial: Web-Scraping mit VBA - Teil 1 - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>tutorial</dc:type>
      
      
    </item>
  </channel>
</rss>