<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" 
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Web Development auf Nicky Reinert</title>
    <link>http://localhost:1313/topics/web-development/</link>
    <description>Blog &amp; Projekte von Nicky Reinert (Institut für digitale Herausforderungen): Webentwicklung &amp; Software Development, SEO &amp; Analytics, Hosting &amp; DevOps, WordPress &amp; Hugo, Tools &amp; Projekte, Datenschutz und digitale Kultur – plus Texte zu KI sowie Autismus &amp; Gesellschaft.</description>
    <generator>Hugo 0.148.2</generator>
    <language>de</language>
    <managingEditor></managingEditor>
    <webMaster></webMaster>
    <copyright></copyright>
    <lastBuildDate>Thu, 08 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/topics/web-development/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>Automatisierte WordPress Installation</title>
      <link>http://localhost:1313/2020/2020-10-08-automatisierte-wordpress-installation/</link>
      <pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://localhost:1313/2020/2020-10-08-automatisierte-wordpress-installation/</guid>
      <description>Et voilá. Ein BASH Script, um WordPress automatisiert über die Kommandozeile zu installieren, inklusive Theme und beliebigen Plugins sowie - wenn benötigt - …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieser Artikel stellt ein Bash-Skript zur vollautomatischen Installation und Konfiguration von WordPress vor. Das Skript nutzt &#39;wp-cli&#39; zur Einrichtung von Core, Datenbank, Themes und Plugins und kann die neue WordPress-Instanz mit zufällig generiertem Content (Beiträge, Kategorien, Bilder) über externe APIs befüllen, was es zu einem nützlichen Tool für Entwickler und Administratoren macht.</p>
          
          
          <p><strong>Hauptthemen:</strong> WordPress, Automatisierung, Bash Scripting, DevOps, wp-cli, Server Administration, Web Development, Content Generation</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> advanced</p>
          
        </div>
        
        
        <p>Et voilá. Ein BASH Script, um WordPress automatisiert über die Kommandozeile zu installieren, inklusive Theme und beliebigen Plugins sowie - wenn benötigt - zufälligen Beiträgen, Kategorien, Tags und Bildern.</p>
<h2 id="warnung">Warnung!</h2>
<p>Du solltest geübt im Umgang mit der Shell, Bash und WordPress sein und unbedingt <strong>Backups</strong> nutzen. Das Script verwendet, wenn der entsprechende Parameter gesetzt ist, den Befehl &ldquo;rm -rf&rdquo;, um einen Ordner komplett zu <strong>löschen</strong>. Dieser Schritt lässt sich nicht widerrufen. Außerdem wird, sofern per Parameter gefordert, eine Datenbank mit &ldquo;DROP DATABASE&rdquo; komplett entfernt. Wenn du das Script auf eine existierende WordPress-Installation oder Datenbank anwendest, können existierende Daten <strong>überschrieben</strong> werden!</p>
<h2 id="funktionsweise">Funktionsweise</h2>
<p>Das Script wird über die Kommandozeile aufgerufen und nutzt die <a href="https://wp-cli.org/de/">WordPress Kommandozeilen-Benutzeroberfläche,</a> um <strong>WordPress</strong> zu installieren sowie samt <strong>Themes</strong> und <strong>Plugins</strong> einzurichten. Du kannst außerdem beliebig viele <strong>Beiträge</strong> anlegen. Die Inhalte für die Beiträge stammen von einem Online-Dienst für zufällige englische Texte: <a href="http://metaphorpsum.com/paragraphs/">metaphorpsum.com/paragraphs</a>. Außerdem werden zufällige <strong>Textauszüge</strong> (Excerpts) sowie <strong>Schlagwörter</strong> (Tags) und sogar <strong>Bilder</strong> jedem Beitrag hinzugefügt. Beiträge werden außerdem Kategorien zugeordnet. Diese werden ebenfalls <strong>zufällig</strong> bis zu einer Tiefe von 2 Ebenen erzeugt.</p>
<h2 id="installation">Installation</h2>
<p>Du findest den Sourcecode auf github: <a href="https://github.com/nickyreinert/AutomatedWordPressInstallation">https://github.com/nickyreinert/AutomatedWordPressInstallation</a>.</p>
<p>Nach der Installation kopierst du die Datei settings-template zu .settings, um in dieser Datei die Einstellungen für deine WordPress-Installation vorzunehmen. Du startest den Prozess mit <strong>bash start.sh</strong> oder setzt den Ausführen-Flag für bash.sh um diese direkt auszuführen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">chmod u+x bash.sh
</span></span><span class="line"><span class="ln">2</span><span class="cl">./bash.sh
</span></span></code></pre></div><h2 id="zufällige-inhalte">Zufällige Inhalte</h2>
<p>Das Script ermöglicht das Anlegen von beliebig vielen zufälligen Beiträgen in beliebig vielen zufälligen Kategorien. Was genau dabei passiert, beschreibe ich hier kurz:</p>
<p>Zunächst wird eine Kategorie erzeugt. Dazu wird von der folgenden API ein zufälliges Wort abgerufen: <a href="https://random-word-api.herokuapp.com/word?swear=0&amp;number=">https://random-word-api.herokuapp.com/word?swear=0&amp;number=</a></p>
<p>Dieser Kategorie wird dann ein Beitrag wird mit einer beliebigen Anzahl von <strong>Absätzen</strong> von dieser API zugeordnet: <a href="http://metaphorpsum.com/paragraphs/">http://metaphorpsum.com/paragraphs/</a>. Der Beitrag erhält einen zufälligen Titel (von dort: <a href="http://metaphorpsum.com/sentences/">http://metaphorpsum.com/sentences</a>), einen Textauszug (gleiche API), sowie eine beliebige Anzahl zufälliger Tags (Schlagwörter), ebenfalls von <a href="https://random-word-api.herokuapp.com/word?swear=0&amp;number=">random-word-api.herokuapp.com</a>. Dann werden für diesen Beitrag Revisionen erzeugt - auch diese in beliebiger Höhe. Abschließend erhält jeder Beitrag ein zufälliges Featured Image sowie ein weiteres zufälliges Bild am Ende des Fließtextes.</p>
<p>Je nachdem, wieviele Beiträge und Kategorien bzw. Sub-Kategorien eingerichtet werden soll, wird dieser Prozess natürlich wiederholt.</p>
<p><em>(Bisher werden die Inhalte leider nur auf Englisch eingefügt)</em></p>
<h2 id="einstellungen">Einstellungen</h2>
<p>Alle Einstellungen befinden sich in der Datei <strong>.settings</strong> und werden im Folgenden beschrieben. Der PROJECT-Parameter kann im weiteren Verlauf als Platzhalter verwendet werden und sollte keine Leerzeichen oder Sonderzeichen enthalten:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">PROJECT=myWordPressBlog
</span></span></code></pre></div><h3 id="datenbank">Datenbank</h3>
<p>Du kannst eine neue Datenbank anlegen (CREATE_DB) oder auf eine existierende Datenbank zurückgreifen.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">DB_DROP=yes|no
</span></span><span class="line"><span class="ln">2</span><span class="cl">CREATE_DB=yes|no
</span></span><span class="line"><span class="ln">3</span><span class="cl">DB_ROOT=root
</span></span><span class="line"><span class="ln">4</span><span class="cl">DB_ROOT_PASSWORD=secret
</span></span></code></pre></div><p>Willst du eine frische Datenbank anlegen, solltest du die alte Datenbank mit DB_DROP=yes löschen. Soll eine neue Datenbank angelegt werden, müssen die Zugangsdaten für einen privilegierten Nutzer angegeben werden: Mit den folgenden Parameter legst du fest, wie WordPress auf die Datenbank zugreift:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">DB_HOST=127.0.0.1
</span></span><span class="line"><span class="ln">2</span><span class="cl">DB_NAME=&#34;${PROJECT}&#34;
</span></span><span class="line"><span class="ln">3</span><span class="cl">DB_PREFIX=&#34;wp_&#34;
</span></span><span class="line"><span class="ln">4</span><span class="cl">
</span></span><span class="line"><span class="ln">5</span><span class="cl">ADD_DB_USER=yes|no
</span></span><span class="line"><span class="ln">6</span><span class="cl">DB_USER=&#34;${PROJECT}&#34;
</span></span><span class="line"><span class="ln">7</span><span class="cl">DB_USER_PASSWORD=$(cat /dev/urandom | tr -dc &#39;a-zA-Z0-9&#39; | fold -w 32 | head -n 1)
</span></span></code></pre></div><p>Das Passwort wird im Beispiel zufällig erzeugt, willst du ein eigenes Passwort verwenden, kannst du den Parameter überschreiben, z.B:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">DB_USER_PASSWORT=secret
</span></span></code></pre></div><p>Der DB-Nutzer wird natürlich nur angelegt, wenn ADD_DB_USER=yes gesetzt ist. Andernfalls musst du hier die passenden Zugangsdaten angeben.</p>
<h3 id="wordpress">WordPress</h3>
<p>Du kannst auf eine existierende Installation zurückgreifen, um z.B. dort Beiträge hinzuzufügen, oder WordPress komplett neu installieren. Hier kannst du z.B. auch den oben festgelegten PROJECT-Parameter nutzen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">WP_PATH</span><span class="o">=</span><span class="s2">&#34;/var/nginx/htdocs/${PROJECT}/&#34;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">INSTALL_CORE</span><span class="o">=</span><span class="n">yes</span><span class="o">|</span><span class="n">no</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">WP_DROP</span><span class="o">=</span><span class="n">yes</span><span class="o">|</span><span class="n">no</span>
</span></span></code></pre></div><p>Mit WP_DROP kannst du festlegen, dass der Ordner WP_PATH komplett gelöscht wird. <strong>Vorsicht</strong> ist hier also geboten! Die folgenden Parameter betreffen deine allgemeinen WordPress-Einstellungen. Bei der URL kannst du wieder den PROJECT-Platzhalter nutzen.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">WP_TITLE=&#39;WordPress Test&#39;
</span></span><span class="line"><span class="ln">2</span><span class="cl">URL=&#34;https://blog.example.org/${PROJECT}&#34;
</span></span><span class="line"><span class="ln">3</span><span class="cl">WP_ADMIN_NAME=admin
</span></span><span class="line"><span class="ln">4</span><span class="cl">WP_ADMIN_EMAIL=mail@example.org
</span></span><span class="line"><span class="ln">5</span><span class="cl">WP_ADMIN_PASSWORD=secret
</span></span></code></pre></div><p>Willst du ein eigene Passwort vergeben, kannst du auch hier ein zufälliges Passwort erzeugen lassen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">WP_ADMIN_PASSWORD=$(cat /dev/urandom | tr -dc &#39;a-zA-Z0-9&#39; | fold -w 32 | head -n 1)
</span></span></code></pre></div><h3 id="theme-und-plugins">Theme und Plugins</h3>
<p>Mit den folgenden Parametern legst du fest, welches Theme eingerichtet und welche Plugins installiert werden sollen. Der Theme-Name ist der Slug des Themes:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">INSTALL_THEME=yes|no
</span></span><span class="line"><span class="ln">2</span><span class="cl">THEME=&#34;elementor&#34;
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl">INSTALL_PLUGINS=no
</span></span><span class="line"><span class="ln">5</span><span class="cl">PLUGINS=&#34;elementor wordpress-seo tinymce-advanced ninja-forms shortcodes-ultimate instagram-feed ml-slider the-events-calendar amp contact-widgets coblocks woocommerce&#34;
</span></span></code></pre></div><p>Du kannst mehrere Plugins angeben, wenn diese per Leerzeichen voneinander getrennt sind.</p>
<h3 id="inhalte">Inhalte</h3>
<p>Der nächste Abschnitt regelt das (zufällige) Anlegen von Beiträgen, Kategorien usw. Natürlich musst du keine Inhalte anlegen. Ist <strong>RANDOMIZE_EVERY_ITEM</strong> auf <strong>yes</strong> gesetzt, wird jeder Beitrag wie oben zufällig erzeugt. Da das eine Menge HTTP-Requests erfordert, kannst du den Parameter auch auf no setzen. In dem Fall wird jede Zufalls-API genau einmal abgerufen. Der ganze Prozess wird dadurch maßgeblich beschleunigt.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">ADD_CONTENT=yes|no
</span></span><span class="line"><span class="ln">2</span><span class="cl">META_INPUT=&#34;&#34;
</span></span><span class="line"><span class="ln">3</span><span class="cl">RANDOMIZE_EVERY_ITEM=yes|no
</span></span></code></pre></div><p>Manche Themes, wie z.B. <strong>Elementor</strong>, fügen den Inhalten, also Beiträgen, bestimmte Meta-Informationen hinzu. Beim automatisierten Anlegen von Beiträgen passiert das allerdings nicht automatisch. Du kannst das hier also entsprechend einrichten. Der Wert wird als JSON übergeben. Achte auf das einfache Anführungszeichen.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">META_INPUT=&#39;{&#34;_elementor_edit_mode&#34;:&#34;&lt;![CDATA[builder]]&gt;&#34;,&#34;_elementor_template_type&#34;:&#34;&lt;![CDATA[kit]]&gt;&#34;,&#34;_elementor_version&#34;:&#34;&lt;![CDATA[2.9.13]]&gt;&#34;}&#39;
</span></span></code></pre></div><p>Die folgenden Paremeter legen fest, wieviele Inhalte du erzeugen möchtest:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">COUNT_CATEGORIES_LEVEL1=10
</span></span><span class="line"><span class="ln">2</span><span class="cl">COUNT_CATEGORIES_LEVEL2=5
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl">COUNT_POSTS=100
</span></span><span class="line"><span class="ln">5</span><span class="cl">COUNT_PARAGRAPHS=20
</span></span><span class="line"><span class="ln">6</span><span class="cl">COUNT_POST_REVISIONS=5
</span></span><span class="line"><span class="ln">7</span><span class="cl">COUNT_TAGS=20
</span></span></code></pre></div><p>Im Beispiel werden 10 Haupt-Kategorien mit jeweils 5 Unter-Kategorien angelegt. Jede Kategorie wird mit 100 Posts befüllt und jeder Post erhält 20 Tags und 5 Revisionen. Das ergibt also 10 * 5 * 100 * 5 Beiträge = 25.000 Beiträge! In diesem Fall macht es Sinn RANDOMIZE_EVERY_ITEM auf no zu setzen, da du sonst mehre tausende Anfragen an die Zufalls-APIs generieren würdest. COUNT_PARAGRAPHS legt die Länge jedes Beitrags in Absätzen fest.</p>
<h3 id="standard-parameter">Standard-Parameter</h3>
<p>Die folgenden Parameter musst du in der Regel nicht anpassen. WP_CLI legt den Pfad zur WordPress Kommandozeilen Oberfläche fest. Wird die Datei nicht gefunden, muss WP CLI installiert werden. Dazu dient der Parameter WP_CLI_SOURCE.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">WP_CLI_EXEC=~/wp-cli.phar
</span></span><span class="line"><span class="ln">2</span><span class="cl">WP_CLI_SOURCE=https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
</span></span></code></pre></div><p>Im folgenden werden die Quellen für die APIs festgelegt. Hier solltest du nichts ändern, da das Script für die Zusammenarbeit mit diesen Quellen eingerichtet ist. Einzig beim Parameter RANDOM_IMAGE_API_URI kannst du bei Bedarf in der URL die Auflösung der abgefragten Bilder festlegen.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">RANDOM_WORD_API_URL=&#39;https://random-word-api.herokuapp.com/word?swear=0&amp;number=&#39;
</span></span><span class="line"><span class="ln">2</span><span class="cl">RANDOM_SENTENCE_API_URL=&#39;http://metaphorpsum.com/sentences/&#39;
</span></span><span class="line"><span class="ln">3</span><span class="cl">RANDOM_TEXT_API_URL=&#39;http://metaphorpsum.com/paragraphs/&#39;
</span></span><span class="line"><span class="ln">4</span><span class="cl">RANDOM_IMAGE_API_URI=&#39;https://picsum.photos/200/300.jpg&#39;
</span></span></code></pre></div>
        
        
        <div class="tags">
          <p><strong>Tags:</strong> automatisierung, bash, installation, script, setup, wordpress, DevOps</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      <category>development</category>
      
      <category>tools</category>
      
      <category>wordpress</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Automatisierte WordPress Installation - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>project_documentation</dc:type>
      
      
    </item><item>
      <title>CSS über den HTTP-Header ausspielen</title>
      <link>http://localhost:1313/2020/2020-06-04-css-ueber-den-http-header-ausspielen/</link>
      <pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://localhost:1313/2020/2020-06-04-css-ueber-den-http-header-ausspielen/</guid>
      <description>Jeder kennt das Problem: Man hat stundenlang an einem Stylesheet auf dem Staging-Server rumgebastelt, will es nun auf den Live-Server kopieren und die Änderung …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Ein kurzer technischer Tipp für Web-Entwickler, der zeigt, wie man eine CSS-Datei über den HTTP &#39;Link&#39;-Header lädt. Diese Methode kann genutzt werden, um eine Staging-Umgebung visuell von einer Live-Umgebung zu unterscheiden und so Verwechslungen zu vermeiden. Der Artikel enthält Konfigurationsbeispiele für Nginx und Apache.</p>
          
          
          <p><strong>Hauptthemen:</strong> CSS, HTTP, Web-Development, Server-Konfiguration, Nginx, Apache</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>Jeder kennt das Problem: Man hat stundenlang an einem Stylesheet auf dem Staging-Server rumgebastelt, will es nun auf den Live-Server kopieren und die Änderung ist nicht sichtbar. Die Fehlersuche beginnt. Man prüft den Cache. Vom Browser. Vom Server. Ist man überhaupt auf dem richtigen Server? Hat der Upload geklappt? Und so weiter. Eric Meyer hat das ganze Dilemma 2009 treffend beschrieben und auch eine Lösung mitgeliefert, von der ich noch nicht gehört habe:</p>
<p>Nutze doch einfach die HTTP-Header um deine Staging- und Live-Umgebung eindeutig voneinander zu unterscheiden. Der Link-Parameter im HTTP-Header nämlich auch die Angabe von Style-Sheet-Dateien. Und das sieht dann so aus:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">Header add Link &#34;&lt;/staging.css&gt;;rel=stylesheet;type=text/css;media=all&#34;
</span></span></code></pre></div><p>In nginx kann man das folgendermaßen im Server-Block implementieren:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">add_header Link &#34;&lt;/wp-content/themes/nickyreinert/style.header.css&gt;;rel=stylesheet;type=text/css;media=all&#34;;
</span></span></code></pre></div><p>Wer Apache nutzt, setzt den &ldquo;CSS-Header&rdquo; folgendermaßen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">Header add Link &#34;&lt;/wp-content/themes/nickyreinert/style.header.css&gt;;rel=stylesheet;type=text/css;media=all&#34;
</span></span></code></pre></div><p>Natürlich habe ich die Spielerei gleich bei mir eingebaut:</p>
<p><img src="/2020/2020-06-04-css-ueber-den-http-header-ausspielen/images/grafik-700x382.png" alt=""></p>
<p>CSS-Datei im HTTP-Header ausgeliefert</p>
<p>Damit lässt sich grundsätzlich auch das Stylesheet deines Wordpress-Themes ausliefern: Da WordPress aber die style.css nutzt, um Theme-Informationen zu verarbeiten, musst du auf dieses kleine Feature dann verzichten. Außerdem wird CSS im Link-Header nicht von jedem Browser unterstützt.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> css, http</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>CSS über den HTTP-Header ausspielen - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_tip</dc:type>
      
      
    </item><item>
      <title>Lorem Picsum - Der Generator für zufällige Bilder</title>
      <link>http://localhost:1313/2019/2019-04-29-lorem-picsum-der-generator-fuer-zufaellige-bilder/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://localhost:1313/2019/2019-04-29-lorem-picsum-der-generator-fuer-zufaellige-bilder/</guid>
      <description>Lorem Ipsum kennt jeder. Das sind diese lateinisch anmutenden Texte, die man als Platzhalter verwenden kann. Zu einem richtigen Layout gehören aber nicht nur …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieser Artikel stellt &#39;Lorem Picsum&#39; vor, eine kostenlose und unkomplizierte API zur Generierung zufälliger Platzhalterbilder für Webentwicklung und Design. Er erläutert die Nutzung der API zur Festlegung von Bildabmessungen und zur Anwendung von Filtern wie Graustufen und Unschärfe, und verweist auf ähnliche Dienste.</p>
          
          
          <p><strong>Hauptthemen:</strong> Web Development, Design Tools, Placeholder Images, API, Front-end Development, Image Generation, Freeware</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Lorem Ipsum kennt jeder. <a href="https://de.wikipedia.org/wiki/Lorem_ipsum">Das sind diese lateinisch anmutenden Texte,</a> die man als Platzhalter verwenden kann. Zu einem richtigen Layout gehören aber nicht nur Texte, sondern auch Bilder. <em>Doch woher nehmen, wenn nicht stehlen</em>? <strong><a href="https://picsum.photos/">Lorem Picsum</a></strong> <a href="https://picsum.photos/">heißt die Antwort naheliegenderweise</a>. Dabei handelt es sich um eine <strong>kostenlose</strong> und <strong>unkomplizierte</strong> API, um Bilder in deine Seite bzw. dein Layout einzubinden. Die Bilder werden dabei bei jedem Aufruf zufällig neu ausgewählt:</p>
<p>Das schöne: Du kannst die Bilder relativ zielgenau aussuchen. Egal, ob du ein quadratisches Format oder monochrome Bilder benötigst: Über die entsprechenden Parameter kannst du festlegen, welche Art von Platzhalter-Bild du einbinden willst:</p>
<p>Die Größe des Bildes wird über die letzten beiden Pfad-Elemente definiert, wenn du nur eine Ziffer eingibst, erhälst du ein quadratisches Bild.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">https://picsum.photos/300/400
</span></span><span class="line"><span class="ln">2</span><span class="cl">https://picsum.photos/500
</span></span></code></pre></div><p><img src="https://picsum.photos/300/400" alt=""></p>
<p>Ein zufälliges Bild mit den Abmessungen 300 x 400 Pixel</p>
<p><img src="https://picsum.photos/400" alt=""></p>
<p>Ein zufälliges quadratisches Bild mit der Kantenlänge 400 Pixel</p>
<p>Über zusätziche <strong>Get-Parameter</strong> kannst du weitere Eigenschaften des Bildes beeinflussen, wie z.B. die Farbe oder die Unschräfe. Den Grad der Unschärfe kannst du nach Belieben zwischen 1 und 10 einstellen. Die Parameter lassen sich natürlich auch kombinieren:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">https://picsum.photos/100/200?grayscale
</span></span><span class="line"><span class="ln">2</span><span class="cl">https://picsum.photos/200/300/?blur
</span></span><span class="line"><span class="ln">3</span><span class="cl">https://picsum.photos/200/300/?blur=2
</span></span><span class="line"><span class="ln">4</span><span class="cl">https://picsum.photos/id/948/100/200?blur=10&amp;grayscale
</span></span></code></pre></div><p><img src="https://picsum.photos/300/400?blur=10&amp;grayscale" alt=""></p>
<p>Ein zufälliges, farbloses Bild mit einem Unschärfefaktor von 10</p>
<p><a href="https://picsum.photos/">Auf der Seite des Anbieters finden sich noch ein paar andere Paramter</a>, um z.B. eine Liste von verfügbaren Bildern auszugegeben oder ein bestimmtes Bild per ID anzusprechen.</p>
<h2 id="alter-hut">Alter Hut</h2>
<p>Tatsächlich ist die Idee gar nicht mal so neu. Seit mindestens 2012 gibt es <a href="http://lorempixel.com">http://lorempixel.com</a> und es gibt noch <a href="https://loremipsum.io/de/21-of-the-best-placeholder-image-generators/">eine ganze Reihe mehr,</a> u.a. das berüchtigte Bacon-Mockup.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Lorem Picsum, Bilder, API, Webentwicklung, Design</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      <category>projekte</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Lorem Picsum - Der Generator für zufällige Bilder - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>tool_review</dc:type>
      
      
    </item><item>
      <title>WordPress Tag Cloud mit Umlauten (äöü) korrekt sortieren - Oder: Der WordPress Filter im Live-Beispiel erklärt</title>
      <link>http://localhost:1313/2019/2019-04-10-php-mit-welcher-methode-durchsucht-man-ein-array-am-schnellsten/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://localhost:1313/2019/2019-04-10-php-mit-welcher-methode-durchsucht-man-ein-array-am-schnellsten/</guid>
      <description>Das schöne an PHP: Viele Wege führen nach Rom.
Das Problem mit PHP: Viele Wege führen nach Rom.
Denn diese Vielfallt stellt den Entwickler von Welt mituner vor …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieser Artikel zeigt, wie man WordPress Tag Clouds mit Umlauten (äöü) korrekt sortiert, indem man einen benutzerdefinierten PHP-Filter nutzt. Er demonstriert die Implementierung einer natürlichen, nicht-sensitiven Sortierung durch temporäres Ersetzen von Umlauten und dient als praktisches Beispiel für die Anwendung von WordPress-Filtern zur Anpassung von Kernfunktionen.</p>
          
          
          <p><strong>Hauptthemen:</strong> WordPress, PHP, Filter, Hooks, Tag Cloud, Umlaute, Sortierung, Web Development, Customization</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>Das schöne an PHP: Viele Wege führen nach Rom.</p>
<p>Das Problem mit PHP: Viele Wege führen nach Rom.</p>
<p>Denn diese Vielfallt stellt den Entwickler von Welt mituner vor eine schwierige Frage: <a href="http://nickology.com/2012/07/03/php-faster-array-lookup-than-using-in_array/">Welcher Weg ist der kürzeste</a>? Will man z.B. einen Wert (<em>needle</em>) in einem Array (<em>haystack</em>) suchen, gibt es in PHP zehn verschiedene Methoden. Du hast richtig gelesen: Zehn. Ich unterscheide einerseits auch die strikten und nicht-strikten Vergleiche, andererseits lasse ich die wirklich exotischen Methoden außen vor. Welche Methoden am schnellsten sind, werde ich versuchen im Folgenden herauszufinden. Außerdem schaue ich mir an ob es unter den letzten PHP-Versionen (7.0 bis 7.3*) Unterschiede in der Geschwindigkeit gibt.</p>
<p><em>* Genau genommen sind es PHP 7.0.33-1, PHP 7.1.26-1, PHP 7.2.14-1, PHP 7.3.1-3</em></p>
<p>Eins vorweg: Wenn du mit Schmalspur-Arrays arbeitest, die nur 12 Einträge enthalten, deren Werte nur ein ein Zeichen lang sind, kannst du hier gleich aussteigen. Du wirst schnell feststellen, dass sich Geschwindigkeitsvorteile erst bemerkbar machen, wenn die Arrays und ihre Werte länger werden.</p>
<p>Im folgenden Stelle ich die Methoden kurz vor. Dann beschreibe ich, wie ich die Messungen durchgeführt habe. Danach gibts das bunte Zahlenwerk, in dem ich erst die Methoden miteinander vergleiche und dann die PHP-Versionen.</p>
<p><em><strong>tl;dr:</strong></em> in_array() und nicht strikter Vergleich schlägt alle anderen Methoden. Ende der Durchsage.</p>
<h2 id="welche-methoden-gibt-es-um-ein-array-nach-einem-wert-zu-durchsuchen">Welche Methoden gibt es, um ein Array nach einem Wert zu durchsuchen</h2>
<h3 id="array_search---strikt--nicht-strikt">array_search - strikt / nicht strikt</h3>
<p>Diese Methode ist der klassische Weg. Array_search() durchsucht ein Array nach einem beliebigen Wert und liefert dann den dazugehörigen Schlüssel zurück. Ist der dritte Parameter auf TRUE gesetzt, erfolgt eine strikte Suche, bei dem nicht nur Inhalt sondern auch Typ überprüft werden (ein &ldquo;typstarker Vergleich&rdquo;).</p>
<h3 id="in_array---strikt--nicht-strikt">in_array - strikt / nicht strikt</h3>
<p>Diese Methode ist ähnlich zu der erst genannten. Allerdings wird hier nur ein Booleanscher Wert zurückgegeben, der anzeigt, ob der Wert im Array enthalten ist. Oder nicht. Auch in_array unterstützt typstarke Vergleiche.</p>
<h3 id="foreach---strikt--nicht-strikt">foreach - strikt / nicht strikt</h3>
<p>Natürlich hat man auch die Möglichkeit mit einer Schleife die Suche maximal zu individualisieren. Innerhalb der Schleife kann man beliebige Ereignise definieren und natürlich auch einen typstarken Vergleich anstellen. Ich habe die Schleife, für die Vergleichbarkeit, sehr einfach gehalten. Ist der Vergleich erfolgreich, wird die Schleife mit break; verlassen.</p>
<h3 id="isset">isset</h3>
<p>Diese Methode ist eigentlich nicht das Mittel der Wahl, um ein Array nach einem Wert zu durchsuchen. Da ich aber sehen will, wie sich dieser Umweg im Vergleich schlägt, habe ich die Methode trotzdem mit aufgenommen. Zunächst nutze ich array_flip() um aus Schlüsseln Werte und vice versa zu machen. Dann kann ich mit isset() prüfen, ob der Schlüssel sprich der ehemalige Wert vorhanden ist.<br>
Dazu muss gesagt werden, dass diese Methode ansich sehr schnell sein kann. Wenn der Anwendungsfall es zulässt, dass du deine Daten als Schlüssel und nicht als Wert in einem Array ablegst, solltest du diese Funktion bevorzugen! Das klappt natürlich nicht, wenn du mit NULL-Werten oder nicht uniquen Werten arbeitest!</p>
<h3 id="array_intersect">array_intersect</h3>
<p>Auch das ist ein Exot, der für diese Zwecke eigentlich wenig sinnvoll ist. Was nicht heißt, dass es auch hierfür Anwendungsfälle geben kann. Mit <strong>array_intersect()</strong> wird eine Teilmenge von zwei Arrays erzeugt. Ich übergebe die zu suchende <em>needle</em> als Array und bilde die Teilmenge mit dem <em>haystack</em>. Ist das Ergebnis-Array größer als 0, enthält der Heuhaufen die Nadel. Der Vorteil: Sucht man mehr als eine Nadel, kann man mit der Schnittmenge sehr gut weiterarbeiten. Von dieser Methode gibt es einige verrückte Abwandlungen, die ich hier aber nicht alle getrennt betrachten möchte.</p>
<h3 id="array_keys---strikt--nicht-strikt">array_keys - strikt / nicht strikt</h3>
<p>Der nächste Exot in dieser Reihe ist <strong>array_keys().</strong> Hier kann man ebenfalls einen striken typsicheren Vergleich anstrengen. Die Methode arbeitet ähnlich wie <strong>array_intersect()</strong>, liefert jedoch eine Teilmenge der Schlüssel zurück, die den gesuchten Wert enthalten. Auch dieser Weg ist eigentlich ein Umweg der nur in bestimmten Situationen anwendbar.</p>
<h2 id="methodik-und-testaufbau">Methodik und Testaufbau</h2>
<p>Um der ganzen Sache wenigstens einen blassen wissenschaftlichen Anstrich zu verpassen, will ich das Vorgehen kurz erläutern. Der Quellcode ist auf <a href="https://github.com/nickyreinert/compareArrayLookupMethodsInPHP/tree/master">github.com</a> verfügbar.</p>
<p>Ich habe etwa 10.000 Arbeitsstunden in einer sehr ausgeklügeltes PHP-Script investiert. Dieses Script erzeugt ein zufälliges Array mit einer vorgegeben Länge an Keys (<strong>initArrayLength</strong>) und füllt dieses mit Werte, die eine vorgebene Länge haben (<strong>arrayValueLengths</strong>). Die Länge des Arrays kann zur Laufzeit erhöht werden, indem eine Potenz (<strong>maxPowers</strong>) angwendet wird. Danach wird dieses Array mit der angegeben Methode durchsucht (<strong>lookupMethod</strong>). Die Anzahl der Suchvorgänge wird mit <strong>maxIterations</strong> angegeben. Ist <strong>forceNewRandomArray</strong> auf 1 (aka TRUE) gesetzt, wird nach jedem Durchgang ein neues Array erzeugt.</p>
<p>Um die in PHP eingebaute &ldquo;static optimization&rdquo; zu umgehen, gibt es den Parameter <strong>disableOptimization</strong>. Ist dieser mit 1 aktiviert, wird vor jedem Aufruf ein <strong>sleep(0);</strong> abgesetzt. Das verzögert den Programmablauf nicht, blockiert aber dieses Feature. Für die Messung habe ich den Parameter stets deaktiviert.</p>
<p>Außerdem lässt sich mit <strong>forceNewRandomArray</strong> = 0 festlegen, dass das Array nicht bei jedem Durchlauf neu erzeugt wird. Das beschleunigt die Laufzeit bei großen Arrays erheblich.</p>
<p>Die <em>needle</em>, also der zu suchende Wert, befindet sich immer am Ende des Arrays.</p>
<p>Die Zeitmessung wird mit <strong>microtime(true);</strong> vorgenommen. Diese Methode erlaubt eine mikrosekunden-genaue Messung. So sieht beispielhaft die Implementierung für die Methode <strong>in_array()</strong> aus:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln"> 1</span><span class="cl">		private function useInArray($strictMode) {
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">			$startTime = microtime(true);
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">			if ($this-&gt;disableOptimization) {sleep(0);}
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">			$result = in_array($this-&gt;needle, $this-&gt;haystack, $strictMode);
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">			$endTime = microtime(true);
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">			$this-&gt;currentResults[&#39;delay&#39;] = number_format(($endTime - $startTime), 25, &#34;,&#34;, &#34;.&#34;);
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl">			$this-&gt;currentResults[&#39;memory_usage&#39;] = memory_get_usage(true);
</span></span></code></pre></div><p>Das ganze Script wird in der Kommandozeile ausgeführt. <strong>Pro-Tipp:</strong> In einer Screen-Session! Ein Beispiel-Aufruf sieht demnach so aus:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">php-cgi7.0 -q compareLookups.php initArrayLength=10 arrayValueLengths=1,10,50,100 maxPowers=5 maxIterations=1000 forceNewRandomArray=1 breakAfterFound=1 disableOptimization=0 lookupMethod=in_array phpVersion=7.0 comment=initial_comparison
</span></span></code></pre></div><p>Damit das ganze automatisiert und für alle Methoden einmal aufgerufen wird habe ich diese Zeile etwas abgewandelt in ein Shell-Script gepackt und dieses Script dann ausgeführt. Das Shell-Script gibt es ebenfalls bei github - siehe oben. Die ganze Chose läuft auf einem virtuellen self-managed Server, der mit <strong>Ubuntu 16.04</strong> betrieben wird. Die Kiste hat acht Kerne mit jeweils einer <strong>Intel Xeon CPU E5-2680 v3 @ 2.50GHz</strong> und <strong>16 GByte RAM</strong>.</p>
<p>Ich habe Arrays mit einer Länge von 10, 100, 1.000, 10.000 und 100.000 Schlüsseln untersucht, die jeweils Werte mit einer Länge von 1, 10, 50, 100 Zeichen enthalten. Jede Variation wurde mit jeder Methode 1.000 mal gemessen. Insgesamt habe ich so 800.000 mal Arrays durchsucht, oder: Je Methode 80.000 Durchläufe.</p>
<h2 id="ergebnisse">Ergebnisse</h2>
<p>Zunächst zur Übersicht des Gesamtergebnisses in Abbildung 1 und 2: Die durchschnittliche Dauer in Mikrosekunden über alle Durchläufe hinweg. <strong>Die Länge der Arrays wirkt sich überproportional auf die Dauer aus</strong>. Das fällt vor allem bei <strong>array_intersect()</strong> auf: Ein Array mit 10.000 Schlüsseln benötigt durchschnittlich 2,479 ms, bei 100.000 Schlüsseln sind es 38,572 ms. Anders bei zunehmender Größe der Werte: Steigen dies um den Faktor 10 (10 Zeichen bzw. 100 Zeichen je Wert), dauert die Suche im Schnitt nicht mal 2 ms länger.</p>
<ul>
<li>
<p><a href="https://www.nickyreinert.de/files/in-einem-array-suchen-mit-foreach-in_array-isset-oder-intersect-was-ist-schneller/grafik-2-700x227.png"><img src="/2019/2019-04-10-php-mit-welcher-methode-durchsucht-man-ein-array-am-schnellsten/images/grafik-2-700x227.png" alt="Durchschnittliche Dauer in Mikrosekunden je Methode"></a></p>
<p>Durchschnittliche Dauer in Mikrosekunden je Methode</p>
</li>
<li>
<p><a href="https://www.nickyreinert.de/files/in-einem-array-suchen-mit-foreach-in_array-isset-oder-intersect-was-ist-schneller/grafik-1-700x241.png"><img src="/2019/2019-04-10-php-mit-welcher-methode-durchsucht-man-ein-array-am-schnellsten/images/grafik-1-700x241.png" alt="Durchschnittliche Dauer in Mikrosekunden je Methode"></a></p>
<p>Durchschnittliche Dauer in Mikrosekunden je Methode</p>
</li>
</ul>
<p>Die folgenden Abbildungen 3 bis 7 zeigen die exakten Messwerte für alle Methoden.</p>
<ul>
<li>
<p><a href="https://www.nickyreinert.de/files/in-einem-array-suchen-mit-foreach-in_array-isset-oder-intersect-was-ist-schneller/grafik-3-700x421.png"><img src="/2019/2019-04-10-php-mit-welcher-methode-durchsucht-man-ein-array-am-schnellsten/images/grafik-3-700x421.png" alt="Abbildung 3: Durchschnittliche Dauer bei 10 Schlüsseln"></a></p>
<p>Abbildung 3: Durchschnittliche Dauer bei 10 Schlüsseln</p>
</li>
<li>
<p><a href="https://www.nickyreinert.de/files/in-einem-array-suchen-mit-foreach-in_array-isset-oder-intersect-was-ist-schneller/grafik-4-700x470.png"><img src="/2019/2019-04-10-php-mit-welcher-methode-durchsucht-man-ein-array-am-schnellsten/images/grafik-4-700x470.png" alt="Abbildung 4: Durchschnittliche Dauer bei 100 Schlüsseln"></a></p>
<p>Abbildung 4: Durchschnittliche Dauer bei 100 Schlüsseln</p>
</li>
<li>
<p><a href="https://www.nickyreinert.de/files/in-einem-array-suchen-mit-foreach-in_array-isset-oder-intersect-was-ist-schneller/grafik-5-700x419.png"><img src="/2019/2019-04-10-php-mit-welcher-methode-durchsucht-man-ein-array-am-schnellsten/images/grafik-5-700x419.png" alt="Abbildung 5: Durchschnittliche Dauer bei 1.000 Schlüsseln"></a></p>
<p>Abbildung 5: Durchschnittliche Dauer bei 1.000 Schlüsseln</p>
</li>
<li>
<p><a href="https://www.nickyreinert.de/files/in-einem-array-suchen-mit-foreach-in_array-isset-oder-intersect-was-ist-schneller/grafik-6-700x421.png"><img src="/2019/2019-04-10-php-mit-welcher-methode-durchsucht-man-ein-array-am-schnellsten/images/grafik-6-700x421.png" alt="Abbildung 6: Durchschnittliche Dauer bei 10.000 Schlüsseln"></a></p>
<p>Abbildung 6: Durchschnittliche Dauer bei 10.000 Schlüsseln</p>
</li>
<li>
<p><a href="https://www.nickyreinert.de/files/in-einem-array-suchen-mit-foreach-in_array-isset-oder-intersect-was-ist-schneller/grafik-7-700x425.png"><img src="/2019/2019-04-10-php-mit-welcher-methode-durchsucht-man-ein-array-am-schnellsten/images/grafik-7-700x425.png" alt="Abbildung 7: Durchschnittliche Dauer bei 100.000 Schlüsseln"></a></p>
<p>Abbildung 7: Durchschnittliche Dauer bei 100.000 Schlüsseln</p>
</li>
</ul>
<p>Zur bessern Übersicht zeigen die folgenden beiden Abbildungen die Messungen ohne <strong>array_intersect()</strong>. Man sieht, dass <strong>isset()</strong> bei Werten mit einer Länge von 1 zumindest bei der foreach-Schleife mithalten kann. Ob der strikte Vergleich ein Nachteil ist, kann man schwer sagen. In der foreach-Schleife ist der strikte Vergleich minimal schneller, die anderen Methoden sind mit dem strikten Vergleich etwas langsamer. Tendentiell scheint <strong>non strict</strong> aber <strong>immer etwas schneller</strong> zu sein, wenn auch nur wenige Mikrosekunden.</p>
<ul>
<li>
<p><a href="https://www.nickyreinert.de/files/in-einem-array-suchen-mit-foreach-in_array-isset-oder-intersect-was-ist-schneller/grafik-12-700x254.png"><img src="/2019/2019-04-10-php-mit-welcher-methode-durchsucht-man-ein-array-am-schnellsten/images/grafik-12-700x254.png" alt="Abbildung 12: Durchschnittliche Dauer ohne array_intersect()"></a></p>
<p>Abbildung 12: Durchschnittliche Dauer ohne array_intersect()</p>
</li>
<li>
<p><a href="https://www.nickyreinert.de/files/in-einem-array-suchen-mit-foreach-in_array-isset-oder-intersect-was-ist-schneller/grafik-11-700x261.png"><img src="/2019/2019-04-10-php-mit-welcher-methode-durchsucht-man-ein-array-am-schnellsten/images/grafik-11-700x261.png" alt="Abbildung 11: Durchschnittliche Dauer ohne array_intersect()"></a></p>
<p>Abbildung 11: Durchschnittliche Dauer ohne array_intersect()</p>
</li>
</ul>
<p>Wie machen sich die aktuellen PHP-Versionen im Vergleich? Das zeigt Abbildung 13**. Im Vergleich zu PHP 7.0 bringen Version 7.1 und 7.3 einen Geschwindigkeitsschub**. Nicht jedoch PHP 7.2, hier waren die Durchläufe im Schnitt viel langsamer als unter PHP 7.0. Am auffälligsten sind die Auswirkungen bei der foreach-Schleife. PHP 7.3 sorgt hier durchschnittlich 25% schnellere Durchläufe.</p>
<p><a href="https://www.nickyreinert.de/files/in-einem-array-suchen-mit-foreach-in_array-isset-oder-intersect-was-ist-schneller/grafik-13.png"><img src="/2019/2019-04-10-php-mit-welcher-methode-durchsucht-man-ein-array-am-schnellsten/images/grafik-13-700x429.png" alt=""></a></p>
<p>Abbildung 13: Veränderung der durchschnittlichen Dauer je Methode und PHP-Version.</p>
<p>Ähnlich geht es beim Speicherverbrauch zu. Hier tut sich erst mit PHP 7.3 einiges, der Verbrauch sinkt um knapp 25%!</p>
<h2 id="fehlerquellen">Fehlerquellen</h2>
<p>Die gibt es. Zum einen meine zauberhafte Implementierung des Scripts. Wer weiß, ob mir da nicht irgendwo ein Fehler untergelaufen ist. Außerdem meine vielleicht etwas lasche Interpretation der Ergebnisse. Statistik war zwar Teil meines Studiums, aber erstens ist das lange her und zweitens hatte ich an dem Tag einen starken Kater. An die Party dazu kann ich mich in Teilen gut erinnern, die Vorlesung ist wie ausgelöscht.</p>
<p>Außerdem sollte erwähnt werden, dass ich den Server nebenbei auch als öffentlichen Web-Server benutze (allerdings ohne nennenswerte Auslastung). Die Messung habe ich deshalb nachts ausgeführt. Ich gehe aber trotzdem davon aus, dass die meisten Ausreißer auf dieses Setup zurückzuführen sind.</p>
<h3 id="ausreißer">Ausreißer</h3>
<p>Davon gibt es eine Menge. Die Ursache sind mannigfaltig und schwer nachvollziehbar. Ich habe hier nicht viel wissenschaftlichen Aufwand betrieben sondern nur die augenscheinlichen Fehlmessungen entfernt. Die folgenden Abbildungen sollen beispielhaft zeigen, wie oft und offensichtlich Ausreißer aufgetreten sind.</p>
<ul>
<li>
<p><a href="https://www.nickyreinert.de/files/in-einem-array-suchen-mit-foreach-in_array-isset-oder-intersect-was-ist-schneller/grafik-8-700x690.png"><img src="/2019/2019-04-10-php-mit-welcher-methode-durchsucht-man-ein-array-am-schnellsten/images/grafik-8-700x690.png" alt="Abbildung 8: Ausreißer"></a></p>
<p>Abbildung 8: Ausreißer</p>
</li>
<li>
<p><a href="https://www.nickyreinert.de/files/in-einem-array-suchen-mit-foreach-in_array-isset-oder-intersect-was-ist-schneller/grafik-9-700x450.png"><img src="/2019/2019-04-10-php-mit-welcher-methode-durchsucht-man-ein-array-am-schnellsten/images/grafik-9-700x450.png" alt="Abbildung 9: Durchschnittliche Dauer je Methode"></a></p>
<p>Abbildung 9: Durchschnittliche Dauer je Methode</p>
</li>
<li>
<p><a href="https://www.nickyreinert.de/files/in-einem-array-suchen-mit-foreach-in_array-isset-oder-intersect-was-ist-schneller/grafik-10-700x543.png"><img src="/2019/2019-04-10-php-mit-welcher-methode-durchsucht-man-ein-array-am-schnellsten/images/grafik-10-700x543.png" alt="Abbildung 10: Durchschnittliche Dauer je Methode, bereinigt"></a></p>
<p>Abbildung 10: Durchschnittliche Dauer je Methode, bereinigt</p>
</li>
</ul>
<h2 id="static-optimization">Static Optimization</h2>
<p>Wenn man sich die Ergebnisse einmal anschaut, fällt etwas auf: Obwohl <strong>microtime()</strong> mit einer sehr hohen Genauigkeit misst, scheinen manche Methoden bereits nach 0 Sekunden fertig zu sein. Der Grund dafür dürfte einerseits natürlich die Hardware und andererseits die <a href="http://biagiocosenza.com/papers/PopovCC17.pdf">static optimization</a> sein. Das Feature übersteigt meinen Kompetenzbereich leider bei weitem, deswegen kann ich nur laienhaft daherplappern:</p>
<ul>
<li>Mit <em>sleep(0);</em> innerhalb der Zeitmessung (siehe auch oben) kann man dieses Feature ausbooten.</li>
<li>Und außerdem scheint es eine Art unteres Limit für diese &ldquo;schnellste Zeit&rdquo; zu geben. So gibt es Messungen mit größeren Arrays, die exakt die gleiche Dauer aufweisen: 0,000000953674 Sekunden. Wird das Array noch größer, dauert es sogar <strong>exakt</strong> doppelt so lang, nämlich 0,000001907349 Sekunden. Diese Reihe kann man in Grenzen weiterführen. Zufall? Fragen! Wer dazu eine fundierte Erklärung hat, kann das gerne in den Kommentaren mitteilen.</li>
</ul>
<p>Die folgenden Abbildungen zeigen die Häufigkeiten der unterschiedlicher Messwerte bis 10 Mikrosekunden. Auch hier ist noch mal interessant zu beobachten, wie die Messungen der Durchläufe kaum voneinander abweichen.</p>
<ul>
<li>
<p><a href="https://www.nickyreinert.de/files/in-einem-array-suchen-mit-foreach-in_array-isset-oder-intersect-was-ist-schneller/grafik-14.png"><img src="/2019/2019-04-10-php-mit-welcher-methode-durchsucht-man-ein-array-am-schnellsten/images/grafik-14.png" alt="Abbildung 14: Verteilung der Messwerte für alle Messungen"></a></p>
<p>Abbildung 14: Verteilung der Messwerte für alle Messungen</p>
</li>
<li>
<p><a href="https://www.nickyreinert.de/files/in-einem-array-suchen-mit-foreach-in_array-isset-oder-intersect-was-ist-schneller/grafik-15-700x171.png"><img src="/2019/2019-04-10-php-mit-welcher-methode-durchsucht-man-ein-array-am-schnellsten/images/grafik-15-700x171.png" alt="Abbildung 15: Verteilung der Messwerte für die foreach-Schleife (nicht strikter Vergleich)"></a></p>
<p>Abbildung 15: Verteilung der Messwerte für die foreach-Schleife (nicht strikter Vergleich)</p>
</li>
</ul>
<h2 id="fazit">Fazit</h2>
<p>Grundsätzlich sollte man eines nicht vergessen: Die Messungen finden im <strong>Mikrosekundenbereich</strong> statt. Selbst die langsamste Methode <strong>array_intersect()</strong> hat für große Arrays nur 120 Mikrosekunden benötigt, im Schnitt liegt die Dauer bei etwa 8 Millisekunden. Auch große Arrays (100.000 Schlüssel, 100 Zeichen je Wert) waren im Schnitt nach 45 Millisekunden abgefertigt. Soviel zu den subjektiven, absoluten Zahlen, die abhängig von den Begleitumständen natürlich weitaus schlechter aussehen können.</p>
<p>Im Vergleich mit allen anderen Methoden ist <strong>array_intersect()</strong> absolut keine Wahl. <strong>Isset()</strong> kann unter bestimmten Bedingungen tatsächlich das Mittel der Wahl sein (siehe oben), verliert im direkten Vergleich aber.</p>
<p><a href="https://www.nickyreinert.de/files/in-einem-array-suchen-mit-foreach-in_array-isset-oder-intersect-was-ist-schneller/grafik-16.png"><img src="/2019/2019-04-10-php-mit-welcher-methode-durchsucht-man-ein-array-am-schnellsten/images/grafik-16-700x281.png" alt="Abbildung 16: Durchschnittliche Dauer insgesamt je Methode"></a></p>
<p>Abbildung 16: Durchschnittliche Dauer insgesamt je Methode</p>
<p>Interessant ist, dass der nicht strikte Vergleich insgesamt etwas schneller ist - außer bei der Verwendung der foreach-Schleife! Diese ist allerdings grundsätzlich fast doppelt so langsam wie die anderen Methoden. Und diese liegen fast immer gleich auf so das man sagen kann, dass es hier keine Präferenz gibt.</p>
<p><a href="https://www.nickyreinert.de/files/in-einem-array-suchen-mit-foreach-in_array-isset-oder-intersect-was-ist-schneller/grafik-17.png"><img src="/2019/2019-04-10-php-mit-welcher-methode-durchsucht-man-ein-array-am-schnellsten/images/grafik-17-700x238.png" alt=""></a></p>
<p>Abbildung 17: Durchschnittliche Dauer insgesamt der schnellsten Methoden.</p>
<p>Um es mit den Worten einer weisen Philosophin zu sagen: <em>&ldquo;Ich kann Dir nur die Tür zeigen. Hindurchgehen musst Du alleine&rdquo;</em>. Nutze die Erkenntnisse dafür, die richtige Methode für den richtigen Zweck zu wählen. Du weißt nun, mit welcher Methode man einen großen Array in PHP optimal durchsuchen kann. Und nebenbei hast du vielleicht noch gelernt, welche Methoden es überhaupt gibt. Wenn dich das glücklich macht, habe ich mein Ziel erreicht.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> anleitung, filter, php, tagcloud, tutorial, wordcloud, wordpress, Customization</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      <category>anleitungen</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>WordPress Tag Cloud mit Umlauten (äöü) korrekt sortieren - Oder: Der WordPress Filter im Live-Beispiel erklärt - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>tutorial</dc:type>
      
      
    </item><item>
      <title>Zugriff nicht loggen, wenn ein bestimmter HTTP-Request-Header gesetzt ist</title>
      <link>http://localhost:1313/2018/2018-11-28-zugriff-nicht-loggen-wenn-ein-bestimmter-http-request-header-gesetzt-ist/</link>
      <pubDate>Wed, 28 Nov 2018 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://localhost:1313/2018/2018-11-28-zugriff-nicht-loggen-wenn-ein-bestimmter-http-request-header-gesetzt-ist/</guid>
      <description>OK, ich tu mich etwas schwer, das folgende in einen Titel zu gießen, der nicht länger ist, als die eigentlich Anleitung. Wenn du an deiner Webseite arbeitest, …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieses Tutorial beschreibt eine Methode, um eigene Zugriffe bei der Web-Entwicklung aus den Nginx-Logdateien auszuschließen. Die Lösung kombiniert ein Browser-Plugin zur Modifikation von HTTP-Headern mit einer serverseitigen Nginx-Konfiguration, die das Logging auf Basis eines benutzerdefinierten Headers bedingt deaktiviert.</p>
          
          
          <p><strong>Hauptthemen:</strong> Nginx, Webserver-Konfiguration, Logging, Web-Development, HTTP</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>OK, ich tu mich etwas schwer, das folgende in einen Titel zu gießen, der nicht länger ist, als die eigentlich Anleitung. Wenn du an deiner Webseite arbeitest, möchtest du vielleicht vermeiden, dass deine Aufrufe mit deinem Browser im Log-File von <strong>nginx</strong> landen. Dafür gibt es eine Menge Möglichkeiten, ich mag die folgende aber besonders.</p>
<p>Zuerst benötigst du dafür ein Plugin, um den <strong>HTTP-Request-Header</strong> zu modifizieren. Ich nutze dafür <a href="https://addons.mozilla.org/en-US/firefox/addon/modheader-firefox/">ModHeader für Firefox,</a> für Chrome gibt es ähnliche Plugins. Dort legst du einen benutzerdefinierten Header an, dem du z.B. &ldquo;true&rdquo; als Wert zuweist. Bei diesem Plugin kannst du außerdem festlegen, dass der Header nur auf einer bestimmten Seite hinzugefügt wird.</p>
<p>[caption id=&ldquo;attachment_2395&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/zugriff-nicht-loggen-wenn-ein-bestimmter-request-header-gesetzt-ist/modHeader.png"><img src="/2018/2018-11-28-zugriff-nicht-loggen-wenn-ein-bestimmter-http-request-header-gesetzt-ist/images/modHeader-300x163.png" alt="ModHeader Firefox Plugin"></a> ModHeader Firefox Plugin[/caption]</p>
<p>Als nächstes definierst du in deiner nginx-Config eine Regel, die diesen Header ausliest:</p>
<p>map $http_ignoreMe $log_this {</p>
<pre><code>~true 0;

default 1;
</code></pre>
<p>}</p>
<p>Mit $http_ignoreMe sprichst du den zuvor angelegten Header an, $log_this erzeugt eine Variable, auf die du später zugreifen kannst. Enthält der Header &ldquo;true&rdquo; (~true), wird die Variable $log_this auf 0 gesetzt, ansonsten bleibt sie 1. Als nächstes öffnest du den Server-Bereich deiner Webseite und suchst nach deiner Logging-Einstellung (alternativ kannst du natürlich auch die globale Logging-Einstellung anpassen:</p>
<pre><code>access\_log /var/logs/access.log main if=$log\_this;
</code></pre>
<p>Der zweite Parameter ist das Log-File - natürlich. Der dritte Parameter verweist auf mein benutzerdefiniertes Log-Format, das muss hier nicht unbedingt stehen. Und am Ende schließlich kommt die Bedingung, dass nämlich nur geloggt wird, wenn $log_this wahr bzw. 1 ist. Jetzt startest du nginx neu&hellip; et voilá - Anfragen an deine Seite von deinem Browser aus werden ignoriert.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Nginx, Logging, Tutorial, Web-Dev</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>hosting</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Zugriff nicht loggen, wenn ein bestimmter HTTP-Request-Header gesetzt ist - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>tutorial</dc:type>
      
      
    </item><item>
      <title>Wordpress Debugging und Wartung oder: Keine Panik vor dem White Screen of Death und HTTP 500</title>
      <link>http://localhost:1313/2018/2018-11-18-wordpress-debugging-und-wartung-oder-keine-panik-vor-dem-white-screen-of-death/</link>
      <pubDate>Sun, 18 Nov 2018 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://localhost:1313/2018/2018-11-18-wordpress-debugging-und-wartung-oder-keine-panik-vor-dem-white-screen-of-death/</guid>
      <description>Deine Wordpress-Seite besteht nur aus einem weißen Bildschirm, dem HTTP-Fehlercode 500 oder lädt irsinnig langsam? White Screen of Death (WSoD), die …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine umfassende Anleitung zur Fehlersuche und Wartung von WordPress. Der Artikel erklärt, wie man Probleme wie den &#39;White Screen of Death&#39; (WSoD) und HTTP-500-Fehler systematisch analysiert. Vorgestellt werden drei wesentliche Werkzeuge: die Entwicklerkonsole des Browsers, das Plugin &#39;Query Monitor&#39; zur Performance-Analyse und die korrekte Konfiguration des WordPress-Debug-Modus über &#39;wp-config.php&#39; und &#39;.htaccess&#39;.</p>
          
          
          <p><strong>Hauptthemen:</strong> WordPress, Debugging, Troubleshooting, Performance, PHP, Web-Development</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> advanced</p>
          
        </div>
        
        
        <p>Deine Wordpress-Seite besteht nur aus einem weißen Bildschirm, dem <strong>HTTP-Fehlercode 500</strong> oder lädt irsinnig langsam? <strong>White Screen of Death</strong> (WSoD), die berüchtigten <strong>500´er</strong> sowie lange <strong>Ladezeiten</strong> scheinen zu den größten Herausforderungen im Umgang mit WordPress zu gehören und sie hinterlassen regelmäßig lange Gesichter. Zwar gehören Ladezeit, PHP- und HTTP-Fehler nicht unbedingt zusammen, sie erfordern aber in der Regel das gleiche Vorgehen: Nämlich die <strong>Analyse</strong>, was da im <strong>Hintergrund</strong> so passiert.<br>
Die Suche nach der Ursache ist oft relativ simpel. Es sagt einem oft nur niemand. Der beliebteste Tipp bei Wordpress lautet oft:</p>
<blockquote>
<p><em>&ldquo;Deaktiviere mal alle Plugins und aktiviere sie nacheinander wieder.&rdquo;</em></p>
<p><em>Anonymer Ratgeber, Mai 2018</em></p></blockquote>
<p>Das ist alles andere als effizient, ja nicht einmal effektiv: Du erfährst nach 27 Minuten und zwei Tassen Kaffe, dass das Plugin &ldquo;Foobar&rdquo; für den Fehler verantwortlich ist, weil das den <strong>WSoD</strong> auslöst. Aber dann weißt du immer noch nicht, was genau der Fehler ist. Danke für nichts?</p>
<p>Tatsächlich gibt es nur <strong>drei Dinge</strong>, die dir helfen können, dir selber zu helfen, wenn WordPress dich mal wieder im Stich lässt. Und diese drei Werkzeuge zur <strong>Fehlersuche</strong> und <strong>Diagnose</strong> langsamer Wordpress-Installation stelle ich jetzt einmal vor:</p>
<h2 id="1-die-entwickler-konsole-deines-browsers">1. Die Entwickler-Konsole deines Browsers</h2>
<p>Dieses Werkzeug bringt mittlerweile jeder moderne Browser mit und das sollte auch die <strong>erste Anlaufstelle</strong> für dich sein. Welche Entwicklerkonsole du verwendest, ist deinem Geschmack überlassen, in der Funktionalität unterscheiden sie sich kaum. Du öffnest die Entwicklerkonsole auf vielfältige Weise über</p>
<ul>
<li>das Kontextmenü (Rechte Maustaste -&gt; Element untersuchen) oder</li>
<li>über mit der Funktionstaste F12 oder</li>
<li>mit dem Shortcut CTRL+SHIFT+I (Windows) / CMD+OPT+I (OS X)</li>
</ul>
<p>[gallery link=&ldquo;file&rdquo; columns=&ldquo;4&rdquo; ids=&ldquo;2356,2357,2358,2359&rdquo;]</p>
<h2 id="2-der-query-monitor---warum-ist-dein-wordpress-so-langsam">2. Der Query Monitor - warum ist dein Wordpress so langsam?</h2>
<p>Der <a href="https://de.wordpress.org/plugins/query-monitor/">Query Monitor</a> ist ein wirklich nützliches <strong>Plugin</strong> für Wordpress. Eines der wenigen. Du fragst dich, warum deine Seite so lange lädt und die Entwicklerkonsole gibt nicht vielmehr her als ein <strong>TTFB</strong> (Time To First Byte) von 60 Sekunden?</p>
<p>Die Entwicklerkonsole sagt dir nur, wie lange der Browser auf den Inhalt wartet. Hier kann maximal identifiziert werden, dass die reine Wartezeit (<strong>TTFB</strong>) 60 Sekunden beträgt und der Inhalt in 10 Sekunden heruntergeladen wird (die ganzen anderen Nerd-Kennzahlen jetzt mal außen vor gelassen). Letzteres liegt ziemlich wahrscheinlich an der Internetleitung von dir oder dem Hoster. Aber TTFB? Das ist im Grunde die Zeit, die der Server benötigt um die Ausgabe einmal zusammenzuschustern und zu deinem Browser zu schicken. Also das ganze PHP-Gedöns einmal &ldquo;interpretieren&rdquo; und ein paar Datenbankabfragen durchführen. Je umfangreicher deine WordPress-Seite ist (sprich Plugin-Vielfalt), desto mehr gibt es hier zu tun. Und was da im Hintergrund genau passiert, sagt dir der <strong>Query Monitor</strong>.</p>
<p>[gallery link=&ldquo;file&rdquo; columns=&ldquo;2&rdquo; ids=&ldquo;2354,2355&rdquo;]</p>
<p>Nach der Installation siehst du in der Admin-Toolbar erstmal ein paar oberflächliche Zahlen: <strong>Ladezeit,</strong> <strong>Größe</strong> und <strong>Anzahl der Queries.</strong> Wirklich spannend wird es, wenn du mal auf diese Zahlen klickst. Dann öffnet sich eine &ldquo;<em>Entwickler-Konsole&rdquo;,</em> die deiner WordPress-Seite mal gehörig unter die Haube schaut. Du siehst <strong>Datenbankabfragen,</strong> <strong>Scripte,</strong> <strong>Funktionen</strong> und alle möglichen Diagnostiken - einfach alles. Du kannst nun relativ zügig erkennen, ob manche Abfragen einfach nur doppelte durchgeführt wurden oder die Datenbank grundsätzlich zu langsam ist.</p>
<h2 id="3-der-debug-modus">3. Der Debug-Modus</h2>
<p>DasBbeste zum Schluss - der Debug-Modus verrät dir wirklich alles und ist eigentlich der Premium-Weg der Problemlösung.</p>
<p>Du wirst nur selten erleben, dass Wordpress bzw. dein Server dich wirklich gar nicht mit einer Fehlermeldung erhellen will. Der unliebsame <strong>White Screen of Death</strong> und der gefürchtete <strong>HTTP-Fehler 500</strong> sind im Grunde nur der Standardeinstellungen geschuldet. Du kannst dann entweder ein Ticket bei deinem Hoster öffnen und im nächsten Jahr mit einer Antwort rechnen oder versuchen, selber an die Fehlermeldung zu gelangen und das Problem eigenständig zu analysieren: <strong>Der geheime Trick</strong> lautet nämlich, einfach mal das Internet nach der Fehlermeldung zu durchsuchen. <strong>In 99,99% der Fälle</strong> bist du bei weitem nicht der erste mit diesem banalen Problem..</p>
<p>Die wahre Herausforderung ist allerdings, dass die Ausgabe von Fehlermeldungen eben standardmäßig unterdrückt  wird. Aus Gründen der Sicherheit und Bedienbarkeit ist das grundsätzlich nicht verkehrt. Wenn du doch mal wissen willst, woher der <strong>White Screen of Death</strong> wirklich kommt, gehst du folgendermaßen vor:</p>
<h3 id="a-du-aktivierst-die-fehlerausgabe-von-wordpress">A: Du aktivierst die Fehlerausgabe von Wordpress</h3>
<p>Dazu öffnest du die Datei wp-config.php, nachdem du sie lokal gespeichert hast, und setzt folgenden Parameter direkt an den Anfang, aber hinter das <em>&lt;?php</em>:</p>
<?php
define( 'WP\_DEBUG', true );
define( 'WP\_DEBUG\_LOG', true ); 
define('WP\_DEBUG\_DISPLAY', false);

Der 1. Parameter ist für das debuggen _essentiell:_ Damit aktivierst du die Ausgabe von Fehlermeldungen.

Mit dem 2. Parameter gibst du die Anweisung, dass die Fehlermeldungen in einer Datei gespeichert werden. Das ist aus zwei Gründen nützlich: Du kannst es später einfacher Nachvollziehen und außerdem solltest du vermeiden, dass Fehlermeldungen, die vielleicht sensible Informationen enthalten, direkt im Frontend landen.

Die besagte Datei befindet sich um Order /wp-content und heißt **debug.log**. etzt du **WP\_DEBUG\_LOG** auf true, wird Wordpress Fehlermeldungen in die Date _/wp-content/debug.log_ schreiben. Für die nachträgliche Analyse ist das sehr praktisch. Das funktioniert natürlich nur, wenn der Ordner beschreibbar ist. Andernfalls musst du diesen Parameter und den folgenden weglassen.

Der letzte Parameter sorgt noch einmal explizit dafür, dass die Fehlermeldungen nicht im Frontend angezeigt werden.

Neben diesen 3 Parameter gibt es noch **SCRIPT\_DEBUG**. Mit true aktiviert, sorgt dieser Schalter dafür, dass Wordpress die "echten" CSS- und JS-Dateien liest, anstatt der minifizierten. Das wird dich nur in Spezialfällen betreffen, solltest du aber kennen. Der nächste **Spezialparameter** in der Riege ist **SAVEQUERIES** - hiermit wird dir WordPress die Datenbank-Anfragen ausgeben. Auch das ist in der Regel nicht notwendig, aber gut zu wissen.

Denke daran, dass die Parameter im weiteren Verlauf der Config-Datei nicht wieder vorkommen und deine Einstellung so aufheben und vor allen, dass du die Parameter in einem Live-System nach der Fehlersuche **wieder auf _false_ zurücksetzen** solltest.

### B: Du aktivierst die Fehlerausgabe deines Servers

Eigentlich sollte dir **Nummero A** bereits weiterhelfen, denn damit wird auch die Fehlerausgabe von PHP aktiviert. Sollte deine Seite trotzdem weiß bleiben und dich nicht mit zusätzlichen Fehlernachrichten beglücken, kannst du etwas tiefer in die Trickkiste greifen. Diese Parameter machen im Grunde nichts anderes, als oben schon beschreiben ist, sie greifen allerdings etwas "früher" ein.

Ergänze, ebenfalls direkt hinter dem _<?php_ der Datei _wp-config.php_ die folgenden Zeilen:

<?php
error\_reporting(E\_ALL);
ini\_set('display\_errors', 1);
ini\_set('display\_startup\_errors', 1);
// ini\_set("log\_errors", 1);
// ini\_set("error\_log", "/pfad/zu/wordpress/temp/php-error.log");

Die beiden letzten Zeilen aktivieren, ähnlich wie oben, dass PHP Fehlermeldungen in eine Datei schreibt. Da die Log-Datei bei der ad hoc Fehlersuche nicht zwingend hilfreich ist, sind diese beiden Zeilen auskommentiert.

Wenn du den Pfad zu deiner Installation nicht kennst, bekommst du sie mit folgendem PHP-Befehl heraus. Wenn du diese Information nicht mehr benötigst, entferne sie aber sofort aus deinem Script. **Security through obscurity** - das _Document Root_ geht niemanden außer dich etwas an!

var\_dump($\_SERVER\["DOCUMENT\_ROOT"\]);

Achtung: Auf manchen Seiten wird dir empfohlen, den Zeilen ein @ vorzustellen. Das ist **ziemlich kontraproduktiv** - denn [das @ am Anfang der Zeile unterbindet Fehlermeldungen](http://php.net/manual/de/language.operators.errorcontrol.php) und weshalb bist du hier? Genau...

Das ist aber noch nicht alles - die Trickkiste ist noch tiefer. Doch obacht! Das folgende ist **Premium-Klasse-Debuggung** und auf den meisten Shared-Hostern gar nicht möglich. Die essentiellen Parameter befinden sich in der ersten Zeile. Die noch tiefergreifenden und wirklich nur in absoluten Sonderfällen benötigten Einstellungen sind darunter aufgeführt.

Öffne die Datei **.htaccess** und ergänze die folgenden Zeilen - auch hier gilt, achte darauf, dass die Parameter nicht an anderer Stelle ungewollt überschrieben werden:

\# Easy-Peasy Lemon-Squeezy:
php\_flag display\_startup\_errors on
php\_flag display\_errors on
php\_flag html\_errors on
php\_flag log\_errors on

# Fürs Protokoll: Wenn du das volle Entertainment brauchst
# nimm auch das hier mit - für alle Copy&Paste-Cowbowys, die 
# den Warnhinweis nicht lesen, habe ich die Zeilen auskommentiert
# php\_flag ignore\_repeated\_errors off
# php\_flag ignore\_repeated\_source off
# php\_flag report\_memleaks on
# php\_flag track\_errors on
# php\_value docref\_root 0
# php\_value docref\_ext 0
# php\_value error\_log /pfad/zu/wordpress/temp/php-error.log
# php\_value error\_reporting -1
# php\_value log\_errors\_max\_len 0

# <Files php\_errors.log>
#      Order allow,deny
#      Deny from all
#      Satisfy All
# </Files>

Warum A und warum B? Es ist möglich, dass die Server-Konfiguration es aus Sicherheitsgründen nicht zulässt, dass diese sogenannten **PHP-Direktiven** (aka Parameter) an beliebigen Stellen (aka .htaccess, in der PHP-Datei, ...) konfiguriert wird. Deshalb.  
Und was ist mit C - der **php.ini**\-Datei? Gute Frage, werter Leser, die bei dir ein gewisses Grundwissen erkennen lässt. Chapeau. In dem Fall gehe ich sehr stark davon aus, dass du Zugriff auf eben diese Datei hast. Und wer Zugriff auf diese Datei hat, mit diesem Vorwissen, ist ziemlich sicher und hoffentlich mit der notwendigen Erfahrung ausgestattet. Andernfalls: Ruf deinen SysOp an. ;) Fühle dich trotzdem herzlich dazu eingeladen, diesen Beitrag mit etwas zuästzlichem Fachwissen in den **Kommentaren** zu bereichern.

### C: Den Debug-Modus bei deinem Hoster aktivieren

Bei der Einstellung des Debug-Modus gibt es eine Hierarchie. Die Debug-Einstellung in der PHP-Datei (**wp-config.php**) ist hierbei die oberste Ebene, darunter folgt die Einstellung in der **.htaccess-Datei** und auf unterster Ebene lässt sich diese Funktion in der Einstellung des Servers bzw. PHP-Interpreters direkt einstellen (z.B. **php.ini**). Damit unbedarfte Laien wie wir an dieser Datei nicht wahllos rumfingern, ist bleibt uns diese Möglichkeit entweder komplett verwehrt oder ist nur über das Interface bei deinem Hoster einstellbar. Dort kann der Hoster auch festlegen, dass diese Einstellung (in Fachkreisen gerne auch **Direktive** genannt) in den Ebenen darüber gar nicht anpassen werden darf - **Schritt A und B bleiben also unwirksam.** Das ist der Zeitpunkt, wenn du in den Einstellungen bei deinem Hoster nach dieser Einstellung suchst - oder den Hoster darum bittest, den Debug-Modus für dich zu aktivieren.

Bei HostEurope kannst du das z.B. sehr leicht selber tun:

[![Host Europe Debug Modus aktivieren ](images/host_europe_debug_aktivieren-300x232.png)](https://www.nickyreinert.de/files/wordpress-debugging-und-wartung-oder-keine-panik-vor-dem-white-screen-of-death/host_europe_debug_aktivieren.png)

Host Europe Debug Modus aktivieren

## Freibier - Nachwort - Lies  mich!

Das ist jetzt wirklich wichtig: Wie immer, und oben bereits erwähnt, gilt auch hier: **Security through obscurity**.

> Wenn du den Debug-Modus auf dem Live-System nicht mehr benötigst, deaktiviere ihn. Basta.

Auf **Live-Systemen** hat der **Debug-Modus nur in Ausnahmefällen** etwas verloren. Und Fehler sollten zur Ausnahme zählen. Und auch, wenn du hier nur ein wenig an den PHP-Dateien rumschraubst, wobei eigentlich nicht viel kaputt gehen kann:

> Denke an die obligatorische Sicherungskopie.

Und jetzt viel Spass beim d_ebuggen_...

Ach ja - wenn all das da oben nicht funktioniert, dann kannst du tatsächlich auch mal den Holzhammer rausholen: **Plugins aktivieren und deaktivieren**. In der Regel helfen dir die hier geschilderten Schritte aber, genau diesen mühsamen Schritt zu übergehen.

        
        
        <div class="tags">
          <p><strong>Tags:</strong> WordPress, Debugging, Anleitung, Fehlerbehebung, Performance</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>wordpress</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Wordpress Debugging und Wartung oder: Keine Panik vor dem White Screen of Death und HTTP 500 - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>troubleshooting_guide</dc:type>
      
      
    </item><item>
      <title>Termine buchen im BA Friedrichshain/Kreuzberg</title>
      <link>http://localhost:1313/2018/2018-11-12-termine-buchen-im-ba-friedrichshain-kreuzberg/</link>
      <pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://localhost:1313/2018/2018-11-12-termine-buchen-im-ba-friedrichshain-kreuzberg/</guid>
      <description>Frei nach dem Motto: Auch die kleinen Dinge sind wichtig, hab ich mal alle meine L33T-Haxx0r-Skillz herausgeholt und 13 Minuten in einen kleinen Bug auf den …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Ein kurzer Blogbeitrag, der einen defekten Link auf der Webseite des Bezirksamts Friedrichshain-Kreuzberg zur Online-Terminbuchung analysiert. Der Autor debuggt das Problem, indem er die fehlerhafte URL mit einer funktionierenden vergleicht, die korrekte URL-Struktur herleitet und den funktionierenden Link für andere zur Verfügung stellt.</p>
          
          
          <p><strong>Hauptthemen:</strong> Berlin, Bürgerservice, Web-Development, Debugging, URL-Analyse</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Frei nach dem Motto: Auch die kleinen Dinge sind wichtig, hab ich mal alle meine L33T-Haxx0r-Skillz herausgeholt und 13 Minuten in einen kleinen Bug auf den behördlichen Seiten der Berliner Bezirksämter investiert.</p>
<p>Willst du einen <strong>Termin</strong> beim <strong>Bezirksamt</strong> Friedrichshain/Kreuzberg von Berlin <strong>buchen</strong>, weil das telefonisch nicht möglich ist? Dann stehst du vor einer kleinen Herausforderung: Das funktioniert nämlich ausgerechnet bei diesem Bezirksamt nicht. Die <a href="https://service.berlin.de/dienstleistung/318991/">Übersichtsseite für die Terminbuchung</a> führt beim Klick auf &ldquo;<a href="https://www.berlin.de/terminvereinbarung/termin/tag.php?id=383&amp;anliegen=318991&amp;dienstleister=0&amp;termin=1&amp;herkunft=1">Termin buchen</a>&rdquo; nur zu einer lapidaren Fehlermeldung, während alle anderen Links zu funktionieren scheinen:</p>
<p>[caption id=&ldquo;attachment_2319&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/termine-buchen-im-ba-friedrichshain-kreuzberg/fehlermeldung_ba_xberg-fhain.png"><img src="/2018/2018-11-12-termine-buchen-im-ba-friedrichshain-kreuzberg/images/fehlermeldung_ba_xberg-fhain-300x81.png" alt="Fehlermeldung Terminbuchung Bezirksamt Friedrichshain/Kreuzberg"></a> Fehlermeldung Terminbuchung Bezirksamt Friedrichshain/Kreuzberg[/caption]</p>
<p>Das Problem ist, dass es erstens keinen anderen Weg gibt, um an die Terminplanung zu kommen - oder diese sehr gut versteckt ist. Du kannst jetzt also die Id für die Logdatei am Telefon den vermutlich irritierten BA-Mitarbeiter/innen mitteilen oder das Problem selber fixen. Das ist nämlich gar nicht so schwierig. Außerdem gibt es auch gar keine E-Mail-Adresse, an die man sich wenden kann. Also schauen wir mal, was da falsch läuft.</p>
<p>Das ist die URL, die sich hinter dem defekten Link versteckt:</p>
<p><a href="https://www.berlin.de/terminvereinbarung/termin/tag.php?id=383&amp;anliegen=318991&amp;dienstleister=0&amp;termin=1&amp;herkunft=1">https://www.berlin.de/terminvereinbarung/termin/tag.php?id=383&anliegen=318991&dienstleister=0&termin=1&herkunft=1</a></p>
<p>Und so sieht die URL aus, die hinter einem funktionierenden Link zur Terminbuchung steckt:</p>
<p><a href="https://service.berlin.de/terminvereinbarung/termin/tag.php?termin=1&amp;dienstleister=122900&amp;anliegen">https://service.berlin.de/terminvereinbarung/termin/tag.php?termin=1&dienstleister=122900&anliegen</a>[]=318991&amp;herkunft=1</p>
<p>Offenbar hat sich also etwas an der internen Struktur geändert und man vergessen, die Verknüpfung für das Bezirksamt Fhain/Xberg anzupassen. Was hat sich geändert? Zunächst einmal lautet die Domain offenbar <strong>service.berlin.de,</strong> nicht mehr <strong><a href="https://www.berlin.de">www.berlin.de</a>.</strong> Das ist aber nicht der fehlerhafte Teil, beide Domains funktionieren.</p>
<p>Außerdem wird der GET-Parameter <em><strong>anliegen</strong></em> wohl als Array erwartet: <strong><em>anliegen[]</em></strong>. Außerdem ist der Parameter <em><strong>dienstleister</strong></em> nicht gesetzt, der wohl die Id für die entsprechende Abteilung erwartet. Die Id für das Standesamt im BA Fhain/Xberg findet man in der URL zur Übersichtsseite dieser Behörde:</p>
<p><a href="https://service.berlin.de/dienstleistung/318991/standort/122898/">https://service.berlin.de/dienstleistung/318991/standort/122898/</a></p>
<p>Die Id 318991 steht für das Bezirksamt selber, die Id für das Standesamt ist <strong>122898</strong>, das Jugendamt versteckt sich hinter der Id <strong>123593</strong>. Das die Terminverbeinbarung nur für das Standesamt funktioniert, packen wir dessen Id also in eine funktionierende URL:</p>
<p><a href="https://service.berlin.de/terminvereinbarung/termin/tag.php?termin=1&amp;dienstleister=122898&amp;anliegen">https://service.berlin.de/terminvereinbarung/termin/tag.php?termin=1&dienstleister=122898&anliegen</a>[]=318991&amp;herkunft=1</p>
<p>Wenn du also einen Termin beim Standesamt vom Bezirksamt Friedrichshain/Kreuzberg buchen möchtest, nutze doch gerne diesen Link:</p>
<p><a href="https://service.berlin.de/terminvereinbarung/termin/tag.php?anliegen[]=318991&amp;dienstleister=122898&amp;termin=1&amp;herkunft=1">Termin buchen</a></p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Berlin, Bug, Web-Dev, Lifehack</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Termine buchen im BA Friedrichshain/Kreuzberg - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_tip</dc:type>
      
      
    </item><item>
      <title>NGinx mit PHP-FPM, MySQL und Xdebug mit Docker auf Mac OS einrichten</title>
      <link>http://localhost:1313/2018/2018-09-16-nginx-mit-php-fpm-mysql-und-xdebug-mit-docker-auf-mac-os-einrichten/</link>
      <pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://localhost:1313/2018/2018-09-16-nginx-mit-php-fpm-mysql-und-xdebug-mit-docker-auf-mac-os-einrichten/</guid>
      <description>Ich habe mich eine ganze weile erfolgreich vor Docker als lokale Entwicklungsumgebung gedrückt. Der Grund: Ich nutze eine kommerzielle Parallels Lizenz, über …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine umfassende Anleitung zur Einrichtung einer lokalen Web-Entwicklungsumgebung auf macOS mit Docker. Das Tutorial beschreibt detailliert, wie man Container für Nginx, PHP-FPM und MySQL aufsetzt und miteinander verknüpft. Ein besonderer Fokus liegt auf der Erstellung eines benutzerdefinierten Docker-Images mittels Dockerfile, um Xdebug für das PHP-Debugging zu installieren und in Visual Studio Code zu integrieren.</p>
          
          
          <p><strong>Hauptthemen:</strong> Docker, macOS, Nginx, PHP-FPM, MySQL, Xdebug, Web-Development, DevOps</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> advanced</p>
          
        </div>
        
        
        <p>Ich habe mich eine ganze weile erfolgreich vor <strong>Docker</strong> als lokale Entwicklungsumgebung gedrückt. Der Grund: Ich nutze eine kommerzielle Parallels Lizenz, über die ich Ubuntu virtualisiert laufen lasse und bin damit bisher ganz gut gefahren. Bisher. Paralles hat nämlich immer wieder Problem gemacht. So konnte ich nach manchen Updates von Parallels oder Ubuntu die <em>Parallels Tools</em> nicht mehr nutzen und musste diese umständlich neu installieren. Da die Doku dazu auch nur unvollständig vorliegt, war das regelmäßig eine ziemliche Zeitverschwendung. Die <em>Parallels Tools</em> sind aber notwendig, um von Ubuntu aus auf die Dateien des Gastsystems, Mac OS X, zuzugreifen.</p>
<p>Beim letzten Update auf Ubuntu 18.04 ließen sich die <em>Parallels Tools</em> gar nicht mehr installieren. Die Ursache dafür ist wohl irgendeine Inkompatibilität eines abhängigen Paketes mit dem neuen Linux-Kernel. Wie auch immer: Ich war die Sorgen leid und auf der Suche nach einer Alternative. Weshalb ich <strong>Docker</strong> stieß. Der Vorteil: Docker ist weitaus performanter und portabler. Der Nachteil: Um damit eine funktionierende Entwicklungsumgebung zu schaffen, kommt man um die Shell nicht herum. Das mitgelieferte UI Kitematic liegt noch als Beta vor und lässt einige Funktionen einfach vermissen. Es gibt also einige kleinere Fallstricke, die es zu überwinde galt. Was mir gelungen ist. Wie, das werde ich nun genauer erläutern. <em>Viel Spass</em>.</p>
<p>[caption id=&ldquo;attachment_2166&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/nginx-mit-php-fpm-und-mysql-mit-docker-auf-mac-os-einrichten/kitematic-scho%CC%88n-aber-noch-nutzlos.png"><img src="images/kitematic-scho%CC%88n-aber-noch-nutzlos-300x181.png" alt="Kitematic - schön aber (noch) weitestgehend nutzlos"></a> Kitematic - schön aber (noch) weitestgehend nutzlos[/caption]</p>
<h2 id="erste-schritte">Erste Schritte</h2>
<p>Grundsätzlich kann man bei der  Installation der Docker-Anwendung nicht viel falsch machen: Account anlegen, Docker herunterladen, installieren, anmelden - fertig. Auf die zugrunde liegende Technologie will ich hier nicht weiter eingehen, das machen andere weitaus besser (z.B. <a href="https://www.ab-heute-programmieren.de/docker-teil-1-was-ist-docker/">ist diese Anleitung sehr zu empfehlen</a>).</p>
<p>Nur soviel soll gesagt sein: Du lädst ein <strong>Image</strong> herunter, dass du dann <em>starten</em> kannst. Dadurch erhältst du einen <strong>Container</strong>, der bestimmte Dienste bereitstellt. Dieser Container ist kein vollständiges Betriebssystem mit all seinem Ballast. So kannst du z.B. nicht ohne weiteres per SSH darauf zugreifen. Das funktioniert nur, wenn der entsprechende SSH-Dienst auch im Image vorgesehen ist. Das schöne an Docker ist aber, dass du das Image mit beliebigen Funktionalitäten über ein sogenanntes <strong>Dockerfile</strong> relativ unkompliziert nachrüsten kannst. Das erfordert zwar eine gewisse Umgewöhnung im Arbeitsablauf ab, bringt aber auch viele Vorteile mit sich.</p>
<p>Wer will kann sich mit der <strong>Kitematic UI</strong> durch die vorhandenen Docker-Images wühlen und auch direkt herunterladen. Diese stehen dann natürlich auch auf der Kommandozeile zur Verfügung. Mit <strong>docker image ls</strong> zeigst du alle verfügbaren Images an. Analog dazu listet <strong>docker container ls</strong> alle erstellten Container auf. Außerdem gibt es noch ein paar andere, für den Anfang ganz brauchbare Befehle:</p>
<p># alle lokal verfügbaren Images auflisten
docker image ls</p>
<h1 id="alle-gestarteten-bzw-erzeugten-container-auflisten">alle gestarteten bzw. erzeugten Container auflisten</h1>
<p>docker container ls</p>
<h1 id="die-kommandozeile-für-den-container-mit-dem-namen-mysql-die-kommandozeile-starten">die Kommandozeile für den Container mit dem Namen &ldquo;mysql&rdquo; die Kommandozeile starten</h1>
<p>docker exec -it mysql /bin/bash</p>
<h1 id="für-den-container-mit-dem-namen-mysql-das-setup-anzeigen">für den Container mit dem Namen &ldquo;mysql&rdquo; das Setup anzeigen</h1>
<p>docker inspect mysql</p>
<p>Für eine lokale Entwicklungsumgebung benötigt man zunächst einen <strong>HTTP- und einen MySQL-Server.</strong> Natürlich gehört zu jeder guten Entwicklungsumgebung auch ein Debugger - für PHP wäre das wohl <strong>xdebug</strong>. Ich nutze hier die beiden Images: <a href="https://hub.docker.com/r/richarvey/nginx-php-fpm/">nginx-php-fpm von Ric Harvey</a> und <a href="https://hub.docker.com/_/mysql/">das sehr aktuelle und offizielle MySQL-Image</a>, die ich erstmal ganz unkompliziert über Kitematic herunterlade. Das nginx-Image werde ich schließlich mit einem <strong>Dockerfile</strong> anpassen um auch <strong>xdebug</strong> nutzen zu können.</p>
<p>[caption id=&ldquo;attachment_2167&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/nginx-mit-php-fpm-und-mysql-mit-docker-auf-mac-os-einrichten/kitematic-auswahl-von-images.png"><img src="/2018/2018-09-16-nginx-mit-php-fpm-mysql-und-xdebug-mit-docker-auf-mac-os-einrichten/images/kitematic-auswahl-von-images-300x152.png" alt="Die Auswahl neuer Images über Kitematic ist sehr bequem"></a> Die Auswahl neuer Images über Kitematic ist sehr bequem[/caption]</p>
<p>Ab hier verlasse ich Kitematic allerdings wieder und werde Docker nur noch über die Kommandozeile und ein paar selbst geschriebene Scripte nutzen. Los gehts&hellip;</p>
<h2 id="den-mysql-container-starten">Den MySQL-Container starten</h2>
<p>&hellip; es mit dem MySQL-Container. Da der nginx-Container auf MySQL zugreift, muss der MySQL-Container auch zuerst dasein. Der Aufruf dafür sieht folgendermaßen aus:</p>
<p>docker run \
&ndash;name mysql \
&ndash;publish 3306:3306 \
&ndash;volume /Users/nicky/Development/MySQL:/var/lib/mysql \
&ndash;env MYSQL_ALLOW_EMPTY_PASSWORD=yes \
&ndash;env MYSQL_ROOT_HOST=% \
&ndash;detach \
&ndash;default-authentication-plugin=mysql_native_password \
mysql</p>
<p>Mit &ndash;name vergebe ich einen festen und vor allem lesbaren Namen. Ohne diesen Parameter würde Docker eine Id anlegen, die den Zugriff später aber unnötig kompliziert macht. Der Parameter <em>--publish</em> legt fest, welcher Port &ldquo;von draußen&rdquo; auf einen Port im Docker-Container gemappt wird. Da sich die Dateien für die Datenbank physikalisch natürlich nicht im Docker-Container, sondern im Dateisystem vom Host befinden, muss ich dem Container mitteilen, wie er darauf zugreifen kann. Das passiert mit dem Parameter <em>--volume</em>. Damit kann ich nich nur Ordner im Container verfügbar machen, sondern auch Dateien. Das ist ganz praktisch, um z.B. Configurations-Dateien von außerhalb beim Start des Containers mitzuliefern.</p>
<p>Der Parameter <em>--env</em> dient dazu, Umgebungsvariablen zu setzen. Diese sind natürlich abhängig vom verwendeten Container. Für den MySQL-Container möchte ich hier zwei Parameter übergeben: Ich will eine Root-Benutzer ohne Passwort anlegen (<em>MYSQL_ALLOW_EMPTY_PASSWORD</em>) (das mag unsicher erscheinen, da ich hier aber lokal nur mit Testdaten arbeite, ist das erstmal einfach nur pragmatisch). Außerdem soll sich jeder Client verbinden können, also setzte ich <em>MYSQL_ROOT_HOST</em> auf %.</p>
<p>Eine Besonderheit ist der Parameter <em>default-authentication-plugin</em>. Wenn du ein Root-Passwort vergibst, solltest du zusätzlich diesen Parameter setzen. Zur Erklärung: Es handelt sich hier um ein MySQL 8-Image. Dort wird als Authentifizierungs-Methode <em>caching_sha2_password</em> verwendet, was sich mit Docker leider nicht verträgt und mit dieser Fehlermeldung quittiert wird:</p>
<blockquote>
<p>Unable to load authentication plugin &lsquo;caching_sha2_password</p></blockquote>
<p>Und schließlich gibt es noch den Parameter &ndash;detach, der einfach dafür sorgt, dass der Container im Hintergrund gestartet wird.</p>
<p>Das war es fast. Was jetzt noch fehlt, ist der Name des Images, dass die Grundlage für deinen neuen Container bilden soll: <em>mysql</em>. Wenn das Image lokal nicht vorhanden ist, lädt Docker es hilfsbereiterweise einfach herunter.</p>
<p>Es empfiehlt sich, den Aufruf in ein Shell-Script zu packen und diese Zeilen voranzustellen. Beim Aufruf wird also ein vorhandener Container erst gestoppt und gelöscht und dann neu gestartet:</p>
<p>#!/bin/bash
docker stop mysql
docker rm mysql
docker run \
&ndash;name mysql \
-p 3306:3306 \
-v /Users/nicky/Development/MySQL:/var/lib/mysql \
-e MYSQL_ALLOW_EMPTY_PASSWORD=yes \
-e MYSQL_ROOT_HOST=% \
-d \
&ndash;default-authentication-plugin=mysql_native_password \
mysql</p>
<p>Et voilà: Ein MySQL-Server im Docker-Container auf Knopfdruck!</p>
<h2 id="den-http-container-starten">Den HTTP-Container starten</h2>
<p>Am Vorgehen ändert sich nicht viel. Auch für den <strong>nginx-Server</strong> erstelle ich mir ein kleines Script. Dieses befindet sich aber in einem Unterordner meiner Wordpress-Installation. Mit dem Platzhalter <strong>${PWD}</strong> im Parameter <em>--volume</em> kann ich Docker das aktuelle Verzeichnis mitgeben. Dadurch kann  ich das Script auch innerhalb andere Wordpress-Installationen verwenden (und muss lediglich den Namen des Containers anpassen). Hier sorge ich also dafür, dass Docker das aktuelle Verzeichnis als Root-Verzeichnis für den HTTP-Server nutzt. Außerdem liefere ich eine eigene ini-Datei für PHP mit. Wichtig ist außerdem die Verknüpfung zu meinem zuvor erstellen MySQL-Container über den Parameter <em>--link</em>. Der Rest wird analog des ersten Containers vorgegeben: Port, Name, Image, usw.</p>
<p>#!/bin/bash
docker stop nickyreinert-de
docker rm nickyreinert-de
docker run \
&ndash;link mysql \
&ndash;name nickyreinert-de \
&ndash;volume ${PWD}/dev/wordpress.ini:/usr/local/etc/php/conf.d/uploads.ini \
&ndash;volume ${PWD}:/var/www/html \
&ndash;publish 80:80 \
&ndash;detach \
richarvey/nginx-php-fpm</p>
<h2 id="xdebug-installieren">xdebug installieren</h2>
<p>Leider liefert das nginx-Image kein <strong>xdebug</strong> mit. Bzw: Zurecht - der Sinn des ganzen Konzeptes ist es ja, schlanke Container nutzen zu können. Eine All-In-One-Lösung entspräche letztlich ja wieder einer kompletten virtuellen Maschine. Für mich jedenfalls heißt das, dass ich das nginx-Image nun irgendwie mit <strong>xdebug</strong> füttern muss. Das passiert mit <strong>docker build</strong>. Dazu benötige ich zunächst ein Dockerfile, dass auch genau so heißt und folgendermaßen aufgebaut ist - Erklärung folgt darunter:</p>
<p>FROM richarvey/nginx-php-fpm</p>
<p>RUN apk add &ndash;no-cache &ndash;virtual .phpize-deps $PHPIZE_DEPS
RUN apk add &ndash;no-cache nano</p>
<p>RUN pecl install xdebug
RUN echo &lsquo;zend_extension = /usr/local/lib/php/extensions/no-debug-non-zts-20170718/xdebug.so&rsquo; &raquo; /usr/local/etc/php/php.ini
RUN touch /usr/local/etc/php/conf.d/xdebug.ini; \
echo xdebug.remote_enable=1 &raquo; /usr/local/etc/php/conf.d/xdebug.ini; \
echo xdebug.remote_autostart=1 &raquo; /usr/local/etc/php/conf.d/xdebug.ini; \
echo xdebug.remote_connect_back=0 &raquo; /usr/local/etc/php/conf.d/xdebug.ini; \
echo xdebug.remote_host=192.168.0.11  &raquo; /usr/local/etc/php/conf.d/xdebug.ini; \
echo xdebug.remote_port=9000 &raquo; /usr/local/etc/php/conf.d/xdebug.ini; \
echo xdebug.remote_log=/tmp/php-xdebug.log &raquo; /usr/local/etc/php/conf.d/xdebug.ini;</p>
<p>Zunächst einmal lege ich mit <em>FROM</em> fest, welches Images als Grundlage genutzt werden soll - in meinem Fall also nginx-php-fpm von richarvey. Mit <em>RUN</em> übergebe ich dann, zum Image passende, Befehle. So könnte ich xdebug zum Beispiel einfach mit pecl install xdebug installieren lassen. Du wirst dann aber recht schnell feststellen, dass das nicht ohne weiteres funktioniert. PHP ist in diesem Docker-Image natürlich nur mit den wichtigsten Paketen eingerichtet, <em>phpize</em> gehört so z.B. nicht dazu und der Aufruf würde mit folgender Fehlermeldung quittiert werden:</p>
<p>Cannot find autoconf. Please check your autoconf installation and the # $PHP_AUTOCONF environment variable. Then, rerun this script.</p>
<p>Die Lösung ist, <em>phpize</em> im Voraus mit allen notwendigen Abhängigkeiten zu installieren. Dazu dient der Aufruf</p>
<p>RUN apk add &ndash;no-cache &ndash;virtual .phpize-deps $PHPIZE_DEPS</p>
<p>Das das nicht immer so umfangreich vonstatten gehen muss, soll die Installation des Texteditors <em>nano</em> zeigen: Man kann gewünschte Pakete auch einfach mit <em>apk add <paketname></em> zum Docker-Image hinzufügen. Der apk-Parameter <em>--virtual</em> besagt, dass die genannten Pakete zu einem &ldquo;virtuellen Paket&rdquo; hinzugefügt werden, dass sich dann mit <em>apk del <paketname></em> leicht wieder entfernen lässt. Danach schließlich kann <strong>xdebug</strong> mit <em>pecl install</em> installiert werden. Die letzten beiden RUN-Aufrufe sorgen dafür, dass eine Standard-Konfiguration für xdebug eingerichtet wird. Hier wird es tatsächlich noch etwas tricky, wenn es um den <em>remote_host</em> geht. Docker lässt den Container später in einem eigenen Netzwerk laufen. Der Docker-Host, also in meinem Fall OS X,erhält dafür eine eigene IP-Adresse, wie z.B. 172.17.0.1. Das Problem: Das ist nicht die IP-Adresse, unter der OS X bzw. der Debug-Client (z.B. Visual Studio Code) erreichbar ist. Jeder Debug-Versuch wurde (in meinem Fall) in <em>/tmp/php-xdebug.log</em> mit folgender Fehlermeldung quittiert:</p>
<p>W: Creating socket for &lsquo;127.0.0.1:9000&rsquo;, poll success, but error: Operation in progress (29).</p>
<p>Der Remote-Host ist also die tatsächliche IP-Adresse deines Hosts, unabhängig von Docker. Hier demnach die IP-Adresse <em>192.168.0.11</em>.</p>
<p>Zum Abschluss muss das Dockerfile nur noch verarbeitet werden. Das passiert mit folgendem Aufruf:</p>
<p>docker build &ndash;tag nginx-php-fpm-xdebug .</p>
<p>Mit dem Parameter <em>--tag</em> gibst du dem modifizierten Image einen eigenen Namen. Der letzte Parameter - ein Punkt - zeigt docker, in welcher Datei sich die Build-Anweisung befindet. Docker sucht standardmäßig nach einer Datei mit dem Namen Dockerfile. Deshalb verweise ich mit dem Punkt einfach nur auf den aktuellen Ordner, in dem sich diese Datei auch befindet.</p>
<p>Docker wird nun die Anweisungen aus dem Dockerfile verarbeiten und ein neues Image erzeugen. Der erste Aufruf wird etwas länger dauern. Wenn du an dem Dockerfile nur geringfügige Änderungen vornimmst und den build-Prozesse erneut startest, ist Docker so clever und nimmt nur die notwendigen Änderungen vor - alles andere befindet sich bereits in einer Art &ldquo;Zwischenspeicher&rdquo;.</p>
<p>Denke nun daran, den oben bereits zusammengebauten Container-Aufruf des HTTP-Servers den Image-Name anzupassen: <em>nginx-php-fpm-xdebug</em>!</p>
<h2 id="visual-studio-code">Visual Studio Code</h2>
<p>Der Vollständigkeit halber möchte ich nun noch die Schritte dokumentieren, die bei Microsofts Visual Studio Code (VSC) notwendig sind. Hier installiert man zunächst das Paket <strong>PHP Debug</strong>. Im Debug-Bereich fügt man dann eine neue Konfiguration hinzu, die VSC mitteilt, unter welcher IP-Adresse xdebug erreichbar ist - nämlich 127.0.0.1 und dem üblichen Port: 9000:</p>
<p>{
// Use IntelliSense to learn about possible attributes.
// Hover to view descriptions of existing attributes.
// For more information, visit: <a href="https://go.microsoft.com/fwlink/?linkid=830387">https://go.microsoft.com/fwlink/?linkid=830387</a>
&ldquo;version&rdquo;: &ldquo;0.2.0&rdquo;,
&ldquo;configurations&rdquo;: [
{
&ldquo;name&rdquo;: &ldquo;Listen for XDebug&rdquo;,
&ldquo;type&rdquo;: &ldquo;php&rdquo;,
&ldquo;request&rdquo;: &ldquo;launch&rdquo;,
&ldquo;port&rdquo;: 9000,
&ldquo;host&rdquo;: &ldquo;127.0.0.1&rdquo;
}
]
}</p>
<p>Fertig. Mit einem Klick auf den grünen Playbutton wird VSC sich nun mit xdebug verbinden.</p>
<p>[caption id=&ldquo;attachment_2199&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/nginx-mit-php-fpm-und-mysql-mit-docker-auf-mac-os-einrichten/visual-studio-code-den-debugger-starten.png"><img src="/2018/2018-09-16-nginx-mit-php-fpm-mysql-und-xdebug-mit-docker-auf-mac-os-einrichten/images/visual-studio-code-den-debugger-starten-300x162.png" alt="Visual Studio Code - den Debugger starten"></a> Visual Studio Code - den Debugger starten[/caption]</p>
<h2 id="fazit">Fazit</h2>
<p>Docker hat mich voll überzeugt. Ich bereue es, dass ich nicht schon früher umgestiegen bin. Es läuft sauber und wenn man das Konzept erstmal verstanden hat, ist es auch sehr intuitiv zu bedienen und lässt vor allem keine Wünsche auf. Im Nachhinein betrachtet hat mich die komplette Einrichtung der virtuellen Maschine mit Ubuntu unter Parallels auch weitaus mehr Zeit - und Nerven! - gekostet. Was jetzt noch fehlt, ist das etwas dynamischere Verwalten mehrerer lokaler Websiten mit Docker. Dazu komme ich später - <em>stay tuned</em>.</p>
<h2 id="referenzen">Referenzen</h2>
<p>Mein Dank gilt <a href="http://paislee.io/a-minimal-development-server-with-nginx-and-docker/">Caleb Sotelo</a>, von wo ich einen Großteil der Scripte habe. Ein Teil des Dockerfiles stammt von <a href="https://blog.philipphauer.de/debug-php-docker-container-idea-phpstorm/">philipphauer.de</a>. Danke!</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Docker, macOS, Nginx, PHP, Xdebug, Tutorial</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>development</category>
      
      <category>hosting</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>NGinx mit PHP-FPM, MySQL und Xdebug mit Docker auf Mac OS einrichten - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>tutorial</dc:type>
      
      
    </item><item>
      <title>Wordpress Page Builder - Pro und Contra</title>
      <link>http://localhost:1313/2018/2018-08-12-wordpress-page-builder-pro-und-contra/</link>
      <pubDate>Sun, 12 Aug 2018 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://localhost:1313/2018/2018-08-12-wordpress-page-builder-pro-und-contra/</guid>
      <description>Page Builder oder auch Theme Builder haben ihre Daseinsberechtigung, gar keine Frage. Davon zeugt vor allem ihr Erfolg und ihre Verbreitung. Allerdings sollte …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine kritische Auseinandersetzung mit WordPress Page Buildern. Der Artikel wägt die Vor- und Nachteile dieser Werkzeuge ab und argumentiert, dass trotz der anfänglichen Bequemlichkeit für Laien schwerwiegende Nachteile wie Performance-Probleme, Sicherheitsrisiken und ein starker &#39;Lock-in-Effekt&#39; überwiegen.</p>
          
          
          <p><strong>Hauptthemen:</strong> WordPress, Page-Builder, Web-Design, Web-Development, Usability, Performance</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>Page Builder oder auch Theme Builder haben ihre Daseinsberechtigung, gar keine Frage. Davon zeugt vor allem ihr Erfolg und ihre Verbreitung. Allerdings sollte man sich gut überlegen, für welches Projekt man Page Builder oder Theme Builder einsetzt.<br>
Eins vorweg: Ich bin wahrlich kein Freund von Page Buildern. Jede Begegnung mit Page Buildern hat bei mir immer für Kopfschmerzen gesorgt. Entweder hat ein Update den Page Builder unbrauchbar gemacht. Oder der Nutzer konnte den als intuitiv angepriesenen Page Builder gar nicht erst bedienen und ich musste mich damit rumärgern. Es gibt für mich eigentlich kein denkbares Szenario, in dem ein Page Builder Sinn macht. Trotz allem versuche ich Page Builder möglichst objektiv zu bewerten. Nicht alle hier aufgeführten Punkte betreffen jeden Page Builder, sie können dir aber helfen, die richtige Entscheidung zu treffen.</p>
<h2 id="pro">Pro</h2>
<p><strong>Webdesign für Laien</strong> - ohne HTML-, CSS- und JavaScript-Kenntnisse. Wenn es um kleinere oder Hobby-Projekte geht, ist man bei einem Page Builder gut aufgehoben. Man kann sich auf das Erstellen der Inhalte konzentrieren. Ein recht ahnsehnliches, modernes Layout lässt sich ohne tiefe technische Kenntnisse realisieren.</p>
<p><strong>Viele Funktionen aus einer Hand</strong> - Wer seine Seite mit allerlei Funktionen, Google Maps, Tabellen, Formularen usw. anreichen möchte, macht mit einem Theme Builder nichts falsch. Page Builder liefern eine Vielzahl von Funktionen und Elementen mit, die viele Ansprüche an eine moderne Webseite erfüllen.</p>
<h2 id="contra">Contra</h2>
<p><strong>Kompatibilität</strong> - jedes zusätzliche Plugin erhöht die Komplexität deiner Installation. Bei jedem Update anderer Plugins oder des Page Builders besteht die Gefahr, dass sich Komponenten nicht vertragen oder der Page Builder komplett oder in Teilen gar nicht mehr funktioniert. Dann beginnt die aufwendige Fehlersuche. Das Risiko lässt sich mit einem selber angepassten Theme sicher nicht ganz ausschließen, allerdings gerät die Fehlersuche hier einfacher.</p>
<p><strong>Sicherheit</strong> - jedes zusätzliche Plugin, vor allem wenn es so populär ist, kann Sicherheitslücken enthalten.</p>
<p><strong>Layout</strong> - Bei einem Page Builder ist die Gestaltung der Seite im Backend abgebildet und nicht wie üblich über CSS und HTML. Natürlich verwendet auch ein Theme Builer CSS und HTML - gemeint ist aber die Pseudo-Sprache des Theme Builders. Bei einem Theme Builder ziehst du per Drag&rsquo;n&rsquo;Drop ein Gestaltungselement in deinen Beitrag und diese Information wird als Meta-Datum im Beitrag abgelegt. Das Layout ist mit dem Inhalt und dem Theme Builder eng verwoben und es handelt sich um eine eigene &ldquo;Layout-Definition&rdquo;. Beim Wechsel auf einen anderen Page Builder geht diese Information verloren.</p>
<p><strong>Performance</strong> - das Erstellen aufwendiger Layouts mit Animationen und Spezialeffekten mit nur wenigen Maus-Klicks geht oft zu Lasten der Geschwindigkeit, weil auch nicht benötigte Module geladen werden. Außerdem müssen die ganzen hübschen Animationen auch berechnet werden. Das erfordert unnötige Rechenleistung. Das mag kleinlich klingen, aber das ist nicht nur in Grenzfällen von Bedeutung.</p>
<p><strong>Usability #1</strong> - die Zeiten von Macromedia Flash und aufwendigen Animationen auf den Websiten sind zum Glück lange vorbei. Wer nicht gerade eine Website für ein hippes Games-Studio baut, muss auf seiner Website niemanden mit unzähligen aufwendigen Animationen überzeugen. Bei PowerPoint-Präsentationen sind einfliegende Bilder, pulsierende Überschriften und andere Gimmicks schon lange verpönt, in der Page-Builder-Branche ist man leider noch nicht so weit.</p>
<p>**Usability #**2 - Das ganze trifft allerdings auch auf das Backend zu. Page Builder bieten sehr viele Funktionen an und sind daher relativ komplex aufgebaut, vor allem wenn man ein ausgefallenes Layout hinterlegt. Jemand, der sich nur mit den Inhalten beschäftigen will, läuft zu Beginn Gefahr, bereits an der Nutzung des Page Builders zu scheitern. Der Wordpress-Editor ist zurecht relativ simpel gehalten. Selbst jemand, der fit in der WordPress-Bedienung ist, benötigt erstmal Einarbeitung, um auch einen Theme Builder sicher bedienen zu können.</p>
<p><strong>Modularität</strong> - Die Modularität von Wordpress ist ein riesiger Vorteil, da so verschiedene Aufgaben unabhängig voneinander gelöst werden können. Plugin-Entwicklung, Inhalte und Layout sind strikt voneinander getrennt (wenngleich sie sich natürlich gegenseitig referenzieren dürfen). So kann ich in einer Entwicklungsumgebung mit einem Child-Theme ein neues Layout entwickeln und das dann in ein Live-System integrieren, indem ich einfach nur die Quelle-Dateien kopiere. Ein Page-Builder konterkariert das: Das Grenze zwischen reinem Webdesign und Inhaltserstellung verschwimmen, da nun der Wordpress-Texteditor dafür missbraucht wird, die Gestaltung der Seite maßgeblich zu beeinflussen. Das mag bequem sein, erschwert aber die Weitergabe, da nun nicht nur des Wordpress-Theme weitergegeben werden muss, sondern auch der komplette Inhalt der Beiträge.</p>
<p><strong>Abhängigkeit</strong> - Klar - wer seinen Page Builder liebt, der wird ihm nicht den Rücken kehren. Aber rein hypothetisch: Was ist, wenn du irgendwann doch mal weg willst, von deinem Page Builder? Dann stehst du vor einem Problem: Du musst das Layout komplett neu aufbauen und im schlimmsten Fall auch sämtliche Inhalte überarbeiten.</p>
<h2 id="gutenberg---der-gute-theme-builder">Gutenberg - der gute Theme Builder?</h2>
<p>Gutenberg ist in der Tat nichts anderes als ein Theme Builder und tatsächlich treffen die oben genannten Vor- und Nachteile größtenteils auch auf Gutenberg zu. Es gibt aber einen entscheidenden Unterschied: Gutenberg ist Teil von WordPress. Das Entwickler-Team von WordPress hat bei der Entwicklung von Core-Funktionalitäten immer auch die Kompatibilität mit Gutenberg im Blick.</p>
<h2 id="fazit-im-zweifel-gegen-die-page-builder">Fazit: Im Zweifel gegen die Page Builder</h2>
<p>Man darf sich von der eigenen Bequemlichkeit nicht verleiten lassen. Auf den ersten Blick nehmen Page Builder dir sehr viel Arbeit ab. Anfänger scheuen es verständlicherweise, sich mit JavaScript, CSS und HTML auseinandersetzen zu müssen. Doch die Zeit, die sie zu Beginn durch den Einsatz eines Page Builders sparen, geht später dafür drauf, sich mit all den Unannehmlichkeiten auseinander setzen zu müssen. Ich will nicht sagen, dass Page Builder keine Daseinsberechtigung haben - der Erfolg gibt ihnen schließlich recht. Allerdings begegnet man in den einschlägigen Foren auch vielen Hilfesuchenden, die Opfer ihre anfänglichen Bequemlichkeit werden.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> WordPress, Page-Builder, Meinung, Web-Dev</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Wordpress Page Builder - Pro und Contra - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>opinion_piece</dc:type>
      
      
    </item><item>
      <title>Wie richte in ein Staging-System für Wordpress ein?</title>
      <link>http://localhost:1313/2018/2018-03-11-wie-richte-in-ein-staging-system-fuer-wordpress-ein/</link>
      <pubDate>Sun, 11 Mar 2018 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://localhost:1313/2018/2018-03-11-wie-richte-in-ein-staging-system-fuer-wordpress-ein/</guid>
      <description>Wordpress hat den Ruf sehr unkompliziert zu sein. Zurecht. Doch oft bleibt es nicht dabei, dass man ein paar Beiträge verfasst. Die Seite kann schnell von einem …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine detaillierte Anleitung zur Einrichtung einer Staging-Umgebung für WordPress. Der Artikel vergleicht zwei Methoden: einen manuellen, aber sichereren Ansatz mit den Plugins &#39;Duplicator&#39; und &#39;WP Sync DB&#39; auf einer separaten Subdomain und einen einfacheren Ein-Klick-Prozess mit dem &#39;WP Staging&#39;-Plugin, dessen Nachteile ebenfalls beleuchtet werden.</p>
          
          
          <p><strong>Hauptthemen:</strong> WordPress, Staging, Deployment, Web-Development, DevOps, Website-Wartung</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> advanced</p>
          
        </div>
        
        
        <p>Wordpress hat den Ruf sehr unkompliziert zu sein. Zurecht. Doch oft bleibt es nicht dabei, dass man ein paar Beiträge verfasst. Die Seite kann schnell von einem einfachen Blog zu einem großen CMS heranwachsen und wird dann nicht nur mit Texten und Bildern, sondern dank eines riesigen Angebotes an Plugins und Template auch mit Funktionalitäten gefüllt. Und dann wird man mit einem Konflikt konfrontiert, dass die gesamte Seite bedroht: Updates und Inkompatibilität. Es ist nämlich gar nicht so selbstverständlich, dass die eigenen Anpassungen mit alle Wordpress-, Plugin- und Template-Versionen oder gar der Hosting-Umgebung harmonieren. Je angepasster die eigene Wordpress-Installation ist, desto komplexer sind im Hintergrund die Abhängigkeiten. Ein kleines Update kann im schlimmsten Fall die gesamte Seite gefährden. Ein Staging-System für Wordpress kann da helfen.</p>
<h2 id="zwei-wege-und-drei-plugins-führen-nach-rom">Zwei Wege und drei Plugins führen nach Rom</h2>
<p>Deswegen ist es ratsam, sich möglichst früh um eine Testumgebung Gedanken zu machen. Das Ziel soll eine sogenannte Staging-Umgebung sein, die synchron zum öffentlichen Live-System betrieben werden kann. Gleiche Inhalte, gleiche Templates, gleiche Plugins. Auf diesem Staging-System kann dann jedes Update und jede Änderung auf Kompatibilität getestet werden. Bei Erfolg installiert man das Update auch auf dem Live-System. Die gute Nachricht: Das Lesen des Beitrages wird dich vermutlich mehr Zeit kosten, als der ganze Prozess. Je nach Größe des Blogs kannst du ein Staging-System für Wordpress in 5 bis 10 Minuten aufsetzen.</p>
<p>Es gibt viele Möglichkeiten (sprich Plugins), die versprechen, Wordpress-Installationen zu kopieren oder in irgendeiner Form zu synchronisieren. Doch keines erfüllt das Ziel wirklich komfortabel, nämlich:</p>
<p><em>per Knopfdruck im Wordpress-Backend Dateien und Datenbank an einen anderen Ort kopieren</em></p>
<p>Ich will an dieser Stelle zwei Wege und drei Plugins vorstellen, die ich als sehr nützlich betrachte und die die Aufgabe zumindest in Teilen erfüllen.</p>
<h3 id="welche-plugins-kommen-für-das-staging-system-für-wordpress-in-frage">Welche Plugins kommen für das Staging-System für Wordpress in Frage</h3>
<ul>
<li>Der <strong>1. Weg</strong>: <a href="https://github.com/wp-sync-db/wp-sync-db">WP Sync DB</a> ist ein Plugin, dass zwar sehr bequem nur über das Backend läuft, aber eben auch nur den Inhalt der Datenbank kopiert. Praktisch ist allerdings, dass immerhin auch die Medien-Bibliothek komplett übertragen wird. Außerdem: Der <a href="http://snapcreek.com/duplicator/">Duplicator</a> ist ein sehr mächtiges, teilweise kostenpflichtiges Plugin; allerdings reicht für diese Zwecke auch die kostenlose Variante aus. Damit werden sämtliche Dateien und Tabellen aus der Datenbank in ein Archiv gepackt, aus dem dann an anderer Stelle eine eigenständige Installation erstellt wird. Leider muss dazu auch per FTP oder der Shell hantiert werden. Mit der  Kombination aus beiden Plugins lässt sich das o.g. Ziel jedenfalls schon recht gut erreichen. Zusammen mit WP Sync DB lassen sich die Installationen aber halbwegs komfortabel synchron halten.</li>
<li>Das dritte Plugin (für den <strong>2. Weg</strong>) heißt <a href="https://de.wordpress.org/plugins/wp-staging/">WP Staging</a>. Damit kann man sehr bequem eine komplette Kopie von Wordpress erstellen. Der Vorteil: Das Plugin übernimmt den ganzen Prozess und wird nur über das Backend bedient. Der Nachteil aus meiner Sicht: Das Staging-System wird unterhalb des Live-Systems in einem Unterverzeichnis erstellt und es wird die exakt gleiche Datenbank verwendet. Für meinen Geschmack ist die Trennung zwischen Live- und Test-System damit nicht strikt genug.</li>
</ul>
<p>Zuerst beschreibe ich die Vorbereitung auf dem Server. Danach gehe ich auf die Installation der jeweiligen Tools ein. Und abschließend fasse ich im <a href="/2018/2018-03-11-wie-richte-in-ein-staging-system-fuer-wordpress-ein/#fazit">Fazit</a> noch einmal zusammen, wie unser Live-Staging-System nun genutzt werden kann. Wer also wissen will, was auf ihn zukommt, fängt ausnahmsweise mal von unten an zu lesen.. ;)</p>
<h2 id="vorbereitung">Vorbereitung</h2>
<p>Bevor ich mich an die Plugins mache, möchte ich eine Sub-Domain und einen getrennten Ort im Dateisystem einrichten (Für den zweiten Weg ist das <em>nicht</em> notwendig). Außerdem soll der Zugriff auf das Staging-System mit htaccess geschützt werden.</p>
<p>Ich gehe im folgenden davon aus, dass die Seite bei einem Shared-Hosting-Anbieter eingerichtet ist. Wer einen Dedicated, V- oder Managed-Server nutzt, dem räume ich einfach mal genügend Sachverstand ein, die Schritte auch auf so einem System nachvollziehen zu können. Ansonsten werde ich versuchen, diese Anleitung so detailliert und einfach wie möglich zu gestalten.</p>
<p>Los geht es mit einem zusätzlichen Ordner auf unserem Webspace, der natürlich nicht unterhalb unseres aktuellen Live-System liegen darf. Nun richte ich mir eine Sub-Domain ein, die auf diesen Ordner zeigen soll. Das passiert in zwei Schritten. 1. Anlegen der Subdomain und 2. Einstellen des Verweises auf den entsprechenden Ordner, in meinem Fall also <em>staging</em>.</p>
<p>[caption id=&ldquo;attachment_1684&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/wie-richte-in-ein-staging-system-fuer-wordpress-ein/strato-subdomain-umleitung-einrichten.png"><img src="/2018/2018-03-11-wie-richte-in-ein-staging-system-fuer-wordpress-ein/images/strato-subdomain-umleitung-einrichten-300x157.png" alt="Ziel für die Sub-Domain einrichten am Beispiel von Strato"></a> Ziel für die Sub-Domain einrichten am Beispiel von Strato[/caption]</p>
<p>Die Installation von Wordpress können wir uns sparen, das übernimmt gleich der <em>Duplicator</em>. Den Verzeichnisschutz können wir übrigens erst nach einrichten, nachdem wir Wordpress einmal &ldquo;dupliziert&rdquo; haben. Dazu also später mehr.</p>
<h2 id="mit-duplicator-einen-ganzen-blog-umziehen">Mit Duplicator einen ganzen Blog umziehen</h2>
<p>Weiter geht es auf dem aktuellen Live-System, wo wir uns den Duplicator installieren und sofort aktivieren. Im Hauptmenü gelangst man über &ldquo;Duplicator&rdquo; und den Punkt &ldquo;Archive&rdquo; zu &ldquo;Neues erstellen&rdquo; Zuerst wird die System-Umgebung geprüft. Damit das Plugin funktioniert, sollten natürlich alle Anforderungen erfüllt sein. Hier kann es z.B. passieren, dass das &ldquo;ZIP-Archiv&rdquo; für PHP fehlt.</p>
<p>Wenn du Shell-Zugriff auf deinen Server hast, kannst du das Problem sehr einfach beheben, indem du das entsprechende PHP-Modul installierst und den Web-Server neu startest.</p>
<p>apt-get install php-zip
service apache2 restart</p>
<p>Ansonsten kannst du dieses Paket ggf. im Backend deines Hosting-Paketes aktivieren oder deinen Provider fragen, ob er dir das Modul einrichtet. Nun solltest du über den gleichen Dialog die weiteren Einstellungen vornehmen können. Den Speicher-Ort musst du nicht ändern. In der Pro-Version kannst du hier auch einen FTP-Server oder sogar eine Dropbox-Freigabe auswählen. Unter &ldquo;Archive&rdquo; musst du ebenfalls keine Einschränkungen vornehmen, es geht ja darum, die komplette Installation inklusive aller Dateien zu kopieren.</p>
<p>Natürlich kann es hilfreich sein, hier bereits die Verbindungsdaten zur MySQL-Datenbank zu hinterlegen. Das Passwort muss bei der späteren  Installation aber dennoch nachgereicht werden.</p>
<p>[caption id=&ldquo;attachment_1686&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/wie-richte-in-ein-staging-system-fuer-wordpress-ein/duplicator-grundeinstellungen.png"><img src="/2018/2018-03-11-wie-richte-in-ein-staging-system-fuer-wordpress-ein/images/duplicator-grundeinstellungen-300x137.png" alt="Duplicator - Grundeinstellungen"></a> Duplicator - Grundeinstellungen[/caption]</p>
<p>Weiter geht es sodann mit dem &ldquo;Scan&rdquo;. Hier werden Datenbank und Dateisystem auf mögliche Fehlerquellen gescannt, wie z.B. Sonderzeichen in den Dateinamen. Wenn es zu Warnungen kommt, muss man diese per Häkchen aktiv &ldquo;ignorieren&rdquo;. Und kann dann den sogenannten &ldquo;Build-Prozess&rdquo; starten.</p>
<p>[caption id=&ldquo;attachment_1687&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/wie-richte-in-ein-staging-system-fuer-wordpress-ein/duplicator-archiv-erstellen.png"><img src="/2018/2018-03-11-wie-richte-in-ein-staging-system-fuer-wordpress-ein/images/duplicator-archiv-erstellen-300x111.png" alt="Duplicator - Das Archiv wird erstelllt"></a> Duplicator - Das Archiv wird erstelllt[/caption]</p>
<p>Nach dem Build-Prozess lädt man nur noch den Installer und das Archiv herunter, die man direkt in den neu angelegten Staging-Ordner kopiert. Die installer.php ruft man nun im Browser auf und startet das &ldquo;Deployment&rdquo;.</p>
<h3 id="das-deployment---das-staging-system-wird-zum-leben-erweckt">Das Deployment - Das Staging-System wird zum Leben erweckt</h3>
<p>Dabei wird das Archiv entpackt und alle Dateien von Wordpress in das Dateisystem geschrieben. Wenn  keine Warnungen dazwischen kommen. Wie z.B. fehlende Schreibrechte, die man natürlich korrigieren muss.</p>
<p>Im 2. Schritt wird die Datenbankverbindung eingestellt. Natürlich wollen wir, aus bereits genannten Gründen, unbedingt eine <strong>getrennte</strong> Datenbank nutzen, um den Live-Betrieb nicht zu gefährden. Außerdem würden alle Tabellen in der Datenbank gelöscht werden. Hier muss also <strong>unbedingt eine leere Datenbank</strong> angegeben werden. Natürlich kann man auch eine Datenbank anlegen lassen, benötigt dazu aber einen Benutzer mit den entsprechenden Rechten.</p>
<p>[caption id=&ldquo;attachment_1688&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/wie-richte-in-ein-staging-system-fuer-wordpress-ein/duplicator-Einstellungen-der-Datenbank-.png"><img src="/2018/2018-03-11-wie-richte-in-ein-staging-system-fuer-wordpress-ein/images/duplicator-Einstellungen-der-Datenbank--300x152.png" alt="Duplicator - Einstellungen der Datenbank"></a> Duplicator - Einstellungen der Datenbank[/caption]</p>
<p>Nachdem also auch die Datenbank mit den Inhalten unserer Seite gefüllt, geht es in Schritt 4 abschließend noch an die Pfade für Wordpress. In den Zusatzoptionen sollte man prüfen, ob alles korrekt eingestellt ist. Als Titel der Seite wähle ich natürlich &ldquo;Staging&rdquo; aus. Alle anderen Einstellungen bleiben unverändert - ich will eine exakte Kopie erhalten.</p>
<p>Grundsätzlich war es das. Unter der Staging-URL ist nun eine exakte Kopie des Live-Systems erreichbar. Zum Schluß richten wir aber noch einen Verzeichnisschutz ein, damit die Staging-Umgebung erstens nicht von außen erreichbar ist und zweitens auch nicht von Suchmaschinen besucht wird und unsere SEO-Stratgie stört. Dazu brauchen wir zweit Dateien im staging-Ordner: .htaccess und .htpasswd</p>
<p>Die Datei .htaccess sollte bereits vorhanden sein, da diese auch von Wordpress genutzt wird. Diese wird um die folgenden Zeilen ergänzt:</p>
<p>AuthName &ldquo;Staging&rdquo;
AuthType Basic
AuthUserFile ./.htpasswd
require valid-user</p>
<p>Die .htpasswd-Datei musst du selber erstellen. Dort hinterlegst du deine Zugangsdaten - einen Benutzernamen und ein sicheres Passwort, wie z.B:</p>
<p>benutzer1:afasdfgasdfg</p>
<p>Das ist natürlich nicht das Passwort im Klartext, sondern verschlüsselt. Das kannst du dir <a href="http://www.homepage-kosten.de/htaccess.php">auf dieser Seite</a> erstellen lassen.</p>
<p>Beim ersten Aufruf des Staging-Systems wird man noch dazu aufgefordert, die Installationsdateien zu entfernen. Fertig.</p>
<p>[caption id=&ldquo;attachment_1685&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/wie-richte-in-ein-staging-system-fuer-wordpress-ein/duplicator-dateien-bereinigen.png"><img src="/2018/2018-03-11-wie-richte-in-ein-staging-system-fuer-wordpress-ein/images/duplicator-dateien-bereinigen-300x76.png" alt="Duplicator - Bereinigen der Installationsdateien"></a> Duplicator - Bereinigen der Installationsdateien[/caption]</p>
<h2 id="mit-wp-sync-db-die-datenbanken-kopieren">Mit WP Sync DB die Datenbanken kopieren</h2>
<p>Zwar haben wir jetzt schon eine vollständige Kopie, allerdings wird unser Live-System in der Zukunft ja durchaus wachsen. Deshalb benötigen wir nun <em>WP Sync DB</em>.</p>
<p>Leider ist das Plugin nicht über das Wordpress-Repository verfügbar. Die Installation ist deshalb aber nicht viel komplizierter: Man lädt sich das Archiv des Plugins von <a href="https://github.com/wp-sync-db/wp-sync-db-media-files">github.com</a> herunter, entpackt es, lädt die Dateien auf den FTP-Server in den Ordner /wp-content/plugins/wp-sync/ der Staging-Umgebung und kann es dann wie gewohnt im Backend von Wordpress aktivieren. Genauso sollte man auch mit dem Plugin verfahren, dass Medien-Datein synchronisieren kann. Das ist auch nur über <a href="https://github.com/wp-sync-db/wp-sync-db-media-files">github.com</a> erhältlich. Mit der Live-Installation verfährt man danach genauso: Einfach die Dateien in den jeweiligen Ordner im plugin-Verzeichnis kopieren und schließlich im Backend aktivieren.</p>
<p>Als nächstes starten wir die allererste Synchronisation der beiden Seiten. Dabei ist es egal, ob wir das vom Live-System oder aus der Test-Umgebung heraus machen.</p>
<p>Im ersten Schritt benötigt ihr die &ldquo;Connection Info&rdquo; eures Live-Systems.  Diese befindet sich bei den Werkzeugen unter Migrate DB und dort unter Settings. Außerdem muss der Haken bei &ldquo;Accept <strong>pull</strong> requests allow this database to be exported and downloaded&rdquo; gesetzt sein. Damit erlaubt ihr, dass die Daten von außerhalb heruntergeladen bzw. &ldquo;gezogen&rdquo; (pull) werden dürfen. Das ist eine zusätzliche Sicherheit, um das Kopieren der gesamten Daten von außen zu verhindern. Aus Sicherheitsgründen ist es ratsam, diese Funktion nach der Synchronisierung wieder zu deaktivieren und immer nur bei Bedarf zu aktivieren.</p>
<p>[caption id=&ldquo;attachment_1683&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/wie-richte-in-ein-staging-system-fuer-wordpress-ein/wp-sync-connection-info.png"><img src="/2018/2018-03-11-wie-richte-in-ein-staging-system-fuer-wordpress-ein/images/wp-sync-connection-info-300x133.png" alt="WP Sync Connection Info des Live-Systems"></a> WP Sync Connection Info des Live-Systems[/caption]</p>
<h3 id="die-anbindung-zum-staging-system">Die Anbindung zum Staging-System</h3>
<p>Im Staging-System müsst ihr nun die Connection-Info hinterlegen. Das passiert auf der gleichen Einstellungsseite unter dem Reiter &ldquo;Migrate&rdquo;. Hier können außerdem einige andere Einstellungen vorgenommen werden. Wichtig, und für gewöhnlich automatisch ausgefüllt, ist natürlich die Anpassung der URL und der Pfade in der Datenbank. Hier lassen sich weitere Felder hinterlegen.</p>
<p>[caption id=&ldquo;attachment_1682&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/wie-richte-in-ein-staging-system-fuer-wordpress-ein/wp-sync-migrate-connection-info-hinterlegen.png"><img src="/2018/2018-03-11-wie-richte-in-ein-staging-system-fuer-wordpress-ein/images/wp-sync-migrate-connection-info-hinterlegen-300x155.png" alt="WP Synch Connection Info hinterlegen"></a> WP Synch Connection Info hinterlegen[/caption]</p>
<p>Außerdem könnt ihr auswählen, ob bestimmte Tabellen oder Spam-Kommentare beim Kopieren ignoriert werden sollen. Es gibt eine Menge weitere Optionen. Ich empfehle zunächst den Haken bei &ldquo;Backup the local database before replacing it&rdquo; zu setzen. Sollte jetzt, aus welchen Gründen auch immer, irgendetwas schief gehen, gibt es immer noch ein Backup. Grundsätzlich sollte ihr aber sowieso ein regelmäßiges Backup mit einem anderen Werkzeug anlegen.</p>
<p>Außerdem sollen auch Medien-Dateien synchronisiert werden. Vorsicht: Wer hier einen großen Bestand an Dateien hat, muss natürlich dafür sorgen, dass genügend Speicher frei ist.</p>
<p>Abschließend speichern wir die getroffenen Einstellungen für die nächste Synchronisierung indem wir  <em>Save Migration Profile</em> aktivieren.</p>
<p>Wer übrigens einen anderen Tabellen-Präfix bei der Installation von Wordpress angegeben hat, wird unten eine Warnung erhalten.</p>
<p>Warning: Different Table Prefixes
Whoa! We&rsquo;ve detected that the database table prefix differs between installations. Clicking the Migrate DB button below will create new database tables in your local database with prefix &ldquo;foobar_&rdquo;.</p>
<p>Das ist allerdings kein Problem. Das Tabellen-Präfix der Live-Datenbank wird verwendet und man muss nach dem Prozess den Präfix manuell in der wp-config.php nachtragen:</p>
<p>$table_prefix  = &lsquo;foobar_&rsquo;;</p>
<p>Und dann gehts mit <em>Migrate DB and Save</em> auch schon los. Bei mir hat der Kopiervorgang nur einige Sekunden gedauert. Kurze Zeit danach erscheint das Login-Fenster von Wordpress.</p>
<p>[caption id=&ldquo;attachment_1680&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/wie-richte-in-ein-staging-system-fuer-wordpress-ein/wp-sync-synchronisierungs-prozess.png"><img src="/2018/2018-03-11-wie-richte-in-ein-staging-system-fuer-wordpress-ein/images/wp-sync-synchronisierungs-prozess-300x93.png" alt="WP Synch Synchronisierungsprozess"></a> WP Synch Synchronisierungsprozess[/caption]</p>
<h2 id="mit-wp-staging-und-einem-klick-eine-kopie-erstellen">Mit WP Staging und einem Klick eine Kopie erstellen</h2>
<p>WP Staging erscheint auf den ersten Blick sehr benutzerfreundlich und unkompliziert. Nachdem man einen Namen für die Staging-Seite angegeben hat, legt das Plugin eine komplette Kopie in einem Unterverzeichnis der Haupt-Domain an, also <a href="https://www.nickyreinert.de/staging">https://www.nickyreinert.de/staging</a>. Das ist verblüffend komfortabel. Aber leider auch nicht ganz ohne Probleme. Erstens funktionieren Permalinks nicht ohne weiteres. So ist der Beitrag https://www.nickyreinert.de/staging/coii/ nur über den Direkt-Link erreichbar <a href="https://www.nickyreinert.de/staging/?p=1643">https://www.nickyreinert.de/staging/?p=1643</a></p>
<p>Außerdem befindet sich die Dateien des Staging-System innerhalb des Ordners vom Live-Systen, genauso wird die gleiche Datenbank benutzt. Das finde ich persönlich etwas unsauber und widerspricht außerdem meiner Vorstellung eines getrennten Test-Systems.</p>
<p>Freilich kann (bzw. sollte) man auch diesen Unterordner noch mit einem Passwortschutz versehen, wie ich es weiter oben schon beschrieben habe.</p>
<h2 id="wie-nutze-ich-das-live-staging-system">Wie nutze ich das Live-Staging-System?</h2>
<p>Wenn du dich für den zweiten Weg mit dem WP Staging-Plugin entschieden hast, ist der Prozess natürlich relativ einfach: Per Knopfdruck erzeugst du eine Kopie auf der du Updates auf Kompatibilität testen kannst. Außerdem kannst du hier natürlich auch Änderungen am Layout prüfen, bevor du sie ins Live-System übernimmst. Das ist bequem, aber wie gesagt für meinen Geschmack nicht &ldquo;abgetrennt&rdquo; genug.</p>
<p>Der erste Weg ist etwas anfangs etwas aufwendiger, aber meiner Meinung nach auch sicherer. Den umständlichen Schritt zur Vorbereitung mit dem Duplicator muss man nur einmal ausführen. Danach kann man mit WP Sync DB die Datenbank und sämtliche Mediendateien kopieren, um das Staging-System für Wordpress auf den aktuellen Stand zu bringen. Jetzt lassen sich dort ebenfalls Plugins und Updates auf Kompatibilität prüfen um sie erst danach im Live-System zu installieren.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> WordPress, Staging, Tutorial, DevOps</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>hosting</category>
      
      <category>wordpress</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Wie richte in ein Staging-System für Wordpress ein? - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>tutorial</dc:type>
      
      
    </item><item>
      <title>Wie entwickelt man einen Amazon-Bot für Telegramm?</title>
      <link>http://localhost:1313/2018/2018-03-02-wie-entwickelt-man-einen-amazon-bot-fuer-telegramm/</link>
      <pubDate>Fri, 02 Mar 2018 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://localhost:1313/2018/2018-03-02-wie-entwickelt-man-einen-amazon-bot-fuer-telegramm/</guid>
      <description>Was ist ein Telegramm-Bot? Schon mal was von Telegramm gehört oder gar einem Telegramm-Bot gehört? Nein? Macht nichts. Telegramm ist ein Messenger, wie Whatsapp …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Diese umfassende Schritt-für-Schritt-Anleitung führt durch die Entwicklung eines Telegram-Bots mit PHP, der die Amazon-Produktsuche integriert. Das Tutorial behandelt die Bot-Registrierung, die Einrichtung des PHP-Bot-Frameworks, die Anbindung an die Amazon Product Advertising API, die Integration von Analytics mit Botan und die Anonymisierung von Nutzerdaten, um einen voll funktionsfähigen Amazon-Suchbot zu erstellen.</p>
          
          
          <p><strong>Hauptthemen:</strong> PHP, Telegram Bot, Amazon API, API Integration, Web Development, Chatbots, Bot Development, Analytics, Datenschutz</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> advanced</p>
          
        </div>
        
        
        <h2 id="was-ist-ein-telegramm-bot">Was ist ein Telegramm-Bot?</h2>
<p>Schon mal was von Telegramm gehört oder gar einem Telegramm-Bot gehört? Nein? Macht nichts. Telegramm ist ein Messenger, wie Whatsapp oder Threema. Der große Vorteil von Telegramm gegenüber Whatsapp ist die Plattforum-Unabhängigkeit. Es gibt nicht nur Apps für Android und iOs, auch unter OS X (Mac) und Windows lässt sich Telegramm unkompliziert nutzen. Bei Whatsapp war das bisher nur über den Browser möglich, Threema bietet diese Möglichkeit gar nicht an.</p>
<p>Außerdem bietet Telegramm ein sehr umfangreiche API an, die noch dazu sehr gut dokumentiert ist. Damit lassen sich sogenannte Telegramm-Bots entwickeln. Diese Bots können dann von den Nutzern mit @einBot angesprochen werden, um alle Möglichen Aufgaben auszuführen. Einer der bekanntesten ist vermutlich der @gif-Bot, der die Plattform giphy.com durchsuchen kann und die Ergebnisse in den Chat-Verlauf schicken kann. Und diese Art von Bots lassen sich auch selber entwickeln und anbieten. Unter anderem auch mit PHP.</p>
<p>Wer die Kommunikation mit Telegramm nicht komplett von vorne aufbauen will, kann auf eine Bibliothek <a href="https://github.com/php-telegram-bot/core">von Longman auf github.com</a> zugreifen. Für meinen Geschmack ist diese leider etwas zu schlecht dokumentiert und mitunter etwas durcheinander organisiert. Noch dazu wird sie offenbar nur sporadisch betreut. Dennoch gibt es ein relativ großes Repository mit Beispielen, was definitiv sehr hilfreich  ist. Etwas verwirrend sind die beiden Repositories, die da <em>Core</em> und <em>Manager</em> heißen. Der <em>Manager</em> ist nur eine Art Wrapper für das Core-Repository. Dessen Nutzung erleichtert die Einrichtung und Entwicklung des Bots um ein vielfaches und bietet z.B. eine zentrale Datei (manager.php) an, um alle Funktionen zu steuern. Beim Core werden die jeweiligen Bot-Funktionen über verschiedene Dateien gesteuert.</p>
<h3 id="was-ist-das-ziel">Was ist das Ziel?</h3>
<p>Was ist also der Plan? Wir bauen uns einen Telegramm-Bot, mit dem sich Amazon nach Produkten durchsuchen lässt. Das Ergebnis wird in einem Grid dargestellt. Wählt man ein Element aus, erscheint es mit Link zum Produkt im Chat-Verlauf. Und mit einer Analytics-Plattform soll das ganze</p>
<p>Um deinen eigenen Bot betreiben zu können brauchst du natürlich erstmal Telegramm und außerdem einen Web-Server und eine Domain für die du ein SSL-Zertifikat einrichten musst. Außerdem solltest du <a href="https://getcomposer.org/download/">composer</a> installiert haben und so ungefähr wissen, wie man damit umgeht.</p>
<h2 id="anmelden-eines-bots">Anmelden eines Bots</h2>
<p>Zunächst musst du deinen neuen Telegramm-Bot anmelden. Dazu nutzt du den BotFather (<a href="https://telegram.me/botfather">BotFather)</a>. dem du mit dem Befehl /<em>newbot</em> dazu bringen kannst, einen neuen Bot zu registrieren. Zuerst wird ein Name für den Bot verlangt - das ist allerdings noch <em>nicht</em> der Name, mit dem der Bot später auch angesprochen wird. Das ist erst der sogenannte <em>username</em>, der im 2. Schritt verlangt wird. Ich nenne meinen Bot <em>@buecherBot</em>.</p>
<p>Leider gibt es hier eine Restriktion: Der Name muss mit <em>bot</em> enden. Wer einen kurzen Namen wie @gif oder @youtube nutzen möchte, muss dazu vermutlich etwas mehr Aufwand betreiben. Als nächstes rufst du die Einstellungen des Bots auf, indem du das Inline-Menü mit /mybots öffnest.</p>
<p>Für unseren Bot solltest du zunächst den Inline-Mode aktivieren. Damit kannst du den Bot im Textfeld direkt ansprechen. Das gehst du über den Punkt Bot-Settings zum Inline-Mode und aktivierst diesen.</p>
<p>[caption id=&ldquo;attachment_1655&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/wie-entwickelt-man-einen-bot-fuer-telegramm/telegramm-bot-father.png"><img src="/2018/2018-03-02-wie-entwickelt-man-einen-amazon-bot-fuer-telegramm/images/telegramm-bot-father-300x200.png" alt="Inline-Mode für den Telegramm-Bot aktivieren"></a> Inline-Mode für den Telegramm-Bot aktivieren[/caption]</p>
<p> </p>
<p>Schließlich kannst du <em>Allow Groups</em> auf Nein setzen und die <em>Group Privacy</em> aktivieren. Da der Bot noch nicht in Gruppen aktiv sein soll, muss er weder Mitglied von Gruppen sein noch deren Nachrichten mitlesen.</p>
<p>Als nächstes lässt du dir den API-Schlüssel anzeigen, damit du auch von außen mit dem Bot kommunizieren kannst. Der API-Schlüssel befindet sich im obersten Menü und ist folgendermaßen aufgebaut:</p>
<p>123123123:128390123jKF19082_1293123123</p>
<p>Das war es, was die Vorbereitung angeht. Weiter geht es mit PHP und einer kleinen Bot-Logik.</p>
<h2 id="dem-bot-mit-php-leben-einhauchen">Dem Bot mit PHP Leben einhauchen</h2>
<p>Als Library bzw. Framework nutzen wir das <a href="https://github.com/php-telegram-bot/core">Telegram-Bot-Repository</a> von Longman bzw. den dazugehörigen <a href="https://github.com/php-telegram-bot/telegram-bot-manager">Manager</a>, eine Art Wrapper, der die Steuerung etwas erleichtert.Damit du für den ersten Start bereits eine gute Grundlage hast, solltest du dir <a href="https://github.com/php-telegram-bot/example-bot">die Beispiel-Dateien von github</a> herunterladen. Auf der github-Seite wird zwar die Einstellung für die composer.json vorgegeben, allerdings hat der checkout damit bei mir nicht funktioniert. Mit folgenden Parametern klappte es dann:</p>
<p>{
&ldquo;require&rdquo;: {
&ldquo;php-telegram-bot/telegram-bot-manager&rdquo;: &ldquo;^1.2&rdquo;,
&ldquo;longman/telegram-bot&rdquo;: &ldquo;0.52 as 0.48&rdquo;
}
}</p>
<p>Nachdem composer alle Abhängigkeiten heruntergeladen hat (<em>composer install</em>), muss man sich in der manager.php an die Grundeinstellungen machen. (Es kann passieren, dass du auf deinem System einige PHP-Module installieren musst. Composer wird dir die Namen der Module allerdings nennen. Du kannst sie dann relativ unkompliziert mit z.B. apt-get install php7.0-b_cmath php7.0-curl herunterladen und aktivieren.) Außerdem werde ich ein paar Änderungen an der Datei InlinequeryCommand.php_ aus dem Ordner Commands aus dem Beispiel-Repository vornehmen.</p>
<p>Aber zuerst zur manager.php. Hier solltest du die folgenden Einstellungen vornehmen:</p>
<ul>
<li>
<p><strong>bot_username</strong> - der Benutzername deines Bots, ohne das führende @</p>
</li>
<li>
<p><strong>api_key</strong> - der API-Schlüssel, den dir der Bot-Father gegeben hat</p>
</li>
<li>
<p><strong>secret</strong> - ein selbst erzeugtes Passwort um die Datei vor Zugriffen von außen zu schützen - die PHP-Datei liegt ja auf deinem öffentlichen Server und kann theoretisch von überall aufgerufen werden.</p>
</li>
<li>
<p><strong>webhook-&gt;url</strong> - hier trägst du die URL zur manager.php-Datei ein, also <a href="https://telegramm.example.com/manager.php">https://telegramm.example.com/manager.php</a></p>
</li>
<li>
<p><strong>commands-&gt;paths</strong> - diese Zeile muss auskommentiert sein und zu einem Pfad verweisen, der deine Bot-Commandos enthält. Wenn du dich an dem Bot-Example orientierst, sieht diese Einstellung so aus:</p>
<pre><code>      'commands' =&gt; \[
         // Define all paths for your custom commands
         'paths'   =&gt; \[
             \_\_DIR\_\_ . '/Commands'
         \]
</code></pre>
</li>
</ul>
<p>Als nächstes kannst du noch ein paar zusätzliche Änderungen vornehmen, die aber für die Funktion des Bots nicht wichtig sind:</p>
<ul>
<li><strong>max_connections</strong> - offensichtlich die Anzahl der maximal zulässigen Verbindungen</li>
<li><strong>logging</strong> - diese Zeilen kannst du aus-kommentieren, um das Logging zu aktivieren, gerade in der Anfangsphase ist das ganz nützlich</li>
<li><strong>limiter</strong> - die Telegram-API lässt natürlich nur eine begrenzte Anzahl von Anfragen zu, um das eigene System zu schützen, offenbar bringt das Framework eine Funktion mit, um das Erreichen des Limits bestmöglich zu vermeiden - wie das funktioniert, kann ich nicht sagen, da dazu auch nicht mehr in der Doku steht, ich hab es erstmal aktiviert</li>
</ul>
<p>Grundsätzlich war es das erstmal, was die Voreinstellungen betrifft. Jetzt kannst du den sog. webhook aktivieren. Dazu rufst du die manager.php im Browser auf, wie z.B.</p>
<p><a href="https://telegramm.example.com/manager.php">https://telegramm.example.com/manager.php</a></p>
<h3 id="den-zugriff-von-außen-beschränken">Den Zugriff von außen beschränken</h3>
<p>Wenn du alles richtig gemacht hast, erscheint jetzt erstmal ein Fehler. Und das ist auch gut so - denn schließlich soll der Zugriff von außen ja nicht jedem gewährt werden.</p>
<p>Fatal error: Uncaught TelegramBot\TelegramBotManager\Exception\InvalidAccessException:
Invalid access in &hellip;</p>
<p>Also packst du noch das secret-Token an die URL, dass du weiter oben in der manager.php angegeben hast (nicht den API-Schlüssel von Telegramm!). Und damit du auch eine Aktion auslöst, setzt du erstmal den webhook mit dem Parameter a=set:</p>
<p><a href="https://telegramm.example.com/manager.php?s=123123123&amp;a=set">https://telegramm.example.com/manager.php?s=123123123&a=set</a></p>
<p>Dein Webhook für den Bot ist nun aktiv. Da du in der <em>manager.php</em> außerdem schon den Ordner commands freigegeben hast, kann der Bot nun schon auf Inline-Anfragen antworten. Im Telegramm-Client kannst du nun deinen Privat-Chat öffnen (&ldquo;Gespeichertes&rdquo;) und den Telegramm-Bot mit @buecherBot ansprechen. Der Bot sollte nun, wenn alles korrekt eingerichtet, so antworten, wie es in der Datei <em>InlinequeryCommand.php</em> vorgegeben ist. Nämlich mit einer sehr einfache 3-zeiligen Liste.</p>
<p>Um nun ein Ergebnis von der Amazon API als Bilder-Liste darzustellen, habe ich <em>InlinequeryCommand.php</em> ein wenig angepasst. Zuerst benötigen wir die entsprechende Klasse, um nicht nur mit Text sondern auch mit Bildern zu antworten:</p>
<p>use Longman\TelegramBot\Entities\InlineQuery\InlineQueryResultPhoto;</p>
<p>Außerdem habe ich den Aufbau des Antwort-Objektes etwas vereinfacht (ich werde hier nicht weiter ins Detail gehen, auf $this-&gt;apiResult gehe ich später ein).</p>
<p>foreach ($this-&gt;apiResult-&gt;items as $item) {</p>
<p>$this-&gt;inlineQueryResult[] = new InlineQueryResultPhoto(array(
&lsquo;id&rsquo;                    =&gt;  sizeof($this-&gt;inlineQueryResult),
&rsquo;title&rsquo;          	=&gt; &lsquo;Search: &rsquo; . $query,
&lsquo;description&rsquo;           =&gt; &lsquo;Info: &rsquo; . $information,
&rsquo;thumb_url&rsquo;             =&gt; $thumbUrl,
&lsquo;photo_url&rsquo;             =&gt; $imageUrl,
&lsquo;caption&rsquo;             	=&gt; $linkUrl
)
);</p>
<p>}</p>
<p>$data[&lsquo;results&rsquo;] = &lsquo;[&rsquo; . implode(&rsquo;,&rsquo;, $this-&gt;inlineQueryResult) . &lsquo;]&rsquo;;</p>
<p>return Request::answerInlineQuery($data);</p>
<p>Grundsätzlich war es das schon. Du kannst nun noch alle möglichen anderen Funktionen des Bots nutzen. Schau dir dazu einfach den Commands-Ordner des Example-Repository an. Die Auswahl ist sehr groß, für meine Zwecke soll es aber erstmal bei der Inline-Query bleiben.</p>
<h2 id="eine-suchanfrage-zu-amazon-schicken">Eine Suchanfrage zu Amazon schicken</h2>
<p>Natürlich soll derTelegramm-Bot nun auch in der Lage sein, Anfragen der Benutzer zu Amazon zu schicken und mit einem vernünftigen Suchergebnis zu antworten. Zunächst benötigt man dafür einen Partner-Account bei <a href="https://partnernet.amazon.de">Amazon</a>. <a href="https://partnernet.amazon.de/assoc_credentials/home">In den Einstellungen</a> kann man sich dann ein Schlüsselpaar erstellen um die Suchanfragen zu authentifizieren. Und auch für die Suchanfrage selber gibt es eine PHP-API, nämlich <a href="https://github.com/Exeu/apai-io/">apai-io von exeu</a>. Die Einrichtung und der Aufbau sind relativ einfach. Nachdem composer die notwendigen Dateien heruntergeladen hat, packt man - wie üblich - ein paar Zeilen in eine PHP-Datei und hat die erste Anfrage an die Amazon-API fertig:</p>
<pre><code>&lt;?php ini\_set('display\_errors', 1);

require\_once \_\_DIR\_\_ . '/vendor/autoload.php';

define('AWS\_API\_KEY', 'AKAKAKAKAKAKAKA');
define('AWS\_API\_SECRET\_KEY', 'KALSKDLASKDLASDKLASDKLASKLDKASLDASDL
define('AWS\_ASSOCIATE\_TAG', 't0000-21');

use ApaiIO\\Configuration\\GenericConfiguration;
use ApaiIO\\Operations\\Search;
use ApaiIO\\ApaiIO;

$conf = new GenericConfiguration();
$client = new \\GuzzleHttp\\Client();
$request = new \\ApaiIO\\Request\\GuzzleRequest($client);

$conf
	-&gt;setCountry('de')
	-&gt;setAccessKey(AWS\_API\_KEY)
	-&gt;setSecretKey(AWS\_API\_SECRET\_KEY)
	-&gt;setAssociateTag(AWS\_ASSOCIATE\_TAG)
	-&gt;setRequest($request);
	
$apaiIO = new ApaiIO($conf);

$search = new Search();
$search-&gt;setCategory('DVD');
$search-&gt;setActor('Bruce Willis');
$search-&gt;setKeywords('Stirb Langsam');

$response = $apaiIO-&gt;runOperation($search);

$results = simplexml\_load\_string( $response ); 
</code></pre>
<p>Leider gestalten sich die ersten Versuche mit der API etwas schwieriger. Nutzt man den Beispiel-Code, liefert das ganze Script nur einen sehr langen String zurück. In der weiterführenden <a href="http://apai-io.readthedocs.io/en/latest/chapters/responsetransformer.html">Dokumentation</a> wird zwar ein <em>setResponseTransformer</em> beschrieben (siehe auskommentierte Zeile oben). Doch auch dann ist die Antwort nicht nutzbar. Das Suchergebnis bleibt weiterhin ein langer String. Erst <a href="https://github.com/Exeu/apai-io/issues/48">Issue 48</a> gibt einen Hinweis auf die Lösung: <em>new SimpleXMLElement</em>.  Jetzt erhalte ich ein XML-Object, in dem ich mich mit einer Schleife durch das Ergebnis arbeiten kann. Oder man greift auf <a href="https://gist.github.com/ottanxyz/4a44a5094bf27606c12803590a92d131">die hier verwendete Funktion</a>  <em>simplexml_load_string</em> zurück - mein Favorit.</p>
<p>Nun geht es darum, die Antwort in eine Schleife zu packen, um die notwendigen Informationen zu extrahieren. Das Suchergebnis muss also vorbereitet und zurück an denTelegramm-Bot geschickt werden.</p>
<h2 id="die-hochzeit---amazons-antwort-an-dentelegramm-bot-weiterleiten">Die Hochzeit - Amazons-Antwort an denTelegramm-Bot weiterleiten</h2>
<p>Bisher war die Amazon-Funktionalität in eine andere Datei ausgelagert. Also müssen erstmal Zugangsdaten und die Abhängigkeiten in die InlineQueryCommand.php übernommen werden. Ich mach mir das Leben nicht unnötig schwer, und packe das alles in die InlinequeryCommand.php. Sauberer wäre es vielleicht, die initiale bot-Klasse etwas zu erweitern. Außerdem  muss die Anfrage an den Bot an die Amazon-API durchgeschliffen werden. Wenn der Benutzer nur einen Suchbegriff angibt (Bruce Willis), wird danach in allen Kategorien gesucht. Wer die Suche einschränken möchte, muss dem Suchbegriff die entsprechende Kategorie voranstellen. Also z.B.: Books:Bibel Das ganze sieht dann in etwa so aus:</p>
<p>$request = explode(&rsquo;:&rsquo;, trim($requestString));</p>
<p>if (sizeof($request) == 1) {</p>
<pre><code>$category = 'All';
$keywords = trim($request\[0\]);
</code></pre>
<p>} else {</p>
<pre><code>$category = trim($request\[0\]);
$keywords = trim($request\[1\]);
</code></pre>
<p>}</p>
<p>Kategorie und Keyword werden nun schlicht an die Amazon-API übergeben. Damit ich auch Vorschaubilder erhalte, muss ich das in der Suche explizit angeben. Die Anfrage an die API sieht nun also so aus:</p>
<p>$search = new Search();
$search-&gt;setCategory($category);
$search-&gt;setKeywords($keywords);
$search-&gt;setResponseGroup( array( &lsquo;Images&rsquo;, &lsquo;ItemAttributes&rsquo; ) );	
$search-&gt;setPage(1);</p>
<p>Das ganze wird nun in ein Objekt gepackt und in einer Schleife durchlaufen um die Antwort für den Bot zu erzeugen. Das hat sich bei den ersten Versuchen als schwierig erwiesen. Es hat eine Weile gedauert, bis ich herausgefunden habe, dass ich die Eigenschaften des Antwort-Objekts als String casten muss: (string)!</p>
<p>foreach ($this-&gt;apiResult-&gt;Items-&gt;Item as $item) {</p>
<p>$title  = (string) $item-&gt;ItemAttributes-&gt;Title;
$url  = (string) $item-&gt;DetailPageURL;
$thumbFileUrl  = (string) $item-&gt;LargeImage-&gt;URL;
$thumbFileName = basename($thumbFileUrl);
$thumbFileType = pathinfo($thumbFileName, PATHINFO_EXTENSION);</p>
<p>if ($thumbFileType == &lsquo;jpg&rsquo; || $thumbFileType == &lsquo;jepg&rsquo;) {</p>
<pre><code>$this-&gt;inlineQueryResult\[\] = new InlineQueryResultPhoto(
array(
		'id'                    =&gt; sizeof($this-&gt;inlineQueryResult),
		'title'                 =&gt; $title,
		'description'           =&gt; $title,
		'caption'          		=&gt; $title@,
		'thumb\_url'             =&gt; $thumbFileUrl,
		'photo\_url'             =&gt; $thumbFileUrl,
		'input\_message\_content' =&gt; new InputTextMessageContent(\[
			'parse\_mode' =&gt; 'HTML',
			'message\_text' =&gt; ' ' . 'Shop it @ &lt;a href=&quot;'.$url.'&quot;&gt;Amazon&lt;/a&gt;!'\])
	)
);
</code></pre>
<p>}</p>
<p>if (sizeof($this-&gt;inlineQueryResult) &gt;= $this-&gt;limitResult) {</p>
<pre><code>break;
</code></pre>
<p>}</p>
<p>}</p>
<p>Grundsätzlich war es das. Das ganze Script gibt es zum Nachlesen wie gesagt auf github.</p>
<h2 id="zugriffsstatistiken-mit-botan-aufzeichnen-und-darstellen">Zugriffsstatistiken mit Botan aufzeichnen und darstellen</h2>
<p>Um Botan nutzen zu können, brauchst du einen Account bei <a href="https://appmetrica.yandex.com/">AppMetrica</a> von Yandex. Dort kannst du direkt nach der Registrierung einen API-Schlüssel für deinen Bot anlegen:</p>
<p>[caption id=&ldquo;attachment_1649&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/wie-entwickelt-man-einen-bot-fuer-telegramm/appmetrics-yandex-bot-api-key-anlegen.png"><img src="/2018/2018-03-02-wie-entwickelt-man-einen-amazon-bot-fuer-telegramm/images/appmetrics-yandex-bot-api-key-anlegen-300x130.png" alt="AppMetrics API Key für Bot anlegen"></a> AppMetrics API Key für Bot anlegen[/caption]</p>
<p>Wenn das erledigt ist, gelangst du zu der Übersichtsseite deines Bots und siehst dort den API-Key, den du als token in der <em>manager.php</em> einträgst. Die entsprechenden Zeilen müssen natürlich auch auskommentiert werden:</p>
<pre><code>    // Botan.io integration
    'botan' =&gt; \[
       'token' =&gt; '123123123-123123123-123123',
    \],
</code></pre>
<p>Das ist es schon fast gewesen. Wenn da nicht der Datenschutz wäre. Wenn du Telegramm-Bot im Chat nun &ldquo;anrufst&rdquo;, erscheint der Aufruf einige Augenblicke später auch im Interface von AppMetrics. Allerdings sind dann auch eine UserId und der Vorname im Klartext enthalten. Um das zu vermeiden, musst du Methode <em>track</em> in der Botan-Klasse (Botan.php in vendor\longman\telegram-bot\src\) anpassen:</p>
<p>Direkt an den Anfang der Methode habe ich die folgende Anonymisierung eingefügt:</p>
<p>// ANONYMIZING STATS
if (isset($update-&gt;inline_query)) {</p>
<pre><code>if (isset($update-&gt;inline\_query\['from'\])) {

	if (isset($update-&gt;inline\_query\['from'\]\['id'\])) {
	
		$update-&gt;inline\_query\['from'\]\['id'\] = '0';
		$update-&gt;inline\_query\['from'\]\['first\_name'\] = 'anon';
		$update-&gt;raw\_data\['inline\_query'\]\['from'\]\['id'\] = '0';
		$update-&gt;raw\_data\['inline\_query'\]\['from'\]\['first\_name'\] = 'anon';
			
	}
}
</code></pre>
<p>}</p>
<p>Weiter unten wird eine UserId ($uid) ermittelt. Auch hier habe ich anonymisiert:</p>
<p>// In case there is no from field assign id = 0
// $uid = isset($data[&lsquo;from&rsquo;][&lsquo;id&rsquo;]) ? $data[&lsquo;from&rsquo;][&lsquo;id&rsquo;] : 0;
// ANONYMIZING STATS
$uid = 0;</p>
<p>Jetzt dürften keine Klarnamen mehr übermittelt werden und der Bot ist startklar.</p>
<p> </p>
<p>Viel Spass mit deinem Telegramm-Bot.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> php, telegram, bot, api, tutorial, amazon, Datenschutz</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>development</category>
      
      <category>anleitungen</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Wie entwickelt man einen Amazon-Bot für Telegramm? - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>tutorial</dc:type>
      
      
    </item>
  </channel>
</rss>