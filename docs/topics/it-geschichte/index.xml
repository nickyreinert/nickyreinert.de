<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" 
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>IT-Geschichte auf Nicky Reinert</title>
    <link>https://nickyreinert.de/topics/it-geschichte/</link>
    <description>Blog &amp; Projekte von Nicky Reinert (Institut für digitale Herausforderungen): Webentwicklung &amp; Software Development, SEO &amp; Analytics, Hosting &amp; DevOps, WordPress &amp; Hugo, Tools &amp; Projekte, Datenschutz und digitale Kultur – plus Texte zu KI sowie Autismus &amp; Gesellschaft.</description>
    <generator>Hugo 0.148.2</generator>
    <language>de</language>
    <managingEditor></managingEditor>
    <webMaster></webMaster>
    <copyright></copyright>
    <lastBuildDate>Mon, 01 Jan 2024 12:19:31 +0100</lastBuildDate><atom:link href="https://nickyreinert.de/topics/it-geschichte/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>Die Nerd Enzyklopädie 43 - 0x5f3759df</title>
      <link>https://nickyreinert.de/2024/2024-01-01-nerd-enzyklop%C3%A4die-43---0x5f3759df/</link>
      <pubDate>Mon, 01 Jan 2024 12:19:31 +0100</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2024/2024-01-01-nerd-enzyklop%C3%A4die-43---0x5f3759df/</guid>
      <description>In der Informationstechnologie gibt es zwei wichtige Innovationstreiber: Die Porno-Industrie und die Spiele-Industrie. Quake III ist ein wegweisender Vertreter …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine detaillierte Erkundung aus der &#39;Nerd Enzyklopädie&#39; über den berühmten &#39;Fast Inverse Square Root&#39;-Algorithmus (&#39;0x5f3759df&#39;) aus dem Quellcode von Quake III. Der Artikel erklärt die mathematischen Grundlagen der Vektornormierung, die Funktionsweise des Algorithmus mit seinem &#39;evil floating point bit hack&#39; und der &#39;magischen Konstante&#39;, und beleuchtet die ungeklärte Urheberschaft sowie die heutige Relevanz.</p>
          
          
          <p><strong>Hauptthemen:</strong> Algorithmen, Computergrafik, Floating Point, Programmierung, IT-Geschichte, Nerd-Kultur, Quake III</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> advanced</p>
          
        </div>
        
        
        <p>In der Informationstechnologie gibt es zwei wichtige Innovationstreiber: Die <strong>Porno-Industrie</strong> und die <strong>Spiele-Industrie</strong>. <strong>Quake III</strong> ist ein wegweisender Vertreter der Spiele-Industrie. Der Pionier unter den Ego-Shootern wurde <strong>1999</strong> veröffentlicht, eroberte die Herzen der spielenden Gemeinde im Sturm und glänzte mit für die damaligen Verhältnisse herausragenden optischen Effekten. Und das trotz vergleichsweise geringer Anforderungen an die Hardware.</p>
<p><img src="/2024/2024-01-01-nerd-enzyklop%C3%A4die-43---0x5f3759df/image_1.png" alt=""></p>
<p>Nerd-Enzyklopädie #43</p>
<p>Um das zu ermöglichen nutzte <strong>Quake</strong> die „<strong>fast inverse square root</strong>“ (zu Deutsch klingt es etwas sperriger: „Schnelle umgekehrte Quadratwurzel”).</p>
<p>Aber… warum? Um in einer dreidimensionalen Welt bestimmte physikalische Effekt zu simulieren, nutzt man <strong>Vektoren</strong>. Nehmen wir z.B. die Berechnung von <strong>Lichtreflektionen</strong>: Um den Einfalls- und Ausfallswinkel auf einer beliebigen Fläche korrekt zu berechnen, benötigt man einen Vektor, genau genommen einen <strong>normierten Vektor</strong>.</p>
<p>Die Formel für die Berechnung des Betrages eines Vektor (sprich seiner „Länge“) sieht folgendermaßen aus:</p>
<p><img src="/2024/2024-01-01-nerd-enzyklop%C3%A4die-43---0x5f3759df/image_2.png" alt=""></p>
<p>Wer in der Schule gut aufgepasst hat, sollte davon nicht sonderlich beeindruckt sein. Es handelt sich im Prinzip um den <strong>Satz des Pythagoras</strong> <strong>auf Steroiden</strong>.</p>
<p>Ein <strong>normierter Vektor</strong> hat einen Betrag von 1, die Richtung bleibt unverändert:</p>
<p><img src="/2024/2024-01-01-nerd-enzyklop%C3%A4die-43---0x5f3759df/image_3.png" alt=""></p>
<p>Um einen Vektor zu normieren, multipliziert man ihm mit dem Kehrwert seines Betrages:</p>
<p><img src="/2024/2024-01-01-nerd-enzyklop%C3%A4die-43---0x5f3759df/image_4.png" alt=""></p>
<p>Diese Formel muss <strong>millionenfach</strong> ausgeführt werden, wenn man eine Lichtbrechung mit einer halbwegs ansehnlichen Qualität in einem Spiel erzeugen möchte.</p>
<p>Für die Summen und Potenzen (das sind ja letztlich auch nur Summen) ist das kein Problem, wohl aber für die Wurzel bzw. den Kehrwert der Wurzel — die <strong>inverse square root</strong>.</p>
<p>Anfangs behalf man sich mit riesigen Tabellen, die die Ergebnisse zahlreicher Berechnungen enthielten. Das sprengt irgendwann den Rahmen und man musste eine andere Lösung finden. Und diese ist und war <strong>elegant und rebellisch</strong> zugleich — der „<strong>fast inverse square root</strong>“ Algorithmus:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln"> 1</span><span class="cl">    <span class="ne">float</span> <span class="n">Q_rsqrt</span><span class="p">(</span> <span class="ne">float</span> <span class="n">number</span> <span class="p">)</span>  
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="p">{</span>  
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">        <span class="n">long</span> <span class="n">i</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">        <span class="ne">float</span> <span class="n">x2</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">        <span class="k">const</span> <span class="ne">float</span> <span class="n">threehalfs</span> <span class="o">=</span> <span class="mf">1.5</span><span class="n">F</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">        <span class="n">x2</span> <span class="o">=</span> <span class="n">number</span> <span class="o">*</span> <span class="mf">0.5</span><span class="n">F</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="n">y</span> <span class="o">=</span> <span class="n">number</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        <span class="n">i</span> <span class="o">=</span> <span class="o">*</span> <span class="p">(</span> <span class="n">long</span> <span class="o">*</span> <span class="p">)</span> <span class="o">&amp;</span><span class="n">y</span><span class="p">;</span> <span class="o">//</span> <span class="n">evil</span> <span class="n">floating</span> <span class="n">point</span> <span class="n">bit</span> <span class="n">level</span> <span class="n">hacking</span>  
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="n">i</span> <span class="o">=</span> <span class="mh">0x5f3759df</span> <span class="o">-</span> <span class="p">(</span> <span class="n">i</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span> <span class="p">);</span> <span class="o">//</span> <span class="n">what</span> <span class="n">the</span> <span class="n">fuck</span><span class="err">?</span>   
</span></span><span class="line"><span class="ln">10</span><span class="cl">        <span class="n">y</span> <span class="o">=</span> <span class="o">*</span> <span class="p">(</span> <span class="ne">float</span> <span class="o">*</span> <span class="p">)</span> <span class="o">&amp;</span><span class="n">i</span><span class="p">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y</span> <span class="o">*</span> <span class="p">(</span> <span class="n">threehalfs</span> <span class="o">-</span> <span class="p">(</span> <span class="n">x2</span> <span class="o">*</span> <span class="n">y</span> <span class="o">*</span> <span class="n">y</span> <span class="p">)</span> <span class="p">);</span> <span class="o">//</span> <span class="mi">1</span><span class="n">st</span> <span class="n">iteration</span>  
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="o">//</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y</span> <span class="o">*</span> <span class="p">(</span> <span class="n">threehalfs</span> <span class="o">-</span> <span class="p">(</span> <span class="n">x2</span> <span class="o">*</span> <span class="n">y</span> <span class="o">*</span> <span class="n">y</span> <span class="p">)</span> <span class="p">);</span> <span class="o">//</span> <span class="mi">2</span><span class="n">nd</span> <span class="n">iteration</span><span class="p">,</span> <span class="n">this</span> <span class="n">can</span> <span class="n">be</span> <span class="n">removed</span>  
</span></span><span class="line"><span class="ln">12</span><span class="cl">        <span class="k">return</span> <span class="n">y</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="p">}</span>
</span></span></code></pre></div><p>In dieser Funktion passieren einige spannende, um nicht zu sagen verrückte Dinge. Wie zum Beispiel der „<strong>evil floating point bit hack</strong>“.</p>
<p>Dazu ein kurzer Ausflug in das mysteriöse Reich der <strong>Fließkommazahlen</strong>: Diese zeichnen sich durch eine spezielle Art der Speicherung aus, damit in unseren binär geprägten Computern (Nullen und Einsen) auch <strong>Dezimalzahlen</strong> verarbeiten werden können. Dazu wird die Dezimalzahl als Kombination von <strong>Vorzeichen</strong>, <strong>Exponent</strong> und <strong>Mantisse</strong> abgespeichert: Das <strong>IEEE-754</strong> Format!</p>
<p>Der Nachteil: Beim Zurückrechnen kann es zu Ungenauigkeiten kommen. So wird der Wert 3,3 nach IEEE-754 binär abgespeichert:</p>
<p><code>01000001001000011001100110011010</code></p>
<p>Berechnet man diesen Wert zurück in ein Dezimalzahl, erhält man:</p>
<p><code>3.2999999523162841796875</code></p>
<p>Nicht schön, aber selten und meistens auch ausreichend genau.</p>
<p>Der „<strong>evil floating point bit hack</strong>“ schnappt sich den binären Wert der Fließkommazahl und interpretiert ihn schlicht als Ganzzahl, ohne die aufwendige Berechnung nach <strong>IEEE-754</strong>. Aus 3,3 wird damit der „evil integer“ <strong>1.079.194.419</strong>.</p>
<p>Als nächstes kommt es zu einer unter Fachleuten auch als <strong>What-The-Fuck-Transformation</strong> bezeichneten <strong>What-The-Fuck-Transformation</strong>. Unser „evil integer“ wird zunächst per <strong>Bitshift</strong> halbiert (ein bitweises verschieben nach links oder rechts kommt einer Multiplikation oder Division mit 2 gleich — probier es mal aus!). Das Ergebnis wird von einer <strong>höchstseltsamen Konstante</strong> abgezogen. Da ist sie — sie ist wunderschön:</p>
<p><code>0x5f3759df</code></p>
<p>Der dezimale Wert dieser mathematischen Grazie ist <strong>1.597.463.007</strong> — nicht sonderlich spannend. Behandelt man den Wert aber ebenfalls als Fließkommazahl nach <strong>IEEE-754</strong>, erhält man diese Kombination aus Exponent und Mantisse:</p>
<p><code>0.10111110.01101110101100111011111</code></p>
<p>Daraus ergibt sich ein <strong>Exponent</strong> von <strong>63</strong> und die <strong>Mantisse</strong> mit <strong>1,43243014812469482421875</strong>. Zusammen errechnet sich daraus die ziemlich große Zahl: <strong>13.211.836.172.961.054.720</strong> Und das ist eine ziemlich gute Annäherung an die Wurzel von <code>2¹²⁷</code>, nämlich <code>13.043.817.825.332.782.212,349…</code></p>
<p>Das Ergebnis dieser wahnwitzigen Operation wird nun über einen umgedrehten „<strong>evil floating point hack</strong>“ zurück in eine Fließkommazahl „umgewandelt“.</p>
<p>Abschließend findet noch ein weiterer kleiner Trick aus der wunderbaren Welt der Mathematik Anwendung: Mittels des <strong>Newton-Verfahrens</strong> erfolgt eine Korrektur des bisherigen Ergebnisses.</p>
<p>Schließlich kann die Funktion den <strong>Kehrwert einer Wurzel</strong> in etwa genauso gut bestimmen, wie eine konventionelle Berechnung, aber weitaus schneller.</p>
<p>Diese geniale Optimierung der Berechnung wird übrigens oft alleine <strong>John Carmack</strong> zugeschrieben, einem der Schöpfer von <strong>Quake III</strong>. Tatsächlich führen die Wurzeln (<strong>no pun intended…</strong>) aber viel weiter zurück. So basiert die Funktion wohl auf den Arbeiten vieler schlauer Köpfe.</p>
<p>Bereits <strong>1974</strong> tauchte eine ähnliche Routine im Quellcode für den <strong>PDP-11</strong> auf [<a href="https://minnie.tuhs.org/cgi-bin/utree.pl?file=V5%2Fusr%2Fsource%2Fs3%2Fsqrt.s"><strong>TUHS1</strong></a>]. In einem Quellcode von <strong>1993</strong> findet sich ein Kommentar mit dem Verweis auf eine wissenschaftliche Arbeit von <strong>William Kahan</strong> und <strong>K.C. Ng</strong> aus <strong>1983</strong>, in dem sie genau diese optimierte Methode beschreiben. Kahan gilt übrigens als „Architekt“ der IEEE-Fließkommazahlen-Aritmetik. <strong>1997</strong> präsentierte <strong>Jim Blinn</strong> in den „Floating-point tricks“ eine vergleichbare Funktion, dort noch ohne die „magische Konstante“ [<a href="https://ieeexplore.ieee.org/document/595279">IEEE2</a>].</p>
<p>Aber zurück zu John Carnack, der die Urheberschaft ganz explizit von sich wies:</p>
<blockquote>
<p>Not me, and I don’t think it is Michael [Abrash]. Terje Matheson perhaps?</p>
<p>~John Carmack, per E-Mail in 2004</p></blockquote>
<p>Der nächste „Verdächtige“ wäre <strong>Gary Tarolli</strong>, <strong>NVidia</strong>-Mitarbeiter der ersten Stunde und Mitbegründer von <strong>3Dfx</strong>. Dieser räumte ein, Mitte der 1990er Jahre die besagte Funktion genutzt und vielleicht sogar optimiert zu haben, weißt aber die eigentliche Urheberschaft ebenfalls von sich [<a href="https://www.beyond3d.com/content/articles/8/">BEYON1</a>].</p>
<p>Die Spur führt schließlich zu <strong>Greg Walsh</strong>, Ende der 1980er Jahre Entwickler bei der <strong>Ardent Computer Corporation</strong>. Inspiriert von der Arbeit seines Kollegen, dem Informatiker und Mathematiker <strong>Cleve Moler</strong>, Autor von <strong>MatLab</strong>, war es wohl Walsh, der die berüchtigte Funktion entwickelte.</p>
<p>Übrigens: Auch zwischen Moler und Kahan gibt es eine Verbindung. Zwar ist nicht klar wie eng die Bekanntschaft war, aber sie sind sich zumindest einmal über den Weg gelaufen [<a href="https://blogs.mathworks.com/cleve/2014/07/07/floating-point-numbers/">MATH1</a>].</p>
<p>Zurück zu Ardent: Das Unternehmen wurde damals unter anderem von <strong>Kubota</strong> “finanziell unterstützt”, einem japanischen Mischkonzern. Für Kubota arbeitete seinerzeit auch <strong>Gary Tarolli</strong>! So gelang der Quellcode wohl in die Hände von Tarolli. Die Verbindung zu John Carmack und <strong>id Software</strong> entstand dann vermutlich über <strong>Brian Hook</strong>, einem der ersten Angestellten von 3Dfx und später auch Entwickler bei id Software [<a href="https://www.quakewiki.net/profile-retro-interview-brian-hook/">QUAKE1</a>]. Und so schließt sich der Kreis…</p>
<p>Der <strong>Fast Inverse Square Root Algorithmus</strong> hat nichts an Faszination eingebüßt, vielleicht aber etwas an Bedeutung. Moderne Computer ermöglichen mittlerweile — dank hoher Leistung und angepasster Befehlssätze — eine sehr schnelle Berechnung von Wurzeln und deren Kehrwerten.</p>
<p>Hinter der mysteriösen Konstante und der merkwürdigen Optimierung steckt also eine verworrene Geschichte und am Ende fast schon der tragische Untergang in die Bedeutungslosigkeit. Wenn das kein Material für einen <strong>Nerd-Blockbuster</strong> ist…</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Algorithmus, Programmierung, Nerd-Enzyklopädie, IT-Geschichte, Quake</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 43 - 0x5f3759df - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 34 - JavaScript wurde innerhalb von 10 Tagen entwickelt</title>
      <link>https://nickyreinert.de/2023/2023-06-04-nerd-enzyklop%C3%A4die-34---javascript-wurde-innerhalb-von-10-tagen-entwickelt/</link>
      <pubDate>Sun, 04 Jun 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2023/2023-06-04-nerd-enzyklop%C3%A4die-34---javascript-wurde-innerhalb-von-10-tagen-entwickelt/</guid>
      <description>
JavaScript ist eine der am weitesten verbreiteten Programmiersprachen der Welt und für die Funktion und Popularität des WWW von großer Bedeutung. Während HTML …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine historische Erkundung aus der &#39;Nerd Enzyklopädie&#39; über die Entstehung von JavaScript, das innerhalb von nur 10 Tagen entwickelt wurde. Der Artikel beleuchtet die Notwendigkeit einer Skriptsprache für dynamische Webseiten, die Rolle von Brendan Eich bei Netscape, die Namensentwicklung von Mocha zu JavaScript und Microsofts Reaktion mit JScript.</p>
          
          
          <p><strong>Hauptthemen:</strong> JavaScript, Webentwicklung, Programmiersprachen, IT-Geschichte, Nerd-Kultur, Netscape</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-06-04-nerd-enzyklop%C3%A4die-34---javascript-wurde-innerhalb-von-10-tagen-entwickelt/image1.png" alt=""></p>
<p><strong>JavaScript</strong> ist eine der am weitesten verbreiteten Programmiersprachen der Welt und für die Funktion und Popularität des <strong>WWW</strong> von großer Bedeutung. Während <strong>HTML</strong> die statische Darstellung von Inhalten im Browser ermöglicht, lassen sich dank JavaScript diese Inhalte dynamisch darstellen und modifizieren. JavaScript hat in den letzten Jahrzehnten eine beeindruckende Entwicklung hingelegt, angefangen als <strong>Script-Sprache</strong> innerhalb des Browsers bis hin zur Grundlage für eine leistungsfähige <strong>Webserver-Architektur</strong>.</p>
<p>Es gibt zahlreiche Anwendungsgebiete, sei es als Sprache innerhalb des Datenbanksystems <strong>MongoDB</strong>, für die Entwicklung von Spielen und Anwendungen oder als serverseitige Applikation [<a href="https://thenewstack.io/brendan-eich-on-creating-javascript-in-10-days-and-what-hed-do-differently-today/">THEN1</a>].</p>
<p>JavaScript ist extrem erfolgreich, vielseitig und beliebt. Und alles begann mit einer kleinen Sprache, die <strong>innerhalb von 10 Tagen</strong> entwickelt wurde!</p>
<p>Als das Web noch ganz jung war, wurden Seiten mit HTML dargestellt. HTML war relativ simpel und so musste man keine große Programmierer:in sein, um eigene Inhalte auf die Bühne des Webs zu hieven. Diese Einfachheit war ein wichtiger Erfolgsfaktor für das frühe World Weide Web.</p>
<p>Dank des plattformunabhängigen Browsers <strong>Netscape</strong> waren Webentwickler:innen in der Lage, ihre Programme unkompliziert für unterschiedliche Betriebssysteme zur Verfügung zu stellen. Was fehlte war die Möglichkeit mit den Inhalten zu interagieren. Netscape erkannt das Problem und betraute <strong>1995</strong> <strong>Brendan Eich</strong> mit wichtigen Aufgabe eine Lösung in Form einer entsprechenden Programmiersprache zu entwickeln.</p>
<blockquote>
<p>“But Marc Andreessen of Netscape, Bill Joy of Sun, and myself [Brendan Eich] and a few others saw that there was a need for a language that was approachable, that you could put directly in the web page,”<br>
Brendan Eich, InfoWorld, 2011</p></blockquote>
<p>Anfangs hieß es noch, dass die Programmiersprache <strong>Scheme</strong> als Grundlage dienen könnte. Dann wurde <strong>Java</strong> in Betracht gezogen und so verhandelte Netscape mit <strong>Sun Microsystems</strong>, um Java im hauseigenen Browser zu unterstützen. Aber Java (damals noch <strong>Oak</strong> genannt) war groß und komplex. Sollte die Webentwicklung weiterhin zugänglich sein, war Java nicht die beste Wahl. Es musste eine einfache Lösung her, ähnlich wie <strong>Microsofts</strong> <strong>VisualBasic</strong>, das als Einstiegs-Alternative für <strong>C</strong> oder <strong>C++</strong> galt.</p>
<p>Und so kam es, dass Eich im <strong>Mai 1995</strong> innerhalb von <strong>10 Tagen</strong> einen ersten funktionsfähigen Prototypen von JavaScript entwickelte, da noch unter dem Namen <strong>Mocha</strong>. Mocha wurde erstmal mit dem Netscape Navigator 2.0 vorgestellt. Im <strong>September 1995</strong> änderte man den Namen zu **LiveScript **— Live klang aus Marketingsicht dynamischer. Außerdem hatte Eich die Zeit genutzt, um einen Großteil des Codes aufzuräumen; zehn Tage sind erwartungsgemäß sehr knapp, um eine gewisse Codequalität zu erhalten.</p>
<p>Im <strong>Dezember 1995</strong> wurde dann der Name JavaScript eingeführt, um die Bedeutung als einfache Alternative zu Java zu unterstreichen und sicherlich auch um ein wenig von Javas Popularität zu profitieren. Intern wird die JavaScript-Engine bis heute als <strong>SpiderMonkey</strong> bezeichnet.</p>
<p>Der große Konkurrent auf dem Browser-Markt, <strong>Microsoft</strong>, ließ nicht lange auf sich warten. Im <strong>August 1996</strong> zog man nach und implementierte seine eigene JavaScript-Engine im Internet Explorer: <strong>JScript</strong>. Da man damals aber noch nicht soviel von Standards hielt, war JScript nur bedingt kompatibel zu SpiderMonkey. Nur eine Folge des Browser-Krieges, die in den folgenden Jahren vielen Web-Entwickler:innen Kopfschmerzen und schlaflose Nächte bereiten sollte.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> JavaScript, IT-Geschichte, Nerd-Enzyklopädie, Programmierung</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 34 - JavaScript wurde innerhalb von 10 Tagen entwickelt - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 16 - USERSEEUSERDO</title>
      <link>https://nickyreinert.de/2023/2023-04-10-nerd-enzyklop%C3%A4die-16---userseeuserdo/</link>
      <pubDate>Mon, 10 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2023/2023-04-10-nerd-enzyklop%C3%A4die-16---userseeuserdo/</guid>
      <description>„User See User Do“ ist eine Anspielung auf das englische Sprichwort “Monkey See, Monkey Do“, was in etwa so viel heißt wie “Was der Affe sieht, das macht er …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Erklärung aus der &#39;Nerd Enzyklopädie&#39; über die &#39;USERSEEUSERDO&#39;-Funktion in Windows 3.1. Der Artikel beleuchtet, wie diese Funktion zur Simulation von Benutzerverhalten für Stresstests des Betriebssystems eingesetzt wurde und ihren Namen vom Sprichwort &#39;Monkey See, Monkey Do&#39; ableitet.</p>
          
          
          <p><strong>Hauptthemen:</strong> Windows, Software Testing, Betriebssysteme, IT-Geschichte, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>„<strong>User See User Do</strong>“ ist eine Anspielung auf das englische Sprichwort “<strong>Monkey See, Monkey Do</strong>“, was in etwa so viel heißt wie “Was der Affe sieht, das macht er nach”. So weit, so despektierlich.<br>
Bei <strong>USER­SEE­USER­DO</strong> handelt es sich um eine Funktion innerhalb von <strong>Windows 3.1</strong>., die die Entwickler<em>innen dazu genutzt haben, Stresstests durchzuführen. Das Ziel der Funktion ist es, das Verhalten der Nutzer</em>innen zu simulieren, mit all seinen vielleicht nicht ganz so sinnvollen Ausprägungen, um die Funktionalität des Betriebssystems auch unter den widrigsten Bedingungen zu prüfen. [<a href="https://devblogs.microsoft.com/oldnewthing/20190731-00/?p=102743">MICR2</a>]</p>
<p><img src="/2023/2023-04-10-nerd-enzyklop%C3%A4die-16---userseeuserdo/image1.png" alt=""></p>
<p style="text-align: center;font-style:italic">
crayion.com: “Monkey See, Monkey Do”
</p>
        
        
        <div class="tags">
          <p><strong>Tags:</strong> Windows, Testing, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 16 - USERSEEUSERDO - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 15 - Der O’Reilly Zoo</title>
      <link>https://nickyreinert.de/2023/2023-04-07-nerd-enzyklop%C3%A4die-15---der-oreilly-zoo/</link>
      <pubDate>Fri, 07 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2023/2023-04-07-nerd-enzyklop%C3%A4die-15---der-oreilly-zoo/</guid>
      <description>Wer sich in die faszinierenden Tiefen der Informationstechnologie wagt wird früher oder später über O’Reilly stolpern. Einem Verlag für Computerbücher, 1978 von …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Erkundung aus der &#39;Nerd Enzyklopädie&#39; über die Entstehungsgeschichte der ikonischen Tierillustrationen auf den Covern der O&#39;Reilly Computerbücher. Der Artikel erzählt, wie die Illustratorin Ellie Friedmann durch historische Tierstiche inspiriert wurde und wie Tim O&#39;Reilly das Alleinstellungsmerkmal dieser Designs erkannte, die später auch dazu dienten, auf bedrohte Tierarten aufmerksam zu machen.</p>
          
          
          <p><strong>Hauptthemen:</strong> O&#39;Reilly, IT-Geschichte, Buchdesign, Branding, Nerd-Kultur, Publishing</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Wer sich in die faszinierenden Tiefen der Informationstechnologie wagt wird früher oder später über <strong>O’Reilly</strong> stolpern. Einem Verlag für Computerbücher, <strong>1978</strong> von <strong>Tim O’Reilly</strong> in den <strong>USA</strong> gegründet. Den Büchern von O’Reilly gebührt ein fester Platz in den Regalen jeder Nerd-Bücherei. Ja, die digitale Revolution verschafft mitunter auch den altertümlichen Informationsträgern eine gewisse Daseinsberechtigung.</p>
<p><img src="/2023/2023-04-07-nerd-enzyklop%C3%A4die-15---der-oreilly-zoo/image1.png" alt=""></p>
<p style="text-align: center;font-style:italic">
craiyon.com: “draw an o’reilly animal”
</p>
<p>Eine Eigenschaft prägt fast alle diese Bücher: Auf dem Cover prangt unter dem Titel ein handgezeichnetes Tier [<a href="http://animals.oreilly.com/">OREI1</a>, <a href="https://www.oreilly.com/content/a-short-history-of-the-oreilly-animals/">OREI2</a>], sozusagen das Erkennungszeichen von O´Reilly. Aber das war nicht immer so.<br>
Mitte der 80er Jahre plante O’Reilly den Verkauf seiner Bücher auf eine neue Ebene zu heben und beauftragte die Marketing-Abteilung damit, neue Wege der Vermarktung zu finden. Eine Mitarbeiterin im Marketing stieß während der Suche nach Inspiration auf ihre Nachbarin, die Illustratorin <strong>Ellie Friedmann</strong>, die sie um Entwürfe für das Buch-Cover bat.</p>
<p>Friedmann tat sich anfangs schwer, stammten die Themen der Bücher doch aus einer ihr völlig unbekannten Welt. Linux und Netzwerke waren Mitte der <strong>1980er</strong> Jahre eher eine Randerscheinung. Bei der Suche nach Ideen stieß sie auf <strong>Tier-Gravuren</strong> aus dem <strong>19. Jahrhundert</strong>. Sie beschäftigte sich mit den Eigenschaften der Tiere und den Fachbegriffen aus den Büchern und war so inspiriert, dass sie ein ganzes Wochenende damit verbrachte, Vorschläge anzufertigen, die ihre Nachbarin dann der Marketing-Abteilung vorstellen konnte.</p>
<p>Dort war man zunächst kaum begeistert von den Tieren. Sie wurden als seltsam und sogar angsteinflössend aufgenommen. Tim O’Reilly sah das anders und erkannte das Alleinstellungsmerkmal. Von nun an sollten Tier-Zeichnungen einen Großteil der Bücher prägen. Für Friedman erfüllt die Darstellung der Tiere später auch einen höheren Zweck, abseits des schnöden Marketings. Sie will damit das öffentliche Interesse für die Bedrohung der Tiere wecken, deren Existenz von <strong>Jagd</strong>, <strong>Wilderei</strong> und der <strong>Zerstörung</strong> von Lebensraum bedroht ist.</p>
<p><strong>Ellie Friedmann</strong> arbeitet seit <strong>1986</strong> für den O’Reilly-Verlag, mittlerweile in der Funktion des <strong>Director of Brand Management</strong>.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> O&#39;Reilly, IT-Geschichte, Nerd-Enzyklopädie, Kultur</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 15 - Der O’Reilly Zoo - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 14 - FCKGW-RHQQ2-YXRKT-8TG6W-2B7Q8</title>
      <link>https://nickyreinert.de/2023/2023-04-04-nerd-enzyklop%C3%A4die-14---fckgw-rhqq2-yxrkt-8tg6w-2b7q8/</link>
      <pubDate>Tue, 04 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2023/2023-04-04-nerd-enzyklop%C3%A4die-14---fckgw-rhqq2-yxrkt-8tg6w-2b7q8/</guid>
      <description>Hätte ich diese Zeichenfolge vor 20 Jahren veröffentlicht, würde morgen vermutlich der Staatsanwalt an meine Tür klopfen. Heute kann ich damit ein T-Shirt …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine historische Anekdote aus der &#39;Nerd Enzyklopädie&#39; über den berüchtigten Windows XP Volumenlizenzschlüssel &#39;FCKGW-RHQQ2-YXRKT-8TG6W-2B7Q8&#39;. Der Artikel beleuchtet die Geschichte dieses Schlüssels, seine Verbreitung durch Hacker, Microsofts Reaktion und die Entwicklung von Lizenzschutzmechanismen in der Softwareindustrie.</p>
          
          
          <p><strong>Hauptthemen:</strong> Softwarepiraterie, Lizenzmanagement, Windows XP, IT-Geschichte, Nerd-Kultur, Hacking</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Hätte ich diese Zeichenfolge vor 20 Jahren veröffentlicht, würde morgen vermutlich der Staatsanwalt an meine Tür klopfen. Heute kann ich damit ein T-Shirt bedrucken und beim Verband der Software-Industrie sorglos über die Flure flanieren.</p>
<p>Es handelt sich hierbei um einen <strong>Lizenzschlüssel</strong>, der Ende der <strong>1990er</strong> Jahre zu zweifelhafter Berühmtheit gelangte. Die Software-Industrie versuchte (damals wie auch heute) ihre Produkte mit <strong>Lizenzschlüsseln</strong> vor unerwünschten Kopien zu schützen. Diese mussten beim ersten Start der Software eingegeben werden, um das Programm nutzen zu können. So auch beim Betriebsystem <strong>Windows XP</strong>, das am <strong>28. August 2001</strong> erschien. Microsoft verteilte dafür unter anderem auch sogenannte Volumen-Lizenzschlüssel, die Unternehmen nutzen konnten, um gleich mehrere Kopien von Windows zu aktivieren.</p>
<p>Der Hacker-Gruppe <strong>devil’s0wn</strong> gelang <strong>35 Tage</strong> vor dem offiziellen Start von Windows XP der Coup schlechthin: Sie gelangten an eine Kopie des Betriebssystem und brachten diese zusammen mit dem funktionierenden Volumen-Lizenzschlüssel <strong>FCKGW-RHQQ2-YXRKT-8TG6W-2B7Q8</strong> in Umlauf.<br>
Das Foto einer selbstgebrannten CD und diesem Schlüssel machte im Internet die Runde und kann durchaus als Mittelfinger in Richtung Microsoft gedeutet werden:</p>
<p><img src="/2023/2023-04-04-nerd-enzyklop%C3%A4die-14---fckgw-rhqq2-yxrkt-8tg6w-2b7q8/image1.png" alt=""></p>
<p style="text-align: center;font-style:italic">
  Die legendäre Aufnahme der Raubkopie von Windows XP einen Monat bevor das Betriebssystem offiziell erscheinen sollte.
</p>
<p>Microsoft reagierte relativ spät und setzte den Schlüssel erst im August <strong>2004</strong> auf eine Blockier-Liste, um die weitere Nutzung zu unterbinden. Die Zeichenfolge sicherte sich trotzdem einen Platz in der IT-Popkultur und wird mittlerweile sogar auf T-Shirts vertrieben.</p>
<p>Andere berühmte Lizenzschlüssel sind z.B. die <strong>111–1111111</strong> und die <strong>000–0000007</strong> für <strong>Window 95</strong>. Die Mechanismen, um die Gültigkeit von Lizenzschlüsseln zu bewerten, waren damals noch nicht sehr ausgereift. Heutzutage muss man die Software aufwendig aktivieren oder benötigt eine Internetverbindung, um die Rechtmäßigkeit der Kopie prüfen zu können. In Windows 95 gab es ein paar einfache Regeln, nach denen der Lizenzschlüssel überprüft wurde. Im Prinzip bestand der Schlüssel nur aus einer Datumsangabe und einer Zahl, deren <strong>Quersumme 7</strong> ergibt [<a href="https://infosecwriteups.com/reversing-microsofts-windows95-product-key-check-mechanism-ca7e825014b6">INFOS1</a>]. Natürlich gab es auch Ausnahmen, so wurden auch 10 mal die 1 oder die James-Bond-Zeichenfolge akzeptiert.</p>
<p>Mittlerweile sind die Methoden der Software-Industrie weitaus ausgefeilter. So kann z.B. über eine ständige Internet-Verbindung die Validität geprüft werden. Oder es gibt Launcher, die die jeweilige Software starten und den Lizenz-Status überwachen.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Windows, IT-Geschichte, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 14 - FCKGW-RHQQ2-YXRKT-8TG6W-2B7Q8 - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie - 640K Speicher sind genug</title>
      <link>https://nickyreinert.de/2023/2023-03-01-die-nerd-enzyklop%C3%A4die---640k-speicher-sind-genug/</link>
      <pubDate>Wed, 01 Mar 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2023/2023-03-01-die-nerd-enzyklop%C3%A4die---640k-speicher-sind-genug/</guid>
      <description>Diese Aussage gehört wohl in jedes gut gepflegte Informatik-Seminar: Bill Gates unterlag anscheinend dem Irrglauben, dass 640 KByte Arbeitsspeicher für Computer …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Untersuchung aus der &#39;Nerd Enzyklopädie&#39; über das berühmte, aber oft falsch zugeschriebene Zitat von Bill Gates: &#39;640K Speicher sind genug&#39;. Der Artikel entlarvt den Mythos, dass Gates diese Aussage je gemacht hat, und verfolgt die Ursprünge der Fehlzuschreibung in verschiedenen Publikationen, während er die Hartnäckigkeit des Gerüchts beleuchtet.</p>
          
          
          <p><strong>Hauptthemen:</strong> IT-Geschichte, Bill Gates, Microsoft, Computerhardware, Mythen, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Diese Aussage gehört wohl in jedes gut gepflegte Informatik-Seminar: Bill Gates unterlag anscheinend dem Irrglauben, dass 640 KByte Arbeitsspeicher für Computer genügen würden. Wir alle wissen, dass selbst unsere Armbanduhren ein vielfaches davon benötigen.</p>
<p>Bereits 1981 soll sich Bill Gates dieses umstrittene Bonmot abgerungen haben und es kursiert immer noch  durch das Internet und ominöse IT-Vorlesungen.Dabei erklärte Gates knapp 15 Jahre später, dass die Aussage gar nicht von ihm stammt. Seine Erklärung ergibt durchaus Sinn: Der damals erschienene IBM PC konnte mit bis zu 640 KB Arbeitsspeicher ausgerüstet werden. Kam es jemals vor, dass sich Software-Entwickler mit den gegebenen Ressourcen zufrieden geben? Das Ausreizen technischer Grenzen ist wohl eher eine sportliche Disziplin in der IT. Man kann also annehmen, dass Gates eher der gegenteiligen Ansicht war [<a href="https://abcnews.go.com/Technology/PCWorld/story?id=5214635">GO1</a>]:</p>
<blockquote>
<p>&ldquo;Do you realize the pain the industry went through while the IBM PC was limited to 640K? The machine was going to be 512K at one point, and we kept pushing it up. I never said that statement &mdash; I said the opposite of that.”</p>
<p><em>Bill Gates gegenüber Bloomberg Business News, 1996</em></p></blockquote>
<p>Woher stammt das angebliche Zitat? Ein erster Hinweis findet sich in der Zeitschrift &ldquo;InfoWorld” vom 29. April 1985 [<a href="https://books.google.de/books?id=2C4EAAAAMBAJ&amp;lpg=PA5&amp;vq=%22nobody%20would%22&amp;pg=PA5">INFOW1</a>] - allerdings ohne Hinweis auf ein eventuell statt gefundenes Interview:</p>
<p>When we set the upper limit of PC-DOS at 640K, we thought nobody would ever need that much memory.</p>
<p><img src="/2023/2023-03-01-die-nerd-enzyklop%C3%A4die---640k-speicher-sind-genug/Unbekannt2.png" alt=""></p>
<p style="text-align: center;font-style:italic">
William Gates, chairman of Microsoft in InfoWorld, 1985
</p>
<p>Von dem zweifelhaften Kontext abgesehen, ist diese Aussage auch weit entfernt von: &ldquo;640 KByte sind genug&rdquo;. Das gleiche Magazin veröffentlichte einige Jahre später ein ähnliches Zitat - aber auch hier ohne Hinweis auf den Kontext, wie z.B. ein Interview:</p>
<blockquote>
<p>&ldquo;640K ought to be enough for anyone”</p>
<p><em>Bill Gates, InfoWorld, 1990</em></p></blockquote>
<p>Knapp fünf Jahre später griff die Washington Post die Aussage im Rahmen einer Zitatesammlung mit dem Titel &ldquo;If They Only Knew&rdquo; (&ldquo;Wenn sie nur wüssten&rdquo;) auf. Hier hieß es, dass Gates die besagte Aussage 1981 machte.</p>
<p>Es folgte eine Kaskade von Referenzen, wie z.B. im Buch &ldquo;The Experts Speak: The Definitive Compendium of Authoritative Misinformation” mit einem Verweis auf die Washing Post [<a href="https://quoteinvestigator.com/2011/09/08/640k-enough/1">QUOTE1</a>].</p>
<p>Die Beweislage ist also relativ dünn und sogar widersprüchlich. Der Recherche-Blog Quote Investigator hat den Wahrheitsgehalt untersucht - und gibt ausreichend Anlass zur Skepsis [<a href="https://quoteinvestigator.com/2011/09/08/640k-enough/1">QUOTE1</a>]. Trotzdem hält sich das Gerücht hartnäckig; das Computer-Magazin chip glaubte noch 2016 daran:</p>
<p><img src="/2023/2023-03-01-die-nerd-enzyklop%C3%A4die---640k-speicher-sind-genug/Unbekannt.png" alt=""></p>
<p style="text-align: center;font-style:italic">
Bildquelle \[[CHIP1](https://www.chip.de/news/640-kB-sollten-genug-sein-Die-groessten-Technik-Irrtuemer-der-Geschichte_92787690.html)\]
</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> IT-Geschichte, Microsoft, Nerd-Enzyklopädie, Mythos</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie - 640K Speicher sind genug - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item>
  </channel>
</rss>