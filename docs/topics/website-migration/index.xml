<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" 
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Website-Migration auf Nicky Reinert</title>
    <link>http://localhost:1313/topics/website-migration/</link>
    <description>Blog &amp; Projekte von Nicky Reinert (Institut für digitale Herausforderungen): Webentwicklung &amp; Software Development, SEO &amp; Analytics, Hosting &amp; DevOps, WordPress &amp; Hugo, Tools &amp; Projekte, Datenschutz und digitale Kultur – plus Texte zu KI sowie Autismus &amp; Gesellschaft.</description>
    <generator>Hugo 0.148.2</generator>
    <language>de</language>
    <managingEditor></managingEditor>
    <webMaster></webMaster>
    <copyright></copyright>
    <lastBuildDate>Sat, 25 Aug 2018 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/topics/website-migration/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>Checkliste - Wordpress Umzug</title>
      <link>http://localhost:1313/2018/2018-08-25-checkliste-wordpress-umzug/</link>
      <pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://localhost:1313/2018/2018-08-25-checkliste-wordpress-umzug/</guid>
      <description>Du hast Wordpress auf eine neue Domain oder einen neuen Hoster umgezogen und der Blog ist noch nicht erreichbar oder die Adresse verweist noch auf eine alte …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine detaillierte Checkliste und Anleitung zur Fehlerbehebung bei einem WordPress-Umzug. Der Artikel führt schrittweise durch potenzielle Fehlerquellen, von lokalen DNS-Cache-Problemen im Browser und Betriebssystem über die korrekte Domain- und Hoster-Konfiguration bis hin zu den notwendigen Anpassungen in der WordPress-Datenbank und der &#39;wp-config.php&#39;.</p>
          
          
          <p><strong>Hauptthemen:</strong> WordPress, Website-Migration, DNS, Webhosting, Troubleshooting, Server-Administration</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>Du hast Wordpress auf eine neue Domain oder einen neuen Hoster umgezogen und der Blog ist noch nicht erreichbar oder die Adresse verweist noch auf eine alte Installation, obwohl du an alles gedacht hast? Da fragst du dich zurecht: Wo hängt&rsquo;s? Oder du hast den Umzug erst vor dir und willst wissen, woran du denken musst?</p>
<p>Dafür habe ich dir hier eine Checkliste der gängigen Fehlerquellen aufgestellt, die dir beim nächsten Mal helfen soll.</p>
<h3 id="vom-browser-zum-server">Vom Browser zum Server</h3>
<p>Um die potentiellen Fehler zu erkennen und zu verstehen ist es sehr hilfreich, den <strong>groben Ablauf</strong> zu kennen: Was passiert, wenn du deine Domain in den Browser eingibst? Denn meistens steckt der Fehler im Detail und man hat nur vergessen, an einer Stelle die nötigen Anpassungen vorzunehmen. Was passiert also, wenn ein Benutzer deine Website im Browser aufruft? Ich habe das ganze einmal sehr laienhaft und stark reduziert in einer Grafik zusammengefasst. Wenn du weißt, worum es geht, überspringe diesen Absatz oder schlage danach einmal die Hände über dem Kopf zusammen.</p>
<p><a href="https://www.nickyreinert.de/files/aufruf-einer-website-vereinfacht.png"><img src="/2018/2018-08-25-checkliste-wordpress-umzug/images/aufruf-einer-website-vereinfacht-300x132.png" alt=""></a></p>
<p>Was passiert beim Aufruf einer Webseite im Browser</p>
<p>Der Browser, oder vielmehr der Computer, muss die Adresse der Website zunächst in die sogenannte IP-Adresse übersetzen lassen - durch einen <strong>DNS-Server</strong>. Anhand der <strong>IP-Adresse</strong> findet der Browser dann den Weg zum eigentlich <strong>Webserver</strong>. Dieser muss dann  wissen, dass die Website bei ihm existiert und kann deshalb auch auf den entsprechenden <strong>Ordner</strong> im Dateisystem verweisen. Dort wird die <strong>Web-Anwendung</strong>, also z.B. <strong>Wordpress</strong>, ausgeführt. Hier erfolgen auch die Zugriffe auf die Datenbank. Die <em>index.php</em> ist der zentrale <strong>Einstiegspunkt</strong>, von dem aus noch viele andere, vornehmlich PHP-Dateien, eingebunden werden.</p>
<h2 id="potentielle-fehlerquellen">Potentielle Fehlerquellen</h2>
<h3 id="dein-computer-und-der-dns-cache">Dein Computer und der DNS-Cache</h3>
<p>Damit dein Computer und der Browser nicht jedes mal beim DNS-Server nachfragen müssen, welche IP-Adresse zu einer Website gehört, gibt es hier sog. <strong>Zwischenspeicher</strong>, auch <strong>Cache</strong> genannt. In <strong>Chrome</strong> kannst du diesen folgendermaßen deaktivieren.</p>
<ol>
<li>Rufe diese Adresse auf: chrome://net-internals/#dns</li>
<li>Klicke dort den Button &ldquo;Clear host cache&rdquo;</li>
</ol>
<p>In <strong>Firefox</strong> löschst du den DNS-Cache über die Datenschutz-Optionen in den Einstellung.</p>
<p>In beiden Browsern gibt es übrigens die Möglichkeit, den Cache permanent zu deaktivieren. Dazu musst du die <strong>Entwicklerkonsole</strong> öffnen (ALT+F12 oder Alt+Apfel+I) und die Checkbox &ldquo;<em>Cache deaktivieren</em>&rdquo; aktivieren. Diese Funktion ist aber nur so lange aktiv, bis die Entwicklerkonsole wieder geschlossen wird:</p>
<p><a href="https://www.nickyreinert.de/files/image-2.png"><img src="/2018/2018-08-25-checkliste-wordpress-umzug/images/image-2-700x232.png" alt=""></a></p>
<p>Außerdem legt auch dein <strong>Betriebssystem</strong> einen Cache an. In Windows wird dieser folgendermaßen geleert:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">ipconfig /flushdns
</span></span></code></pre></div><p>Auch in Apples Betriebssystem OS X kann man den Cache per Hand leeren (ab 10.12 Sierra):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">sudo killall -HUP mDNSResponder
</span></span></code></pre></div><h3 id="dein-router-und-dein-internetanbieter">Dein Router und dein Internetanbieter</h3>
<p>Bestimmte <strong>Router-Modelle</strong> und mit Sicherheit auch dein <strong>Internet-Anbieter</strong> (ISP) speichern ebenfalls die Kombination aus Domain Name und IP-Adresse. Den DNS-Cache des Routers kannst du ggf. leeren, indem du ihn neu startest. Den deines ISP kannst du mit Sicherheit nicht beeinflussen. Du kannst aber in den Netzwerkeinstellungen einen anderen <strong>DNS-Server</strong> einrichten, wie z.B. den von Google (8.8.8.8). Wenn dir das zu aufwendig ist, rufe die Seite über dein Handy auf, wenn es <strong>nicht mit deinem WLAN verbunden</strong> ist. Dann nutzt du den Internetzugang deines Handy-Anbieters, der vielleicht schon einen anderen DNS-Eintrag kennt. Jeder DNS-Eintrag ist übrigens für gewöhnlich mit einem sog. TTL versehen - einem Eintrag für das <strong>Time-To-Live.</strong> Dieser beträgt z.B. 24 Stunden und besagt, wie lange ein entsprechender Eintrag gültig ist. Willst du wissen, wie groß dieser Wert ist, hilft dir die <a href="https://mxtoolbox.com/SuperTool.aspx?action=a%3awww.example.com&amp;run=toolpage">mxtoolbox</a> weiter.</p>
<h3 id="der-hoster">Der Hoster</h3>
<p>Das ist der schwierigste Punkt, da es hier erstmal zwei Möglichkeiten gibt:</p>
<p><strong>Grundsätzlich</strong> gilt: Damit ein Domain-Name auf (d)einen Web-Server zeigt, sind mindestens <strong>zwei Schritte</strong> nötig:</p>
<ol>
<li>die Domain muss registriert und einer IP-Adresse zugeordnet werden</li>
<li>die Domain muss dem Web-Server &ldquo;mitgeteilt&rdquo; werden</li>
</ol>
<p>Nun gibt es allerdings mindestens <strong>drei Szenarien</strong>, wie das umgesetzt wird:</p>
<ol>
<li>Dein Hoster stellt den Webspace unter einer Hosting-Domain zur Verfügung (<em>c123123.hoster.com</em>) und die &ldquo;echte&rdquo; Domain (<em>example.com</em>) wird bei einem anderen Anbieter verwaltet. Die Hosting-Domain zeigt hier bereits direkt auf deinen Webspace. Wenn deine Anwendung dort in einem anderen Ordner liegt, musst die &ldquo;echte&rdquo; Domain direkt darauf zeigen, also z.B: <em>example.com -&gt; c123123.hoster.com/wordpress</em>_/_.</li>
<li> Dein Hoster stellt den Webspace unter einer IP-Adresse zur Verfügung (bzw. du nutzt einen Managed- oder Root-Server) und die Domain wird bei einem anderen Anbieter verwaltet. In diesem Fall muss der Hoster wissen, welche Domain auf die IP-Adresse deines Webspaces zeigt. Er kann diese Domain dann einem Ordner auf dem Webspace zuordnen.</li>
<li>Das <strong>Gesamtpaket</strong>: Dein Hoster stellt den Webspace und verwaltet deine Domain.</li>
</ol>
<p><a href="https://www.nickyreinert.de/files/image-6.png"><img src="/2018/2018-08-25-checkliste-wordpress-umzug/images/image-6-700x493.png" alt=""></a></p>
<p>Hosting-Varianten im Vergleich</p>
<p>Bei den Gesamt-Paketen wird das ganze Konstrukt wie gesagt sehr simpel zusammengefasst. Bei <strong>all-inkl.com</strong> erfolgt das z.B. über das KAS über den Menüpunkt <strong>Domains</strong>, wo der Ort im Dateisystem angegeben werden kann. Der Verweis zu einem anderen, fremden Webspace erfolgt über die Option &ldquo;Redirect&rdquo;. Dann wird diese Domain mit einem HTTP-Statuscode 301, 302 oder 307 an einen anderen Server weitergeleitet.</p>
<p><a href="https://www.nickyreinert.de/files/domain-ziel-bei-all-inkl.png"><img src="/2018/2018-08-25-checkliste-wordpress-umzug/images/domain-ziel-bei-all-inkl-700x344.png" alt=""></a></p>
<p>Domain-Ziel bei all-inkl.com einrichten</p>
<p>Bei Strato ist das Formular etwas anders aufgebaut, hat aber natürlich die gleiche Funktion. Im Menü <strong>Domain / Domainverwaltung</strong> legst du fest, auf welchen Ordner deine Domain zeigen soll. Über die DNS-Einstellungen kannst du auch hier auf einen anderen Server zeigen lassen:</p>
<p><a href="https://www.nickyreinert.de/files/image.png"><img src="/2018/2018-08-25-checkliste-wordpress-umzug/images/image-281x300.png" alt=""></a></p>
<p>Domain-Ziel bei Strato einrichten</p>
<p>Wenn du Zugriff auf die <strong>Konsole</strong> hast (z.B. mit SSH), kannst du mit folgendem Befehl prüfen, ob der Server deine Domain überhaupt &ldquo;kennt&rdquo;:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">apache2ctl -S
</span></span></code></pre></div><p>Die Ausgabe sollte in etwa folgenden Aufbau haben und mindestens deine Domain enthalten und auch auf den korrekten Ordner Grundsätzlich hilft auch hier erstmal die <a href="https://mxtoolbox.com/SuperTool.aspx?action=a%3awww.example.com&amp;run=toolpage">mxtoolbox</a> weiter, um zu erkennen, ob der Eintrag schon existiert:</p>
<p><a href="https://www.nickyreinert.de/files/apachectl-ausgabe.png"><img src="/2018/2018-08-25-checkliste-wordpress-umzug/images/apachectl-ausgabe-700x298.png" alt="Ausgabe von apachectl , Liste der virtuellen Hosts in Apache"></a></p>
<h3 id="die-wordpress-konfiguration">Die Wordpress-Konfiguration</h3>
<p>Und schließlich muss natürlich auch die Wordpress-Installation vollständig und korrekt eingerichtet und angepasst sein. Hier gibt es zwei Stellen, an denen der Domain-Name eingerichtet werden kann. Der einfachste Weg ist über das Backend von Wordpress. Damit wird deine Adresse direkt in der Datenbank abgelegt:</p>
<p><a href="https://www.nickyreinert.de/files/image-3.png"><img src="/2018/2018-08-25-checkliste-wordpress-umzug/images/image-3-300x61.png" alt=""></a></p>
<p>Wenn du auf das Backend keinen Zugriff hast, wählst du den direkten Weg über die <em>wp-config.php</em>. Die Änderungen hier überschreiben die Einstellungen im Backend.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">define(&#39;WP_HOME&#39;,&#39;https://www.nickyreinert.de&#39;);
</span></span><span class="line"><span class="ln">2</span><span class="cl">define(&#39;WP_SITEURL&#39;,&#39;https://www.nickyreinert.de&#39;);
</span></span></code></pre></div><p>In der Datenbank befinden sich sehr oft noch andere Verweise auf deine Domain. Bei einem Umzug müssen auch diese angepasst werden. Da das aber ein sehr umfangreicher Prozess ist, empfehle ich dazu das Wordpress-Plugin &ldquo;<a href="https://de.wordpress.org/plugins/better-search-replace/">Better Search Replace</a>&rdquo;.</p>
<h3 id="fazit">Fazit</h3>
<p>Wenn du die hier genannten Punkte berücksichtigt hast, hast du eigentlich an alles gedacht. Oft ist es der lokale Cache, der die neue Adresse noch nicht kennt und dann die Sorgenfalten auf die Stirn treibt. Wenn ich einen Punkt vergessen haben sollte oder etwas unklar ist, hinterlasse mir gerne ein Kommentar.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> checkliste, domains, hosting, umzug, wordpress</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>wordpress</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Checkliste - Wordpress Umzug - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>checklist</dc:type>
      
      
    </item><item>
      <title>Welche Möglichkeiten habe ich um Weiterleitungen anzulegen?</title>
      <link>http://localhost:1313/2016/2016-09-25-welche-moeglichkeiten-habe-ich-um-weiterleitungen-anzulegen/</link>
      <pubDate>Sun, 25 Sep 2016 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://localhost:1313/2016/2016-09-25-welche-moeglichkeiten-habe-ich-um-weiterleitungen-anzulegen/</guid>
      <description>Was sind Weiterleitungen? Du hast von einem alten Shop oder Content Management System auf ein neues System gewechselt, willst eine neue Permalink-Struktur …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Der Artikel erklärt die Notwendigkeit von 301-Weiterleitungen nach Website-Umzügen, um den SEO-Wert zu erhalten. Es werden zwei technische Methoden zur Implementierung vorgestellt: die manuelle Erstellung von Weiterleitungen mittels der PHP &#39;header()&#39;-Funktion und die dynamische Konfiguration über &#39;.htaccess&#39;-Regeln mit &#39;mod_rewrite&#39;.</p>
          
          
          <p><strong>Hauptthemen:</strong> SEO, Webserver-Konfiguration, Apache, .htaccess, PHP, Website-Migration</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <h2 id="was-sind-weiterleitungen">Was sind Weiterleitungen?</h2>
<p>Du hast von einem alten Shop oder Content Management System auf ein neues System gewechselt, willst eine neue Permalink-Struktur einführen oder hast einfach nur Inhalte verschoben? Das Problem in solchen Szenarien ist, dass die Verzeichnisstruktur nicht exakt übernommen werden kann. Doch keine Panik. Dass sich Inhalte und Verlinkungen im Internet ändern, gehört zum Konzept des WWW dazu. Wichtig ist, dass man diese Dynamik entsprechend berücksichtigt und dafür sorgt, dass eingehender Traffic auf die eigene Seite nicht auf die nicht-vorhandene Seiten stößt. Mit sogenannten Weiterleitungen.</p>
<h2 id="suchmaschinen-index-und-backlinks">Suchmaschinen-Index und Backlinks</h2>
<p>Zwei Arten von eingehenden Traffic kann man grundsätzlich unterscheiden: Erstens gibt es den Traffic der von einer Suchmaschine (<strong>organischer Traffic</strong>) kommt. Die Suchmaschine nutzt dafür einen Index, der sich aber nach bestimmten Regeln aktualisiert. Daneben gibt es Traffic über <strong>Backlinks</strong> von externen Seiten, die keine Suchmaschinen sind. Diese Backlinks sind natürlich auch veränderbar, aber, wenn man es so nennen will, redaktionell gepflegt. Streng genommen könnte man natürlich noch anderen Traffic unterscheiden, wie z.B. den aus der Suchmaschinen-Werbung (SEA). Doch da dieser Teil der eigenen Online-Marketing-Kampagne ist, versteht es sich von selber, dass die Links dort ordentlich gepflegt werden müssen.</p>
<h2 id="wann-benötige-ich-eine-weiterleitung">Wann benötige ich eine Weiterleitung?</h2>
<p>Die Suchmaschinen lassen sich eigentlich relativ unkompliziert mit einer aktuellen Sitemap befriedigen, die ja als aktuelles Verzeichnis der eigenen Seite. Google bietet in der Search Console sogar an, die Seite <a href="https://www.google.com/webmasters/tools/home?hl=de">neu zu indizieren</a>.</p>
<p>Doch was ist mit den andern Suchmaschinen und vor allem all den wertvollen Backlinks, die nicht mehr gültig sind? Nicht jeder eingehend Link lässt sich so einfach aktualisieren und führt im ungünstigen Fall zum HTTP-Fehlercode 404 &ldquo;not found&rdquo;. Dieser sollte aus SEO-Sicht unbedingt vermieden werden. Mit eben jenen erwähnten Weiterleitungen.</p>
<p>Um diese zu implementieren, gibt es freilich mehrere Möglichkeiten. Zunächst sollte man prüfen, welche Backlinks auf die eigene Seite überhaupt existieren. Je nachdem, wie viele Backlinks es gibt und wie die URL-Struktur der eigenen Seite beschaffen ist, bieten sich andere Möglichkeiten an. Man unterscheidet übrigens zwischen der temporären (HTTP-Statuscode 302) und der permanenten Weiterleitung(HTTP-Statuscode 302) . Die temporäre Weiterleitung kommt für unseren Fall nicht unbedingt infrage, da wir ja einen Umzug vor uns haben.</p>
<h2 id="weiterleitung-per-header-in-einer-php-datei">Weiterleitung per header() in einer PHP-Datei</h2>
<p>Eine ziemlich pragmatische und wenngleich effektive Methode ist es, die alte Ordner-Struktur per Hand nachzubilden und entsprechend PHP-Dateien anzulegen, die jeweils eine 301-Weiterleitung auf die neue URL enthalten (&quot;<a href="http://php.net/manual/de/function.header.php">header</a>&quot;). Das kann man machen, wird bei größeren System aber sehr schnell sehr aufwendig. Die PHP-Datei sollte unter dem Namen &ldquo;index.php&rdquo; in den jeweiligen Ordnern abgelegt werden und folgenden Code enthalten. Es folgt ein Beispiel für eine PHP-Datei befindet, die unter <em><a href="https://www.deine-seite.de/altes-ziel/index.php">https://www.deine-seite.de/altes-ziel/index.php</a></em> abgelegt ist. Diese enthält folgenden Code:</p>
<?php
   header("Location:https://www.deine-seite.de/neues-ziel/", true, 301); 
   exit;

Der erste Parameter verweist auf die neue Seite. Der zweite Parameter (_true_) legt lediglich fest, ob ein vorheriger Header ersetzt werden soll. Der letzte Parameter schließlich ist der HTTP-Statuscode, der übermittelt werden soll - also 301. Das exit am Schluss sorgt dafür, dass das PHP-Script am Ende auch wirklich abgeschlossen wird und dient hier nur als doppelter Boden. Ein schließendes ?> [wird nicht benötigt](https://developer.sugarcrm.com/2011/05/06/why-we-dont-using-closing-php-tags/).
<p>Das ist nicht nur mühsam, sondern auch nicht dynamisch. Die nächste Variante nutzt eine Weiterleitung mit .htaccess.</p>
<h2 id="weiterleitung-per-htaccess">Weiterleitung per .htaccess</h2>
<p>In einer .htaccess-Datei gibt es erstmal zwei Möglichkeiten, eine Weiterleitung einzurichten. Nutzt man einen regulären Ausdruck, wird entsprechend jeder passende eingehende Traffic abgefangen und an die gewünschte Hauptseite weitergeleitet.</p>
<p>Eine andere, etwas ausgefeiltere Möglichkeit ist es, die  alten Unterverzeichnisse bei Abfrage durch den Browser abzufangen und deren Namen als Suchparameter an das neue System weiterzuleiten.</p>
<p>Hier zum Beispiel der Unterordner &ldquo;foobar&rdquo;, der als Suchparameter genutzt werden soll:</p>
<p><a href="https://www.deine-seite.de/">www.deine-seite.de/</a><strong>foobar</strong></p>
<p>Der Name soll nun als Suchparameter folgendermaßen genutzt werden:</p>
<p><a href="https://www.deine-seite.de/index.php?search=">www.deine-seite.de/index.php?search=</a><strong>foobar</strong></p>
<p>So sieht die dafür notwendige .htaccess-Datei aus:</p>
<p>RewriteEngine On</p>
<p>RewriteRule ^(/?)([a-zA-Z0-9]+)?([\.html]+)?/?$ /index.php?search=$2 [R=301,NC]</p>
<p>RewriteRule ^(/?)([a-zA-Z0-9]+)?/([a-zA-Z0-9]+)?([\.html]+)?/?$ /index.php?search=$2\ $3 [L,R=301,NC]</p>
<p>Die erste Regel fängt Aufrufe der ersten Pfad-Ebene ab. Die zweite Regel kann auch die Namen der darunter liegenden Pfade abgreifen und daraus einen kombinierten Suchbegriff erzeugen. Das ist z.B. hilfreich, wenn man die Pfade eines Shop-Systems nutzen will um daraus im neuen Shop die Suche zu erzeugen.</p>
<p><a href="https://www.shop.de/foobar/hello">www.shop.de/foobar/hello</a>_world.html -&gt; <a href="https://www.shop.de/index.php?search=foobar%20hello">www.shop.de/index.php?search=foobar%20hello</a>_world</p>
<p>Die .htaccess-Datei muss sich im Unterordner /foobar befinden, der auch physisch vorhanden sein muss. Man könnte die Weiterleitung auch im Root-Verzeichnis anlegen und bräuchte dann den Unterordner nicht. So vermeidet man aber unnötigen Overhead, da die Regel nicht bei den regulären Aufrufen aktiviert wird.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> htaccess, redir, weiterleitung</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>hosting</category>
      
      <category>anleitungen</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Welche Möglichkeiten habe ich um Weiterleitungen anzulegen? - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>guide</dc:type>
      
      
    </item>
  </channel>
</rss>