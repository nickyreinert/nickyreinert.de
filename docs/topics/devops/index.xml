<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" 
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>DevOps auf Nicky Reinert</title>
    <link>https://nickyreinert.de/topics/devops/</link>
    <description>Blog &amp; Projekte von Nicky Reinert (Institut für digitale Herausforderungen): Webentwicklung &amp; Software Development, SEO &amp; Analytics, Hosting &amp; DevOps, WordPress &amp; Hugo, Tools &amp; Projekte, Datenschutz und digitale Kultur – plus Texte zu KI sowie Autismus &amp; Gesellschaft.</description>
    <generator>Hugo 0.148.2</generator>
    <language>de</language>
    <managingEditor></managingEditor>
    <webMaster></webMaster>
    <copyright></copyright>
    <lastBuildDate>Thu, 08 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://nickyreinert.de/topics/devops/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>Automatisierte WordPress Installation</title>
      <link>https://nickyreinert.de/2020/2020-10-08-automatisierte-wordpress-installation/</link>
      <pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2020/2020-10-08-automatisierte-wordpress-installation/</guid>
      <description>Et voilá. Ein BASH Script, um WordPress automatisiert über die Kommandozeile zu installieren, inklusive Theme und beliebigen Plugins sowie - wenn benötigt - …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieser Artikel stellt ein Bash-Skript zur vollautomatischen Installation und Konfiguration von WordPress vor. Das Skript nutzt &#39;wp-cli&#39; zur Einrichtung von Core, Datenbank, Themes und Plugins und kann die neue WordPress-Instanz mit zufällig generiertem Content (Beiträge, Kategorien, Bilder) über externe APIs befüllen, was es zu einem nützlichen Tool für Entwickler und Administratoren macht.</p>
          
          
          <p><strong>Hauptthemen:</strong> WordPress, Automatisierung, Bash Scripting, DevOps, wp-cli, Server Administration, Web Development, Content Generation</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> advanced</p>
          
        </div>
        
        
        <p>Et voilá. Ein BASH Script, um WordPress automatisiert über die Kommandozeile zu installieren, inklusive Theme und beliebigen Plugins sowie - wenn benötigt - zufälligen Beiträgen, Kategorien, Tags und Bildern.</p>
<h2 id="warnung">Warnung!</h2>
<p>Du solltest geübt im Umgang mit der Shell, Bash und WordPress sein und unbedingt <strong>Backups</strong> nutzen. Das Script verwendet, wenn der entsprechende Parameter gesetzt ist, den Befehl &ldquo;rm -rf&rdquo;, um einen Ordner komplett zu <strong>löschen</strong>. Dieser Schritt lässt sich nicht widerrufen. Außerdem wird, sofern per Parameter gefordert, eine Datenbank mit &ldquo;DROP DATABASE&rdquo; komplett entfernt. Wenn du das Script auf eine existierende WordPress-Installation oder Datenbank anwendest, können existierende Daten <strong>überschrieben</strong> werden!</p>
<h2 id="funktionsweise">Funktionsweise</h2>
<p>Das Script wird über die Kommandozeile aufgerufen und nutzt die <a href="https://wp-cli.org/de/">WordPress Kommandozeilen-Benutzeroberfläche,</a> um <strong>WordPress</strong> zu installieren sowie samt <strong>Themes</strong> und <strong>Plugins</strong> einzurichten. Du kannst außerdem beliebig viele <strong>Beiträge</strong> anlegen. Die Inhalte für die Beiträge stammen von einem Online-Dienst für zufällige englische Texte: <a href="http://metaphorpsum.com/paragraphs/">metaphorpsum.com/paragraphs</a>. Außerdem werden zufällige <strong>Textauszüge</strong> (Excerpts) sowie <strong>Schlagwörter</strong> (Tags) und sogar <strong>Bilder</strong> jedem Beitrag hinzugefügt. Beiträge werden außerdem Kategorien zugeordnet. Diese werden ebenfalls <strong>zufällig</strong> bis zu einer Tiefe von 2 Ebenen erzeugt.</p>
<h2 id="installation">Installation</h2>
<p>Du findest den Sourcecode auf github: <a href="https://github.com/nickyreinert/AutomatedWordPressInstallation">https://github.com/nickyreinert/AutomatedWordPressInstallation</a>.</p>
<p>Nach der Installation kopierst du die Datei settings-template zu .settings, um in dieser Datei die Einstellungen für deine WordPress-Installation vorzunehmen. Du startest den Prozess mit <strong>bash start.sh</strong> oder setzt den Ausführen-Flag für bash.sh um diese direkt auszuführen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">chmod u+x bash.sh
</span></span><span class="line"><span class="ln">2</span><span class="cl">./bash.sh
</span></span></code></pre></div><h2 id="zufällige-inhalte">Zufällige Inhalte</h2>
<p>Das Script ermöglicht das Anlegen von beliebig vielen zufälligen Beiträgen in beliebig vielen zufälligen Kategorien. Was genau dabei passiert, beschreibe ich hier kurz:</p>
<p>Zunächst wird eine Kategorie erzeugt. Dazu wird von der folgenden API ein zufälliges Wort abgerufen: <a href="https://random-word-api.herokuapp.com/word?swear=0&amp;number=">https://random-word-api.herokuapp.com/word?swear=0&amp;number=</a></p>
<p>Dieser Kategorie wird dann ein Beitrag wird mit einer beliebigen Anzahl von <strong>Absätzen</strong> von dieser API zugeordnet: <a href="http://metaphorpsum.com/paragraphs/">http://metaphorpsum.com/paragraphs/</a>. Der Beitrag erhält einen zufälligen Titel (von dort: <a href="http://metaphorpsum.com/sentences/">http://metaphorpsum.com/sentences</a>), einen Textauszug (gleiche API), sowie eine beliebige Anzahl zufälliger Tags (Schlagwörter), ebenfalls von <a href="https://random-word-api.herokuapp.com/word?swear=0&amp;number=">random-word-api.herokuapp.com</a>. Dann werden für diesen Beitrag Revisionen erzeugt - auch diese in beliebiger Höhe. Abschließend erhält jeder Beitrag ein zufälliges Featured Image sowie ein weiteres zufälliges Bild am Ende des Fließtextes.</p>
<p>Je nachdem, wieviele Beiträge und Kategorien bzw. Sub-Kategorien eingerichtet werden soll, wird dieser Prozess natürlich wiederholt.</p>
<p><em>(Bisher werden die Inhalte leider nur auf Englisch eingefügt)</em></p>
<h2 id="einstellungen">Einstellungen</h2>
<p>Alle Einstellungen befinden sich in der Datei <strong>.settings</strong> und werden im Folgenden beschrieben. Der PROJECT-Parameter kann im weiteren Verlauf als Platzhalter verwendet werden und sollte keine Leerzeichen oder Sonderzeichen enthalten:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">PROJECT=myWordPressBlog
</span></span></code></pre></div><h3 id="datenbank">Datenbank</h3>
<p>Du kannst eine neue Datenbank anlegen (CREATE_DB) oder auf eine existierende Datenbank zurückgreifen.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">DB_DROP=yes|no
</span></span><span class="line"><span class="ln">2</span><span class="cl">CREATE_DB=yes|no
</span></span><span class="line"><span class="ln">3</span><span class="cl">DB_ROOT=root
</span></span><span class="line"><span class="ln">4</span><span class="cl">DB_ROOT_PASSWORD=secret
</span></span></code></pre></div><p>Willst du eine frische Datenbank anlegen, solltest du die alte Datenbank mit DB_DROP=yes löschen. Soll eine neue Datenbank angelegt werden, müssen die Zugangsdaten für einen privilegierten Nutzer angegeben werden: Mit den folgenden Parameter legst du fest, wie WordPress auf die Datenbank zugreift:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">DB_HOST=127.0.0.1
</span></span><span class="line"><span class="ln">2</span><span class="cl">DB_NAME=&#34;${PROJECT}&#34;
</span></span><span class="line"><span class="ln">3</span><span class="cl">DB_PREFIX=&#34;wp_&#34;
</span></span><span class="line"><span class="ln">4</span><span class="cl">
</span></span><span class="line"><span class="ln">5</span><span class="cl">ADD_DB_USER=yes|no
</span></span><span class="line"><span class="ln">6</span><span class="cl">DB_USER=&#34;${PROJECT}&#34;
</span></span><span class="line"><span class="ln">7</span><span class="cl">DB_USER_PASSWORD=$(cat /dev/urandom | tr -dc &#39;a-zA-Z0-9&#39; | fold -w 32 | head -n 1)
</span></span></code></pre></div><p>Das Passwort wird im Beispiel zufällig erzeugt, willst du ein eigenes Passwort verwenden, kannst du den Parameter überschreiben, z.B:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">DB_USER_PASSWORT=secret
</span></span></code></pre></div><p>Der DB-Nutzer wird natürlich nur angelegt, wenn ADD_DB_USER=yes gesetzt ist. Andernfalls musst du hier die passenden Zugangsdaten angeben.</p>
<h3 id="wordpress">WordPress</h3>
<p>Du kannst auf eine existierende Installation zurückgreifen, um z.B. dort Beiträge hinzuzufügen, oder WordPress komplett neu installieren. Hier kannst du z.B. auch den oben festgelegten PROJECT-Parameter nutzen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">WP_PATH</span><span class="o">=</span><span class="s2">&#34;/var/nginx/htdocs/${PROJECT}/&#34;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">INSTALL_CORE</span><span class="o">=</span><span class="n">yes</span><span class="o">|</span><span class="n">no</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">WP_DROP</span><span class="o">=</span><span class="n">yes</span><span class="o">|</span><span class="n">no</span>
</span></span></code></pre></div><p>Mit WP_DROP kannst du festlegen, dass der Ordner WP_PATH komplett gelöscht wird. <strong>Vorsicht</strong> ist hier also geboten! Die folgenden Parameter betreffen deine allgemeinen WordPress-Einstellungen. Bei der URL kannst du wieder den PROJECT-Platzhalter nutzen.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">WP_TITLE=&#39;WordPress Test&#39;
</span></span><span class="line"><span class="ln">2</span><span class="cl">URL=&#34;https://blog.example.org/${PROJECT}&#34;
</span></span><span class="line"><span class="ln">3</span><span class="cl">WP_ADMIN_NAME=admin
</span></span><span class="line"><span class="ln">4</span><span class="cl">WP_ADMIN_EMAIL=mail@example.org
</span></span><span class="line"><span class="ln">5</span><span class="cl">WP_ADMIN_PASSWORD=secret
</span></span></code></pre></div><p>Willst du ein eigene Passwort vergeben, kannst du auch hier ein zufälliges Passwort erzeugen lassen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">WP_ADMIN_PASSWORD=$(cat /dev/urandom | tr -dc &#39;a-zA-Z0-9&#39; | fold -w 32 | head -n 1)
</span></span></code></pre></div><h3 id="theme-und-plugins">Theme und Plugins</h3>
<p>Mit den folgenden Parametern legst du fest, welches Theme eingerichtet und welche Plugins installiert werden sollen. Der Theme-Name ist der Slug des Themes:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">INSTALL_THEME=yes|no
</span></span><span class="line"><span class="ln">2</span><span class="cl">THEME=&#34;elementor&#34;
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl">INSTALL_PLUGINS=no
</span></span><span class="line"><span class="ln">5</span><span class="cl">PLUGINS=&#34;elementor wordpress-seo tinymce-advanced ninja-forms shortcodes-ultimate instagram-feed ml-slider the-events-calendar amp contact-widgets coblocks woocommerce&#34;
</span></span></code></pre></div><p>Du kannst mehrere Plugins angeben, wenn diese per Leerzeichen voneinander getrennt sind.</p>
<h3 id="inhalte">Inhalte</h3>
<p>Der nächste Abschnitt regelt das (zufällige) Anlegen von Beiträgen, Kategorien usw. Natürlich musst du keine Inhalte anlegen. Ist <strong>RANDOMIZE_EVERY_ITEM</strong> auf <strong>yes</strong> gesetzt, wird jeder Beitrag wie oben zufällig erzeugt. Da das eine Menge HTTP-Requests erfordert, kannst du den Parameter auch auf no setzen. In dem Fall wird jede Zufalls-API genau einmal abgerufen. Der ganze Prozess wird dadurch maßgeblich beschleunigt.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">ADD_CONTENT=yes|no
</span></span><span class="line"><span class="ln">2</span><span class="cl">META_INPUT=&#34;&#34;
</span></span><span class="line"><span class="ln">3</span><span class="cl">RANDOMIZE_EVERY_ITEM=yes|no
</span></span></code></pre></div><p>Manche Themes, wie z.B. <strong>Elementor</strong>, fügen den Inhalten, also Beiträgen, bestimmte Meta-Informationen hinzu. Beim automatisierten Anlegen von Beiträgen passiert das allerdings nicht automatisch. Du kannst das hier also entsprechend einrichten. Der Wert wird als JSON übergeben. Achte auf das einfache Anführungszeichen.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">META_INPUT=&#39;{&#34;_elementor_edit_mode&#34;:&#34;&lt;![CDATA[builder]]&gt;&#34;,&#34;_elementor_template_type&#34;:&#34;&lt;![CDATA[kit]]&gt;&#34;,&#34;_elementor_version&#34;:&#34;&lt;![CDATA[2.9.13]]&gt;&#34;}&#39;
</span></span></code></pre></div><p>Die folgenden Paremeter legen fest, wieviele Inhalte du erzeugen möchtest:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">COUNT_CATEGORIES_LEVEL1=10
</span></span><span class="line"><span class="ln">2</span><span class="cl">COUNT_CATEGORIES_LEVEL2=5
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl">COUNT_POSTS=100
</span></span><span class="line"><span class="ln">5</span><span class="cl">COUNT_PARAGRAPHS=20
</span></span><span class="line"><span class="ln">6</span><span class="cl">COUNT_POST_REVISIONS=5
</span></span><span class="line"><span class="ln">7</span><span class="cl">COUNT_TAGS=20
</span></span></code></pre></div><p>Im Beispiel werden 10 Haupt-Kategorien mit jeweils 5 Unter-Kategorien angelegt. Jede Kategorie wird mit 100 Posts befüllt und jeder Post erhält 20 Tags und 5 Revisionen. Das ergibt also 10 * 5 * 100 * 5 Beiträge = 25.000 Beiträge! In diesem Fall macht es Sinn RANDOMIZE_EVERY_ITEM auf no zu setzen, da du sonst mehre tausende Anfragen an die Zufalls-APIs generieren würdest. COUNT_PARAGRAPHS legt die Länge jedes Beitrags in Absätzen fest.</p>
<h3 id="standard-parameter">Standard-Parameter</h3>
<p>Die folgenden Parameter musst du in der Regel nicht anpassen. WP_CLI legt den Pfad zur WordPress Kommandozeilen Oberfläche fest. Wird die Datei nicht gefunden, muss WP CLI installiert werden. Dazu dient der Parameter WP_CLI_SOURCE.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">WP_CLI_EXEC=~/wp-cli.phar
</span></span><span class="line"><span class="ln">2</span><span class="cl">WP_CLI_SOURCE=https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
</span></span></code></pre></div><p>Im folgenden werden die Quellen für die APIs festgelegt. Hier solltest du nichts ändern, da das Script für die Zusammenarbeit mit diesen Quellen eingerichtet ist. Einzig beim Parameter RANDOM_IMAGE_API_URI kannst du bei Bedarf in der URL die Auflösung der abgefragten Bilder festlegen.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">RANDOM_WORD_API_URL=&#39;https://random-word-api.herokuapp.com/word?swear=0&amp;number=&#39;
</span></span><span class="line"><span class="ln">2</span><span class="cl">RANDOM_SENTENCE_API_URL=&#39;http://metaphorpsum.com/sentences/&#39;
</span></span><span class="line"><span class="ln">3</span><span class="cl">RANDOM_TEXT_API_URL=&#39;http://metaphorpsum.com/paragraphs/&#39;
</span></span><span class="line"><span class="ln">4</span><span class="cl">RANDOM_IMAGE_API_URI=&#39;https://picsum.photos/200/300.jpg&#39;
</span></span></code></pre></div>
        
        
        <div class="tags">
          <p><strong>Tags:</strong> automatisierung, bash, installation, script, setup, wordpress, DevOps</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      <category>development</category>
      
      <category>tools</category>
      
      <category>wordpress</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Automatisierte WordPress Installation - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>project_documentation</dc:type>
      
      
    </item><item>
      <title>NGinx mit PHP-FPM, MySQL und Xdebug mit Docker auf Mac OS einrichten</title>
      <link>https://nickyreinert.de/2018/2018-09-16-nginx-mit-php-fpm-mysql-und-xdebug-mit-docker-auf-mac-os-einrichten/</link>
      <pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2018/2018-09-16-nginx-mit-php-fpm-mysql-und-xdebug-mit-docker-auf-mac-os-einrichten/</guid>
      <description>Ich habe mich eine ganze weile erfolgreich vor Docker als lokale Entwicklungsumgebung gedrückt. Der Grund: Ich nutze eine kommerzielle Parallels Lizenz, über …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine umfassende Anleitung zur Einrichtung einer lokalen Web-Entwicklungsumgebung auf macOS mit Docker. Das Tutorial beschreibt detailliert, wie man Container für Nginx, PHP-FPM und MySQL aufsetzt und miteinander verknüpft. Ein besonderer Fokus liegt auf der Erstellung eines benutzerdefinierten Docker-Images mittels Dockerfile, um Xdebug für das PHP-Debugging zu installieren und in Visual Studio Code zu integrieren.</p>
          
          
          <p><strong>Hauptthemen:</strong> Docker, macOS, Nginx, PHP-FPM, MySQL, Xdebug, Web-Development, DevOps</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> advanced</p>
          
        </div>
        
        
        <p>Ich habe mich eine ganze weile erfolgreich vor <strong>Docker</strong> als lokale Entwicklungsumgebung gedrückt. Der Grund: Ich nutze eine kommerzielle Parallels Lizenz, über die ich Ubuntu virtualisiert laufen lasse und bin damit bisher ganz gut gefahren. Bisher. Paralles hat nämlich immer wieder Problem gemacht. So konnte ich nach manchen Updates von Parallels oder Ubuntu die <em>Parallels Tools</em> nicht mehr nutzen und musste diese umständlich neu installieren. Da die Doku dazu auch nur unvollständig vorliegt, war das regelmäßig eine ziemliche Zeitverschwendung. Die <em>Parallels Tools</em> sind aber notwendig, um von Ubuntu aus auf die Dateien des Gastsystems, Mac OS X, zuzugreifen.</p>
<p>Beim letzten Update auf Ubuntu 18.04 ließen sich die <em>Parallels Tools</em> gar nicht mehr installieren. Die Ursache dafür ist wohl irgendeine Inkompatibilität eines abhängigen Paketes mit dem neuen Linux-Kernel. Wie auch immer: Ich war die Sorgen leid und auf der Suche nach einer Alternative. Weshalb ich <strong>Docker</strong> stieß. Der Vorteil: Docker ist weitaus performanter und portabler. Der Nachteil: Um damit eine funktionierende Entwicklungsumgebung zu schaffen, kommt man um die Shell nicht herum. Das mitgelieferte UI Kitematic liegt noch als Beta vor und lässt einige Funktionen einfach vermissen. Es gibt also einige kleinere Fallstricke, die es zu überwinde galt. Was mir gelungen ist. Wie, das werde ich nun genauer erläutern. <em>Viel Spass</em>.</p>
<p>[caption id=&ldquo;attachment_2166&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/nginx-mit-php-fpm-und-mysql-mit-docker-auf-mac-os-einrichten/kitematic-scho%CC%88n-aber-noch-nutzlos.png"><img src="images/kitematic-scho%CC%88n-aber-noch-nutzlos-300x181.png" alt="Kitematic - schön aber (noch) weitestgehend nutzlos"></a> Kitematic - schön aber (noch) weitestgehend nutzlos[/caption]</p>
<h2 id="erste-schritte">Erste Schritte</h2>
<p>Grundsätzlich kann man bei der  Installation der Docker-Anwendung nicht viel falsch machen: Account anlegen, Docker herunterladen, installieren, anmelden - fertig. Auf die zugrunde liegende Technologie will ich hier nicht weiter eingehen, das machen andere weitaus besser (z.B. <a href="https://www.ab-heute-programmieren.de/docker-teil-1-was-ist-docker/">ist diese Anleitung sehr zu empfehlen</a>).</p>
<p>Nur soviel soll gesagt sein: Du lädst ein <strong>Image</strong> herunter, dass du dann <em>starten</em> kannst. Dadurch erhältst du einen <strong>Container</strong>, der bestimmte Dienste bereitstellt. Dieser Container ist kein vollständiges Betriebssystem mit all seinem Ballast. So kannst du z.B. nicht ohne weiteres per SSH darauf zugreifen. Das funktioniert nur, wenn der entsprechende SSH-Dienst auch im Image vorgesehen ist. Das schöne an Docker ist aber, dass du das Image mit beliebigen Funktionalitäten über ein sogenanntes <strong>Dockerfile</strong> relativ unkompliziert nachrüsten kannst. Das erfordert zwar eine gewisse Umgewöhnung im Arbeitsablauf ab, bringt aber auch viele Vorteile mit sich.</p>
<p>Wer will kann sich mit der <strong>Kitematic UI</strong> durch die vorhandenen Docker-Images wühlen und auch direkt herunterladen. Diese stehen dann natürlich auch auf der Kommandozeile zur Verfügung. Mit <strong>docker image ls</strong> zeigst du alle verfügbaren Images an. Analog dazu listet <strong>docker container ls</strong> alle erstellten Container auf. Außerdem gibt es noch ein paar andere, für den Anfang ganz brauchbare Befehle:</p>
<p># alle lokal verfügbaren Images auflisten
docker image ls</p>
<h1 id="alle-gestarteten-bzw-erzeugten-container-auflisten">alle gestarteten bzw. erzeugten Container auflisten</h1>
<p>docker container ls</p>
<h1 id="die-kommandozeile-für-den-container-mit-dem-namen-mysql-die-kommandozeile-starten">die Kommandozeile für den Container mit dem Namen &ldquo;mysql&rdquo; die Kommandozeile starten</h1>
<p>docker exec -it mysql /bin/bash</p>
<h1 id="für-den-container-mit-dem-namen-mysql-das-setup-anzeigen">für den Container mit dem Namen &ldquo;mysql&rdquo; das Setup anzeigen</h1>
<p>docker inspect mysql</p>
<p>Für eine lokale Entwicklungsumgebung benötigt man zunächst einen <strong>HTTP- und einen MySQL-Server.</strong> Natürlich gehört zu jeder guten Entwicklungsumgebung auch ein Debugger - für PHP wäre das wohl <strong>xdebug</strong>. Ich nutze hier die beiden Images: <a href="https://hub.docker.com/r/richarvey/nginx-php-fpm/">nginx-php-fpm von Ric Harvey</a> und <a href="https://hub.docker.com/_/mysql/">das sehr aktuelle und offizielle MySQL-Image</a>, die ich erstmal ganz unkompliziert über Kitematic herunterlade. Das nginx-Image werde ich schließlich mit einem <strong>Dockerfile</strong> anpassen um auch <strong>xdebug</strong> nutzen zu können.</p>
<p>[caption id=&ldquo;attachment_2167&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/nginx-mit-php-fpm-und-mysql-mit-docker-auf-mac-os-einrichten/kitematic-auswahl-von-images.png"><img src="/2018/2018-09-16-nginx-mit-php-fpm-mysql-und-xdebug-mit-docker-auf-mac-os-einrichten/images/kitematic-auswahl-von-images-300x152.png" alt="Die Auswahl neuer Images über Kitematic ist sehr bequem"></a> Die Auswahl neuer Images über Kitematic ist sehr bequem[/caption]</p>
<p>Ab hier verlasse ich Kitematic allerdings wieder und werde Docker nur noch über die Kommandozeile und ein paar selbst geschriebene Scripte nutzen. Los gehts&hellip;</p>
<h2 id="den-mysql-container-starten">Den MySQL-Container starten</h2>
<p>&hellip; es mit dem MySQL-Container. Da der nginx-Container auf MySQL zugreift, muss der MySQL-Container auch zuerst dasein. Der Aufruf dafür sieht folgendermaßen aus:</p>
<p>docker run \
&ndash;name mysql \
&ndash;publish 3306:3306 \
&ndash;volume /Users/nicky/Development/MySQL:/var/lib/mysql \
&ndash;env MYSQL_ALLOW_EMPTY_PASSWORD=yes \
&ndash;env MYSQL_ROOT_HOST=% \
&ndash;detach \
&ndash;default-authentication-plugin=mysql_native_password \
mysql</p>
<p>Mit &ndash;name vergebe ich einen festen und vor allem lesbaren Namen. Ohne diesen Parameter würde Docker eine Id anlegen, die den Zugriff später aber unnötig kompliziert macht. Der Parameter <em>--publish</em> legt fest, welcher Port &ldquo;von draußen&rdquo; auf einen Port im Docker-Container gemappt wird. Da sich die Dateien für die Datenbank physikalisch natürlich nicht im Docker-Container, sondern im Dateisystem vom Host befinden, muss ich dem Container mitteilen, wie er darauf zugreifen kann. Das passiert mit dem Parameter <em>--volume</em>. Damit kann ich nich nur Ordner im Container verfügbar machen, sondern auch Dateien. Das ist ganz praktisch, um z.B. Configurations-Dateien von außerhalb beim Start des Containers mitzuliefern.</p>
<p>Der Parameter <em>--env</em> dient dazu, Umgebungsvariablen zu setzen. Diese sind natürlich abhängig vom verwendeten Container. Für den MySQL-Container möchte ich hier zwei Parameter übergeben: Ich will eine Root-Benutzer ohne Passwort anlegen (<em>MYSQL_ALLOW_EMPTY_PASSWORD</em>) (das mag unsicher erscheinen, da ich hier aber lokal nur mit Testdaten arbeite, ist das erstmal einfach nur pragmatisch). Außerdem soll sich jeder Client verbinden können, also setzte ich <em>MYSQL_ROOT_HOST</em> auf %.</p>
<p>Eine Besonderheit ist der Parameter <em>default-authentication-plugin</em>. Wenn du ein Root-Passwort vergibst, solltest du zusätzlich diesen Parameter setzen. Zur Erklärung: Es handelt sich hier um ein MySQL 8-Image. Dort wird als Authentifizierungs-Methode <em>caching_sha2_password</em> verwendet, was sich mit Docker leider nicht verträgt und mit dieser Fehlermeldung quittiert wird:</p>
<blockquote>
<p>Unable to load authentication plugin &lsquo;caching_sha2_password</p></blockquote>
<p>Und schließlich gibt es noch den Parameter &ndash;detach, der einfach dafür sorgt, dass der Container im Hintergrund gestartet wird.</p>
<p>Das war es fast. Was jetzt noch fehlt, ist der Name des Images, dass die Grundlage für deinen neuen Container bilden soll: <em>mysql</em>. Wenn das Image lokal nicht vorhanden ist, lädt Docker es hilfsbereiterweise einfach herunter.</p>
<p>Es empfiehlt sich, den Aufruf in ein Shell-Script zu packen und diese Zeilen voranzustellen. Beim Aufruf wird also ein vorhandener Container erst gestoppt und gelöscht und dann neu gestartet:</p>
<p>#!/bin/bash
docker stop mysql
docker rm mysql
docker run \
&ndash;name mysql \
-p 3306:3306 \
-v /Users/nicky/Development/MySQL:/var/lib/mysql \
-e MYSQL_ALLOW_EMPTY_PASSWORD=yes \
-e MYSQL_ROOT_HOST=% \
-d \
&ndash;default-authentication-plugin=mysql_native_password \
mysql</p>
<p>Et voilà: Ein MySQL-Server im Docker-Container auf Knopfdruck!</p>
<h2 id="den-http-container-starten">Den HTTP-Container starten</h2>
<p>Am Vorgehen ändert sich nicht viel. Auch für den <strong>nginx-Server</strong> erstelle ich mir ein kleines Script. Dieses befindet sich aber in einem Unterordner meiner Wordpress-Installation. Mit dem Platzhalter <strong>${PWD}</strong> im Parameter <em>--volume</em> kann ich Docker das aktuelle Verzeichnis mitgeben. Dadurch kann  ich das Script auch innerhalb andere Wordpress-Installationen verwenden (und muss lediglich den Namen des Containers anpassen). Hier sorge ich also dafür, dass Docker das aktuelle Verzeichnis als Root-Verzeichnis für den HTTP-Server nutzt. Außerdem liefere ich eine eigene ini-Datei für PHP mit. Wichtig ist außerdem die Verknüpfung zu meinem zuvor erstellen MySQL-Container über den Parameter <em>--link</em>. Der Rest wird analog des ersten Containers vorgegeben: Port, Name, Image, usw.</p>
<p>#!/bin/bash
docker stop nickyreinert-de
docker rm nickyreinert-de
docker run \
&ndash;link mysql \
&ndash;name nickyreinert-de \
&ndash;volume ${PWD}/dev/wordpress.ini:/usr/local/etc/php/conf.d/uploads.ini \
&ndash;volume ${PWD}:/var/www/html \
&ndash;publish 80:80 \
&ndash;detach \
richarvey/nginx-php-fpm</p>
<h2 id="xdebug-installieren">xdebug installieren</h2>
<p>Leider liefert das nginx-Image kein <strong>xdebug</strong> mit. Bzw: Zurecht - der Sinn des ganzen Konzeptes ist es ja, schlanke Container nutzen zu können. Eine All-In-One-Lösung entspräche letztlich ja wieder einer kompletten virtuellen Maschine. Für mich jedenfalls heißt das, dass ich das nginx-Image nun irgendwie mit <strong>xdebug</strong> füttern muss. Das passiert mit <strong>docker build</strong>. Dazu benötige ich zunächst ein Dockerfile, dass auch genau so heißt und folgendermaßen aufgebaut ist - Erklärung folgt darunter:</p>
<p>FROM richarvey/nginx-php-fpm</p>
<p>RUN apk add &ndash;no-cache &ndash;virtual .phpize-deps $PHPIZE_DEPS
RUN apk add &ndash;no-cache nano</p>
<p>RUN pecl install xdebug
RUN echo &lsquo;zend_extension = /usr/local/lib/php/extensions/no-debug-non-zts-20170718/xdebug.so&rsquo; &raquo; /usr/local/etc/php/php.ini
RUN touch /usr/local/etc/php/conf.d/xdebug.ini; \
echo xdebug.remote_enable=1 &raquo; /usr/local/etc/php/conf.d/xdebug.ini; \
echo xdebug.remote_autostart=1 &raquo; /usr/local/etc/php/conf.d/xdebug.ini; \
echo xdebug.remote_connect_back=0 &raquo; /usr/local/etc/php/conf.d/xdebug.ini; \
echo xdebug.remote_host=192.168.0.11  &raquo; /usr/local/etc/php/conf.d/xdebug.ini; \
echo xdebug.remote_port=9000 &raquo; /usr/local/etc/php/conf.d/xdebug.ini; \
echo xdebug.remote_log=/tmp/php-xdebug.log &raquo; /usr/local/etc/php/conf.d/xdebug.ini;</p>
<p>Zunächst einmal lege ich mit <em>FROM</em> fest, welches Images als Grundlage genutzt werden soll - in meinem Fall also nginx-php-fpm von richarvey. Mit <em>RUN</em> übergebe ich dann, zum Image passende, Befehle. So könnte ich xdebug zum Beispiel einfach mit pecl install xdebug installieren lassen. Du wirst dann aber recht schnell feststellen, dass das nicht ohne weiteres funktioniert. PHP ist in diesem Docker-Image natürlich nur mit den wichtigsten Paketen eingerichtet, <em>phpize</em> gehört so z.B. nicht dazu und der Aufruf würde mit folgender Fehlermeldung quittiert werden:</p>
<p>Cannot find autoconf. Please check your autoconf installation and the # $PHP_AUTOCONF environment variable. Then, rerun this script.</p>
<p>Die Lösung ist, <em>phpize</em> im Voraus mit allen notwendigen Abhängigkeiten zu installieren. Dazu dient der Aufruf</p>
<p>RUN apk add &ndash;no-cache &ndash;virtual .phpize-deps $PHPIZE_DEPS</p>
<p>Das das nicht immer so umfangreich vonstatten gehen muss, soll die Installation des Texteditors <em>nano</em> zeigen: Man kann gewünschte Pakete auch einfach mit <em>apk add <paketname></em> zum Docker-Image hinzufügen. Der apk-Parameter <em>--virtual</em> besagt, dass die genannten Pakete zu einem &ldquo;virtuellen Paket&rdquo; hinzugefügt werden, dass sich dann mit <em>apk del <paketname></em> leicht wieder entfernen lässt. Danach schließlich kann <strong>xdebug</strong> mit <em>pecl install</em> installiert werden. Die letzten beiden RUN-Aufrufe sorgen dafür, dass eine Standard-Konfiguration für xdebug eingerichtet wird. Hier wird es tatsächlich noch etwas tricky, wenn es um den <em>remote_host</em> geht. Docker lässt den Container später in einem eigenen Netzwerk laufen. Der Docker-Host, also in meinem Fall OS X,erhält dafür eine eigene IP-Adresse, wie z.B. 172.17.0.1. Das Problem: Das ist nicht die IP-Adresse, unter der OS X bzw. der Debug-Client (z.B. Visual Studio Code) erreichbar ist. Jeder Debug-Versuch wurde (in meinem Fall) in <em>/tmp/php-xdebug.log</em> mit folgender Fehlermeldung quittiert:</p>
<p>W: Creating socket for &lsquo;127.0.0.1:9000&rsquo;, poll success, but error: Operation in progress (29).</p>
<p>Der Remote-Host ist also die tatsächliche IP-Adresse deines Hosts, unabhängig von Docker. Hier demnach die IP-Adresse <em>192.168.0.11</em>.</p>
<p>Zum Abschluss muss das Dockerfile nur noch verarbeitet werden. Das passiert mit folgendem Aufruf:</p>
<p>docker build &ndash;tag nginx-php-fpm-xdebug .</p>
<p>Mit dem Parameter <em>--tag</em> gibst du dem modifizierten Image einen eigenen Namen. Der letzte Parameter - ein Punkt - zeigt docker, in welcher Datei sich die Build-Anweisung befindet. Docker sucht standardmäßig nach einer Datei mit dem Namen Dockerfile. Deshalb verweise ich mit dem Punkt einfach nur auf den aktuellen Ordner, in dem sich diese Datei auch befindet.</p>
<p>Docker wird nun die Anweisungen aus dem Dockerfile verarbeiten und ein neues Image erzeugen. Der erste Aufruf wird etwas länger dauern. Wenn du an dem Dockerfile nur geringfügige Änderungen vornimmst und den build-Prozesse erneut startest, ist Docker so clever und nimmt nur die notwendigen Änderungen vor - alles andere befindet sich bereits in einer Art &ldquo;Zwischenspeicher&rdquo;.</p>
<p>Denke nun daran, den oben bereits zusammengebauten Container-Aufruf des HTTP-Servers den Image-Name anzupassen: <em>nginx-php-fpm-xdebug</em>!</p>
<h2 id="visual-studio-code">Visual Studio Code</h2>
<p>Der Vollständigkeit halber möchte ich nun noch die Schritte dokumentieren, die bei Microsofts Visual Studio Code (VSC) notwendig sind. Hier installiert man zunächst das Paket <strong>PHP Debug</strong>. Im Debug-Bereich fügt man dann eine neue Konfiguration hinzu, die VSC mitteilt, unter welcher IP-Adresse xdebug erreichbar ist - nämlich 127.0.0.1 und dem üblichen Port: 9000:</p>
<p>{
// Use IntelliSense to learn about possible attributes.
// Hover to view descriptions of existing attributes.
// For more information, visit: <a href="https://go.microsoft.com/fwlink/?linkid=830387">https://go.microsoft.com/fwlink/?linkid=830387</a>
&ldquo;version&rdquo;: &ldquo;0.2.0&rdquo;,
&ldquo;configurations&rdquo;: [
{
&ldquo;name&rdquo;: &ldquo;Listen for XDebug&rdquo;,
&ldquo;type&rdquo;: &ldquo;php&rdquo;,
&ldquo;request&rdquo;: &ldquo;launch&rdquo;,
&ldquo;port&rdquo;: 9000,
&ldquo;host&rdquo;: &ldquo;127.0.0.1&rdquo;
}
]
}</p>
<p>Fertig. Mit einem Klick auf den grünen Playbutton wird VSC sich nun mit xdebug verbinden.</p>
<p>[caption id=&ldquo;attachment_2199&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/nginx-mit-php-fpm-und-mysql-mit-docker-auf-mac-os-einrichten/visual-studio-code-den-debugger-starten.png"><img src="/2018/2018-09-16-nginx-mit-php-fpm-mysql-und-xdebug-mit-docker-auf-mac-os-einrichten/images/visual-studio-code-den-debugger-starten-300x162.png" alt="Visual Studio Code - den Debugger starten"></a> Visual Studio Code - den Debugger starten[/caption]</p>
<h2 id="fazit">Fazit</h2>
<p>Docker hat mich voll überzeugt. Ich bereue es, dass ich nicht schon früher umgestiegen bin. Es läuft sauber und wenn man das Konzept erstmal verstanden hat, ist es auch sehr intuitiv zu bedienen und lässt vor allem keine Wünsche auf. Im Nachhinein betrachtet hat mich die komplette Einrichtung der virtuellen Maschine mit Ubuntu unter Parallels auch weitaus mehr Zeit - und Nerven! - gekostet. Was jetzt noch fehlt, ist das etwas dynamischere Verwalten mehrerer lokaler Websiten mit Docker. Dazu komme ich später - <em>stay tuned</em>.</p>
<h2 id="referenzen">Referenzen</h2>
<p>Mein Dank gilt <a href="http://paislee.io/a-minimal-development-server-with-nginx-and-docker/">Caleb Sotelo</a>, von wo ich einen Großteil der Scripte habe. Ein Teil des Dockerfiles stammt von <a href="https://blog.philipphauer.de/debug-php-docker-container-idea-phpstorm/">philipphauer.de</a>. Danke!</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Docker, macOS, Nginx, PHP, Xdebug, Tutorial</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>development</category>
      
      <category>hosting</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>NGinx mit PHP-FPM, MySQL und Xdebug mit Docker auf Mac OS einrichten - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>tutorial</dc:type>
      
      
    </item><item>
      <title>Wie richte in ein Staging-System für Wordpress ein?</title>
      <link>https://nickyreinert.de/2018/2018-03-11-wie-richte-in-ein-staging-system-fuer-wordpress-ein/</link>
      <pubDate>Sun, 11 Mar 2018 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2018/2018-03-11-wie-richte-in-ein-staging-system-fuer-wordpress-ein/</guid>
      <description>Wordpress hat den Ruf sehr unkompliziert zu sein. Zurecht. Doch oft bleibt es nicht dabei, dass man ein paar Beiträge verfasst. Die Seite kann schnell von einem …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine detaillierte Anleitung zur Einrichtung einer Staging-Umgebung für WordPress. Der Artikel vergleicht zwei Methoden: einen manuellen, aber sichereren Ansatz mit den Plugins &#39;Duplicator&#39; und &#39;WP Sync DB&#39; auf einer separaten Subdomain und einen einfacheren Ein-Klick-Prozess mit dem &#39;WP Staging&#39;-Plugin, dessen Nachteile ebenfalls beleuchtet werden.</p>
          
          
          <p><strong>Hauptthemen:</strong> WordPress, Staging, Deployment, Web-Development, DevOps, Website-Wartung</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> advanced</p>
          
        </div>
        
        
        <p>Wordpress hat den Ruf sehr unkompliziert zu sein. Zurecht. Doch oft bleibt es nicht dabei, dass man ein paar Beiträge verfasst. Die Seite kann schnell von einem einfachen Blog zu einem großen CMS heranwachsen und wird dann nicht nur mit Texten und Bildern, sondern dank eines riesigen Angebotes an Plugins und Template auch mit Funktionalitäten gefüllt. Und dann wird man mit einem Konflikt konfrontiert, dass die gesamte Seite bedroht: Updates und Inkompatibilität. Es ist nämlich gar nicht so selbstverständlich, dass die eigenen Anpassungen mit alle Wordpress-, Plugin- und Template-Versionen oder gar der Hosting-Umgebung harmonieren. Je angepasster die eigene Wordpress-Installation ist, desto komplexer sind im Hintergrund die Abhängigkeiten. Ein kleines Update kann im schlimmsten Fall die gesamte Seite gefährden. Ein Staging-System für Wordpress kann da helfen.</p>
<h2 id="zwei-wege-und-drei-plugins-führen-nach-rom">Zwei Wege und drei Plugins führen nach Rom</h2>
<p>Deswegen ist es ratsam, sich möglichst früh um eine Testumgebung Gedanken zu machen. Das Ziel soll eine sogenannte Staging-Umgebung sein, die synchron zum öffentlichen Live-System betrieben werden kann. Gleiche Inhalte, gleiche Templates, gleiche Plugins. Auf diesem Staging-System kann dann jedes Update und jede Änderung auf Kompatibilität getestet werden. Bei Erfolg installiert man das Update auch auf dem Live-System. Die gute Nachricht: Das Lesen des Beitrages wird dich vermutlich mehr Zeit kosten, als der ganze Prozess. Je nach Größe des Blogs kannst du ein Staging-System für Wordpress in 5 bis 10 Minuten aufsetzen.</p>
<p>Es gibt viele Möglichkeiten (sprich Plugins), die versprechen, Wordpress-Installationen zu kopieren oder in irgendeiner Form zu synchronisieren. Doch keines erfüllt das Ziel wirklich komfortabel, nämlich:</p>
<p><em>per Knopfdruck im Wordpress-Backend Dateien und Datenbank an einen anderen Ort kopieren</em></p>
<p>Ich will an dieser Stelle zwei Wege und drei Plugins vorstellen, die ich als sehr nützlich betrachte und die die Aufgabe zumindest in Teilen erfüllen.</p>
<h3 id="welche-plugins-kommen-für-das-staging-system-für-wordpress-in-frage">Welche Plugins kommen für das Staging-System für Wordpress in Frage</h3>
<ul>
<li>Der <strong>1. Weg</strong>: <a href="https://github.com/wp-sync-db/wp-sync-db">WP Sync DB</a> ist ein Plugin, dass zwar sehr bequem nur über das Backend läuft, aber eben auch nur den Inhalt der Datenbank kopiert. Praktisch ist allerdings, dass immerhin auch die Medien-Bibliothek komplett übertragen wird. Außerdem: Der <a href="http://snapcreek.com/duplicator/">Duplicator</a> ist ein sehr mächtiges, teilweise kostenpflichtiges Plugin; allerdings reicht für diese Zwecke auch die kostenlose Variante aus. Damit werden sämtliche Dateien und Tabellen aus der Datenbank in ein Archiv gepackt, aus dem dann an anderer Stelle eine eigenständige Installation erstellt wird. Leider muss dazu auch per FTP oder der Shell hantiert werden. Mit der  Kombination aus beiden Plugins lässt sich das o.g. Ziel jedenfalls schon recht gut erreichen. Zusammen mit WP Sync DB lassen sich die Installationen aber halbwegs komfortabel synchron halten.</li>
<li>Das dritte Plugin (für den <strong>2. Weg</strong>) heißt <a href="https://de.wordpress.org/plugins/wp-staging/">WP Staging</a>. Damit kann man sehr bequem eine komplette Kopie von Wordpress erstellen. Der Vorteil: Das Plugin übernimmt den ganzen Prozess und wird nur über das Backend bedient. Der Nachteil aus meiner Sicht: Das Staging-System wird unterhalb des Live-Systems in einem Unterverzeichnis erstellt und es wird die exakt gleiche Datenbank verwendet. Für meinen Geschmack ist die Trennung zwischen Live- und Test-System damit nicht strikt genug.</li>
</ul>
<p>Zuerst beschreibe ich die Vorbereitung auf dem Server. Danach gehe ich auf die Installation der jeweiligen Tools ein. Und abschließend fasse ich im <a href="/2018/2018-03-11-wie-richte-in-ein-staging-system-fuer-wordpress-ein/#fazit">Fazit</a> noch einmal zusammen, wie unser Live-Staging-System nun genutzt werden kann. Wer also wissen will, was auf ihn zukommt, fängt ausnahmsweise mal von unten an zu lesen.. ;)</p>
<h2 id="vorbereitung">Vorbereitung</h2>
<p>Bevor ich mich an die Plugins mache, möchte ich eine Sub-Domain und einen getrennten Ort im Dateisystem einrichten (Für den zweiten Weg ist das <em>nicht</em> notwendig). Außerdem soll der Zugriff auf das Staging-System mit htaccess geschützt werden.</p>
<p>Ich gehe im folgenden davon aus, dass die Seite bei einem Shared-Hosting-Anbieter eingerichtet ist. Wer einen Dedicated, V- oder Managed-Server nutzt, dem räume ich einfach mal genügend Sachverstand ein, die Schritte auch auf so einem System nachvollziehen zu können. Ansonsten werde ich versuchen, diese Anleitung so detailliert und einfach wie möglich zu gestalten.</p>
<p>Los geht es mit einem zusätzlichen Ordner auf unserem Webspace, der natürlich nicht unterhalb unseres aktuellen Live-System liegen darf. Nun richte ich mir eine Sub-Domain ein, die auf diesen Ordner zeigen soll. Das passiert in zwei Schritten. 1. Anlegen der Subdomain und 2. Einstellen des Verweises auf den entsprechenden Ordner, in meinem Fall also <em>staging</em>.</p>
<p>[caption id=&ldquo;attachment_1684&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/wie-richte-in-ein-staging-system-fuer-wordpress-ein/strato-subdomain-umleitung-einrichten.png"><img src="/2018/2018-03-11-wie-richte-in-ein-staging-system-fuer-wordpress-ein/images/strato-subdomain-umleitung-einrichten-300x157.png" alt="Ziel für die Sub-Domain einrichten am Beispiel von Strato"></a> Ziel für die Sub-Domain einrichten am Beispiel von Strato[/caption]</p>
<p>Die Installation von Wordpress können wir uns sparen, das übernimmt gleich der <em>Duplicator</em>. Den Verzeichnisschutz können wir übrigens erst nach einrichten, nachdem wir Wordpress einmal &ldquo;dupliziert&rdquo; haben. Dazu also später mehr.</p>
<h2 id="mit-duplicator-einen-ganzen-blog-umziehen">Mit Duplicator einen ganzen Blog umziehen</h2>
<p>Weiter geht es auf dem aktuellen Live-System, wo wir uns den Duplicator installieren und sofort aktivieren. Im Hauptmenü gelangst man über &ldquo;Duplicator&rdquo; und den Punkt &ldquo;Archive&rdquo; zu &ldquo;Neues erstellen&rdquo; Zuerst wird die System-Umgebung geprüft. Damit das Plugin funktioniert, sollten natürlich alle Anforderungen erfüllt sein. Hier kann es z.B. passieren, dass das &ldquo;ZIP-Archiv&rdquo; für PHP fehlt.</p>
<p>Wenn du Shell-Zugriff auf deinen Server hast, kannst du das Problem sehr einfach beheben, indem du das entsprechende PHP-Modul installierst und den Web-Server neu startest.</p>
<p>apt-get install php-zip
service apache2 restart</p>
<p>Ansonsten kannst du dieses Paket ggf. im Backend deines Hosting-Paketes aktivieren oder deinen Provider fragen, ob er dir das Modul einrichtet. Nun solltest du über den gleichen Dialog die weiteren Einstellungen vornehmen können. Den Speicher-Ort musst du nicht ändern. In der Pro-Version kannst du hier auch einen FTP-Server oder sogar eine Dropbox-Freigabe auswählen. Unter &ldquo;Archive&rdquo; musst du ebenfalls keine Einschränkungen vornehmen, es geht ja darum, die komplette Installation inklusive aller Dateien zu kopieren.</p>
<p>Natürlich kann es hilfreich sein, hier bereits die Verbindungsdaten zur MySQL-Datenbank zu hinterlegen. Das Passwort muss bei der späteren  Installation aber dennoch nachgereicht werden.</p>
<p>[caption id=&ldquo;attachment_1686&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/wie-richte-in-ein-staging-system-fuer-wordpress-ein/duplicator-grundeinstellungen.png"><img src="/2018/2018-03-11-wie-richte-in-ein-staging-system-fuer-wordpress-ein/images/duplicator-grundeinstellungen-300x137.png" alt="Duplicator - Grundeinstellungen"></a> Duplicator - Grundeinstellungen[/caption]</p>
<p>Weiter geht es sodann mit dem &ldquo;Scan&rdquo;. Hier werden Datenbank und Dateisystem auf mögliche Fehlerquellen gescannt, wie z.B. Sonderzeichen in den Dateinamen. Wenn es zu Warnungen kommt, muss man diese per Häkchen aktiv &ldquo;ignorieren&rdquo;. Und kann dann den sogenannten &ldquo;Build-Prozess&rdquo; starten.</p>
<p>[caption id=&ldquo;attachment_1687&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/wie-richte-in-ein-staging-system-fuer-wordpress-ein/duplicator-archiv-erstellen.png"><img src="/2018/2018-03-11-wie-richte-in-ein-staging-system-fuer-wordpress-ein/images/duplicator-archiv-erstellen-300x111.png" alt="Duplicator - Das Archiv wird erstelllt"></a> Duplicator - Das Archiv wird erstelllt[/caption]</p>
<p>Nach dem Build-Prozess lädt man nur noch den Installer und das Archiv herunter, die man direkt in den neu angelegten Staging-Ordner kopiert. Die installer.php ruft man nun im Browser auf und startet das &ldquo;Deployment&rdquo;.</p>
<h3 id="das-deployment---das-staging-system-wird-zum-leben-erweckt">Das Deployment - Das Staging-System wird zum Leben erweckt</h3>
<p>Dabei wird das Archiv entpackt und alle Dateien von Wordpress in das Dateisystem geschrieben. Wenn  keine Warnungen dazwischen kommen. Wie z.B. fehlende Schreibrechte, die man natürlich korrigieren muss.</p>
<p>Im 2. Schritt wird die Datenbankverbindung eingestellt. Natürlich wollen wir, aus bereits genannten Gründen, unbedingt eine <strong>getrennte</strong> Datenbank nutzen, um den Live-Betrieb nicht zu gefährden. Außerdem würden alle Tabellen in der Datenbank gelöscht werden. Hier muss also <strong>unbedingt eine leere Datenbank</strong> angegeben werden. Natürlich kann man auch eine Datenbank anlegen lassen, benötigt dazu aber einen Benutzer mit den entsprechenden Rechten.</p>
<p>[caption id=&ldquo;attachment_1688&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/wie-richte-in-ein-staging-system-fuer-wordpress-ein/duplicator-Einstellungen-der-Datenbank-.png"><img src="/2018/2018-03-11-wie-richte-in-ein-staging-system-fuer-wordpress-ein/images/duplicator-Einstellungen-der-Datenbank--300x152.png" alt="Duplicator - Einstellungen der Datenbank"></a> Duplicator - Einstellungen der Datenbank[/caption]</p>
<p>Nachdem also auch die Datenbank mit den Inhalten unserer Seite gefüllt, geht es in Schritt 4 abschließend noch an die Pfade für Wordpress. In den Zusatzoptionen sollte man prüfen, ob alles korrekt eingestellt ist. Als Titel der Seite wähle ich natürlich &ldquo;Staging&rdquo; aus. Alle anderen Einstellungen bleiben unverändert - ich will eine exakte Kopie erhalten.</p>
<p>Grundsätzlich war es das. Unter der Staging-URL ist nun eine exakte Kopie des Live-Systems erreichbar. Zum Schluß richten wir aber noch einen Verzeichnisschutz ein, damit die Staging-Umgebung erstens nicht von außen erreichbar ist und zweitens auch nicht von Suchmaschinen besucht wird und unsere SEO-Stratgie stört. Dazu brauchen wir zweit Dateien im staging-Ordner: .htaccess und .htpasswd</p>
<p>Die Datei .htaccess sollte bereits vorhanden sein, da diese auch von Wordpress genutzt wird. Diese wird um die folgenden Zeilen ergänzt:</p>
<p>AuthName &ldquo;Staging&rdquo;
AuthType Basic
AuthUserFile ./.htpasswd
require valid-user</p>
<p>Die .htpasswd-Datei musst du selber erstellen. Dort hinterlegst du deine Zugangsdaten - einen Benutzernamen und ein sicheres Passwort, wie z.B:</p>
<p>benutzer1:afasdfgasdfg</p>
<p>Das ist natürlich nicht das Passwort im Klartext, sondern verschlüsselt. Das kannst du dir <a href="http://www.homepage-kosten.de/htaccess.php">auf dieser Seite</a> erstellen lassen.</p>
<p>Beim ersten Aufruf des Staging-Systems wird man noch dazu aufgefordert, die Installationsdateien zu entfernen. Fertig.</p>
<p>[caption id=&ldquo;attachment_1685&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/wie-richte-in-ein-staging-system-fuer-wordpress-ein/duplicator-dateien-bereinigen.png"><img src="/2018/2018-03-11-wie-richte-in-ein-staging-system-fuer-wordpress-ein/images/duplicator-dateien-bereinigen-300x76.png" alt="Duplicator - Bereinigen der Installationsdateien"></a> Duplicator - Bereinigen der Installationsdateien[/caption]</p>
<h2 id="mit-wp-sync-db-die-datenbanken-kopieren">Mit WP Sync DB die Datenbanken kopieren</h2>
<p>Zwar haben wir jetzt schon eine vollständige Kopie, allerdings wird unser Live-System in der Zukunft ja durchaus wachsen. Deshalb benötigen wir nun <em>WP Sync DB</em>.</p>
<p>Leider ist das Plugin nicht über das Wordpress-Repository verfügbar. Die Installation ist deshalb aber nicht viel komplizierter: Man lädt sich das Archiv des Plugins von <a href="https://github.com/wp-sync-db/wp-sync-db-media-files">github.com</a> herunter, entpackt es, lädt die Dateien auf den FTP-Server in den Ordner /wp-content/plugins/wp-sync/ der Staging-Umgebung und kann es dann wie gewohnt im Backend von Wordpress aktivieren. Genauso sollte man auch mit dem Plugin verfahren, dass Medien-Datein synchronisieren kann. Das ist auch nur über <a href="https://github.com/wp-sync-db/wp-sync-db-media-files">github.com</a> erhältlich. Mit der Live-Installation verfährt man danach genauso: Einfach die Dateien in den jeweiligen Ordner im plugin-Verzeichnis kopieren und schließlich im Backend aktivieren.</p>
<p>Als nächstes starten wir die allererste Synchronisation der beiden Seiten. Dabei ist es egal, ob wir das vom Live-System oder aus der Test-Umgebung heraus machen.</p>
<p>Im ersten Schritt benötigt ihr die &ldquo;Connection Info&rdquo; eures Live-Systems.  Diese befindet sich bei den Werkzeugen unter Migrate DB und dort unter Settings. Außerdem muss der Haken bei &ldquo;Accept <strong>pull</strong> requests allow this database to be exported and downloaded&rdquo; gesetzt sein. Damit erlaubt ihr, dass die Daten von außerhalb heruntergeladen bzw. &ldquo;gezogen&rdquo; (pull) werden dürfen. Das ist eine zusätzliche Sicherheit, um das Kopieren der gesamten Daten von außen zu verhindern. Aus Sicherheitsgründen ist es ratsam, diese Funktion nach der Synchronisierung wieder zu deaktivieren und immer nur bei Bedarf zu aktivieren.</p>
<p>[caption id=&ldquo;attachment_1683&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/wie-richte-in-ein-staging-system-fuer-wordpress-ein/wp-sync-connection-info.png"><img src="/2018/2018-03-11-wie-richte-in-ein-staging-system-fuer-wordpress-ein/images/wp-sync-connection-info-300x133.png" alt="WP Sync Connection Info des Live-Systems"></a> WP Sync Connection Info des Live-Systems[/caption]</p>
<h3 id="die-anbindung-zum-staging-system">Die Anbindung zum Staging-System</h3>
<p>Im Staging-System müsst ihr nun die Connection-Info hinterlegen. Das passiert auf der gleichen Einstellungsseite unter dem Reiter &ldquo;Migrate&rdquo;. Hier können außerdem einige andere Einstellungen vorgenommen werden. Wichtig, und für gewöhnlich automatisch ausgefüllt, ist natürlich die Anpassung der URL und der Pfade in der Datenbank. Hier lassen sich weitere Felder hinterlegen.</p>
<p>[caption id=&ldquo;attachment_1682&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/wie-richte-in-ein-staging-system-fuer-wordpress-ein/wp-sync-migrate-connection-info-hinterlegen.png"><img src="/2018/2018-03-11-wie-richte-in-ein-staging-system-fuer-wordpress-ein/images/wp-sync-migrate-connection-info-hinterlegen-300x155.png" alt="WP Synch Connection Info hinterlegen"></a> WP Synch Connection Info hinterlegen[/caption]</p>
<p>Außerdem könnt ihr auswählen, ob bestimmte Tabellen oder Spam-Kommentare beim Kopieren ignoriert werden sollen. Es gibt eine Menge weitere Optionen. Ich empfehle zunächst den Haken bei &ldquo;Backup the local database before replacing it&rdquo; zu setzen. Sollte jetzt, aus welchen Gründen auch immer, irgendetwas schief gehen, gibt es immer noch ein Backup. Grundsätzlich sollte ihr aber sowieso ein regelmäßiges Backup mit einem anderen Werkzeug anlegen.</p>
<p>Außerdem sollen auch Medien-Dateien synchronisiert werden. Vorsicht: Wer hier einen großen Bestand an Dateien hat, muss natürlich dafür sorgen, dass genügend Speicher frei ist.</p>
<p>Abschließend speichern wir die getroffenen Einstellungen für die nächste Synchronisierung indem wir  <em>Save Migration Profile</em> aktivieren.</p>
<p>Wer übrigens einen anderen Tabellen-Präfix bei der Installation von Wordpress angegeben hat, wird unten eine Warnung erhalten.</p>
<p>Warning: Different Table Prefixes
Whoa! We&rsquo;ve detected that the database table prefix differs between installations. Clicking the Migrate DB button below will create new database tables in your local database with prefix &ldquo;foobar_&rdquo;.</p>
<p>Das ist allerdings kein Problem. Das Tabellen-Präfix der Live-Datenbank wird verwendet und man muss nach dem Prozess den Präfix manuell in der wp-config.php nachtragen:</p>
<p>$table_prefix  = &lsquo;foobar_&rsquo;;</p>
<p>Und dann gehts mit <em>Migrate DB and Save</em> auch schon los. Bei mir hat der Kopiervorgang nur einige Sekunden gedauert. Kurze Zeit danach erscheint das Login-Fenster von Wordpress.</p>
<p>[caption id=&ldquo;attachment_1680&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/wie-richte-in-ein-staging-system-fuer-wordpress-ein/wp-sync-synchronisierungs-prozess.png"><img src="/2018/2018-03-11-wie-richte-in-ein-staging-system-fuer-wordpress-ein/images/wp-sync-synchronisierungs-prozess-300x93.png" alt="WP Synch Synchronisierungsprozess"></a> WP Synch Synchronisierungsprozess[/caption]</p>
<h2 id="mit-wp-staging-und-einem-klick-eine-kopie-erstellen">Mit WP Staging und einem Klick eine Kopie erstellen</h2>
<p>WP Staging erscheint auf den ersten Blick sehr benutzerfreundlich und unkompliziert. Nachdem man einen Namen für die Staging-Seite angegeben hat, legt das Plugin eine komplette Kopie in einem Unterverzeichnis der Haupt-Domain an, also <a href="https://www.nickyreinert.de/staging">https://www.nickyreinert.de/staging</a>. Das ist verblüffend komfortabel. Aber leider auch nicht ganz ohne Probleme. Erstens funktionieren Permalinks nicht ohne weiteres. So ist der Beitrag https://www.nickyreinert.de/staging/coii/ nur über den Direkt-Link erreichbar <a href="https://www.nickyreinert.de/staging/?p=1643">https://www.nickyreinert.de/staging/?p=1643</a></p>
<p>Außerdem befindet sich die Dateien des Staging-System innerhalb des Ordners vom Live-Systen, genauso wird die gleiche Datenbank benutzt. Das finde ich persönlich etwas unsauber und widerspricht außerdem meiner Vorstellung eines getrennten Test-Systems.</p>
<p>Freilich kann (bzw. sollte) man auch diesen Unterordner noch mit einem Passwortschutz versehen, wie ich es weiter oben schon beschrieben habe.</p>
<h2 id="wie-nutze-ich-das-live-staging-system">Wie nutze ich das Live-Staging-System?</h2>
<p>Wenn du dich für den zweiten Weg mit dem WP Staging-Plugin entschieden hast, ist der Prozess natürlich relativ einfach: Per Knopfdruck erzeugst du eine Kopie auf der du Updates auf Kompatibilität testen kannst. Außerdem kannst du hier natürlich auch Änderungen am Layout prüfen, bevor du sie ins Live-System übernimmst. Das ist bequem, aber wie gesagt für meinen Geschmack nicht &ldquo;abgetrennt&rdquo; genug.</p>
<p>Der erste Weg ist etwas anfangs etwas aufwendiger, aber meiner Meinung nach auch sicherer. Den umständlichen Schritt zur Vorbereitung mit dem Duplicator muss man nur einmal ausführen. Danach kann man mit WP Sync DB die Datenbank und sämtliche Mediendateien kopieren, um das Staging-System für Wordpress auf den aktuellen Stand zu bringen. Jetzt lassen sich dort ebenfalls Plugins und Updates auf Kompatibilität prüfen um sie erst danach im Live-System zu installieren.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> WordPress, Staging, Tutorial, DevOps</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>hosting</category>
      
      <category>wordpress</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Wie richte in ein Staging-System für Wordpress ein? - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>tutorial</dc:type>
      
      
    </item>
  </channel>
</rss>