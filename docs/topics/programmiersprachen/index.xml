<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" 
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Programmiersprachen auf Nicky Reinert</title>
    <link>http://localhost:1313/topics/programmiersprachen/</link>
    <description>Blog &amp; Projekte von Nicky Reinert (Institut für digitale Herausforderungen): Webentwicklung &amp; Software Development, SEO &amp; Analytics, Hosting &amp; DevOps, WordPress &amp; Hugo, Tools &amp; Projekte, Datenschutz und digitale Kultur – plus Texte zu KI sowie Autismus &amp; Gesellschaft.</description>
    <generator>Hugo 0.148.2</generator>
    <language>de</language>
    <managingEditor></managingEditor>
    <webMaster></webMaster>
    <copyright></copyright>
    <lastBuildDate>Sun, 04 Jun 2023 12:19:31 +0100</lastBuildDate><atom:link href="http://localhost:1313/topics/programmiersprachen/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>Die Nerd Enzyklopädie 34 - JavaScript wurde innerhalb von 10 Tagen entwickelt</title>
      <link>http://localhost:1313/2023/2023-06-04-nerd-enzyklop%C3%A4die-34---javascript-wurde-innerhalb-von-10-tagen-entwickelt/</link>
      <pubDate>Sun, 04 Jun 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-06-04-nerd-enzyklop%C3%A4die-34---javascript-wurde-innerhalb-von-10-tagen-entwickelt/</guid>
      <description>
JavaScript ist eine der am weitesten verbreiteten Programmiersprachen der Welt und für die Funktion und Popularität des WWW von großer Bedeutung. Während HTML …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine historische Erkundung aus der &#39;Nerd Enzyklopädie&#39; über die Entstehung von JavaScript, das innerhalb von nur 10 Tagen entwickelt wurde. Der Artikel beleuchtet die Notwendigkeit einer Skriptsprache für dynamische Webseiten, die Rolle von Brendan Eich bei Netscape, die Namensentwicklung von Mocha zu JavaScript und Microsofts Reaktion mit JScript.</p>
          
          
          <p><strong>Hauptthemen:</strong> JavaScript, Webentwicklung, Programmiersprachen, IT-Geschichte, Nerd-Kultur, Netscape</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-06-04-nerd-enzyklop%C3%A4die-34---javascript-wurde-innerhalb-von-10-tagen-entwickelt/image1.png" alt=""></p>
<p><strong>JavaScript</strong> ist eine der am weitesten verbreiteten Programmiersprachen der Welt und für die Funktion und Popularität des <strong>WWW</strong> von großer Bedeutung. Während <strong>HTML</strong> die statische Darstellung von Inhalten im Browser ermöglicht, lassen sich dank JavaScript diese Inhalte dynamisch darstellen und modifizieren. JavaScript hat in den letzten Jahrzehnten eine beeindruckende Entwicklung hingelegt, angefangen als <strong>Script-Sprache</strong> innerhalb des Browsers bis hin zur Grundlage für eine leistungsfähige <strong>Webserver-Architektur</strong>.</p>
<p>Es gibt zahlreiche Anwendungsgebiete, sei es als Sprache innerhalb des Datenbanksystems <strong>MongoDB</strong>, für die Entwicklung von Spielen und Anwendungen oder als serverseitige Applikation [<a href="https://thenewstack.io/brendan-eich-on-creating-javascript-in-10-days-and-what-hed-do-differently-today/">THEN1</a>].</p>
<p>JavaScript ist extrem erfolgreich, vielseitig und beliebt. Und alles begann mit einer kleinen Sprache, die <strong>innerhalb von 10 Tagen</strong> entwickelt wurde!</p>
<p>Als das Web noch ganz jung war, wurden Seiten mit HTML dargestellt. HTML war relativ simpel und so musste man keine große Programmierer:in sein, um eigene Inhalte auf die Bühne des Webs zu hieven. Diese Einfachheit war ein wichtiger Erfolgsfaktor für das frühe World Weide Web.</p>
<p>Dank des plattformunabhängigen Browsers <strong>Netscape</strong> waren Webentwickler:innen in der Lage, ihre Programme unkompliziert für unterschiedliche Betriebssysteme zur Verfügung zu stellen. Was fehlte war die Möglichkeit mit den Inhalten zu interagieren. Netscape erkannt das Problem und betraute <strong>1995</strong> <strong>Brendan Eich</strong> mit wichtigen Aufgabe eine Lösung in Form einer entsprechenden Programmiersprache zu entwickeln.</p>
<blockquote>
<p>“But Marc Andreessen of Netscape, Bill Joy of Sun, and myself [Brendan Eich] and a few others saw that there was a need for a language that was approachable, that you could put directly in the web page,”<br>
Brendan Eich, InfoWorld, 2011</p></blockquote>
<p>Anfangs hieß es noch, dass die Programmiersprache <strong>Scheme</strong> als Grundlage dienen könnte. Dann wurde <strong>Java</strong> in Betracht gezogen und so verhandelte Netscape mit <strong>Sun Microsystems</strong>, um Java im hauseigenen Browser zu unterstützen. Aber Java (damals noch <strong>Oak</strong> genannt) war groß und komplex. Sollte die Webentwicklung weiterhin zugänglich sein, war Java nicht die beste Wahl. Es musste eine einfache Lösung her, ähnlich wie <strong>Microsofts</strong> <strong>VisualBasic</strong>, das als Einstiegs-Alternative für <strong>C</strong> oder <strong>C++</strong> galt.</p>
<p>Und so kam es, dass Eich im <strong>Mai 1995</strong> innerhalb von <strong>10 Tagen</strong> einen ersten funktionsfähigen Prototypen von JavaScript entwickelte, da noch unter dem Namen <strong>Mocha</strong>. Mocha wurde erstmal mit dem Netscape Navigator 2.0 vorgestellt. Im <strong>September 1995</strong> änderte man den Namen zu **LiveScript **— Live klang aus Marketingsicht dynamischer. Außerdem hatte Eich die Zeit genutzt, um einen Großteil des Codes aufzuräumen; zehn Tage sind erwartungsgemäß sehr knapp, um eine gewisse Codequalität zu erhalten.</p>
<p>Im <strong>Dezember 1995</strong> wurde dann der Name JavaScript eingeführt, um die Bedeutung als einfache Alternative zu Java zu unterstreichen und sicherlich auch um ein wenig von Javas Popularität zu profitieren. Intern wird die JavaScript-Engine bis heute als <strong>SpiderMonkey</strong> bezeichnet.</p>
<p>Der große Konkurrent auf dem Browser-Markt, <strong>Microsoft</strong>, ließ nicht lange auf sich warten. Im <strong>August 1996</strong> zog man nach und implementierte seine eigene JavaScript-Engine im Internet Explorer: <strong>JScript</strong>. Da man damals aber noch nicht soviel von Standards hielt, war JScript nur bedingt kompatibel zu SpiderMonkey. Nur eine Folge des Browser-Krieges, die in den folgenden Jahren vielen Web-Entwickler:innen Kopfschmerzen und schlaflose Nächte bereiten sollte.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> JavaScript, IT-Geschichte, Nerd-Enzyklopädie, Programmierung</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 34 - JavaScript wurde innerhalb von 10 Tagen entwickelt - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 29 - Programmieren mit Emojis</title>
      <link>http://localhost:1313/2023/2023-05-19-nerd-enzyklop%C3%A4die-29---programmieren-mit-emojis/</link>
      <pubDate>Fri, 19 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-19-nerd-enzyklop%C3%A4die-29---programmieren-mit-emojis/</guid>
      <description>
Texte bestehen aus Sätzen, Sätze bestehen aus Wörtern und Wörter bestehen aus Buchstaben bzw. genauer Schriftzeichen. Wir alle kennen es, das lateinische …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine unterhaltsame Erkundung aus der &#39;Nerd Enzyklopädie&#39; über das Programmieren mit Emojis. Der Artikel erklärt die Grundlagen der Zeichenkodierung (Unicode, UTF-8) und beleuchtet die (begrenzten) Möglichkeiten, Emojis in gängigen Programmiersprachen zu verwenden. Zudem wird &#39;Emojicode&#39; vorgestellt, eine Programmiersprache, die ausschließlich auf Emojis basiert.</p>
          
          
          <p><strong>Hauptthemen:</strong> Programmierung, Emojis, Unicode, Zeichenkodierung, Programmiersprachen, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-19-nerd-enzyklop%C3%A4die-29---programmieren-mit-emojis/image1.png" alt=""></p>
<p>Texte bestehen aus Sätzen, Sätze bestehen aus Wörtern und Wörter bestehen aus Buchstaben bzw. genauer Schriftzeichen. Wir alle kennen es, das lateinische Alphabet, arabische Ziffern aber auch kyrillische Schriftzeichen oder die Sinogramme der chinesischen Schrift. All diese Symbole versteht der Computer dank einer großen Tabelle oder auch „ Zeichensatz“. Als Quasi-Standard hat sich in den letzten Jahren <strong>Unicode</strong> etabliert.</p>
<h2 id="hefte-raus-lerneinheit">Hefte raus, Lerneinheit!</h2>
<p>Ein <strong>Zeichensatz</strong> (engl. „<strong>character set</strong>“) beschreibt die Menge aller verfügbaren Zeichen. Das wäre z.B. ein sehr kleiner Zeichensatz, der nur die Großbuchstaben des lateinischen Alphabets darstellen kann:</p>
<pre><code>[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z]
</code></pre>
<p>Wird jedem Zeichen eine numerische Position zugeordnet, der sogenannte. „<strong>codepoint</strong>“, spricht man von einem <strong>kodierten Zeichensatz</strong> („<strong>coded character set</strong>“). Uns kleines Biespiel sieht dann so aus:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">  1 -&gt; A  
</span></span><span class="line"><span class="ln">2</span><span class="cl">  2 -&gt; B  
</span></span><span class="line"><span class="ln">3</span><span class="cl">  3 -&gt; C  
</span></span><span class="line"><span class="ln">4</span><span class="cl">  …  
</span></span><span class="line"><span class="ln">5</span><span class="cl">  26 -&gt; Z
</span></span></code></pre></div><p>Sehr weit verbreitet ist der Zeichensatz <strong>UCS</strong> (<strong>Universal Coded Character Set</strong>), besser bekannt <strong>Unicode,</strong> der in der <strong>ISO 10646</strong> definiert ist. Theoretisch umfasst Unicode einen Bereich von <strong>1.114.112</strong> codepoints. Diese sind in <strong>17 Ebenen</strong> (<strong>planes</strong>) zu je <strong>16 Bit</strong> aufgeteilt, also 65.536 codepoints pro Ebene. Aufgrund verschiedener technischer Vorgaben sind effektiv <strong>1.111.998</strong> codepoints nutzbar. Unicode enthält nicht nur die uns bekannten Buchstaben von A bis Z, Zahlen und Schriftzeichen anderer Sprachen, sondern mittlerweile auch Emojis:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">😆🫠😇
</span></span></code></pre></div><p>Um jedes der über 1 Mio. Zeichen ansprechen zu können, kann man auf <strong>UTF-32</strong> (<strong>Unicode Transformation Format</strong>) nutzen. UTF-32 besitzt einen 32 Bit (4 Byte) großen Adress-Bereich, um damit jedes beliebige Zeichen in Unicode zu kodieren. Das ist simpel, aber auch eine irrsinnige Platzverschwendung. Der häufigste deutsche Buchstabe „e“ wird wie folgt in UTF-32 kodiert:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    00 00 00 65
</span></span></code></pre></div><p>In binär:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    00000000000000000000000001100101
</span></span></code></pre></div><p>Ein Adress-Bereich mit 4 Byte um ein Zeichen abzubilden, für das 1 Byte ausreicht? Um Platz zu sparen, wurden Algorithmen entwickelt, die zwar etwas aufwendiger codieren, dafür aber weniger Platz verbrauchen. Sehr weit verbreitet ist <strong>UTF-8</strong>, eine — wenn man so will — „dynamische“ Kodierung.</p>
<p>UTF-8 wurde <strong>1992</strong> von <strong>Ken Thompson</strong> und <strong>Rob Pike</strong> entwickelt, zwei Programmierern des Betriebssystems <strong>Plan9</strong> (benannt nach dem gleichnamigen Film „<strong>Plan9 from outer Space</strong>“ von <strong>Ed Wood</strong>, dem angeblich „schlechtesten Science Fiction Film aller Zeiten“) [<a href="https://de.wikipedia.org/wiki/Plan_9_%28Betriebssystem%29">WIKI14</a>].</p>
<p>UTF-8 kodiert den ersten Bereich von Unicode mit 7 Bit — das erste Bit bzw. höchstwertige Bit ist immer 0. Das „e“ wird also folgendermaßen kodiert:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    65
</span></span></code></pre></div><p>In binär:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    01100101
</span></span></code></pre></div><p>Man belegt also nur noch 1 Byte anstatt 4. Will man exotische, also höherwertige Zeichen aus Unicode kodieren, hängt UTF-8 weitere Bytes an, bei denen die höchstwertigen Bits ebenfalls fest gesetzt werden. Das Euro-Zeichen wird in UTF-8 mit 3 Bytes dargestellt:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    E2 82 AC
</span></span></code></pre></div><p>In binär:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    11100010 10000010 10101100
</span></span></code></pre></div><h2 id="zurück-zum-thema">Zurück zum Thema</h2>
<p>Wie du siehst, sind Buchstaben für den Computer auch nur bestimmte Orte in einer großen Tabelle. Da die Unicode-Tabelle auch Emojis umfasst, sollte es doch eigentlich möglich sein, Emojis als Bezeichner für Funktionen und Variablen zu nutzen?</p>
<p>Ganz so leicht ist es leider nicht. Die gängigen Programmiersprachen haben einen festgelegten Bereich von Zeichen, die für derartige Deklarationen zulässig sind. Ein Ausweg sind <strong>Emoticons</strong>, also Zeichen, die als Emoji interpretiert werden können. Vor allem nicht-lateinische Schriften bieten eine Menge Möglichkeiten. In <strong>JavaScript</strong> ist z.B. folgendes möglich:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl">    <span class="k">var</span> <span class="err">ツ</span> <span class="o">=</span> <span class="err">„</span><span class="n">smile</span><span class="err">“</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln">2</span><span class="cl">    <span class="k">var</span> <span class="err">ൠ</span> <span class="o">=</span> <span class="err">„</span><span class="n">alien</span><span class="err">“</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln">3</span><span class="cl">    <span class="n">function</span> <span class="err">ಠ</span><span class="n">_ಠ</span> <span class="p">(){</span><span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="err">“</span><span class="n">Viel</span> <span class="n">Spaß</span> <span class="n">beim</span> <span class="n">Refactoring</span><span class="o">!</span><span class="err">”</span><span class="p">);}</span>
</span></span></code></pre></div><p>Es gibt allerdings auch eine Programmiersprache, die ausschließlich auf Emojis basiert: Emojicode [<a href="https://www.emojicode.org/">EMOJI1</a>]. Erfunden wurde die Sprache von <strong>Theo Weidmann</strong>. Und so sieht „<strong>Hello World</strong>“ in Emojicode aus:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    🏁 🍇  
</span></span><span class="line"><span class="ln">2</span><span class="cl">    😀 🔤Hello World!🔤❗️  
</span></span><span class="line"><span class="ln">3</span><span class="cl">    🍉
</span></span></code></pre></div>
        
        
        <div class="tags">
          <p><strong>Tags:</strong> Programmierung, Emojis, Nerd-Enzyklopädie, Sprache</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 29 - Programmieren mit Emojis - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 28 - Damönen aus der Nase</title>
      <link>http://localhost:1313/2023/2023-05-16-nerd-enzyklop%C3%A4die-28---dam%C3%B6nen-aus-der-nase/</link>
      <pubDate>Tue, 16 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-16-nerd-enzyklop%C3%A4die-28---dam%C3%B6nen-aus-der-nase/</guid>
      <description>
In der Informatik gibt es den Begriff des „undefinierten Verhaltens“ (undefined behaviour) [WIKI7]: Wenn eine Software bzw. Code auf unterschiedlichen Systemen …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Erklärung aus der &#39;Nerd Enzyklopädie&#39; über das Konzept des &#39;undefinierten Verhaltens&#39; in der Informatik, insbesondere in der Programmiersprache C. Der Artikel beleuchtet den Ursprung des humorvollen Ausdrucks &#39;nasal demons&#39; und demonstriert anhand eines einfachen C-Code-Beispiels die unvorhersehbaren Konsequenzen, wenn ein Compiler auf undefiniertes Verhalten trifft.</p>
          
          
          <p><strong>Hauptthemen:</strong> C-Programmierung, Undefined Behavior, Compiler, Softwareentwicklung, Nerd-Kultur, Programmiersprachen</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-16-nerd-enzyklop%C3%A4die-28---dam%C3%B6nen-aus-der-nase/image1.png" alt=""></p>
<p>In der Informatik gibt es den Begriff des <strong>„undefinierten Verhaltens“</strong> (<strong>undefined behaviour</strong>) [<a href="https://en.wikipedia.org/wiki/Undefined_behavior">WIKI7</a>]: Wenn eine Software bzw. Code auf unterschiedlichen Systemen zu unterschiedlichen Ergebnissen führt, was natürlich nicht vorkommen darf, spricht man von eben diesem „undefinierten Verhalten“. In der Programmiersprache C hat sich dafür der Begriff „<strong>nasal demons</strong>“ etabliert. Den Ursprung hat dieser Ausspruch in der Usenet Gruppe <strong>comp.std.c</strong> und einer Diskussion in <strong>1992</strong>. Ein Nutzer meinte damals:</p>
<blockquote>
<p>“When the compiler encounters [a given undefined construct] it is legal for it to make demons fly out of your nose” [<a href="http://catb.org/jargon/html/N/nasal-demons.html">CATB</a>]</p></blockquote>
<p>Übersetzt also: Trifft der Compiler auf ein „<strong>undefiniertes Konstrukt</strong>“, sollte es ihm erlaubt sein, Dämonen aus deiner Nase fliegen zu lassen.</p>
<p>Ein einfaches Beispiel in C ist z.B. dieses [<a href="https://accu.org/journals/overload/21/115/maudel_1857/">ACCU1</a>]:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    bool b;  
</span></span><span class="line"><span class="ln">2</span><span class="cl">    if (b)  
</span></span><span class="line"><span class="ln">3</span><span class="cl">      printf(“b is true\n”);  
</span></span><span class="line"><span class="ln">4</span><span class="cl">    if (!b)  
</span></span><span class="line"><span class="ln">5</span><span class="cl">      printf(“b is false\n”);
</span></span></code></pre></div><p>B wird als Boolesche Variable deklariert, aber nicht initialisiert. Es ist also nicht eindeutig klar, ob B wahr oder falsch ist. Der Compiler darf machen, “was er will”. Wie z.B. <strong>Dämonen aus deiner Nase fliegen</strong> lassen…</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> C, Programmierung, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 28 - Damönen aus der Nase - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 26 - FOCAL</title>
      <link>http://localhost:1313/2023/2023-05-10-nerd-enzyklop%C3%A4die-26---focal/</link>
      <pubDate>Wed, 10 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-10-nerd-enzyklop%C3%A4die-26---focal/</guid>
      <description>
FOCAL (für Formulating On-line Calculations in Algebraic Language) ist eine Programmiersprache, die 1968 erstmals vorgestellt wurde. Entwickelt wurde sie von …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine historische Erkundung aus der &#39;Nerd Enzyklopädie&#39; über die Programmiersprache FOCAL (Formulating On-line Calculations in Algebraic Language), entwickelt 1968 von Richard Merrill (DEC). Der Artikel beleuchtet FOCALs Einsatz auf PDP-Computern, seine Ähnlichkeit mit BASIC, die Gründe für seine begrenzte Popularität (u.a. durch eine Anekdote über Microsoft) und seinen kurzen zweiten Frühling in der Sowjetunion.</p>
          
          
          <p><strong>Hauptthemen:</strong> Programmiersprachen, Computergeschichte, DEC, BASIC, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-10-nerd-enzyklop%C3%A4die-26---focal/image1.png" alt=""></p>
<p><strong>FOCAL</strong> (für <strong>Formulating On-line Calculations in Algebraic Language</strong>) ist eine Programmiersprache, die <strong>1968</strong> erstmals vorgestellt wurde. Entwickelt wurde sie von <strong>Richard Merrill</strong> von <strong>DEC</strong>, Digital Equipment Corporation.</p>
<p>FOCAL war für den Einsatz auf den <strong>PDP</strong> Computern gedacht (<strong>Programed Data Processors</strong>). <strong>1969</strong> veröffentliche <strong>Jim Storer,</strong> damals Schüler an der <strong>Lexington High School</strong>, für den <strong>PDP-8</strong> das in FOCAL geschrieben Spiel <strong>Lunar Lander</strong>. Der Programmcode bestand aus nur 40 Zeilen! FOCAL ist vergleichbar mit <strong>BASIC</strong>; aber bei weitem nicht so populär. Ein Grund war sicherlich die strenge Lizenzierungs-Politik von DEC. Aber auch <strong>Microsoft</strong> könnte, wenn man diese Spekulation zulässt, seinen Teil zum Misserfolg von FOCAL beigetragen haben.</p>
<p>Microsoft vertrieb damals einen FOCAL-Interpreter. <strong>1980</strong> wurde der Verkauf aber eingestellt. Der Grund ist banal: Nachdem eine Bestellung für diese Software einging, konnte man das <strong>Master-Tape</strong> nicht mehr finden, um eine Kopie anzufertigen. Die Bestellung wurde kurzerhand mit dem Hinweis storniert, dass das Produkt nicht mehr verkauft wird. Dass es vermutlich einfach nur „verloren“ ging, behielt man für sich [<a href="https://devblogs.microsoft.com/oldnewthing/20200616-00/?p=103869">MICR3</a>].</p>
<p>In der damaligen Sowjetunion erlebte FOCAL Mitte der <strong>1980er</strong> Jahre einen zweiten Frühling. Der russische Heimcomputer <strong>Electronica BK</strong>, eine Kopie des <strong>PDP-11</strong>, wurde zusammen mit FOCAL ausgeliefert. Aber auch dort wurde FOCAL später durch BASIC verdrängt…</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Programmiersprache, IT-Geschichte, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 26 - FOCAL - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 24 - Zeichenketten braten</title>
      <link>http://localhost:1313/2023/2023-05-04-nerd-enzyklop%C3%A4die-24---zeichenketten-braten/</link>
      <pubDate>Thu, 04 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-04-nerd-enzyklop%C3%A4die-24---zeichenketten-braten/</guid>
      <description>
Nerd-Enzyklopädie #24
Ganz frei nach dem Motto: Es gibt nichts, was man nicht braucht (oder so ähnlich) hat man sich bei der Programmiersprache C wohl gedacht …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Vorstellung der C-Funktion &#39;strfry&#39; aus der &#39;Nerd Enzyklopädie&#39;. Der Artikel erklärt, wie diese Funktion eine Zeichenkette zufällig neu anordnet, um ein Anagramm zu erzeugen, und beleuchtet die Kuriosität solcher Funktionen in Programmiersprachen.</p>
          
          
          <p><strong>Hauptthemen:</strong> C-Programmierung, Zeichenketten, Algorithmen, Nerd-Kultur, Programmiersprachen</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-04-nerd-enzyklop%C3%A4die-24---zeichenketten-braten/image1.png" alt=""></p>
<p>Nerd-Enzyklopädie #24</p>
<p>Ganz frei nach dem Motto: Es gibt nichts, was man nicht braucht (oder so ähnlich) hat man sich bei der <strong>Programmiersprache C</strong> wohl gedacht und eine Funktion implementiert, die aus einer Zeichenkette ein Anagram erzeugt [<a href="https://man7.org/linux/man-pages/man3/strfry.3.html">MAN1</a>]:</p>
<pre><code>strfry
</code></pre>
<p>Ausgesprochen steht <strong>strfry</strong> für „<strong>string fry</strong>“, also „<strong>Zeichenkette braten</strong>“ und diese Funktion macht nichts anderes, als die Zeichen eines Strings zufällig neu anzuordnen:</p>
<pre><code>strfy(„Hello World“)  
eoWloHl dlr
</code></pre>
<p>Guten Appetit.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> C, Programmierung, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 24 - Zeichenketten braten - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 20 - Elvis und Raumschiffe</title>
      <link>http://localhost:1313/2023/2023-04-22-nerd-enzyklop%C3%A4die-20---elvis-und-raumschiffe/</link>
      <pubDate>Sat, 22 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-04-22-nerd-enzyklop%C3%A4die-20---elvis-und-raumschiffe/</guid>
      <description>
Wer sich mit der Entwicklung von Software beschäftigt wird früher oder später über seltsam anmutende Abkürzungen stolpern mit denen sich ausufernder …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Erklärung aus der &#39;Nerd Enzyklopädie&#39; über zwei spezielle Operatoren in Programmiersprachen: den &#39;Elvis Operator&#39; (&#39;?:&#39;), der einen Standardwert zuweist, wenn eine Variable null oder falsch ist, und den &#39;Spaceship Operator&#39; (&#39;&lt;=&gt;&#39;), der einen Drei-Wege-Vergleich durchführt. Der Artikel beleuchtet die Herkunft ihrer ungewöhnlichen Namen.</p>
          
          
          <p><strong>Hauptthemen:</strong> Programmierung, Operatoren, Programmiersprachen, Nerd-Kultur, Humor</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-04-22-nerd-enzyklop%C3%A4die-20---elvis-und-raumschiffe/image1.png" alt=""></p>
<p>Wer sich mit der Entwicklung von Software beschäftigt wird früher oder später über seltsam anmutende Abkürzungen stolpern mit denen sich ausufernder Programmcode zu einem kompakten Kunstwerk aufwerten lässt. Dazu zählen z.B. <strong>ternäre Operatoren,</strong> die langweilige **if-then-**Bedingungen in einfache Einzeiler verwandeln:</p>
<pre><code>sAllGoodMan = foo == bar ? true : false;
</code></pre>
<p>Hier wird die boolesche Variable <strong>sAllGoodMan</strong> auf <strong>True</strong> gesetzt, wenn die Werte von <strong>foo</strong> und <strong>bar</strong> identisch sind, andernfalls ist <strong>sAllGoodMan =</strong> <strong>False</strong>.<br>
Weitaus weniger bekannt ist die gehobene Variante des ternären Operators, der sogenannte <strong>Elvis-Operator,</strong> der nur aus einem Fragezeichen gefolgt von einem Doppelpunkt besteht:</p>
<pre><code>?:
</code></pre>
<p>Und was kann der Elvis-Operator, außer gut aussehen und nicht singen? Er weist einer Variable einen Standard-Wert zu, wenn eine andere Variable <strong>Null</strong> oder <strong>Falsch</strong> ist:</p>
<pre><code>myValue = aValue ?: „default“;
</code></pre>
<p>Wenn die Variable <strong>aValue</strong> nicht gesetzt wurde und damit <strong>Null</strong> oder <strong>Falsch</strong> ist (die Interpretation von „nicht gesetzt“ kann von der jeweiligen Programmiersprache abhängen), wird der Variable myValue der Standard-Wert default zugewiesen. Das funktioniert natürlich auch mit dem Rückgabewert von Funktionen:</p>
<pre><code>Name = getName(‚id‘) ?: „John Doe“;
</code></pre>
<p>Kann kein Name ermittelt werden, wird als Standardname „<strong>John Doe</strong>“ verwendet.</p>
<p>Seinen Namen hat der Elvis-Operator von dem Fragezeichen, das zusammen mit dem Doppelpunkt ein Emoticon darstellt, das an Elvis Presley erinnern soll.</p>
<p>Eine andere weniger bekannte Abkürzung ist der <strong>Spaceship-Operator</strong>:</p>
<pre><code>&lt;==&gt;
</code></pre>
<p>Dieser führt einen <strong>3-Wege-Vergleich</strong> durch und heißt deswegen ganz offiziell eigentlich <strong>Drei-Wege-Vergleichsoperator</strong>. Der Spaceship-Operator erlaubt zwei Element auf drei Arten zu vergleichen, größer, kleiner oder gleich:</p>
<pre><code>A &lt; B, A == B, A &gt; B
</code></pre>
<p>Der Spaceship-Operator fasst die drei Vergleiche zusammen und liefert -1 für kleiner, 0 für genau gleich groß und +1 für größer als zurück.</p>
<p>Die Verbindung zu einem Raumschiff geht angeblich auf das Spiel <strong>Star Trek</strong> von <strong>1971</strong> zurück — dort wurde ein Raumschiff genau so abgebildet: <strong>&lt;==&gt;</strong>.<br>
Die Fraktion der <strong>StarWars-Fans</strong> sieht das anders. Dort wird behauptet, dass <strong>&lt;==&gt;</strong> eher an den <strong>Tie Fighter</strong> aus Star Wars erinnert.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Programmierung, Operatoren, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 20 - Elvis und Raumschiffe - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 10 - Brainfuck</title>
      <link>http://localhost:1313/2023/2023-03-22-nerd-enzyklop%C3%A4die-10---brainfuck/</link>
      <pubDate>Wed, 22 Mar 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-03-22-nerd-enzyklop%C3%A4die-10---brainfuck/</guid>
      <description>Die Behauptung ist natürlich starker Tobak. Bei Brainfuck handelt es sich um eine sogenannte “esoterische Programmiersprache”, entworfen vom Schweizer Urban …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Einführung aus der &#39;Nerd Enzyklopädie&#39; in die esoterische Programmiersprache Brainfuck. Der Artikel erklärt die acht minimalistischen Befehle der Sprache, demonstriert ihre Komplexität anhand eines &#39;Hello World!&#39;-Beispiels und beleuchtet ihren Zweck als Lernwerkzeug oder Coding-Challenge, anstatt für den produktiven Einsatz.</p>
          
          
          <p><strong>Hauptthemen:</strong> Programmiersprachen, Esoterische Programmierung, Informatik, Nerd-Kultur, Algorithmen</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Die Behauptung ist natürlich starker Tobak. Bei <strong>Brainfuck</strong> handelt es sich um eine sogenannte “<strong>esoterische Programmiersprache</strong>”, entworfen vom Schweizer <strong>Urban Müller</strong>. Brainfuck sollte eigentlich leicht zu lernen sein, da sie gerade einmal <strong>acht Befehle</strong> umfasst, die jeweils nur aus <strong>einem Zeichen</strong> bestehen. Was soll da schon schief gehen?</p>
<p>Eine ganze Menge. Denn diese besondere Eigenschaft dürfte das Programmieren ein wenig erschweren. Was nicht heißt, dass es unmöglich ist. Probier es doch mal aus. Das sind die acht Befehle, die du kennen musst:</p>
<pre><code>+ Wert der aktuellen Zelle inkrementieren  
- Wert der aktuellen Zelle dekremeWentieren  
&gt; Zeiger inkrementieren  
&lt; Zeiger dekrementieren  
[ Schleifen-Start  
] Schleifen-Ende  
. aktuellen Zellenwert ausgeben (zur Standardausgabe)  
, aktuellen Zellenwert einlesen (von Standardausgabe)
</code></pre>
<p>Fertig? Herzlich Glückwunsch, du kannst jetzt „Brainfuck“! und hast nun bestimmt kein Problem damit, diese „<strong>Hello World!</strong>“-Implementierung in Brainfuck zu verstehen [<a href="https://en.wikipedia.org/wiki/Brainfuck">WIKI13</a>]:</p>
<pre><code>++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt; — -.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++. — — — . — — — — .&gt;&gt;+.&gt;++.
</code></pre>
<p><strong>Brainfuck</strong> ist für den produktiven Einsatz natürlich kaum geeignet, sondern eher um das Konzept der Programmierung zu vermitteln oder für eine gemütliche Coding-Challenge am sonntäglichen Frühstückstisch.</p>
<p>Übrigens: Die Programmiersprache mit den meisten Keywords, nämlich <strong>217</strong>, heißt <strong>Visual Basic</strong>. [<a href="https://github.com/e3b0c442/keywords#c-ansi-c89-32-keywords">GITH2</a>].</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Programmiersprache, Nerd-Enzyklopädie, Humor, Informatik</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 10 - Brainfuck - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item>
  </channel>
</rss>