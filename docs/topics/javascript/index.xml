<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" 
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>JavaScript auf Nicky Reinert</title>
    <link>https://nickyreinert.de/topics/javascript/</link>
    <description>Blog &amp; Projekte von Nicky Reinert (Institut für digitale Herausforderungen): Webentwicklung &amp; Software Development, SEO &amp; Analytics, Hosting &amp; DevOps, WordPress &amp; Hugo, Tools &amp; Projekte, Datenschutz und digitale Kultur – plus Texte zu KI sowie Autismus &amp; Gesellschaft.</description>
    <generator>Hugo 0.148.2</generator>
    <language>de</language>
    <managingEditor></managingEditor>
    <webMaster></webMaster>
    <copyright></copyright>
    <lastBuildDate>Wed, 21 Apr 2021 08:01:31 +0100</lastBuildDate><atom:link href="https://nickyreinert.de/topics/javascript/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>Maze!</title>
      <link>https://nickyreinert.de/2021/2021-04-21-maze-game/</link>
      <pubDate>Wed, 21 Apr 2021 08:01:31 +0100</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2021/2021-04-21-maze-game/</guid>
      <description>&ldquo;Maze&rdquo; ist ein in JavaScript geschriebenes Browser-Spiel, bei dem es darum geht, in möglichst kurzer Zeit ein Labyrinth zu lösen. Das Labyrinth …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine kurze Vorstellung des Browser-Spiels &#34;Maze&#34;, das in JavaScript geschrieben wurde. Ziel des Spiels ist es, ein Labyrinth in kürzester Zeit zu lösen. Der Artikel erwähnt Konfigurations- und Exportmöglichkeiten und verlinkt auf das Spiel.</p>
          
          
          <p><strong>Hauptthemen:</strong> JavaScript, Browser-Spiel, Game-Development, Projekte</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>&ldquo;Maze&rdquo; ist ein in JavaScript geschriebenes Browser-Spiel, bei dem es darum geht, in möglichst kurzer Zeit ein Labyrinth zu lösen. Das Labyrinth lässt sich mit verschiedenen Parameter steuern und sogar exportieren.</p>
<p><a href="https://nickyreinert.github.io/maze/">https://nickyreinert.github.io/maze/</a></p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> JavaScript, Game, Projekt, Maze</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>projekte</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Maze! - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>project_showcase</dc:type>
      
      
    </item><item>
      <title>WordPress Word Cloud 2.0</title>
      <link>https://nickyreinert.de/2020/2020-06-09-wordpress-word-cloud-2-0/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2020/2020-06-09-wordpress-word-cloud-2-0/</guid>
      <description>Mein Word Cloud Plugin für WordPress liegt in einer neuen Version vor! Die Word Cloud unterstützt nun OCR, Tags, interne und externe Quellen und vieles mehr. Da …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine umfassende Dokumentation für die Version 2.0 des Plugins &#34;WP Word Cloud&#34;. Der Artikel beschreibt die erweiterten Funktionen, darunter die Erstellung von Wortwolken aus diversen Quellen (URL, SQL, Post-ID), eine interaktive Frontend-Bearbeitung und eine clientseitige Texterkennung (OCR) für Bilder. Es wird eine detaillierte Anleitung zur Installation und zur Verwendung aller Shortcode-Parameter gegeben.</p>
          
          
          <p><strong>Hauptthemen:</strong> WordPress, Plugins, Datenvisualisierung, JavaScript, OCR, Tesseract.js</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>Mein Word Cloud Plugin für WordPress liegt in einer neuen Version vor! Die Word Cloud unterstützt nun <strong>OCR</strong>, <strong>Tags</strong>, <strong>interne</strong> und <strong>externe Quellen</strong> und vieles mehr. Da ich also sehr viele grundlegende Änderungen vorgenommen habe, gibt es an dieser Stelle eine komplett neue Dokumentation. Viel Spass.</p>
<h2 id="was-ist-eine-word-cloud">Was ist eine Word Cloud?</h2>
<p>Eine <strong>Word Cloud</strong>, auch <strong>Schlagwortwolke</strong>, <strong>Wortwolke</strong> usw., dient der besseren Visualisierung von Texten. Um eine Word Cloud zu erstellen, werden die Vorkommen von Wörtern eines Textes gezählt. Die Wörter mit der größten <strong>Häufigkeit</strong> werden groß dargestellt, Wörter mit geringerer Häufigkeit weniger groß. Und das ganze wird dann in einer <strong>Wolkenform</strong> dargestellt, mit den größten Wörtern in der Mitte.</p>
<p>So ist es möglich auf einen Blick zu erkennen, welche Wörter in einem Text am häufigsten vorkommen. Das ist nicht nur bei der Analyse von Texten sondern auch von Webseiten nützlich. So kannst du z.B. bei WordPress eine Word Cloud aus Tags erstellen (<strong>Tag Cloud</strong>), anhand der man sehen kann, welche Tags auf einer Seite am meisten verwendet wurden.</p>
<p>Die folgende Word Cloud zeigt auf einen Artikel, <a href="https://www.nickyreinert.de/wie-erstelle-ich-ein-labyrinth-mit-javascript/">in dem ich einen Algorithmus beschreibe, um in JavaScript ein Labyrinth zu erstellen</a>:</p>
<p>[wp-word-cloud source-type=&ldquo;id&rdquo; id=&ldquo;demo1&rdquo; size-factor=50 min-alpha=0.5 count-words=1]3334[/wp-word-cloud]</p>
<h2 id="was-kann-dieses-plugin">Was kann dieses Plugin?</h2>
<p><strong>WP Word Cloud</strong> stellt einen Shortcode zur Verfügung, mit dem du beliebig viele <strong>Word Clouds</strong> auf deinen Seiten einfügen kannst. Du kannst verschiedene Quellen nutzen, um dort die Wörter zu zählen und in einer <strong>Word Cloud</strong> darstellen zu lassen.</p>
<ul>
<li>inline - du gibst den Text direkt im Shortcode im Beitrag an</li>
<li>url - ein Verweis auf eine Internetadresse</li>
<li>id - der Verweis auf eine Seite / einen Beitrag</li>
<li>sql - eine SQL-Abfrage um Text aus der Datenbank zu lesen</li>
<li>custom-field - Text aus einem custom field des Beitrages / der Seite</li>
<li>Text, den der Besucher der Webseite selber eingeben kann</li>
<li>Text von einem Bild, das der Besucher der Website hochlädt</li>
</ul>
<p>Das Plugin greift auf zwei sehr großartige Bibliotheken zurück: WodCloud2.js von TimDream (<a href="https://github.com/timdream/wordcloud2.js/">github.com</a>). Sowie die Offline-Implementierung von Tesseract in JavaScript (<strong><a href="https://github.com/jeromewu/tesseract.js-offline">github.com</a></strong>).</p>
<h2 id="installation">Installation</h2>
<h3 id="über-die-kommandozeile">Über die Kommandozeile</h3>
<p>Wenn du Zugriff auf deinen Server über SSH hast, kannst du das Plugin folgendermaßen installieren:</p>
<p>Wechsle in den Plugin-Ordner deiner WordPress-Installation und lege dort einen neuen Ordner an: WP-Word-Cloud, wechsle danach in diesen Ordner:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">mkdir /htdocs/wp-content/plugins/WP-Word-Cloud
</span></span><span class="line"><span class="ln">2</span><span class="cl">cd /htdocs/wp-content/plugins/WP-Word-Cloud
</span></span></code></pre></div><p>Danach kannst du das Plugin-Repository mit git klonen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">git clone https://github.com/nickyreinert/wordCloud-for-Wordpress.git .
</span></span></code></pre></div><p>Wenn du git nicht benutzen möchtest oder kannst, kannst du das Plugin auch mit wget herunterladen und dann entpacken. Dann musst du den Plugin-Ordner allerdings nicht selber erstellen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">cd /htdocs/wp-content/plugins/
</span></span><span class="line"><span class="ln">2</span><span class="cl">wget https://github.com/nickyreinert/wordCloud-for-Wordpress/archive/wordCloud-for-wordPress-2.zip --no-check-certificate
</span></span><span class="line"><span class="ln">3</span><span class="cl">unzip wordCloud-for-wordPress-2.zip -d WP-Word-Cloud
</span></span></code></pre></div><h3 id="mit-einem-ftp-programm">Mit einem FTP-Programm</h3>
<p>Wenn du keinen Zugriff auf die Kommandozeile hast, kannst du das Plugin von dieser Adresse herunterladen:</p>
<p><a href="https://github.com/nickyreinert/wordCloud-for-Wordpress/archive/wordCloud-for-wordPress-2.zip">https://github.com/nickyreinert/wordCloud-for-Wordpress/archive/wordCloud-for-wordPress-2.zip</a></p>
<p>Danach entpackst du das Archiv und lädst den kompletten Ordner in das Plugin-Verzeichnis deiner WordPress-Installation. Du kannst den Ordner mit dem FTP-Programm dann umbenennen:</p>
<p><img src="/2020/2020-06-09-wordpress-word-cloud-2-0/images/grafik.png" alt=""></p>
<p>Der Order für das Word Cloud Plugin</p>
<h2 id="abschluss-der-installation">Abschluss der Installation</h2>
<p>Abschließend muss das Plugin noch im Backend von WordPress aktiviert werden. Dazu suchst du im Plugin-Bereich nach dem Eintrag &ldquo;WP Word Cloud&rdquo; und klickst auf &ldquo;aktivieren&rdquo;. Fertig.</p>
<p><img src="/2020/2020-06-09-wordpress-word-cloud-2-0/images/grafik-1-700x70.png" alt=""></p>
<p>Aktiviere das Plugin in der Plugin-Übersicht von WordPress</p>
<h2 id="erste-verwendung">Erste Verwendung</h2>
<p>Das Plugin aktiviert für deine WordPress-Installation einen neuen Shortcode: <strong>[ wp-word-cloud ]</strong>. Diesen kannst du nun auf jeder Seite und in jedem Beitrag beliebig oft einfügen. Wenndu den <strong>Gutenberg-Editor</strong> verwendest, benötigst du dafür den Block &ldquo;<strong>Shortcode</strong>&rdquo;. Im konventionellen Editor kannst du den Shortcode einfach in deinen Text einfügen.<br>
Eine einfache Implementierung sieht z.B. so aus:</p>
<p><code>[ wp-word-cloud source-type=&quot;url&quot; id=&quot;meine-word-cloud&quot; ]https://www.spiegel.de[ /wp-word-cloud ]</code></p>
<p>Es gibt <strong>drei Parameter</strong>, die du <strong>immer</strong> angeben musst:</p>
<ul>
<li><strong>id</strong>, eine eindeutige Id, mit der die <strong>Word Cloud</strong> auf deiner Seite angesprochen wird, z.B. <strong>meine-word-cloud</strong> oder einfach nur <strong>test</strong></li>
<li><strong>source-type</strong>, welcher Art die Quelle für die Word Cloud ist, also z.B. von einer <strong>url</strong> oder den <strong>tags</strong></li>
<li>sowie Inline-Text, als Verweis auf die Quelle, von wo der Inhalt für die Word Cloud kommt, also z.B. die URL <strong><a href="https://www.spiegel.de">https://www.spiegel.de</a></strong> oder die Id eines Beitrages (123)</li>
</ul>
<h2 id="zusätzliche-einstellungen">Zusätzliche Einstellungen</h2>
<p>Natürlich gibt es noch <strong>eine Menge weiterer Parameter</strong>, mit denen du das Erscheinungsbild der Word Cloud steuern kannst. Das Plugin setzt bei der ersten Installation für all diese Parameter <strong>Standard-Einstellungen</strong> fest. Diese sind grundsätzlich <strong>global gültig</strong> und können auf der Einstellungseite angepasst werden:</p>
<p><img src="/2020/2020-06-09-wordpress-word-cloud-2-0/images/grafik-2.png" alt=""></p>
<p>In den Einstellungen findest du eine eigene Seite für das WP Word Cloud Plugin - wunderbar!</p>
<p>Jeden dieser globalen Parameter kannst du auch in deinem Shortcode verwenden. So wir die globale Einstellung überschrieben. So ist die <strong>Hintergrundfarbe</strong> z.B. standardmäßig <strong>transparent</strong> eingestellt. Möchtest du sie für die aktuelle Word Cloud auf <strong>grün und halbtransparent</strong> ändern, übergibst du einfach den Parameter <strong>background-color</strong> folgendermaßen:</p>
<p><code>[ wp-word-cloud source-type=&quot;url&quot; id=&quot;meine-word-cloud&quot; background-color=&quot;rgba(0,255,255,0.5)&quot; ]https://www.spiegel.de[ /wp-word-cloud ]</code></p>
<p>Eine genaue Beschreibung aller Parameter folgt jetzt:</p>
<h2 id="parameter">Parameter</h2>
<h3 id="id">id</h3>
<p>Dieser Parameter ist für jeden Shortcode, den du einfügst, <strong>verpflichtend</strong>! Die Id adressiert jede Word Cloud auf einer Seite oder in einem Beitrag. Damit ist es möglich, mehrere Word Clouds gleichzeitig einzubinden. Mit der Id kannst du außerdem das Aussehen der Word Cloud mit CSS steuern. Beispiel:</p>
<p><code>[ wp-word-cloud source-type=&quot;inline&quot; id=&quot;wordcloud1&quot; ]Lorem Ipsum[ /wp-word-cloud ]</code></p>
<p><code>[ wp-word-cloud source-type=&quot;inline&quot; id=&quot;wordcloud2&quot; ]Lorem Ipsum[ /wp-word-cloud ]</code></p>
<h3 id="source-type"><strong>source-type</strong></h3>
<p>Damit legst du fest, um was für eine Quelle es sich handelt. Dieser Parameter ist <strong>verpflichtend</strong>. Die folgenden Quellen werden unterstützt:</p>
<h4 id="source-typeinline">source-type=inline</h4>
<p>Der Text wird innerhalb des Shortcodes übermittelt, z.B:</p>
<p><code>[ wp-word-cloud source-type=inline id=&quot;demo&quot; ]Lorem Ipsum[ /wp-word-cloud ]</code></p>
<h4 id="source-typeurl">source-type=<strong>url</strong></h4>
<p>Im Shortcode wird eine URL angegeben, von der der Text abgerufen wird, z.B:</p>
<p><code>[ wp-word-cloud source-type=url id=&quot;demo&quot; ]https://www.spiegel.de[ /wp-word-cloud ]</code></p>
<h4 id="source-typeid">**source-type=**id</h4>
<p>Im Shortcode wird eine Id übergeben, die auf eine Seite oder einen Beitrag deiner Webseite verweist, z.B:</p>
<p><code>[ wp-word-cloud source-type=id id=&quot;demo&quot; ]123[ /wp-word-cloud ]</code></p>
<h4 id="source-typesql">source-type=sql</h4>
<p>Im Shortcode wird eine SQL-Abfrage übergeben, die eine bereits gezählte Wortliste zurück gibt, z.B:</p>
<p><code>[ wp-word-cloud source-type=sql id=&quot;demo&quot;]SELECT word,count FROM table;[ /wp-word-cloud]</code></p>
<h4 id="source-typetags">source-type=tags</h4>
<p>Die Word Cloud zeigt alle Tags deiner Seite an, hier musst du im Shortcode nichts weiter übergeben:</p>
<p><code>[ wp-word-cloud source-type=tags id=&quot;demo&quot;]SELECT word,count FROM table;[ /wp-word-cloud]</code></p>
<h4 id="source-typecustom-field">source-type=custom-field</h4>
<p>Im Shortcode wird auf ein custom field, also benutzerdefiniertes bzw. eigenes Feld verwiesen, z.B:</p>
<p><code>[ wp-word-cloud source-type=custom-field id=&quot;demo&quot;]my-custom-field[ /wp-word-cloud]</code></p>
<p>Die Darstellung der <strong>eigenen Felder</strong> musst du im Gutenberg-Edito ggf. erst aktivieren. Klicke dazu das Punkt-Menü und dann ganz unten auf &ldquo;Ansicht anpassen&rdquo;. Es öffnet sich nun eine Liste, in der du die &ldquo;eigenen Felder&rdquo; aktivieren kannst:</p>
<ul>
<li>
<p><img src="/2020/2020-06-09-wordpress-word-cloud-2-0/images/grafik-10.png" alt=""></p>
</li>
<li>
<p><img src="/2020/2020-06-09-wordpress-word-cloud-2-0/images/grafik-11-700x1059.png" alt=""></p>
</li>
</ul>
<p>Anzeigen der benutzerdefinierten Felder im Gutenberg-Editor</p>
<h3 id="count-words"><strong>count-words</strong></h3>
<p>Wenn die im Shortcode angegebene Quelle einen kompletten Text enthält, müssen die Wörter darin erst gezählt werden. Dazu muss <strong>count-words</strong> auf <strong>1</strong> gesetzt werden. Ist <strong>count-words=0</strong> gesetzt, erwartet das Plugin eine List mit gezählten Wörtern.</p>
<h3 id="enable-frontend-edit"><strong>enable-frontend-edit</strong></h3>
<p>Ist dieser Parameter auf 1 gesetzt, wird auf der Seite ein Textfeld angezeigt. Das Textfeld enthält den Text, der mit dem Shortcode definiert wurde. Der Besucher kann den Text dann beliebig verändern oder eigenen Text hinzufügen, um so die <strong>Word Cloud</strong> selber zu steuern. Die Berechnung der <strong>Word Cloud</strong> findet im Browser statt. Im folgenden Beispiel kommt der Text von einem benutzerdefiniertem Feld im Backend. Er wird an das Frontend ausgeliefert und dort in der Word Cloud dargestellt. Gleichzeitig kann man den Text aber auch anpassen und die Wolke neu zeichnen lassen:</p>
<p><code>[ wp-word-cloud source-type=&quot;custom-field&quot; enable-frontend-edit</code>=1 <code>id=&quot;demo&quot;]my-custom-field[ /wp-word-cloud]</code></p>
<p><img src="/2020/2020-06-09-wordpress-word-cloud-2-0/images/grafik-8-700x755.png" alt=""></p>
<p>Ein Textfeld für die Besucher deiner Webseite</p>
<h3 id="ocr---texterkennung">OCR - Texterkennung</h3>
<h4 id="enable-ocr"><strong>enable-ocr</strong></h4>
<p>Ist dieser Parameter auf 1 gesetzt, kann der Benutzer auf der Webseite ein Bild hochladen oder mit der Kamera aufnehmen. Im Browser findet dann eine Text-Erkennung statt. Die Wörter werden dann gezählt und die Word Cloud darauf basierend gezeichnet. Wenn <strong>enable-frontend-edit</strong> nicht aktiv ist, hat dieser Parameter keine Wirkung.</p>
<p><code>[ wp-word-cloud source-type=&quot;custom-field&quot; enable-frontend-edit=1 enable-ocr=1 id=&quot;demo&quot;]my-custom-field[ /wp-word-cloud]</code></p>
<p>Für diese Funktionalität greift das Plugin auf die <a href="https://tesseract.projectnaptha.com/">Tesseract-Bibliothek</a> zurück. Diese ermöglicht die Texterkennung von abfotografierten Dokumenten in verschiedenen Sprachen. Die Texterkennung erfolgt komplett im Browser, also beim Besucher der Webseite. Das Bild wird <strong>nicht zum Server hochgeladen</strong>.</p>
<h4 id="ocr-language">ocr-language</h4>
<p>Mit diesem Parameter legst du fest, welche Sprache(n) das ORC-Modul unterstützen soll. Standardmäßig ist hier deu eingestellt. Du kannst mehre Sprachen angeben, wenn du sie mit einem + trennst, z.B. Deutsch + Englisch:</p>
<p><code>`[ wp-word-cloud source-type=&quot;custom-field&quot; enable-frontend-edit=1 enable-ocr=1 ocr-language=&quot;deu+eng&quot; id=&quot;demo&quot;]my-custom-field[ /wp-word-cloud]`</code></p>
<p>Eine Liste aller unterstützten Sprachpakete findest du hier:</p>
<p><a href="https://tesseract-ocr.github.io/tessdoc/Data-Files#data-files-for-version-400-november-29-2016">https://tesseract-ocr.github.io/tessdoc/Data-Files#data-files-for-version-400-november-29-2016</a></p>
<h4 id="ocr-local-libraries">ocr-local-libraries</h4>
<p>Das OCR-Modul lädt einige, größere Dateien von einem anderen Server nach, unter anderem auch die Sprachpakete. Du kannst diese Dateien auch auf deinem Server anbieten. Dazu musst du die folgenden Dateien herunterladen und im Unterordner &ldquo;<strong>lib</strong>&rdquo; innerhalb des Plugin-Ordners ablegen:</p>
<ul>
<li>[https://unpkg.com/tesseract.js@v2.0.0/dist/worker.min.js](<a href="https://unpkg.com/tesseract.js@v2.0.0/dist/worker.min.js%27">https://unpkg.com/tesseract.js@v2.0.0/dist/worker.min.js'</a> defer=&lsquo;defer)</li>
<li>[https://unpkg.com/tesseract.js-core@v2.0.0/tesseract-core.wasm.js](<a href="https://unpkg.com/tesseract.js-core@v2.0.0/tesseract-core.wasm.js%27">https://unpkg.com/tesseract.js-core@v2.0.0/tesseract-core.wasm.js'</a> defer=&lsquo;defer)</li>
</ul>
<p>Außerdem benötigst du die von dir konfigurierten Sprachpakete. Diese kannst <a href="https://tesseract-ocr.github.io/tessdoc/Data-Files#data-files-for-version-400-november-29-2016">du hier für die Version 4 herunterladen</a>. Die Sprachpakete gehören ebenfalls in den Unterordner &ldquo;lib&rdquo;. Außerdem <strong>musst du manuell</strong> die Dateiendung &ldquo;.gz&rdquo; anhängen.</p>
<h3 id="eingrenzen-der-wortliste">Eingrenzen der Wortliste</h3>
<h4 id="min-word-length">min-word-length</h4>
<p>Hiermit legst du fest, wie lang ein Wort mindestens sein soll, um beim Zählen berücksichtigt zu werden. Diese Einstellung wird <strong>nicht</strong> berücksichtigt, wenn du eine fertige Wortliste als Quelle angibst. In diesem Beispiel wird das Wort Foo beim Zählen ignoriert.</p>
<p><code>`[ wp-word-cloud source-type=&quot;inline&quot; count-words=1 min-word-lenght=4 id=&quot;demo&quot;]Lorem Ipsum Foo[ /wp-word-cloud]`</code></p>
<h4 id="min-word-occurence">min-word-occurence</h4>
<p>Mit diesem Parameter legst du fest, wie oft ein Wort mindestens vorkommen muss, um in der word cloud dargestellt zu werden. Diese Einstellung wird <strong>immer</strong> berücksichtigt, auch wenn du eine fertige Wortliste als Quelle angibst. Im Beispiel werden nur Wörter in der word cloud dargestellt, die mindestens 2 mal vorkommen:</p>
<p><code>`[ wp-word-cloud source-type=&quot;inline&quot; count-words=1 min-word-occurence=2 id=&quot;demo&quot;]Lorem Ipsum Foo[ /wp-word-cloud]`</code></p>
<h4 id="black-list-und-enable-black-list">black-list und enable-black-list</h4>
<p>Die Blacklist enthält Wörter, die beim Zählen nicht berücksichtigt werden dürfen. Das können z.B. Funktionswörter oder Fremdwörter sein, die du nicht in der word cloud sehen möchtest. Die Wörter werden mit einem Leerzeichen getrennt angegeben. Wenn du den Parameter im Shortcode angibst, wird die globale Einstellung komplett ignoriert. Die Blacklist wird nur verwendet, wenn der Parameter enable-black-list auf 1 gesetzt ist. Im Beispiel wird das Wort &ldquo;Lorem&rdquo; beim Zählen ignoriert, das es sich auf der Blacklist befindet.</p>
<p><code>`[ wp-word-cloud source-type=&quot;inline&quot; count-words=1 enable-black-list`</code>=1 <code>`black-list=&quot;Lorem&quot; id=&quot;demo&quot;]Lorem Ipsum Foo[ /wp-word-cloud]`</code></p>
<h4 id="enable-custom-black-list">enable-custom-black-list</h4>
<p>Ist dieser Parameter aktiviert, kann der Besucher deiner Webseite Wörter in der word cloud anklicken, um sie aus der word cloud zu entfernen. Die Wörter erscheinen dann unter der word cloud in einer &ldquo;benutzerdefinierten&rdquo; Blacklist. Wenn sie dort erneut angeklickt werden, erscheinen sie wieder in der word cloud.</p>
<p><img src="/2020/2020-06-09-wordpress-word-cloud-2-0/images/grafik-9-700x569.png" alt=""></p>
<p>Eine word cloud mit benutzerdefinierter Blacklist, so schön!</p>
<h4 id="persistent-custom-black-list">persistent-custom-black-list</h4>
<p>Hiermit kannst du festlegen, dass die Blacklist erhalten bleibt, wenn der Besucher einen neuen Text in das Eingabefeld eingibt. Ist der Parameter deaktiviert, wird die benutzerdefnierte Blacklist gelöscht, sobald der Besucher einen neuen Text eingibt. Dieser Parameter ist nur wirksam, wenn auch das Textfeld aktiviert ist.</p>
<h4 id="ignore-chars">ignore-chars</h4>
<p>Mit diesem Parameter legst du fest, welche Zeichen aus dem Text entfernt werden, bevor er gezählt wird. Hier wird ein regulärer Ausdruck dieser Form erwartet:</p>
<p><code>ignore-chars=&quot;\(\)\[\]\,\.;&quot;</code></p>
<p>Auf diese Art kannst du ungewollte Satzzeichen, Sonderzeichen oder Steuerzeichen entfernen.</p>
<h3 id="erscheinungsbild-anpassen">Erscheinungsbild anpassen</h3>
<h4 id="style">style</h4>
<h4 id="text-transform">text-transform</h4>
<p>Hiermit kannst du festlegen, dass der Text beim Darstellen in der word cloud groß oder kleingeschrieben werden soll. Dieser Parameter kann dementsprechend drei Werte annehmen:</p>
<ul>
<li>uppercas (alle Wörter groß schreiben)</li>
<li>lowercase (alle Wörter klein schreiben)</li>
<li>none (keine Änderung)</li>
</ul>
<p>Diese word cloud nutzt als Ressource die aktuellen Mitteilungen von <a href="http://blog.fefe.de">fefe</a>:</p>
<p>[wp-word-cloud source-type=&ldquo;url&rdquo; id=&ldquo;demo2&rdquo; count-words=1 min-word-occurence=1 min-word-length=3 size-factor=100 min-alpha=0.5 count-words=1]https://blog.fefe.de[/wp-word-cloud]</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> WordPress, Plugin, Word-Cloud, Projekt, Anleitung</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>development</category>
      
      <category>projekte</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>WordPress Word Cloud 2.0 - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>project_documentation</dc:type>
      
      
    </item><item>
      <title>How to create a maze algorithm with JavaScript</title>
      <link>https://nickyreinert.de/2020/2020-05-11-how-to-create-a-maze-algorithm-with-javascript/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2020/2020-05-11-how-to-create-a-maze-algorithm-with-javascript/</guid>
      <description>Meine Herangehensweise, um ein Labyrinth in JavaScript zu bauen, ist weitaus ausführlicher auf Medium in Englisch veröffentlicht worden: …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Ein kurzer Verweis auf einen ausführlichen, englischsprachigen Artikel des Autors auf der Plattform Medium. Der verlinkte Artikel beschreibt, wie man einen Algorithmus zur Erstellung eines Labyrinths mit JavaScript entwickelt.</p>
          
          
          <p><strong>Hauptthemen:</strong> JavaScript, Algorithmen, Game-Development, Labyrinth</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Meine Herangehensweise, um ein Labyrinth in JavaScript zu bauen, ist weitaus ausführlicher auf Medium in Englisch veröffentlicht worden:</p>
<p><a href="https://medium.com/swlh/how-to-create-a-maze-with-javascript-36f3ad8eebc1">https://medium.com/swlh/how-to-create-a-maze-with-javascript-36f3ad8eebc1</a></p>
<p><img src="/2020/2020-05-11-how-to-create-a-maze-algorithm-with-javascript/images/maze.png" alt=""></p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> anleitung, javascript, labyrinth</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>How to create a maze algorithm with JavaScript - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>link_post</dc:type>
      
      
    </item><item>
      <title>Wie erstelle ich ein Labyrinth mit JavaScript?</title>
      <link>https://nickyreinert.de/2020/2020-04-11-wie-erstelle-ich-ein-labyrinth-mit-javascript/</link>
      <pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2020/2020-04-11-wie-erstelle-ich-ein-labyrinth-mit-javascript/</guid>
      <description>Durch Zufall bin ich irgendwann mal auf diesen BASIC-Einzeiler gestoßen, mit dem sich eine Art Pseudo-Labyrinth erstellen lässt. Ich habe versucht, das in Plain …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine detaillierte Schritt-für-Schritt-Anleitung zur prozeduralen Erzeugung eines Labyrinths mit reinem JavaScript und HTML. Das Tutorial entwickelt iterativ einen Algorithmus, der von einem einfachen Pfad bis zu einer komplexen Lösung mit dem `Recursive Backtracker`-Ansatz führt, um ein lösbares Labyrinth mit Sackgassen zu generieren.</p>
          
          
          <p><strong>Hauptthemen:</strong> JavaScript, Algorithmen, Game-Development, Prozedurale Generierung, HTML DOM</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>Durch Zufall bin ich irgendwann mal <a href="http://www.slate.com/articles/technology/books/2012/11/computer_programming_10_print_chr_205_5_rnd_1_goto_10_from_mit_press_reviewed.html">auf diesen BASIC-Einzeiler gestoßen</a>, mit dem sich eine Art Pseudo-Labyrinth erstellen lässt. Ich habe versucht, das <a href="https://htmlpreview.github.io/?https://github.com/nickyreinert/maze/blob/master/pseudo_maze.html">in Plain JavaScript</a> halbwegs kompakt nachzubauen. Dabei kann man kaum übersehen, dass es sich keineswegs um ein richtiges Labyrinth handelt, sondern eher um eine zufällige Anordnung von Strichen ohne Lösungsweg. Also habe ich mich gefragt, wie schwer es wohl sein kann, ein Labyrinth programmatisch und vor allem kompakt zu erzeugen. Dazu gibt es zwar <a href="https://en.wikipedia.org/wiki/Maze_generation_algorithm#Recursive_backtracker">eine Menge Lösungsansätze</a>, mein Ziel ist aber, die Herangehensweise zu beschreiben. Und da wir ja gerade alle zuhause abhängen, ist diese kleine Anleitung entstanden.</p>
<h2 id="vorbereitung">Vorbereitung</h2>
<p>Der aus meiner Sicht einfachste Ansatz ist es, eine Fläche mit schon gesetzten Wänden möglichst chaotisch zu durchpflügen. Wir brauchen also erstmal eine Fläche mit x * y Zellen, die jeweils mit Wänden voneinandern getrennt sind. In JavaScript sieht das folgendermaßen aus:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="n">function</span> <span class="n">createBlankMaze</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">var</span> <span class="n">rowIndex</span><span class="p">,</span> <span class="n">colIndex</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="k">var</span> <span class="n">table</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">createElement</span><span class="p">(</span><span class="s2">&#34;table&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="k">var</span> <span class="n">tbody</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">createElement</span><span class="p">(</span><span class="s2">&#34;tbody&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">rowIndex</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">rowIndex</span> <span class="o">&lt;=</span> <span class="n">mazeHeight</span><span class="p">;</span> <span class="n">rowIndex</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">        <span class="k">var</span> <span class="n">row</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">createElement</span><span class="p">(</span><span class="s2">&#34;tr&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">colIndex</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">colIndex</span> <span class="o">&lt;=</span> <span class="n">mazeWidth</span><span class="p">;</span> <span class="n">colIndex</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl">            <span class="k">var</span> <span class="n">col</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">createElement</span><span class="p">(</span><span class="s2">&#34;td&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">rowIndex</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">colIndex</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl">                <span class="n">col</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="s2">&#34;rgb(244,0,0)&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">                <span class="n">col</span><span class="o">.</span><span class="n">setAttribute</span><span class="p">(</span><span class="s2">&#34;type&#34;</span><span class="p">,</span> <span class="s2">&#34;start&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">
</span></span><span class="line"><span class="ln">20</span><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">rowIndex</span> <span class="o">==</span> <span class="n">mazeHeight</span> <span class="o">&amp;&amp;</span> <span class="n">colIndex</span> <span class="o">==</span> <span class="n">mazeWidth</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">                
</span></span><span class="line"><span class="ln">22</span><span class="cl">                <span class="n">col</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="s2">&#34;rgb(0,244,0)&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">                <span class="n">col</span><span class="o">.</span><span class="n">setAttribute</span><span class="p">(</span><span class="s2">&#34;type&#34;</span><span class="p">,</span> <span class="s2">&#34;finish&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">
</span></span><span class="line"><span class="ln">25</span><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">
</span></span><span class="line"><span class="ln">27</span><span class="cl">                <span class="n">col</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="s2">&#34;rgb(255,255,255)&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">
</span></span><span class="line"><span class="ln">29</span><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">            <span class="n">col</span><span class="o">.</span><span class="n">setAttribute</span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">,</span> <span class="s2">&#34;cell_&#34;</span> <span class="o">+</span> <span class="n">rowIndex</span> <span class="o">+</span> <span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="n">colIndex</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl">
</span></span><span class="line"><span class="ln">32</span><span class="cl">            <span class="n">row</span><span class="o">.</span><span class="n">appendChild</span><span class="p">(</span><span class="n">col</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl">
</span></span><span class="line"><span class="ln">34</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">35</span><span class="cl">
</span></span><span class="line"><span class="ln">36</span><span class="cl">        <span class="n">tbody</span><span class="o">.</span><span class="n">appendChild</span><span class="p">(</span><span class="n">row</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">37</span><span class="cl">
</span></span><span class="line"><span class="ln">38</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">39</span><span class="cl">    
</span></span><span class="line"><span class="ln">40</span><span class="cl">    <span class="n">table</span><span class="o">.</span><span class="n">appendChild</span><span class="p">(</span><span class="n">tbody</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">41</span><span class="cl">
</span></span><span class="line"><span class="ln">42</span><span class="cl">    <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">&#34;maze_container&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">appendChild</span><span class="p">(</span><span class="n">table</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">43</span><span class="cl">
</span></span><span class="line"><span class="ln">44</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Wir erzeugen also eine Tabelle mit 10 Zeilen und 10 Spalten und packen Sie am Ende in ein div mit der Id maze_container. Die &ldquo;Wände&rdquo; habe ich für jede Zelle mit CSS definiert:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">table td {
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl">    border: 1px #000000 solid;
</span></span><span class="line"><span class="ln">4</span><span class="cl">
</span></span><span class="line"><span class="ln">5</span><span class="cl">}
</span></span></code></pre></div><p>Der Eingang in rot befindet sich immer oben links, der Ausgang ist grün und unten rechts. Nun werden wir uns in einer Schleife vom Startfeld in Richtung Ziel bewegen. Mit jedem Schleifendurchlauf bewegen wir uns ein Feld weiter. Daraus entsteht erstmal ein Lösungsweg. Danach müssen natürlich noch die restlichen Felder bearbeitet werden. Dazu werden wir vom Lösungsweg aus Abzweige erzeugen. Los gehts.</p>
<h2 id="schritt-1-der-simpelste-lösungsweg">Schritt 1: Der simpelste Lösungsweg</h2>
<p>Um erstmal eine Schleife als Grundlage zu erhalten, beginnen wir mit einem sehr simplen Lösungsweg. Der geht ganz einfach 9 Felder nach rechts und 9 Felder nach unten. Wir nutzen dazu einfach eine Liste mit Anweisungen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">var</span> <span class="n">exits</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">];</span>
</span></span></code></pre></div><p><em>(Warum nicht 10, sondern 9? Sobald wir uns auf dem letzen Feld befinden, müssen wir uns nicht weiter bewegen.)</em></p>
<p>In einer Schleife gehen wir nun diese Liste durch und bewegen unseren Zähler entsprechend eine Zelle nach rechts oder unten:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="k">var</span> <span class="n">currentCell</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="k">var</span> <span class="n">rowIndex</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="k">var</span> <span class="n">colIndex</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="n">exitIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">exitIndex</span> <span class="o">&lt;</span> <span class="n">exits</span><span class="o">.</span><span class="n">length</span><span class="p">;</span> <span class="n">exitIndex</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="k">switch</span><span class="p">(</span><span class="n">exits</span><span class="p">[</span><span class="n">exitIndex</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">        <span class="k">case</span> <span class="s2">&#34;right&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">            <span class="n">colIndex</span> <span class="o">=</span> <span class="n">colIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">
</span></span><span class="line"><span class="ln">15</span><span class="cl">        <span class="k">case</span> <span class="s2">&#34;bottom&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl">            <span class="n">rowIndex</span> <span class="o">=</span> <span class="n">rowIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">
</span></span><span class="line"><span class="ln">20</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">
</span></span><span class="line"><span class="ln">22</span><span class="cl">    <span class="n">currentCell</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">&#34;cell_&#34;</span> <span class="o">+</span> <span class="n">rowIndex</span> <span class="o">+</span> <span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="n">colIndex</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">    
</span></span><span class="line"><span class="ln">24</span><span class="cl">    <span class="n">currentCell</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="s2">&#34;#f00000&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">
</span></span><span class="line"><span class="ln">26</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Hier werden noch keine Wände entfernt, sondern erstmal nur der Weg nachgezeichnet, um eine Idee für den Algorithmus zu bekommen. Und so sieht das aus:</p>
<p><img src="/2020/2020-04-11-wie-erstelle-ich-ein-labyrinth-mit-javascript/images/grafik-3-700x701.png" alt=""></p>
<h2 id="schritt-2-einen-funken-abwechslung">Schritt 2: Einen Funken Abwechslung</h2>
<p>Ein wenig Abwechslung erhalten wir, wenn wir uns einfach abwechselnd nach unten und rechts bewegen. Dazu füllen wir die Liste mit den Ausgängen einfach in einer Schleife:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">var</span> <span class="n">exits</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="n">exit</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">exit</span> <span class="o">&lt;=</span> <span class="n">mazeWidth</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">exit</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">
</span></span><span class="line"><span class="ln">5</span><span class="cl">    <span class="n">exits</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="s2">&#34;right&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">    <span class="n">exits</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="s2">&#34;bottom&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl">
</span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Das war es schon. Das Ergebnis sieht folgendermaßen aus:</p>
<p><img src="/2020/2020-04-11-wie-erstelle-ich-ein-labyrinth-mit-javascript/images/grafik-4-700x703.png" alt=""></p>
<h2 id="schritt-3-die-wände-einreißen">Schritt 3: Die Wände einreißen</h2>
<p>Nun sorgen wir dafür, dass tatsächlich ein Weg vom Start zum Ziel entsteht. Dazu werden einfach die Rahmen unten bzw. rechts entfernt, sobald wir uns in die entsprechende Richtung bewegen. Unsere Hauptschleife wird also etwas aufgebohrt.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="k">var</span>  <span class="n">currentCell</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">&#34;cell_1_1&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="n">exitIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">exitIndex</span> <span class="o">&lt;</span> <span class="n">exits</span><span class="o">.</span><span class="n">length</span><span class="p">;</span> <span class="n">exitIndex</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="n">exit</span> <span class="o">=</span> <span class="n">exits</span><span class="p">[</span><span class="n">exitIndex</span><span class="p">];</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="n">currentCell</span><span class="o">.</span><span class="n">style</span><span class="p">[</span><span class="s2">&#34;border-&#34;</span><span class="o">+</span><span class="n">exit</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;none&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="k">switch</span><span class="p">(</span><span class="n">exit</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="k">case</span> <span class="s2">&#34;right&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl">            <span class="n">colIndex</span> <span class="o">=</span> <span class="n">colIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl">        <span class="k">case</span> <span class="s2">&#34;bottom&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">
</span></span><span class="line"><span class="ln">18</span><span class="cl">            <span class="n">rowIndex</span> <span class="o">=</span> <span class="n">rowIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">
</span></span><span class="line"><span class="ln">21</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">
</span></span><span class="line"><span class="ln">23</span><span class="cl">    <span class="n">currentCell</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">&#34;cell_&#34;</span> <span class="o">+</span> <span class="n">rowIndex</span> <span class="o">+</span> <span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="n">colIndex</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">
</span></span><span class="line"><span class="ln">25</span><span class="cl">    <span class="n">currentCell</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="s2">&#34;#f00000&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">
</span></span><span class="line"><span class="ln">27</span><span class="cl">    <span class="k">switch</span><span class="p">(</span><span class="n">exit</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">
</span></span><span class="line"><span class="ln">29</span><span class="cl">        <span class="k">case</span> <span class="s2">&#34;right&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">
</span></span><span class="line"><span class="ln">31</span><span class="cl">            <span class="n">currentCell</span><span class="o">.</span><span class="n">style</span><span class="p">[</span><span class="s2">&#34;border-left&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;none&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl">
</span></span><span class="line"><span class="ln">34</span><span class="cl">        <span class="k">case</span> <span class="s2">&#34;bottom&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">35</span><span class="cl">
</span></span><span class="line"><span class="ln">36</span><span class="cl">        <span class="n">currentCell</span><span class="o">.</span><span class="n">style</span><span class="p">[</span><span class="s2">&#34;border-top&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;none&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">37</span><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">38</span><span class="cl">
</span></span><span class="line"><span class="ln">39</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">40</span><span class="cl">    
</span></span><span class="line"><span class="ln">41</span><span class="cl">    <span class="n">lastExit</span> <span class="o">=</span> <span class="n">exit</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">42</span><span class="cl">
</span></span><span class="line"><span class="ln">43</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Noch bevor die Schleife startet, legen wir fest, in welcher Zelle wir uns befinden. Nur so können wir den Rahmen entsprechend unseres Ausgangs entfernen. Dazu wird einfach die CSS-Eigenschaft auf &ldquo;none&rdquo; gesetzt. Außerdem entfernen wir in der nächsten Zelle jeweils den gegenüberliegenden Rahmen. Wenn wir die vorherige Zelle also nach rechts verlassen haben, müssen wir in der darauffolgenden Zelle den Rahmen links entfernen.</p>
<p>Außerdem muss die Schleife für die Erstellung unserer Ausgänge angepasst werden:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">for (exit = 1; exit &lt; mazeWidth; exit++) {
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl">    exits.push(&#34;right&#34;);
</span></span><span class="line"><span class="ln">4</span><span class="cl">    exits.push(&#34;bottom&#34;);
</span></span><span class="line"><span class="ln">5</span><span class="cl">
</span></span><span class="line"><span class="ln">6</span><span class="cl">}
</span></span></code></pre></div><p>Nun reichen uns nicht mehr nur 9 Schritte nach unten und rechts. Da wir nun für jedes Feld den unteren bzw. rechten Rahmen entfernen, müssen wir insgesamt 10 Felder in jede Richtung berücksichtigen. Das Ergebnis ist jetzt tatsächlich schon ein Irrgarten. Allerdings ein ziemlich einfacher:</p>
<p><img src="/2020/2020-04-11-wie-erstelle-ich-ein-labyrinth-mit-javascript/images/grafik-5-700x697.png" alt=""></p>
<h2 id="schritt-4-noch-mehr-abwechslung">Schritt 4: Noch mehr Abwechslung</h2>
<p>Der nächste Schritt ist naheliegend: Wir durchlaufen nicht einfach die Liste möglicher Ausgänge, sondern entscheiden zufällig, welcher Ausgang als nächstes kommt. Dazu muss die Schleifenbedinung allerdings etwas angepasst werden.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln"> 1</span><span class="cl">for (loop = 0; loop &lt; (mazeWidth + mazeHeight - 2); loop++) {
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    exitIndex = Math.floor(Math.random() * exits.length);
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    exit = exits[exitIndex];
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    exits.splice(exitIndex, 1);
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    currentCell.style[&#34;border-&#34;+exit] = &#34;none&#34;;
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">    switch(exit) {
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl">        case &#34;right&#34;:
</span></span><span class="line"><span class="ln">14</span><span class="cl">
</span></span><span class="line"><span class="ln">15</span><span class="cl">            colIndex = colIndex + 1;
</span></span><span class="line"><span class="ln">16</span><span class="cl">            break;
</span></span><span class="line"><span class="ln">17</span><span class="cl">
</span></span><span class="line"><span class="ln">18</span><span class="cl">        case &#34;bottom&#34;:
</span></span><span class="line"><span class="ln">19</span><span class="cl">
</span></span><span class="line"><span class="ln">20</span><span class="cl">            rowIndex = rowIndex + 1;
</span></span><span class="line"><span class="ln">21</span><span class="cl">            break;
</span></span><span class="line"><span class="ln">22</span><span class="cl">
</span></span><span class="line"><span class="ln">23</span><span class="cl">    }
</span></span><span class="line"><span class="ln">24</span><span class="cl">
</span></span><span class="line"><span class="ln">25</span><span class="cl">    currentCell = document.getElementById(&#34;cell_&#34; + rowIndex + &#34;_&#34; + colIndex);
</span></span><span class="line"><span class="ln">26</span><span class="cl">
</span></span><span class="line"><span class="ln">27</span><span class="cl">    currentCell.style.backgroundColor = &#34;#f00000&#34;;
</span></span><span class="line"><span class="ln">28</span><span class="cl">
</span></span><span class="line"><span class="ln">29</span><span class="cl">    switch(exit) {
</span></span><span class="line"><span class="ln">30</span><span class="cl">
</span></span><span class="line"><span class="ln">31</span><span class="cl">        case &#34;right&#34;:
</span></span><span class="line"><span class="ln">32</span><span class="cl">
</span></span><span class="line"><span class="ln">33</span><span class="cl">            currentCell.style[&#34;border-left&#34;] = &#34;none&#34;;
</span></span><span class="line"><span class="ln">34</span><span class="cl">            break;
</span></span><span class="line"><span class="ln">35</span><span class="cl">
</span></span><span class="line"><span class="ln">36</span><span class="cl">        case &#34;bottom&#34;:
</span></span><span class="line"><span class="ln">37</span><span class="cl">
</span></span><span class="line"><span class="ln">38</span><span class="cl">        currentCell.style[&#34;border-top&#34;] = &#34;none&#34;;
</span></span><span class="line"><span class="ln">39</span><span class="cl">            break;
</span></span><span class="line"><span class="ln">40</span><span class="cl">
</span></span><span class="line"><span class="ln">41</span><span class="cl">    }
</span></span><span class="line"><span class="ln">42</span><span class="cl">    
</span></span><span class="line"><span class="ln">43</span><span class="cl">    lastExit = exit;
</span></span><span class="line"><span class="ln">44</span><span class="cl">
</span></span><span class="line"><span class="ln">45</span><span class="cl">}
</span></span></code></pre></div><p>Die ersten drei Zeilen innerhalb der Zeile sind hier von Bedeutung. Zuerst wird der nächste Ausgang per Zufall bestimmt und in der Variable exit abgelegt. Danach wird dieser Eintrag auch aus der Liste möglicher Ausgänge entfernt. Das ist wichtig, da wir uns ja z.B. nicht mehr als 10 mal nach rechts bewegen können. Außerdem erzeugen wir so eine Art Gewichtung, die sich bei jedem Durchlauf verändert. Würden wir einfach nur per Zufall zwischen <em>rechts</em> und <em>unten</em> entscheiden, wäre das Ergebnis im Moment vielleicht ähnlich. Aber sobald wir auch die Richtungen <em>oben</em> und <em>links</em> dazu nehmen, ist das Ergebnis weitaus chaotischer.</p>
<p>Das Ergebnis ist immer noch recht banal, aber sieht schon etwas mehr nach Labyrinth aus:</p>
<p><img src="/2020/2020-04-11-wie-erstelle-ich-ein-labyrinth-mit-javascript/images/grafik-6-700x695.png" alt=""></p>
<h2 id="schritt-5-mehr-bewegungsfreiheit">Schritt 5: Mehr Bewegungsfreiheit</h2>
<p>Bisher haben wir uns nur nach rechts und unten bewegt. Nun wollen wir uns auch nach links und oben bewegen. Dazu noch mal eine wichtige Grundannahme: Wir müssen uns 9 mal nach rechts und unten bewegen, um zum Ziel zu kommen. Erst wenn wir uns ein mal nach rechts bewegt haben, können wir uns dafür ein mal nach linsk bewegen. Das gleiche gilt für oben und unten. Da ich nun vier Bewegungsfreiheiten haben, muss die Schleifenbedingung erneut angepasst werden. Diesmal können wir ja theoretisch jedes der 100 Felder belegen. Außerdem muss ich nun zusätzliche Rahmen entfernen.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln"> 1</span><span class="cl">while (loop &lt; ((mazeWidth * mazeHeight) - 1)) {
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    exitIndex = Math.floor(Math.random() * exits.length);
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    exit = exits[exitIndex];
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    exits.splice(exitIndex, 1);
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    currentCell.style[&#34;border-&#34;+exit] = &#34;none&#34;;
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">    switch(exit) {
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl">        case &#34;right&#34;:
</span></span><span class="line"><span class="ln">14</span><span class="cl">
</span></span><span class="line"><span class="ln">15</span><span class="cl">            colIndex = colIndex + 1;
</span></span><span class="line"><span class="ln">16</span><span class="cl">            exits.push(&#34;left&#34;);
</span></span><span class="line"><span class="ln">17</span><span class="cl">            break;
</span></span><span class="line"><span class="ln">18</span><span class="cl">
</span></span><span class="line"><span class="ln">19</span><span class="cl">        case &#34;bottom&#34;:
</span></span><span class="line"><span class="ln">20</span><span class="cl">
</span></span><span class="line"><span class="ln">21</span><span class="cl">            rowIndex = rowIndex + 1;
</span></span><span class="line"><span class="ln">22</span><span class="cl">            exits.push(&#34;top&#34;);
</span></span><span class="line"><span class="ln">23</span><span class="cl">            break;
</span></span><span class="line"><span class="ln">24</span><span class="cl">
</span></span><span class="line"><span class="ln">25</span><span class="cl">        case &#34;left&#34;:
</span></span><span class="line"><span class="ln">26</span><span class="cl">
</span></span><span class="line"><span class="ln">27</span><span class="cl">            colIndex = colIndex - 1;
</span></span><span class="line"><span class="ln">28</span><span class="cl">            exits.push(&#34;right&#34;);
</span></span><span class="line"><span class="ln">29</span><span class="cl">            break;
</span></span><span class="line"><span class="ln">30</span><span class="cl">
</span></span><span class="line"><span class="ln">31</span><span class="cl">        case &#34;top&#34;:
</span></span><span class="line"><span class="ln">32</span><span class="cl">
</span></span><span class="line"><span class="ln">33</span><span class="cl">            rowIndex = rowIndex - 1;
</span></span><span class="line"><span class="ln">34</span><span class="cl">            exits.push(&#34;bottom&#34;);
</span></span><span class="line"><span class="ln">35</span><span class="cl">            break;
</span></span><span class="line"><span class="ln">36</span><span class="cl">            
</span></span><span class="line"><span class="ln">37</span><span class="cl">    }
</span></span><span class="line"><span class="ln">38</span><span class="cl">
</span></span><span class="line"><span class="ln">39</span><span class="cl">    currentCell = document.getElementById(&#34;cell_&#34; + rowIndex + &#34;_&#34; + colIndex);
</span></span><span class="line"><span class="ln">40</span><span class="cl">
</span></span><span class="line"><span class="ln">41</span><span class="cl">    currentCell.style.backgroundColor = &#34;#f00000&#34;;
</span></span><span class="line"><span class="ln">42</span><span class="cl">
</span></span><span class="line"><span class="ln">43</span><span class="cl">    switch(exit) {
</span></span><span class="line"><span class="ln">44</span><span class="cl">
</span></span><span class="line"><span class="ln">45</span><span class="cl">        case &#34;right&#34;:
</span></span><span class="line"><span class="ln">46</span><span class="cl">
</span></span><span class="line"><span class="ln">47</span><span class="cl">            currentCell.style[&#34;border-left&#34;] = &#34;none&#34;;
</span></span><span class="line"><span class="ln">48</span><span class="cl">            break;
</span></span><span class="line"><span class="ln">49</span><span class="cl">
</span></span><span class="line"><span class="ln">50</span><span class="cl">        case &#34;bottom&#34;:
</span></span><span class="line"><span class="ln">51</span><span class="cl">
</span></span><span class="line"><span class="ln">52</span><span class="cl">        currentCell.style[&#34;border-top&#34;] = &#34;none&#34;;
</span></span><span class="line"><span class="ln">53</span><span class="cl">            break;
</span></span><span class="line"><span class="ln">54</span><span class="cl">
</span></span><span class="line"><span class="ln">55</span><span class="cl">        case &#34;left&#34;:
</span></span><span class="line"><span class="ln">56</span><span class="cl">
</span></span><span class="line"><span class="ln">57</span><span class="cl">            currentCell.style[&#34;border-right&#34;] = &#34;none&#34;;
</span></span><span class="line"><span class="ln">58</span><span class="cl">            break;
</span></span><span class="line"><span class="ln">59</span><span class="cl">
</span></span><span class="line"><span class="ln">60</span><span class="cl">        case &#34;top&#34;:
</span></span><span class="line"><span class="ln">61</span><span class="cl">
</span></span><span class="line"><span class="ln">62</span><span class="cl">            currentCell.style[&#34;border-bottom&#34;] = &#34;none&#34;;
</span></span><span class="line"><span class="ln">63</span><span class="cl">            break;
</span></span><span class="line"><span class="ln">64</span><span class="cl">
</span></span><span class="line"><span class="ln">65</span><span class="cl">    }
</span></span><span class="line"><span class="ln">66</span><span class="cl">    
</span></span><span class="line"><span class="ln">67</span><span class="cl">    lastExit = exit;
</span></span><span class="line"><span class="ln">68</span><span class="cl">
</span></span><span class="line"><span class="ln">69</span><span class="cl">    loop++;
</span></span><span class="line"><span class="ln">70</span><span class="cl">
</span></span><span class="line"><span class="ln">71</span><span class="cl">}
</span></span></code></pre></div><p>In der ersten _Switch-_Anweisung gibt es außerdem eine wichtige Anweisung. Wenn der nächste Ausgang nach rechts geht, ergänze ich die Liste möglicher Ausgänge um einen Ausgang nach links (analog natürlich für die anderen Richtungen):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">exits.push(&#34;left&#34;);
</span></span></code></pre></div><p>Und wie sieht das Ergebnis aus?</p>
<p><img src="/2020/2020-04-11-wie-erstelle-ich-ein-labyrinth-mit-javascript/images/grafik-8-700x703.png" alt=""></p>
<p>Ich würde sagen: Bescheiden. Das Problem ist, dass wir uns nach links bewegen, nachdem wir uns gerade erst nach rechts bewegt haben. Genauso dürfen wir uns nicht nach oben und gleich danach wieder nach unten bewegen.<br>
Wir müssen also etwas nachbessern. Wenn wir uns nun in z.B. der Zelle mit den Koordinaten x = 4 und y = 4 befinden, prüfen wir, ob die drei benachbarten Zellen bereits belegt sind (Hintergrundfarbe ist rot). Ist z.B. die rechte Nachbarzelle belegt, dürfen wir uns nicht nach rechts bewegen.<br>
Auch die Liste möglicher Ausgänge wird etwas anders organisiert:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">var</span> <span class="n">validExits</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">,</span> <span class="s2">&#34;left&#34;</span><span class="p">,</span> <span class="s2">&#34;top&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="k">var</span> <span class="n">remainingExits</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;right&#34;</span><span class="p">:</span> <span class="n">mazeWidth</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">:</span> <span class="n">mazeHeight</span><span class="p">,</span> <span class="s2">&#34;left&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">&#34;top&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">};</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="k">var</span> <span class="n">nextExits</span> <span class="o">=</span> <span class="p">[];</span>
</span></span></code></pre></div><p>Das Array <em>validExits</em> ist eine globale, nicht veränderbare Liste aller möglichen Ausgänge. Mit <em>remainingExits</em> führen wir ein Objekt ein, dass die Anzahl möglicher bzw. erforderlicher Ausgänge protokolliert. Und <em>nextExits</em> ist das Array, das bei jedem Schleifendurchlauf die möglichen Ausgänge anzeigt. Die überarbeitete Schleife sieht nun so aus:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">  1</span><span class="cl">while (loop &lt; ((mazeWidth * mazeHeight) - 1)) {
</span></span><span class="line"><span class="ln">  2</span><span class="cl">
</span></span><span class="line"><span class="ln">  3</span><span class="cl">    nextExits = [];
</span></span><span class="line"><span class="ln">  4</span><span class="cl">
</span></span><span class="line"><span class="ln">  5</span><span class="cl">    for (i = 0; i &lt; validExits.length; i++) {
</span></span><span class="line"><span class="ln">  6</span><span class="cl">
</span></span><span class="line"><span class="ln">  7</span><span class="cl">        switch(validExits[i]) {
</span></span><span class="line"><span class="ln">  8</span><span class="cl">
</span></span><span class="line"><span class="ln">  9</span><span class="cl">            case &#34;right&#34;:
</span></span><span class="line"><span class="ln"> 10</span><span class="cl">                nextPossibleCell = document.getElementById(&#34;cell_&#34; + rowIndex + &#34;_&#34; + (colIndex + 1));
</span></span><span class="line"><span class="ln"> 11</span><span class="cl">                break;
</span></span><span class="line"><span class="ln"> 12</span><span class="cl">
</span></span><span class="line"><span class="ln"> 13</span><span class="cl">            case &#34;left&#34;:
</span></span><span class="line"><span class="ln"> 14</span><span class="cl">                nextPossibleCell = document.getElementById(&#34;cell_&#34; + rowIndex + &#34;_&#34; + (colIndex - 1));
</span></span><span class="line"><span class="ln"> 15</span><span class="cl">                break;
</span></span><span class="line"><span class="ln"> 16</span><span class="cl">
</span></span><span class="line"><span class="ln"> 17</span><span class="cl">            case &#34;bottom&#34;:
</span></span><span class="line"><span class="ln"> 18</span><span class="cl">                nextPossibleCell = document.getElementById(&#34;cell_&#34; + (rowIndex + 1) + &#34;_&#34; + colIndex);
</span></span><span class="line"><span class="ln"> 19</span><span class="cl">                break;
</span></span><span class="line"><span class="ln"> 20</span><span class="cl">
</span></span><span class="line"><span class="ln"> 21</span><span class="cl">            case &#34;top&#34;:
</span></span><span class="line"><span class="ln"> 22</span><span class="cl">                nextPossibleCell = document.getElementById(&#34;cell_&#34; + (rowIndex - 1) + &#34;_&#34; + colIndex);
</span></span><span class="line"><span class="ln"> 23</span><span class="cl">                break;
</span></span><span class="line"><span class="ln"> 24</span><span class="cl">
</span></span><span class="line"><span class="ln"> 25</span><span class="cl">        }
</span></span><span class="line"><span class="ln"> 26</span><span class="cl">
</span></span><span class="line"><span class="ln"> 27</span><span class="cl">        if (nextPossibleCell == null || nextPossibleCell.style.backgroundColor != &#34;rgb(240, 0, 0)&#34;) {
</span></span><span class="line"><span class="ln"> 28</span><span class="cl">            
</span></span><span class="line"><span class="ln"> 29</span><span class="cl">            for (t = 0; t &lt; remainingExits[validExits[i]]; t++) {
</span></span><span class="line"><span class="ln"> 30</span><span class="cl">
</span></span><span class="line"><span class="ln"> 31</span><span class="cl">                nextExits.push(validExits[i]);
</span></span><span class="line"><span class="ln"> 32</span><span class="cl">
</span></span><span class="line"><span class="ln"> 33</span><span class="cl">            }
</span></span><span class="line"><span class="ln"> 34</span><span class="cl">
</span></span><span class="line"><span class="ln"> 35</span><span class="cl">        } 
</span></span><span class="line"><span class="ln"> 36</span><span class="cl">
</span></span><span class="line"><span class="ln"> 37</span><span class="cl">    }
</span></span><span class="line"><span class="ln"> 38</span><span class="cl">
</span></span><span class="line"><span class="ln"> 39</span><span class="cl">    exitIndex = Math.floor(Math.random() * nextExits.length);
</span></span><span class="line"><span class="ln"> 40</span><span class="cl">
</span></span><span class="line"><span class="ln"> 41</span><span class="cl">    exit = nextExits[exitIndex];
</span></span><span class="line"><span class="ln"> 42</span><span class="cl">
</span></span><span class="line"><span class="ln"> 43</span><span class="cl">    currentCell.style[&#34;border-&#34;+exit] = &#34;none&#34;;
</span></span><span class="line"><span class="ln"> 44</span><span class="cl">
</span></span><span class="line"><span class="ln"> 45</span><span class="cl">    switch(exit) {
</span></span><span class="line"><span class="ln"> 46</span><span class="cl">
</span></span><span class="line"><span class="ln"> 47</span><span class="cl">        case &#34;right&#34;:
</span></span><span class="line"><span class="ln"> 48</span><span class="cl">
</span></span><span class="line"><span class="ln"> 49</span><span class="cl">            colIndex = colIndex + 1;
</span></span><span class="line"><span class="ln"> 50</span><span class="cl">            remainingExits.left++;
</span></span><span class="line"><span class="ln"> 51</span><span class="cl">            remainingExits.right--;
</span></span><span class="line"><span class="ln"> 52</span><span class="cl">            break;
</span></span><span class="line"><span class="ln"> 53</span><span class="cl">
</span></span><span class="line"><span class="ln"> 54</span><span class="cl">        case &#34;bottom&#34;:
</span></span><span class="line"><span class="ln"> 55</span><span class="cl">
</span></span><span class="line"><span class="ln"> 56</span><span class="cl">            rowIndex = rowIndex + 1;
</span></span><span class="line"><span class="ln"> 57</span><span class="cl">            remainingExits.top++;
</span></span><span class="line"><span class="ln"> 58</span><span class="cl">            remainingExits.bottom--;
</span></span><span class="line"><span class="ln"> 59</span><span class="cl">            break;
</span></span><span class="line"><span class="ln"> 60</span><span class="cl">
</span></span><span class="line"><span class="ln"> 61</span><span class="cl">        case &#34;left&#34;:
</span></span><span class="line"><span class="ln"> 62</span><span class="cl">
</span></span><span class="line"><span class="ln"> 63</span><span class="cl">            colIndex = colIndex - 1;
</span></span><span class="line"><span class="ln"> 64</span><span class="cl">            remainingExits.left--;
</span></span><span class="line"><span class="ln"> 65</span><span class="cl">            remainingExits.right++;
</span></span><span class="line"><span class="ln"> 66</span><span class="cl">            break;
</span></span><span class="line"><span class="ln"> 67</span><span class="cl">
</span></span><span class="line"><span class="ln"> 68</span><span class="cl">        case &#34;top&#34;:
</span></span><span class="line"><span class="ln"> 69</span><span class="cl">
</span></span><span class="line"><span class="ln"> 70</span><span class="cl">            rowIndex = rowIndex - 1;
</span></span><span class="line"><span class="ln"> 71</span><span class="cl">            remainingExits.top--;
</span></span><span class="line"><span class="ln"> 72</span><span class="cl">            remainingExits.bottom++;
</span></span><span class="line"><span class="ln"> 73</span><span class="cl">            break;
</span></span><span class="line"><span class="ln"> 74</span><span class="cl">            
</span></span><span class="line"><span class="ln"> 75</span><span class="cl">    }
</span></span><span class="line"><span class="ln"> 76</span><span class="cl">
</span></span><span class="line"><span class="ln"> 77</span><span class="cl">    currentCell = document.getElementById(&#34;cell_&#34; + rowIndex + &#34;_&#34; + colIndex);
</span></span><span class="line"><span class="ln"> 78</span><span class="cl">
</span></span><span class="line"><span class="ln"> 79</span><span class="cl">    switch(exit) {
</span></span><span class="line"><span class="ln"> 80</span><span class="cl">
</span></span><span class="line"><span class="ln"> 81</span><span class="cl">        case &#34;right&#34;:
</span></span><span class="line"><span class="ln"> 82</span><span class="cl">
</span></span><span class="line"><span class="ln"> 83</span><span class="cl">            currentCell.style[&#34;border-left&#34;] = &#34;none&#34;;
</span></span><span class="line"><span class="ln"> 84</span><span class="cl">            break;
</span></span><span class="line"><span class="ln"> 85</span><span class="cl">
</span></span><span class="line"><span class="ln"> 86</span><span class="cl">        case &#34;bottom&#34;:
</span></span><span class="line"><span class="ln"> 87</span><span class="cl">
</span></span><span class="line"><span class="ln"> 88</span><span class="cl">            currentCell.style[&#34;border-top&#34;] = &#34;none&#34;;
</span></span><span class="line"><span class="ln"> 89</span><span class="cl">            break;
</span></span><span class="line"><span class="ln"> 90</span><span class="cl">
</span></span><span class="line"><span class="ln"> 91</span><span class="cl">        case &#34;left&#34;:
</span></span><span class="line"><span class="ln"> 92</span><span class="cl">
</span></span><span class="line"><span class="ln"> 93</span><span class="cl">            currentCell.style[&#34;border-right&#34;] = &#34;none&#34;;
</span></span><span class="line"><span class="ln"> 94</span><span class="cl">            break;
</span></span><span class="line"><span class="ln"> 95</span><span class="cl">
</span></span><span class="line"><span class="ln"> 96</span><span class="cl">        case &#34;top&#34;:
</span></span><span class="line"><span class="ln"> 97</span><span class="cl">
</span></span><span class="line"><span class="ln"> 98</span><span class="cl">            currentCell.style[&#34;border-bottom&#34;] = &#34;none&#34;;
</span></span><span class="line"><span class="ln"> 99</span><span class="cl">            break;
</span></span><span class="line"><span class="ln">100</span><span class="cl">
</span></span><span class="line"><span class="ln">101</span><span class="cl">    }
</span></span><span class="line"><span class="ln">102</span><span class="cl">    if (rowIndex == mazeHeight &amp;&amp; colIndex == mazeWidth) {
</span></span><span class="line"><span class="ln">103</span><span class="cl">
</span></span><span class="line"><span class="ln">104</span><span class="cl">        break;
</span></span><span class="line"><span class="ln">105</span><span class="cl">
</span></span><span class="line"><span class="ln">106</span><span class="cl">    }
</span></span><span class="line"><span class="ln">107</span><span class="cl">
</span></span><span class="line"><span class="ln">108</span><span class="cl">    currentCell.style.backgroundColor = &#34;#f00000&#34;;
</span></span><span class="line"><span class="ln">109</span><span class="cl">
</span></span><span class="line"><span class="ln">110</span><span class="cl">    lastExit = exit;
</span></span><span class="line"><span class="ln">111</span><span class="cl">
</span></span><span class="line"><span class="ln">112</span><span class="cl">    loop++;
</span></span><span class="line"><span class="ln">113</span><span class="cl">
</span></span><span class="line"><span class="ln">114</span><span class="cl">}
</span></span></code></pre></div><p>Hier wede ich noch mal ein paar Besonderheiten erläutern: Gleich zu Beginn der Schleife durchlaufen wir alle gültigen Ausgänge um so zu den nächsten möglichen Zellen zu kommen (<em>nextPossibleCell</em>). Nur wenn diese Zelle überhaupt existiert (wir uns also nicht am Rand des Irrgarten befinden) und nicht belegt ist (Hintergrundfarbe ist nicht rot), kann die entsprechende Bewegungsrichtung verwendet werden:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">[...]
</span></span><span class="line"><span class="ln">2</span><span class="cl">nextExits.push(validExits[i]);
</span></span><span class="line"><span class="ln">3</span><span class="cl">[...]
</span></span></code></pre></div><p>Danach folgt wieder die Zufallsbestimmung des nächsten Ausgangs. Die Protokollierung der restlichen Ausgänge erfolgt nun etwas anders, am Beispiel von Ausgang &ldquo;<em>rechts</em>&rdquo;:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">[...]
</span></span><span class="line"><span class="ln">2</span><span class="cl">remainingExits.left++;
</span></span><span class="line"><span class="ln">3</span><span class="cl">remainingExits.right--;
</span></span><span class="line"><span class="ln">4</span><span class="cl">[...]
</span></span></code></pre></div><p>Der Rest der Schleife bleibt unverändert. Und tatsächlich: Der Irrgarten sieht weitaus schöner aus:</p>
<p><img src="/2020/2020-04-11-wie-erstelle-ich-ein-labyrinth-mit-javascript/images/grafik-9-700x705.png" alt=""></p>
<p>Allerdings fehlt immer noch eine offensichtliche Kleinigkeit: Wir erreichen das Ziel nicht.</p>
<h2 id="schritt-6-das-sackgassenproblem">Schritt 6: Das Sackgassenproblem</h2>
<p>Wir erzeugen eine Sackgasse. Der Weg aus der Sackgasse sieht folgendermaßen aus: Wir müssen uns zurück bewegen. Bei jeder Zelle prüfen wir die möglichen Ausgänge und nehmen einfach einen anderen. Die bereits belegten Zellen bleiben weiterhin belegt.</p>
<p>Da wir nun in den Schleifenablauf eingreifen, führen wir eine Sicherung ein. So vermeiden wir, dass die Schleife z.B. unendlich läuft.</p>
<p>Außerdem führen wir ein weiteres Array <em>lastExits</em> ein, dass den aktuellen Weg protokolliert (das nennt sich übrigens <em><a href="https://en.wikipedia.org/wiki/Maze_generation_algorithm#Recursive_backtracker">recursive backtracker algorithmus</a>)</em> Gleich der Beginn der Schleife prüft nun erstmal unser Sicherungsnetz:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">while (loop &lt; ((mazeWidth * mazeHeight) - 1)) {
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl">    loopFuse++;
</span></span><span class="line"><span class="ln">4</span><span class="cl">
</span></span><span class="line"><span class="ln">5</span><span class="cl">    if (loopFuse &gt;= maxLoops) {break;}
</span></span><span class="line"><span class="ln">6</span><span class="cl">
</span></span><span class="line"><span class="ln">7</span><span class="cl">    [...]
</span></span></code></pre></div><p>Danach prüfen wir wie gehabt, welche Ausgänge noch nicht belegt sind. Und dann, bevor wir per Zufall den nächsten Ausgang bestimmen, bauen wir unsere Sackgassen-Schutz-Funktion ein:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln"> 1</span><span class="cl">[...]
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">if (nextExits.length == 0) {
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    lastCells.splice(lastCells.length - 1, 1);
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    console.log(&#34;Sackgasse. Einen Schritt zurück:&#34;);
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    rowIndex = lastCells[lastCells.length - 1][0];
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    colIndex = lastCells[lastCells.length - 1][1];
</span></span><span class="line"><span class="ln">10</span><span class="cl">    currentCell = document.getElementById(&#34;cell_&#34; + rowIndex + &#34;_&#34; + colIndex);
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">    continue;
</span></span><span class="line"><span class="ln">13</span><span class="cl">    
</span></span><span class="line"><span class="ln">14</span><span class="cl">}
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl">exitIndex = Math.floor(Math.random() * nextExits.length);
</span></span><span class="line"><span class="ln">17</span><span class="cl">
</span></span><span class="line"><span class="ln">18</span><span class="cl">[...]
</span></span></code></pre></div><p>Wenn wir uns in einer Sackgasse befinden, entfernen wir einfach die letzte Zelle aus <em>lastCells</em> und setzen den Zeige auf die Zelle davor. Dann verlassen wir den Schleifendurchlauf mit <em>continue.</em> Weiter unten müssen wir natürlich auch dafür sorgen, dass die jeweils aktuelle Zelle zu <em>lastCells</em> hinzugefügt wird:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">[...]
</span></span><span class="line"><span class="ln">2</span><span class="cl">lastCells.push([rowIndex, colIndex]);
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl">currentCell = document.getElementById(&#34;cell_&#34; + rowIndex + &#34;_&#34; + colIndex);
</span></span><span class="line"><span class="ln">5</span><span class="cl">
</span></span><span class="line"><span class="ln">6</span><span class="cl">[...]
</span></span></code></pre></div><p>Ganz am Ende der Schleife prüfen wir außerdem noch, ob wir uns vielleicht schon am Ziel befinden, um dann die Schleife zu verlassen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln"> 1</span><span class="cl">    [...]
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    if (rowIndex == mazeHeight &amp;&amp; colIndex == mazeWidth) {
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">        break;
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    }
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    currentCell.style.backgroundColor = &#34;#f00000&#34;;
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">    loop++;
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl">}
</span></span></code></pre></div><p>Das Ergebnis überzeugt: Wir erzeugen nun einen verzweigten Weg, der nicht nur nach rechts und unten geht, sondern sogar Sackgassen enthält:</p>
<p><img src="/2020/2020-04-11-wie-erstelle-ich-ein-labyrinth-mit-javascript/images/grafik-10-700x704.png" alt=""></p>
<h2 id="schritt-7-noch-mehr-sackgassen">Schritt 7: Noch mehr Sackgassen!</h2>
<p>Wie bekommen wir noch mehr Sackgassen in unser Labyrinth? Indem wir die echte Route abgehen und einfach von jeder Zelle aus eine neue Route starten? Ja. Das war auch mein erster Gedanke. Allerdings ist die aktuelle Zielroute oft von Sackgassen umgeben. Wenn wir diesen Weg wählen, könnten also weiterhin einige Felder unbearbeitet bleiben. Deshalb werden wir ziemlich schroff einfach jedes belegte Feld als Startpunkt für einen Abzweig nutzen. Das Erzeugen der Abzweigungen kommt natürlich ohne die Sackgassen-Schutz-Funktion aus.</p>
<p>Dazu müssen wir erstmal die aktuelle Logik in eine Funktion packen, die jetzt drei Parameter erwartet:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">startAtRow = 1;
</span></span><span class="line"><span class="ln">2</span><span class="cl">startAtCol = 1;
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl">addRoute(startARow, statrtAtCol, false);
</span></span></code></pre></div><p>Die Funktion <em>addRoute</em> sieht folgendermaßen aus. <em>False</em> bedeutet also, dass wir keinen Abzeig sondern erstmal die korrekte Route zum Ziel erzeugen wollen.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">  1</span><span class="cl"><span class="n">function</span> <span class="n">addRoute</span><span class="p">(</span><span class="n">startAtRow</span><span class="p">,</span> <span class="n">startAtCol</span><span class="p">,</span> <span class="n">createDetour</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">  2</span><span class="cl">
</span></span><span class="line"><span class="ln">  3</span><span class="cl">    <span class="k">var</span> <span class="n">validExits</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">,</span> <span class="s2">&#34;left&#34;</span><span class="p">,</span> <span class="s2">&#34;top&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="ln">  4</span><span class="cl">    <span class="k">var</span> <span class="n">remainingExits</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;right&#34;</span><span class="p">:</span> <span class="n">mazeWidth</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">:</span> <span class="n">mazeHeight</span><span class="p">,</span> <span class="s2">&#34;left&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">&#34;top&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">};</span>
</span></span><span class="line"><span class="ln">  5</span><span class="cl">    <span class="k">var</span> <span class="n">nextExits</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="ln">  6</span><span class="cl">    <span class="k">var</span> <span class="n">lastCells</span><span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="ln">  7</span><span class="cl">
</span></span><span class="line"><span class="ln">  8</span><span class="cl">    <span class="k">var</span> <span class="n">rowIndex</span> <span class="o">=</span> <span class="n">startAtRow</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">  9</span><span class="cl">    <span class="k">var</span> <span class="n">colIndex</span> <span class="o">=</span> <span class="n">startAtCol</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 10</span><span class="cl">    
</span></span><span class="line"><span class="ln"> 11</span><span class="cl">    <span class="k">var</span> <span class="n">currentCell</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">&#34;cell_&#34;</span> <span class="o">+</span> <span class="n">rowIndex</span> <span class="o">+</span> <span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="n">colIndex</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 12</span><span class="cl">
</span></span><span class="line"><span class="ln"> 13</span><span class="cl">    <span class="k">var</span> <span class="n">exit</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 14</span><span class="cl">
</span></span><span class="line"><span class="ln"> 15</span><span class="cl">    <span class="k">var</span> <span class="n">lastExit</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 16</span><span class="cl">
</span></span><span class="line"><span class="ln"> 17</span><span class="cl">    <span class="k">var</span> <span class="n">exitIndex</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 18</span><span class="cl">
</span></span><span class="line"><span class="ln"> 19</span><span class="cl">    <span class="k">var</span> <span class="n">loop</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 20</span><span class="cl">    <span class="k">var</span> <span class="n">loopFuse</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 21</span><span class="cl">    <span class="k">var</span> <span class="n">maxLoops</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">mazeWidth</span> <span class="o">*</span> <span class="n">mazeHeight</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 22</span><span class="cl">
</span></span><span class="line"><span class="ln"> 23</span><span class="cl">    <span class="k">var</span> <span class="n">nextPossibleCell</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 24</span><span class="cl">
</span></span><span class="line"><span class="ln"> 25</span><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">loop</span> <span class="o">&lt;</span> <span class="p">((</span><span class="n">mazeWidth</span> <span class="o">*</span> <span class="n">mazeHeight</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 26</span><span class="cl">
</span></span><span class="line"><span class="ln"> 27</span><span class="cl">        <span class="n">loopFuse</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 28</span><span class="cl">
</span></span><span class="line"><span class="ln"> 29</span><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">loopFuse</span> <span class="o">&gt;=</span> <span class="n">maxLoops</span><span class="p">)</span> <span class="p">{</span><span class="k">break</span><span class="p">;}</span>
</span></span><span class="line"><span class="ln"> 30</span><span class="cl">
</span></span><span class="line"><span class="ln"> 31</span><span class="cl">        <span class="n">nextExits</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="ln"> 32</span><span class="cl">
</span></span><span class="line"><span class="ln"> 33</span><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">validExits</span><span class="o">.</span><span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 34</span><span class="cl">
</span></span><span class="line"><span class="ln"> 35</span><span class="cl">            <span class="k">switch</span><span class="p">(</span><span class="n">validExits</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 36</span><span class="cl">
</span></span><span class="line"><span class="ln"> 37</span><span class="cl">                <span class="k">case</span> <span class="s2">&#34;right&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln"> 38</span><span class="cl">                    <span class="n">nextPossibleCell</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">&#34;cell_&#34;</span> <span class="o">+</span> <span class="n">rowIndex</span> <span class="o">+</span> <span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="p">(</span><span class="n">colIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
</span></span><span class="line"><span class="ln"> 39</span><span class="cl">                    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 40</span><span class="cl">
</span></span><span class="line"><span class="ln"> 41</span><span class="cl">                <span class="k">case</span> <span class="s2">&#34;left&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln"> 42</span><span class="cl">                    <span class="n">nextPossibleCell</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">&#34;cell_&#34;</span> <span class="o">+</span> <span class="n">rowIndex</span> <span class="o">+</span> <span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="p">(</span><span class="n">colIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="p">));</span>
</span></span><span class="line"><span class="ln"> 43</span><span class="cl">                    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 44</span><span class="cl">
</span></span><span class="line"><span class="ln"> 45</span><span class="cl">                <span class="k">case</span> <span class="s2">&#34;bottom&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln"> 46</span><span class="cl">                    <span class="n">nextPossibleCell</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">&#34;cell_&#34;</span> <span class="o">+</span> <span class="p">(</span><span class="n">rowIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="n">colIndex</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 47</span><span class="cl">                    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 48</span><span class="cl">
</span></span><span class="line"><span class="ln"> 49</span><span class="cl">                <span class="k">case</span> <span class="s2">&#34;top&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln"> 50</span><span class="cl">                    <span class="n">nextPossibleCell</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">&#34;cell_&#34;</span> <span class="o">+</span> <span class="p">(</span><span class="n">rowIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="n">colIndex</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 51</span><span class="cl">                    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 52</span><span class="cl">
</span></span><span class="line"><span class="ln"> 53</span><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 54</span><span class="cl">            
</span></span><span class="line"><span class="ln"> 55</span><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">nextPossibleCell</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 56</span><span class="cl">
</span></span><span class="line"><span class="ln"> 57</span><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="n">nextPossibleCell</span><span class="o">.</span><span class="n">getAttribute</span><span class="p">(</span><span class="s2">&#34;occupied&#34;</span><span class="p">)</span> <span class="o">!=</span> <span class="s2">&#34;true&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 58</span><span class="cl">                    
</span></span><span class="line"><span class="ln"> 59</span><span class="cl">                    <span class="k">for</span> <span class="p">(</span><span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="n">remainingExits</span><span class="p">[</span><span class="n">validExits</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span> <span class="n">t</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 60</span><span class="cl">
</span></span><span class="line"><span class="ln"> 61</span><span class="cl">                        <span class="n">nextExits</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">validExits</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="ln"> 62</span><span class="cl">
</span></span><span class="line"><span class="ln"> 63</span><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 64</span><span class="cl">
</span></span><span class="line"><span class="ln"> 65</span><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 66</span><span class="cl">
</span></span><span class="line"><span class="ln"> 67</span><span class="cl">            <span class="p">}</span> 
</span></span><span class="line"><span class="ln"> 68</span><span class="cl">
</span></span><span class="line"><span class="ln"> 69</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 70</span><span class="cl">
</span></span><span class="line"><span class="ln"> 71</span><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">nextExits</span><span class="o">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 72</span><span class="cl">
</span></span><span class="line"><span class="ln"> 73</span><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">createDetour</span> <span class="o">==</span> <span class="bp">true</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 74</span><span class="cl">
</span></span><span class="line"><span class="ln"> 75</span><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="n">colIndex</span> <span class="o">==</span> <span class="n">mazeWidth</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 76</span><span class="cl">                    <span class="n">rowIndex</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 77</span><span class="cl">                    <span class="n">colIndex</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 78</span><span class="cl">                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 79</span><span class="cl">                    <span class="n">colIndex</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 80</span><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 81</span><span class="cl">
</span></span><span class="line"><span class="ln"> 82</span><span class="cl">                <span class="n">currentCell</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">&#34;cell_&#34;</span> <span class="o">+</span> <span class="n">rowIndex</span> <span class="o">+</span> <span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="n">colIndex</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 83</span><span class="cl">
</span></span><span class="line"><span class="ln"> 84</span><span class="cl">                <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 85</span><span class="cl">
</span></span><span class="line"><span class="ln"> 86</span><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 87</span><span class="cl">                
</span></span><span class="line"><span class="ln"> 88</span><span class="cl">                <span class="n">lastCells</span><span class="o">.</span><span class="n">splice</span><span class="p">(</span><span class="n">lastCells</span><span class="o">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 89</span><span class="cl">
</span></span><span class="line"><span class="ln"> 90</span><span class="cl">                <span class="n">rowIndex</span> <span class="o">=</span> <span class="n">lastCells</span><span class="p">[</span><span class="n">lastCells</span><span class="o">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
</span></span><span class="line"><span class="ln"> 91</span><span class="cl">                <span class="n">colIndex</span> <span class="o">=</span> <span class="n">lastCells</span><span class="p">[</span><span class="n">lastCells</span><span class="o">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="ln"> 92</span><span class="cl">                <span class="n">currentCell</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">&#34;cell_&#34;</span> <span class="o">+</span> <span class="n">rowIndex</span> <span class="o">+</span> <span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="n">colIndex</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 93</span><span class="cl">
</span></span><span class="line"><span class="ln"> 94</span><span class="cl">                <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 95</span><span class="cl">            
</span></span><span class="line"><span class="ln"> 96</span><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 97</span><span class="cl">
</span></span><span class="line"><span class="ln"> 98</span><span class="cl">        <span class="p">}</span> 
</span></span><span class="line"><span class="ln"> 99</span><span class="cl">
</span></span><span class="line"><span class="ln">100</span><span class="cl">        <span class="n">exitIndex</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="n">floor</span><span class="p">(</span><span class="n">Math</span><span class="o">.</span><span class="n">random</span><span class="p">()</span> <span class="o">*</span> <span class="n">nextExits</span><span class="o">.</span><span class="n">length</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">101</span><span class="cl">
</span></span><span class="line"><span class="ln">102</span><span class="cl">        <span class="n">exit</span> <span class="o">=</span> <span class="n">nextExits</span><span class="p">[</span><span class="n">exitIndex</span><span class="p">];</span>
</span></span><span class="line"><span class="ln">103</span><span class="cl">
</span></span><span class="line"><span class="ln">104</span><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">createDetour</span> <span class="o">==</span> <span class="bp">false</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">105</span><span class="cl">
</span></span><span class="line"><span class="ln">106</span><span class="cl">            <span class="n">currentCell</span><span class="o">.</span><span class="n">style</span><span class="p">[</span><span class="s2">&#34;border-&#34;</span><span class="o">+</span><span class="n">exit</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;none&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">107</span><span class="cl">
</span></span><span class="line"><span class="ln">108</span><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">109</span><span class="cl">
</span></span><span class="line"><span class="ln">110</span><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">exit</span> <span class="o">==</span> <span class="s2">&#34;right&#34;</span> <span class="o">&amp;&amp;</span> <span class="n">colIndex</span> <span class="o">==</span> <span class="n">mazeWidth</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">rowIndex</span> <span class="o">==</span> <span class="n">mazeHeight</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="ln">111</span><span class="cl">                <span class="o">!</span><span class="p">(</span><span class="n">exit</span> <span class="o">==</span> <span class="s2">&#34;bottom&#34;</span> <span class="o">&amp;&amp;</span> <span class="n">colIndex</span> <span class="o">==</span> <span class="n">mazeWidth</span> <span class="o">&amp;&amp;</span> <span class="n">rowIndex</span> <span class="o">==</span> <span class="n">mazeHeight</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">112</span><span class="cl">
</span></span><span class="line"><span class="ln">113</span><span class="cl">                <span class="n">currentCell</span><span class="o">.</span><span class="n">style</span><span class="p">[</span><span class="s2">&#34;border-&#34;</span><span class="o">+</span><span class="n">exit</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;none&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">114</span><span class="cl">
</span></span><span class="line"><span class="ln">115</span><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="ln">116</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">117</span><span class="cl">        
</span></span><span class="line"><span class="ln">118</span><span class="cl">        <span class="k">switch</span><span class="p">(</span><span class="n">exit</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">119</span><span class="cl">
</span></span><span class="line"><span class="ln">120</span><span class="cl">            <span class="k">case</span> <span class="s2">&#34;right&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">121</span><span class="cl">
</span></span><span class="line"><span class="ln">122</span><span class="cl">                <span class="n">colIndex</span> <span class="o">=</span> <span class="n">colIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">123</span><span class="cl">                <span class="n">remainingExits</span><span class="o">.</span><span class="n">left</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">124</span><span class="cl">                <span class="n">remainingExits</span><span class="o">.</span><span class="n">right</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">125</span><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">126</span><span class="cl">
</span></span><span class="line"><span class="ln">127</span><span class="cl">            <span class="k">case</span> <span class="s2">&#34;bottom&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">128</span><span class="cl">
</span></span><span class="line"><span class="ln">129</span><span class="cl">                <span class="n">rowIndex</span> <span class="o">=</span> <span class="n">rowIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">130</span><span class="cl">                <span class="n">remainingExits</span><span class="o">.</span><span class="n">top</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">131</span><span class="cl">                <span class="n">remainingExits</span><span class="o">.</span><span class="n">bottom</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">132</span><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">133</span><span class="cl">
</span></span><span class="line"><span class="ln">134</span><span class="cl">            <span class="k">case</span> <span class="s2">&#34;left&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">135</span><span class="cl">
</span></span><span class="line"><span class="ln">136</span><span class="cl">                <span class="n">colIndex</span> <span class="o">=</span> <span class="n">colIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">137</span><span class="cl">                <span class="n">remainingExits</span><span class="o">.</span><span class="n">left</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">138</span><span class="cl">                <span class="n">remainingExits</span><span class="o">.</span><span class="n">right</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">139</span><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">140</span><span class="cl">
</span></span><span class="line"><span class="ln">141</span><span class="cl">            <span class="k">case</span> <span class="s2">&#34;top&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">142</span><span class="cl">
</span></span><span class="line"><span class="ln">143</span><span class="cl">                <span class="n">rowIndex</span> <span class="o">=</span> <span class="n">rowIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">144</span><span class="cl">                <span class="n">remainingExits</span><span class="o">.</span><span class="n">top</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">145</span><span class="cl">                <span class="n">remainingExits</span><span class="o">.</span><span class="n">bottom</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">146</span><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">147</span><span class="cl">                
</span></span><span class="line"><span class="ln">148</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">149</span><span class="cl">
</span></span><span class="line"><span class="ln">150</span><span class="cl">        <span class="n">lastCells</span><span class="o">.</span><span class="n">push</span><span class="p">([</span><span class="n">rowIndex</span><span class="p">,</span> <span class="n">colIndex</span><span class="p">]);</span>
</span></span><span class="line"><span class="ln">151</span><span class="cl">
</span></span><span class="line"><span class="ln">152</span><span class="cl">        <span class="n">currentCell</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">&#34;cell_&#34;</span> <span class="o">+</span> <span class="n">rowIndex</span> <span class="o">+</span> <span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="n">colIndex</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">153</span><span class="cl">
</span></span><span class="line"><span class="ln">154</span><span class="cl">        <span class="k">switch</span><span class="p">(</span><span class="n">exit</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">155</span><span class="cl">
</span></span><span class="line"><span class="ln">156</span><span class="cl">            <span class="k">case</span> <span class="s2">&#34;right&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">157</span><span class="cl">
</span></span><span class="line"><span class="ln">158</span><span class="cl">                <span class="n">currentCell</span><span class="o">.</span><span class="n">style</span><span class="p">[</span><span class="s2">&#34;border-left&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;none&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">159</span><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">160</span><span class="cl">
</span></span><span class="line"><span class="ln">161</span><span class="cl">            <span class="k">case</span> <span class="s2">&#34;bottom&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">162</span><span class="cl">
</span></span><span class="line"><span class="ln">163</span><span class="cl">                <span class="n">currentCell</span><span class="o">.</span><span class="n">style</span><span class="p">[</span><span class="s2">&#34;border-top&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;none&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">164</span><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">165</span><span class="cl">
</span></span><span class="line"><span class="ln">166</span><span class="cl">            <span class="k">case</span> <span class="s2">&#34;left&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">167</span><span class="cl">
</span></span><span class="line"><span class="ln">168</span><span class="cl">                <span class="n">currentCell</span><span class="o">.</span><span class="n">style</span><span class="p">[</span><span class="s2">&#34;border-right&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;none&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">169</span><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">170</span><span class="cl">
</span></span><span class="line"><span class="ln">171</span><span class="cl">            <span class="k">case</span> <span class="s2">&#34;top&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">172</span><span class="cl">
</span></span><span class="line"><span class="ln">173</span><span class="cl">                <span class="n">currentCell</span><span class="o">.</span><span class="n">style</span><span class="p">[</span><span class="s2">&#34;border-bottom&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;none&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">174</span><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">175</span><span class="cl">
</span></span><span class="line"><span class="ln">176</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">177</span><span class="cl">
</span></span><span class="line"><span class="ln">178</span><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">rowIndex</span> <span class="o">==</span> <span class="n">mazeHeight</span> <span class="o">&amp;&amp;</span> <span class="n">colIndex</span> <span class="o">==</span> <span class="n">mazeWidth</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">179</span><span class="cl">
</span></span><span class="line"><span class="ln">180</span><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">181</span><span class="cl">
</span></span><span class="line"><span class="ln">182</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">183</span><span class="cl">
</span></span><span class="line"><span class="ln">184</span><span class="cl">        <span class="n">currentCell</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="n">backgroundColorRoute</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">185</span><span class="cl">        <span class="n">currentCell</span><span class="o">.</span><span class="n">setAttribute</span><span class="p">(</span><span class="s2">&#34;occupied&#34;</span><span class="p">,</span> <span class="s2">&#34;true&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">186</span><span class="cl">
</span></span><span class="line"><span class="ln">187</span><span class="cl">        <span class="n">lastExit</span> <span class="o">=</span> <span class="n">exit</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">188</span><span class="cl">
</span></span><span class="line"><span class="ln">189</span><span class="cl">        <span class="n">loop</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">190</span><span class="cl">
</span></span><span class="line"><span class="ln">191</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">192</span><span class="cl">
</span></span><span class="line"><span class="ln">193</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>An der Funktionalität hat sich hier nicht viel geändert: Wir prüfen zuerst, welche Ausgänge von der aktuellen Zelle aus möglich sind. Direkt danach allerdings müssen wir, wenn es keine weiteren Ausgänge gibt, die Funktion verlassen - wir wollen ja diesmal explizit Sackgassen erzeugen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">if (createDetour == true) {
</span></span><span class="line"><span class="ln">2</span><span class="cl">  return false;
</span></span><span class="line"><span class="ln">3</span><span class="cl">[...]
</span></span></code></pre></div><p>Weiter unten gibt es eine weitere Besonderheit: Wenn wir den Abzweig erzeugen, darf dieser natürlich nicht &ldquo;aus Versehen&rdquo; zum Ziel führen. Wir prüfen also, ob wir uns direkt neben der Zielzelle befinden. In dem Fall wird der Rahmen nicht entfernt:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">[...]
</span></span><span class="line"><span class="ln">2</span><span class="cl">if (!(exit == &#34;right&#34; &amp;&amp; colIndex == mazeWidth - 1 &amp;&amp; rowIndex == mazeHeight) &amp;&amp;
</span></span><span class="line"><span class="ln">3</span><span class="cl">    !(exit == &#34;bottom&#34; &amp;&amp; colIndex == mazeWidth &amp;&amp; rowIndex == mazeHeight - 1) ) {
</span></span><span class="line"><span class="ln">4</span><span class="cl">
</span></span><span class="line"><span class="ln">5</span><span class="cl">    currentCell.style[&#34;border-&#34;+exit] = &#34;none&#34;;
</span></span><span class="line"><span class="ln">6</span><span class="cl">
</span></span><span class="line"><span class="ln">7</span><span class="cl">}
</span></span><span class="line"><span class="ln">8</span><span class="cl">[...]
</span></span></code></pre></div><p>Ganz am Ende der Schleife wird außerdem das Attribut <em>occupied</em> der Zelle auf <em>true</em> gesetzt. So müssen wir nicht mehr mit der Hintergrundfarbe arbeiten, um belegte Zellen zu erkennen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">[...]
</span></span><span class="line"><span class="ln">2</span><span class="cl">currentCell.setAttribute(&#34;occupied&#34;, &#34;true&#34;);
</span></span><span class="line"><span class="ln">3</span><span class="cl">[...]
</span></span></code></pre></div><p>Nun kommen wir zum Erzeugen der Abzweige. Wie schon angekündigt, durchlaufen wir einfach die Zellen, die bereits belegt (<em>occupied == true)</em> sind, um von dort aus unsere bewährte Routenerstellung - jedoch ohne Sackgassen-Schutz-Funktion, zu starten:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="n">n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">mazeWidth</span> <span class="o">*</span> <span class="n">mazeHeight</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">n</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">var</span> <span class="n">currentCell</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">&#34;cell_&#34;</span> <span class="o">+</span> <span class="n">startAtRow</span> <span class="o">+</span> <span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="n">startAtCol</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">currentCell</span><span class="o">.</span><span class="n">getAttribute</span><span class="p">(</span><span class="s2">&#34;occupied&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&#34;true&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="n">addRoute</span><span class="p">(</span><span class="n">startAtRow</span><span class="p">,</span> <span class="n">startAtCol</span><span class="p">,</span> <span class="bp">true</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">startAtCol</span> <span class="o">==</span> <span class="n">mazeWidth</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">        
</span></span><span class="line"><span class="ln">13</span><span class="cl">        <span class="n">startAtRow</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">        <span class="n">startAtCol</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">
</span></span><span class="line"><span class="ln">18</span><span class="cl">        <span class="n">startAtCol</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">
</span></span><span class="line"><span class="ln">20</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">
</span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Et voila: Ein Irrgarten:</p>
<p><img src="/2020/2020-04-11-wie-erstelle-ich-ein-labyrinth-mit-javascript/images/grafik-12-700x696.png" alt=""></p>
<p>Und auch wenn der Algorithmus teilweise etwas stumpf gestaltet ist, kann sich die Performance sehen lassen. Ein Labyrinth mit der Kantenlänge 100 x 100 dauert nur wenige Sekunden:</p>
<p><img src="/2020/2020-04-11-wie-erstelle-ich-ein-labyrinth-mit-javascript/images/grafik-13-700x699.png" alt=""></p>
<p>Natürlich gibt es an der einen oder anderen Stelle noch Optimierungspotential. Ich hab die ganze Logik noch mit einer Navigation und einer Stopp-Uhr ausgestattet. So sieht das ganze dann als Zeitvertreib für die Quarantäne aus: <a href="https://nickyreinert.github.io/maze/">https://nickyreinert.github.io/maze/</a></p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> anleitung, javascript, labyrinth</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Wie erstelle ich ein Labyrinth mit JavaScript? - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>tutorial</dc:type>
      
      
    </item><item>
      <title>Wordpress-Plugin um eine Word-Cloud mit beliebigen Wörtern darzustellen</title>
      <link>https://nickyreinert.de/2018/2018-06-13-wordpress-plugin-um-eine-word-cloud-mit-beliebigen-woertern-darzustellen/</link>
      <pubDate>Wed, 13 Jun 2018 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2018/2018-06-13-wordpress-plugin-um-eine-word-cloud-mit-beliebigen-woertern-darzustellen/</guid>
      <description>Diese Version ist veraltet, bitte verwende absofort diese Version:
https://www.nickyreinert.de/wordpress-word-cloud-2-0/
Wer träumt nicht davon, eine Wolke aus …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Der Artikel stellt ein selbst entwickeltes WordPress-Plugin vor, das Word-Clouds aus beliebigen Wortlisten generiert. Es wird erklärt, wie das auf `wordCloud2.js` basierende Plugin installiert und mittels Shortcode konfiguriert wird, um Wortlisten aus Custom Fields oder SQL-Abfragen zu visualisieren. Ein Hinweis verweist auf eine neuere Version.</p>
          
          
          <p><strong>Hauptthemen:</strong> WordPress, Plugins, JavaScript, Datenvisualisierung, PHP</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>Diese Version ist veraltet, bitte verwende absofort diese Version:</p>
<p><a href="https://www.nickyreinert.de/wordpress-word-cloud-2-0/">https://www.nickyreinert.de/wordpress-word-cloud-2-0/</a></p>
<p>Wer träumt nicht davon, eine Wolke aus Wörtern in Wordpress darstellen zu können? Der Fachmann spricht hier von einer sogenannten Word-Cloud. Ich meine hier übrigens ausdrücklich nicht die bekannten TagClouds, bei denen schlicht die verwendeten Wordpress-Tags in einer Wolke anklickbar angezeigt werden. Hier geht es einfach um die Darstellung von Wörtern, die entsprechend der Vorkommen verschieden groß dargestellt werden. Leider gab es genau für diesen Zweck bisher kein Wordpress-Plugin. Dafür habe ich aber eine sehr leicht zu bedienende <a href="https://github.com/timdream/wordcloud2.js/blob/gh-pages/API.md">JavaScript-Bibliothek von Tim Dream: wordCloud2.js</a> gefunden, auf der ich das Plugin aufgebaut habe.</p>
<h2 id="installation">Installation</h2>
<p>Der ganze Spaß steht <a href="https://github.com/nickyreinert/wordCloud-for-Wordpress">auf GitHub zur Verfügung</a>. Du musst lediglich den Source-Code herunterladen und in einen Unterordner in wp-content/plugins entpacken. Wenn du das Plugin im Backend aktiviert hast, kannst du auf jeder Seite und jedem Beitrag den Shortcode [ word-cloud ] nutzen.</p>
<p>Die folgenden Parameter kannst du im Shortcode übergeben. Der Parameter <strong>target-id</strong> ist dabei immer notwendig, alle anderen sind nicht verpflichtend.</p>
<ul>
<li><strong>target-id</strong> - damit wird jede Instanz von word-cloud adressiert. Du kannst je Seite mehrere Word-Clouds erstellen, die Target-Id wird auch als CSS-Id verwendet</li>
<li><strong>source</strong> -wenn du eine eigene SQL-Abfrage verwenden möchtest, musst du diesen Parameter auf &ldquo;sql&rdquo; setzen, andernfalls wird versucht, ein Custom-Field auszulesen</li>
<li><strong>source-id</strong> - wenn sich die Wortliste in einem Custom-Field befindet, musst du mit diesem Parameter den Namen des Felds angeben</li>
<li><strong>query</strong> - wenn du eine SQL-Abfrage verwendest, nutzt du dafür diesen Parameter</li>
<li><strong>backgroundColor</strong> - die Hintergrundfarbe der Cloud, z.B. #123123</li>
<li><strong>gridSize</strong> - ein ganze Zahl, mit der die Lücke zwischen den Wörtern gesteuert werden kann</li>
<li><strong>fontFamily</strong> - welcher Font soll verwendet werden</li>
<li><strong>fontWeight</strong> - das Gewicht der Schriften, also z.B. bold oder normal</li>
<li><strong>minRotation</strong> - eine ganze Zahl, die das Mindestmaß der Rotation bestimmt, ist der Wert 0, wird die Rotation deaktiviert</li>
<li><strong>maxRotation</strong> - das gleiche, nur für die Obergrenze der Rotation</li>
<li><strong>weightFactor</strong> - eine ganze Zahl, um die Gewichtung der Wörter zu beeinflussen, also ein Multiplikator für die Größe</li>
<li><strong>shape</strong> - die Form der Wolke, hier kannst du folgende Formen verwenden: circle (Standard), cardioid (Apfel bzw. Herz), diamond, square, triangle-forward, triangle, pentagon und star</li>
</ul>
<h2 id="beispiel">Beispiel</h2>
<h3 id="wörter-aus-einer-mysql-tabelle-nutzen">Wörter aus einer MySQL-Tabelle nutzen</h3>
<p>Die folgende Word-Cloud verwendet eine Liste von 100 Wörtern aus einer Datenbank-Abfrage:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">[ word-cloud target-id=&#34;myWordCloud1&#34; source=&#34;sql&#34; query=&#34;SELECT word, SUM(count) AS count FROM augenblicke.001_words GROUP BY word ORDER BY count DESC LIMIT 0,100&#34; ]
</span></span></code></pre></div><p>Hier siehst du eine Word-Cloud, die auf eine kleinere Liste zurückgreift, die ich in einem Custom-Field übergebe:</p>
<p>[word-cloud target-id=&ldquo;myWordCloud2&rdquo; source-id=&ldquo;word-cloud&rdquo;]</p>
<h3 id="wörter-aus-einem-benutzerdefinierten-feld-nutzen">Wörter aus einem benutzerdefinierten Feld nutzen</h3>
<p>Achtung: Dieser Weg funktioniert mit dem neuen Gutenberg-Editor (ab Wordpress 5) nicht, da dieser (Stand Januar 2019) keine benutzerdefinierten Felder anzeigt.</p>
<p>Wenn du auf eine Liste mit Wörter aus einem benutzerdefinierten Feld zugreifen willst, übergibst du als source-id den Namen des benutzerdefinierten Feldes:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">[word-cloud target-id=&#34;myWordCloud2&#34; source-id=&#34;word-cloud&#34;]
</span></span></code></pre></div><p>Das benutzerdefinierte Feld legst du dann mit genau diesem Namen an und füllst es mit den Wörter und den Werten, die die Größe represäntieren sollen:</p>
<p><a href="https://www.nickyreinert.de/files/grafik-13.png"><img src="/2018/2018-06-13-wordpress-plugin-um-eine-word-cloud-mit-beliebigen-woertern-darzustellen/images/grafik-13-700x74.png" alt=""></a></p>
<p>Benutzerdefiniertes Feld mit eigener Wortliste im klassischen Editor</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> WordPress, Plugin, Projekt, Word-Cloud</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>projekte</category>
      
      <category>wordpress</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Wordpress-Plugin um eine Word-Cloud mit beliebigen Wörtern darzustellen - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>project_documentation</dc:type>
      
      
    </item><item>
      <title>Eine HTML-Tabelle als Heatmap in Wordpress darstellen</title>
      <link>https://nickyreinert.de/2018/2018-04-06-eine-html-tabelle-als-heatmap-in-wordpress-darstellen/</link>
      <pubDate>Fri, 06 Apr 2018 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2018/2018-04-06-eine-html-tabelle-als-heatmap-in-wordpress-darstellen/</guid>
      <description>data-heatmap dient zur Darstellung einer Heatmap als Wordpress Plugin. Dabei werden entsprechende Quell-Daten in einer HTML-Tabelle als Heatmap darzustellen. …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieser Artikel stellt das WordPress-Plugin `data-heatmap` vor, das Daten aus einer HTML-Tabelle als Heatmap visualisiert. Es wird ein Anwendungsbeispiel gezeigt und die Verwendung des Shortcodes `[data-heatmap]` mit seinen Parametern erklärt. Das Plugin ist auf GitHub verfügbar.</p>
          
          
          <p><strong>Hauptthemen:</strong> WordPress, Plugins, Datenvisualisierung, Heatmap, JavaScript</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p><em>data-heatmap</em> dient zur Darstellung einer Heatmap als Wordpress Plugin. Dabei werden entsprechende Quell-Daten in einer HTML-Tabelle als Heatmap darzustellen. Das Ergebnis kann z.B. so aussehen:</p>
<p>[data-heatmap transpose=&ldquo;yes&rdquo; hide-xaxis=&ldquo;no&rdquo; hide-yaxis=&ldquo;no&rdquo; hide-values=&ldquo;yes&rdquo; sort-yaxis=&ldquo;yes&rdquo; source-for-gradiation=&ldquo;y&rdquo;]</p>
<p>Die Daten stammen aus einer Tabelle mit drei Spalten. Es handelt sich um die Bus- und Bahn-Linien der öffentlichen Verkehrsmittel in Berlin (Spalte x), die Tageszeiten von 0 bis 23 Uhr (Spalte y) und die Anzahl von Beiträgen in einem Portal (Spalte v). Die Heatmap zeigt also, wieviele Beiträge zu einer bestimmten Uhrzeit in einer bestimmten Linie abgegeben wurden.</p>
<p>y,x,v
0, BUS, 49
1, EXPRES-BUS, 4
1, METRO-BUS, 28
4, METRO-TRAM, 59
&hellip;</p>
<p>Das Plugin steht auf <a href="https://github.com/nickyreinert/data-heatmap">github.com</a> zur freien Verwendung zur Verfügung.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> WordPress, Plugin, Projekt, Heatmap, Datenvisualisierung</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>projekte</category>
      
      <category>wordpress</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Eine HTML-Tabelle als Heatmap in Wordpress darstellen - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>project_documentation</dc:type>
      
      
    </item>
  </channel>
</rss>