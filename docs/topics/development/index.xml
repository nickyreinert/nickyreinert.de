<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" 
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Development auf Nicky Reinert</title>
    <link>https://nickyreinert.de/topics/development/</link>
    <description>Blog &amp; Projekte von Nicky Reinert (Institut für digitale Herausforderungen): Webentwicklung &amp; Software Development, SEO &amp; Analytics, Hosting &amp; DevOps, WordPress &amp; Hugo, Tools &amp; Projekte, Datenschutz und digitale Kultur – plus Texte zu KI sowie Autismus &amp; Gesellschaft.</description>
    <generator>Hugo 0.148.2</generator>
    <language>de</language>
    <managingEditor></managingEditor>
    <webMaster></webMaster>
    <copyright></copyright>
    <lastBuildDate>Tue, 01 Oct 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://nickyreinert.de/topics/development/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>Mehrere virtuelle Server mit nginx und PHP-FPM für Wordpress (Teil 2 / 3)</title>
      <link>https://nickyreinert.de/2019/2019-10-01-mehrere-virtuelle-server-mit-nginx-und-php-fpm-fur-wordpress-teil-2-3/</link>
      <pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2019/2019-10-01-mehrere-virtuelle-server-mit-nginx-und-php-fpm-fur-wordpress-teil-2-3/</guid>
      <description>Im zweiten Teil geht es um die individuelle Einrichtung der virtuellen Server für nginx.
Server oder virtual hosts? Im Gegensatz zu den &ldquo;virtual …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieser Artikel behandelt Mehrere virtuelle Server mit nginx und PHP-FPM für Wordpress (Teil 2 / 3) und bietet praktische Einblicke in das Thema.</p>
          
          
          <p><strong>Hauptthemen:</strong> Web, WordPress, Development</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>Im zweiten Teil geht es um die individuelle Einrichtung der virtuellen Server für nginx.</p>
<h2 id="server-oder-virtual-hosts">Server oder virtual hosts?</h2>
<p>Im Gegensatz zu den &ldquo;<strong>virtual hosts</strong>&rdquo; von Apache spricht man bei nginx von &ldquo;<strong>servern</strong>&rdquo;. Ich möchte das Aufgreifen und nutze im Folgenden einfach nur von &ldquo;<strong>Server</strong>&rdquo; wenn ich von einem individuellen Host oder virtuellem Server spreche. Wie bei Apache werden diese idealerweise in eigenständigen Konfig-Dateien definiert. Hier gibt es verschiedene Vorlieben, ob die Konfig-Dateien unter <strong>/etc/nginx/sites-available</strong> oder <strong>/etc/nginx/conf.d</strong> abgelegt werden.</p>
<p>Aus technischer Sicht macht es wirklich überhaupt <strong>gar keinen Unterschied</strong>. Bei der ersten Variante wird im Ordner <strong>/etc/nginx/sites-enabled</strong> mit einem symbolischen Link auf die tatsächliche Konfig-Datei an einem anderen Ort verwiesen. Um sie zu de-aktivieren, wird dann einfach der symbolische Link gelöscht. Das ist auch der klassische Apache-Weg.</p>
<p>Bei der zweiten Variante muss man die Konfig-Dateien im Order <strong>/etc/nginx/conf.d</strong> mit der Endung <strong>conf</strong> anlegen. Um den Server zu deaktivieren, <strong>entfernt man die Endung .conf</strong>. Entscheide selber, was dir lieber ist.</p>
<p>Eine beispielhafte Konfiguration für einen Server ist folgendermaßen aufgebaut. Die interessante Parameter beschreibe ich weiter unten etwas ausführlicher. Ich versuche möglichst viel mit <strong>Platzhaltern</strong> zu arbeiten (<em>set $server &ldquo;example_com;</em>) um die Nutzung für neue Server zu vereinfachen. Leider funktioniert das bei nginx nicht für jeder <strong>Direktive</strong>. (So werden in nginx die Parameter genannt. Warum? Weil eine Direktive selber auch Parameter besitzen kann, wie du gleich sehen wirst.)</p>
<p>Außerdem habe aus Gründen der Übersicht sich wiederholdene Einstellungen in Dateien (sogenannte <strong>Snippets</strong>) ausgelagert. Diese befinden sich im Ordner <strong>/etc/nginx/snippets/</strong>. Diese Snippets werden an der entsprechenden Stelle mit <strong>include</strong> eingebunden.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="n">fastcgi_cache_path</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">example_com</span><span class="o">/</span><span class="n">cache</span> <span class="n">use_temp_path</span><span class="o">=</span><span class="n">off</span> <span class="n">levels</span><span class="o">=</span><span class="mi">1</span><span class="p">:</span><span class="mi">2</span><span class="p">:</span><span class="mi">2</span> <span class="n">keys_zone</span><span class="o">=</span><span class="n">cache_example_com</span><span class="p">:</span><span class="mi">100</span><span class="n">m</span> <span class="n">inactive</span><span class="o">=</span><span class="mi">60</span><span class="n">m</span> <span class="n">max_size</span><span class="o">=</span><span class="mi">2048</span><span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="n">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="c1"># der erste Server-Block ist für HTTP </span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="c1"># mit listen lege ich die Ports fest, die zweite Zeile wird für IPv6 benötigt</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="n">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="n">listen</span> <span class="p">[::]:</span><span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="c1"># über welche Domain-Namen wird der Server angesprochen?</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="n">server_name</span> <span class="n">example</span><span class="o">.</span><span class="n">com</span> <span class="n">www</span><span class="o">.</span><span class="n">example</span><span class="o">.</span><span class="n">com</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="c1"># da ich HTTPS erzwinge, wird direkt dahin weitergeleitet</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="k">return</span> <span class="mi">301</span> <span class="n">https</span><span class="p">:</span><span class="o">//$</span><span class="n">server_name</span><span class="o">$</span><span class="n">request_uri</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">
</span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="n">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">    <span class="c1"># der zweite Server-Block ist für HTTPS gedacht, hier gehts ans Eingemachte</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">    <span class="c1"># siehe oben</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">    <span class="n">server_name</span> <span class="n">nickyreinert</span><span class="o">.</span><span class="n">de</span> <span class="n">www</span><span class="o">.</span><span class="n">nickyreinert</span><span class="o">.</span><span class="n">de</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">
</span></span><span class="line"><span class="ln">22</span><span class="cl">    <span class="c1"># Platzhalter setzen</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">    <span class="n">set</span> <span class="o">$</span><span class="n">server</span> <span class="s2">&#34;nickyreinert_de&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">
</span></span><span class="line"><span class="ln">25</span><span class="cl">    <span class="c1"># in welchem Ordner befinden sich die (öffentlichen) Dateien des Servers</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">    <span class="n">root</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">nickyreinert_de</span><span class="o">/</span><span class="n">htdocs</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">
</span></span><span class="line"><span class="ln">28</span><span class="cl">    <span class="c1"># diese Einstellungen musst du nicht selber vornehmen, der Certbot kümmert sich darum, siehe unten</span>
</span></span><span class="line"><span class="ln">29</span><span class="cl">    <span class="n">ssl_certificate</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">letsencrypt</span><span class="o">/</span><span class="n">live</span><span class="o">/</span><span class="n">www</span><span class="o">.</span><span class="n">example</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">fullchain</span><span class="o">.</span><span class="n">pem</span><span class="p">;</span> <span class="c1"># managed by Certbot</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">    <span class="n">ssl_certificate_key</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">letsencrypt</span><span class="o">/</span><span class="n">live</span><span class="o">/</span><span class="n">www</span><span class="o">.</span><span class="n">example</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">privkey</span><span class="o">.</span><span class="n">pem</span><span class="p">;</span> <span class="c1"># managed by Certbot</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl">	
</span></span><span class="line"><span class="ln">32</span><span class="cl">    <span class="c1"># natürlich nutzen wir auch individuelle Log-Dateien:</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl">    <span class="n">access_log</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">nickyreinert_de</span><span class="o">/</span><span class="n">logs</span><span class="o">/</span><span class="n">access</span><span class="o">.</span><span class="n">log</span> <span class="n">main</span> <span class="k">if</span><span class="o">=$</span><span class="n">log_this</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">34</span><span class="cl">    <span class="n">error_log</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">nickyreinert_de</span><span class="o">/</span><span class="n">logs</span><span class="o">/</span><span class="n">error</span><span class="o">.</span><span class="n">log</span> <span class="n">error</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">35</span><span class="cl">	
</span></span><span class="line"><span class="ln">36</span><span class="cl">    <span class="c1"># an der Stelle binde ich die restlichen Einstellungen ein</span>
</span></span><span class="line"><span class="ln">37</span><span class="cl">    <span class="n">include</span> <span class="n">snippets</span><span class="o">/</span><span class="n">default_https</span><span class="o">.</span><span class="n">conf</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">38</span><span class="cl">    <span class="n">include</span> <span class="n">snippets</span><span class="o">/</span><span class="n">gzip</span><span class="o">.</span><span class="n">conf</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">39</span><span class="cl">    <span class="n">include</span> <span class="n">snippets</span><span class="o">/</span><span class="n">wordpress</span><span class="o">.</span><span class="n">conf</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">40</span><span class="cl">    <span class="n">include</span> <span class="n">snippets</span><span class="o">/</span><span class="n">logging</span><span class="o">.</span><span class="n">conf</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">41</span><span class="cl">    <span class="n">include</span> <span class="n">snippets</span><span class="o">/</span><span class="n">caching</span><span class="o">.</span><span class="n">conf</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">42</span><span class="cl">    <span class="n">include</span> <span class="n">snippets</span><span class="o">/</span><span class="n">fastcgi</span><span class="o">-</span><span class="n">php</span><span class="o">.</span><span class="n">conf</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">43</span><span class="cl">    <span class="n">include</span> <span class="n">snippets</span><span class="o">/</span><span class="n">sitemap</span><span class="o">.</span><span class="n">conf</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">44</span><span class="cl">    <span class="n">include</span> <span class="n">snippets</span><span class="o">/</span><span class="n">safety</span><span class="o">.</span><span class="n">conf</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">45</span><span class="cl">
</span></span><span class="line"><span class="ln">46</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="der-cache">Der Cache</h3>
<h3 id="was-soll-gecached-werden">Was soll gecached werden?</h3>
<p>Im 1. Teil habe ich das Thema ja schon kurz angerissen und zwei Direktiven beschrieben. Auf Server-Ebene will ich den Cache nun noch etwa feiner einstellen. Zunächst geht es an ein paare globale Einstellungen, die ich im Snippet <strong>/etc/nginx/snippets/caching.conf</strong> abgelegt habe.</p>
<p>Nicht jede Anfrage darf gecached werden, wie z.B. POST-Requests, die ja tendentiel eher unterschiedliche Daten bei jeder Anfrage enthalten. Für diese Unterscheidung nutze ich die Variable <strong>$no_cache.</strong> So kann ich mit einfachen if-Abfragen festlegen, welche Requests vom Cache ignoriert werden sollen, wie z.B:</p>
<ul>
<li>POST-Requests</li>
<li>Requests, die einen Query-String enthalten (GET)</li>
<li>Requests, deren URL auf ein bestimmtes Muster passen</li>
<li>Requests von eingeloggten Bentzern (Wordpress-Spezifisch!)</li>
<li>Requests, bei denen das Cookie PHPSESSID gesetzt ist</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln"> 1</span><span class="cl">set $no_cache 0;
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">if ($request_method = POST)
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">{
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">	set $no_cache 1;
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">}
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">if ($query_string != &#34;&#34;)
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">{
</span></span><span class="line"><span class="ln">10</span><span class="cl">	set $no_cache 1;
</span></span><span class="line"><span class="ln">11</span><span class="cl">}
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl">if ($request_uri ~* &#34;/wp-admin/|/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml&#34;) {
</span></span><span class="line"><span class="ln">14</span><span class="cl">	set $no_cache 1;
</span></span><span class="line"><span class="ln">15</span><span class="cl">}   
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl">if ($http_cookie ~* &#34;comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in&#34;) {
</span></span><span class="line"><span class="ln">18</span><span class="cl">	set $no_cache 1;
</span></span><span class="line"><span class="ln">19</span><span class="cl">}
</span></span><span class="line"><span class="ln">20</span><span class="cl">
</span></span><span class="line"><span class="ln">21</span><span class="cl">if ($http_cookie = &#34;PHPSESSID&#34;)
</span></span><span class="line"><span class="ln">22</span><span class="cl">{
</span></span><span class="line"><span class="ln">23</span><span class="cl">	set $no_cache 1;
</span></span><span class="line"><span class="ln">24</span><span class="cl">}  
</span></span></code></pre></div><h3 id="wie-soll-gecached-werden">Wie soll gecached werden?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">fastcgi_cache_path</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">example_com</span><span class="o">/</span><span class="n">cache</span> <span class="n">use_temp_path</span><span class="o">=</span><span class="n">off</span> <span class="n">levels</span><span class="o">=</span><span class="mi">1</span><span class="p">:</span><span class="mi">2</span><span class="p">:</span><span class="mi">2</span> <span class="n">keys_zone</span><span class="o">=</span><span class="n">cache_example_com</span><span class="p">:</span><span class="mi">100</span><span class="n">m</span> <span class="n">inactive</span><span class="o">=</span><span class="mi">60</span><span class="n">m</span> <span class="n">max_size</span><span class="o">=</span><span class="mi">2048</span><span class="n">m</span><span class="p">;</span>
</span></span></code></pre></div><p>Um den Zweck der Parameter hinter <a href="http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_cache_key">fastcgi_cache_path</a> zu verstehen, werde ich grob erklären, wie der nginx-Cache funktioniert:</p>
<p>Über <strong>FastCGI</strong> wird zunächst die PHP-Datei an den PHP-Interpreter übergeben. Das Ergebnis, z.B. ein HTML-Dokument geht dann an den Empfänger. Ist diese Ressource als &ldquo;<strong>cachable</strong>&rdquo; markiert, legt nginx das zu Ergbnis außerdem in <strong>temporär</strong> in einen Ordner ab und kopiert es von dort in den <strong>eigentlich Cache-Ordner</strong>. Damit diese Resource später wiedergefunden wird, wird ein <strong>Schlüssel</strong> erstellt. Ein Liste (&ldquo;Cache-Verzeichnis&rdquo;) dieser Schlüssel und ein paar Meta-Daten (z.B. der letzte Abruf) werden im <strong>Arbeitsspeicher</strong> abgelegt.</p>
<p><img src="/2019/2019-10-01-mehrere-virtuelle-server-mit-nginx-und-php-fpm-fur-wordpress-teil-2-3/images/grafik-700x222.png" alt=""></p>
<p>Zugegeben: Eine wirklich stark vereinfachte Darstellung des Cachings mit nginx</p>
<p>Mit <strong>fastcgi_cache_path</strong> legst du also den eigentlichen Cache-Ordner fest. Danach deaktivierst du mit <strong>use_temp_path=off</strong> die Zwischenspeicherung in einem temporären Ordner, um den Cache-Prozess zu beschleunigen. Mit <strong>levels</strong> kannst du die Tiefe des Cache-Ordners festlegen. Jede Position steht zwischen den Doppelpunkten für ein Level, drei Level sind möglich. Die Ziffer legt fest, wieviel Zeichen die Dateinamen enthalten. Folgende Angabe reduziert die Tiefe z.B. auf 2 Level deren Ordnernamen 1 Zeichen enthalten:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">levels=1:1
</span></span></code></pre></div><p>Der Parameter <strong>keys_zone</strong> gibt dem Bereich im Arbeitsspeicher einen eindeutigen Namen, der das &ldquo;Cache-Verzeichnis&rdquo; enthält. Das ist notwendig, da du auch andere Cache-Bereich anlegen kannst (z.b. den <a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache">proxy_cache</a>). Die Ziffer hinter dem Doppelpunkt gibt die Größe der Liste an. 1 MByte entspricht etwa 8.000 cache keys - mit 100 MB solltest du also eine Weile auskommen.</p>
<p>Mit <strong>inactive=60m</strong> legst du fest, wie lange ein Objekt im Cache gültig ist, in diesem Fall 60 Minuten. Wenn du mit Inhalten arbeitest, die sich sehr oft ändern, solltest du diesen Wert natürlich verkleinern. Schließlich kannst du mit <strong>max_size</strong> die tatsächlicheGröße des Caches im Dateisystem begrenzen.</p>
<p>Die Direktive <strong>fastcgi_cache_path</strong> wird <strong>nicht auf Server-Ebene</strong> angegeben, sondern global unter <strong>http</strong>. Du kannst damit beliebig viele Caches anlegen, musst aber unbedingt auf die <strong>Unterscheidbarkeit</strong> achten, damit nginx die Caches deiner unterschiedlichen Server nicht zusammenhaut. Wie macht sich das bemerkbar? Wenn du eine deiner Seiten lädst (<strong><a href="https://www.example.com">www.example.com</a></strong>) und plötzlich auf einer völlig anderen deiner Seiten (Domain) landest (<strong><a href="https://www.test.com">www.test.com</a></strong>), solltest du dir die Direktiven fastcgi_cache_path oder fastcgi_cache_key noch mal genauer anschauen.</p>
<h2 id="die-php-einstellungen">Die PHP-Einstellungen</h2>
<p>Jetzt wird es spannend um nicht zu sagen: etwas kompliziert. Die Einstellungen für den PHP-Interpreter in <strong>fastcgi-php.conf</strong>. Diese bezieht sich alleine auf Dateien, deren Dateiendung ich in <strong>location</strong> festlege. Zunächst nutzen wir ein paar Standard-Einstellungen aus der bei nginx mitgelieferten fastcgi.conf-Datei. Hier werden einige Werte festgelegt, wie z.B. Document Root, Protokolle usw. Das muss zwingend zu Beginn passieren, da wir einige Parameter weiter unten überschreiben. Außerdem wird noch die Standard-Script-Datei festgelegt, sollte keine Datei in der URL mitgegeben werden.</p>
<p>Mit <a href="http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_cache">fastcgi_cache</a> verweise ich nun auf <strong>Cache-Zone</strong>, die ich oben bereits definiert habe. Hier kannst du mit Parameter arbeiten ($server). Mit <a href="http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_cache_valid">fastcgi_cache_valid</a> kann ich für jeden HTTP-Antwortcode festlegen, wie lange der Cache gültig ist. Ich verweise hier nur auf erfolgreiche Anfragen (HTTP 200). Weiter oben habe ich bereits festgelegt, welche Anfragen überhaupt gecached werden, hier kann ich diese Anfragen mit <a href="http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_cache_bypass">fastcgi_cache_bypass</a> nun explizit ausklammern.</p>
<p>Danach folgt eine wordpress-exklusive Einstellung: Die PHP-Datei wird nur an den PHP-Interpreter weitergereicht, wenn sie sich <strong>nicht</strong> im Ordner &ldquo;uploads&rdquo; befinden. Das ist ein Sicherheitsfeature: Sollte irgendwie eine PHP-Datei mit schadhaften Code in den (üblicherweise) schreibbaren Ordner &ldquo;Uploads&rdquo; gelangen, wird nginx diesen <strong>niemals</strong> an PHP weitergeben.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="n">location</span> <span class="o">~</span> \<span class="o">.</span><span class="p">(</span><span class="n">php</span><span class="o">|</span><span class="n">php</span><span class="o">.*</span><span class="p">)</span><span class="o">$</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">        <span class="n">include</span> <span class="n">fastcgi</span><span class="o">.</span><span class="n">conf</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">	<span class="n">fastcgi_index</span> <span class="n">index</span><span class="o">.</span><span class="n">php</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">        <span class="n">fastcgi_cache</span> <span class="n">cache_</span><span class="o">$</span><span class="n">server</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">	<span class="n">fastcgi_cache_valid</span> <span class="mi">200</span> <span class="mi">60</span><span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">	<span class="n">fastcgi_cache_bypass</span> <span class="o">$</span><span class="n">no_cache</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">	<span class="n">fastcgi_no_cache</span> <span class="o">$</span><span class="n">no_cache</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="o">$</span><span class="n">uri</span> <span class="o">!~</span> <span class="s2">&#34;^/uploads/&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl">		<span class="n">fastcgi_pass</span> <span class="n">unix</span><span class="p">:</span><span class="o">/</span><span class="n">run</span><span class="o">/</span><span class="n">php</span><span class="o">/</span><span class="n">php</span><span class="o">-</span><span class="n">fpm</span><span class="o">-$</span><span class="n">server</span><span class="o">.</span><span class="n">sock</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">
</span></span><span class="line"><span class="ln">15</span><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl">	<span class="c1"># die URL in $fastcgi_script_name und $fastcgi_path aufbrechen:</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">	<span class="n">fastcgi_split_path_info</span> <span class="o">^</span><span class="p">(</span><span class="o">.+</span>\<span class="o">.</span><span class="n">php</span><span class="p">)(</span><span class="o">/.+</span><span class="p">)</span><span class="o">$</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">
</span></span><span class="line"><span class="ln">20</span><span class="cl">	<span class="c1"># try_files setzt $fastcgi_path_info zurück, deshalb neu festlegen</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">        <span class="n">set</span> <span class="o">$</span><span class="n">path_info</span> <span class="o">$</span><span class="n">fastcgi_path_info</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">
</span></span><span class="line"><span class="ln">23</span><span class="cl">	<span class="c1"># PHP-Dateien nur verarbeiten, wenn sie überhaupt existieren:</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">	<span class="n">try_files</span> <span class="o">$</span><span class="n">fastcgi_script_name</span> <span class="o">=</span><span class="mi">404</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">
</span></span><span class="line"><span class="ln">26</span><span class="cl">	<span class="n">fastcgi_param</span> <span class="n">PATH_INFO</span> <span class="o">$</span><span class="n">path_info</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">	<span class="n">fastcgi_param</span> <span class="n">SCRIPT_FILENAME</span> <span class="o">/</span><span class="n">htdocs</span><span class="o">/$</span><span class="n">fastcgi_script_name</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">	<span class="n">fastcgi_param</span> <span class="n">SCRIPT_NAME</span> <span class="o">$</span><span class="n">fastcgi_script_name</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">29</span><span class="cl">
</span></span><span class="line"><span class="ln">30</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Weiter geht es mit einer wichtigen Einstellung für Sicherheit und Geschwindigkeit. Wir haben oben zwar schon grob festgelegt, welche Dateien nicht als Script zu PHP geschickt werden. Das ist aber noch ziemlich wacklig (warum, <a href="https://www.digitalocean.com/community/tutorials/understanding-and-implementing-fastcgi-proxying-in-nginx">das ist hier ganz gut beschrieben</a>): Was wir bisher nicht vermeiden, ist der Aufruf von z.B. /test.jpg/index.php - die Datei index.php würde vom Interpreter nicht gefunden werden. Er würde demnach versuchen, test.jpg auszuführen und den Anhang als Parameter verstehen. Das wollen wir vermeiden.</p>
<p>Es gibt viele Möglichkeiten, das zu verhindern. Einige davon werden wir hier nutzen.</p>
<p>Mit <strong>fastcgi_split_path_info</strong> zerlegst du die URL in den Pfad und den Dateinamen um zielsicher zu erkennen, welcher Teil der URL auf eine Datei zeigt und was als Ordner verstanden wird. Die RegExe beinhaltet deswegen zwei Capture-Gruppen. Der Inhalt der ersten Gruppe (.+.php) wird in der Variable <strong>$fastcgi_script_name</strong> abgelegt, der der zweiten Gruppe (/.+) landet in <strong>$fastcgi_path_info</strong>.</p>
<p>Mit <strong>try_files</strong> bestimmst du nun, dass nur PHP-Dateien verarbeitet werden, die überhaupt exisiterien. Das Problem dabei ist, dass dadurch der Parameter <strong>$fastcgi_path_info</strong> zurückgesetzt wird (<a href="http://trac.nginx.org/nginx/ticket/321">siehe auch hier</a>). Deshalb wird dessen Inhalt einen Schritt davor in die Variable <strong>$path_info</strong> geschrieben. Danach legen die Parameter für FastCGI fest und greifen nun auf die eben per RegExe extrahierten Infos für das Script und den Pfad zurück:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">fastcgi_param PATH_INFO $path_info;
</span></span><span class="line"><span class="ln">2</span><span class="cl">fastcgi_param SCRIPT_FILENAME /htdocs/$fastcgi_script_name;
</span></span><span class="line"><span class="ln">3</span><span class="cl">fastcgi_param SCRIPT_NAME $fastcgi_script_name;
</span></span></code></pre></div><p>Damit das ganze wirklich reibungslos funktioniert, musst du in der php.ini den Parameter <strong><a href="https://www.php.net/manual/de/ini.core.php#ini.cgi.fix-pathinfo">cgi.fix_pathinfo</a></strong> auf 1 setzen - das ist zwar die Standardeinstellungen, schau aber trotzdem noch mal nach:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">cgi.fix_pathinfo=1
</span></span></code></pre></div><h2 id="die-https-einstellungen">Die HTTPS-Einstellungen</h2>
<p>Die nächsten Parameter sind wieder etwas unkompliziert und auch selbsterklärend. Wir kommen zu den HTTP- und HTTPS-Einstellungen, die ich in einer Datei zusammengefasst habe (<strong>default_https.conf</strong>). Hier werden nur die Port-Einstellungen festgelegt, SSL korrekt eingerichtet und auf eine Standard-Datei verwiesen, wenn die Anfrage nicht auf eine Datei verweist:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl"># welche Datei wird standardmäßig aufgerufen?
</span></span><span class="line"><span class="ln">2</span><span class="cl">index index.php;
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl"># Nutze 443 als Port für HTTPS und aktiviere HTTP2
</span></span><span class="line"><span class="ln">5</span><span class="cl">listen 443 ssl http2;
</span></span><span class="line"><span class="ln">6</span><span class="cl">listen [::]:443 ssl http2;
</span></span><span class="line"><span class="ln">7</span><span class="cl"># Verweis von Let&#39;s Encrypt:
</span></span><span class="line"><span class="ln">8</span><span class="cl">include /etc/letsencrypt/options-ssl-nginx.conf;
</span></span><span class="line"><span class="ln">9</span><span class="cl">ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
</span></span></code></pre></div><h3 id="die-gzip-einstellungen">Die GZIP-Einstellungen</h3>
<p>Auch die Datei gzip.conf bedarf keiner großen Erklärung. Einen Großteil habe ich bereits global konfiguriert, hier werden auf Server-Ebene noch einige Einstellungen vorgenommen. Dabei setze ich das Kompressions-Level auf 3 und lege fest, welche Ressourcen komprimiert werden. Welches Level du wählst, hängt von deiner Hardware ab. Die Kompression kann die Auslieferung deiner Seite auf jeden Fall beschleunigen, einen etwas ausführlicheren Beitrag dazu findest du bei <a href="https://royal.pingdom.com/can-gzip-compression-really-improve-web-performance/">pingdom.com</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">gzip             on;
</span></span><span class="line"><span class="ln">2</span><span class="cl">gzip_comp_level  3;
</span></span><span class="line"><span class="ln">3</span><span class="cl">gzip_types       text/plain text/html text/css application/javascript image/*;
</span></span></code></pre></div><h3 id="die-wordpress-einstellungen">Die Wordpress-Einstellungen</h3>
<p>Weiter geht es mit der Datei <strong>wordpress.conf</strong> und noch ein paar Sicherheitsfeatures:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="c1"># Maximale Dateigröße für Uploads</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">client_max_body_size</span> <span class="mi">64</span><span class="n">M</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="n">location</span> <span class="o">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">	<span class="c1"># Permalinks wieder funktionsfähig machen</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">	<span class="n">try_files</span> <span class="o">$</span><span class="n">uri</span> <span class="o">$</span><span class="n">uri</span><span class="o">/</span> <span class="o">/</span><span class="n">index</span><span class="o">.</span><span class="n">php</span><span class="err">?</span><span class="o">$</span><span class="n">args</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl">        <span class="n">limit_req</span> <span class="n">zone</span><span class="o">=</span><span class="n">one</span> <span class="n">burst</span><span class="o">=</span><span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Wie du siehst beziehe ich mir hier erneut auf die Rate Limit Einstellung aus dem ersten Teil in der Datei <strong>nginx.conf</strong>. Mit Verweis auf meine Zone (<strong>one</strong>) beschränke ich die Warteschlange auf 10: <strong>burst=10;</strong> Wenn als mehr Anfragen als erlaubt ankommen (ich hatte 5 pro Sekunde zugelassen), werden bis zu 10 der darauf folgenden Anfragen in eine Warteschlange gepackt. Die anderen Parameter habe ich inline erklärt.</p>
<h3 id="die-logging-einstellungen">Die Logging-Einstellungen</h3>
<p>Auf zur Datei <strong>logging.conf</strong>. Diese Einstellungen betreffen nicht nur das Log-Verhalten ansich, sondern haben auch Auswirkungen auf <strong>Geschwindigkeit</strong> und <strong>Sicherheit</strong>. Ich lege nämlich fest, welche Anfragen nicht ins Log-File geschrieben werden bzw. gänzlich ignoriert werden. Eine aus führliche Dokumentation findest du auf <a href="https://www.if-not-true-then-false.com/2011/nginx-and-php-fpm-configuration-and-optimizing-tips-and-tricks">diesem Blog</a>. Die Einträge sind inline beschrieben und erklären sich, so blöd das klingt, eigentlich selber. Nicht jeder Aufruf muss auch im Log dokumentiert werden. Uns interessieren ja eigentlich nur Fehler oder ungewöhnliche Anfragen.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln"> 1</span><span class="cl"># nicht loggen: Bilder, XML, CSS, usw.
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"># außerdem das Cache-Datum auf 360 Tage setzen
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">	access_log        off;
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">	log_not_found     off;
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">	expires           360d;
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">}    
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"># noch mehr nicht loggen: Doc, XLS, EXE, uvm.
</span></span><span class="line"><span class="ln">10</span><span class="cl"># außerdem: den Cache komplett deaktivieren!
</span></span><span class="line"><span class="ln">11</span><span class="cl">location ~* .(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|css|rss|atom|js|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
</span></span><span class="line"><span class="ln">12</span><span class="cl">	expires max;
</span></span><span class="line"><span class="ln">13</span><span class="cl">	log_not_found off;
</span></span><span class="line"><span class="ln">14</span><span class="cl">	access_log off;
</span></span><span class="line"><span class="ln">15</span><span class="cl">}
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl"># nicht loggen: versteckte Dateien die mit . anfange
</span></span><span class="line"><span class="ln">18</span><span class="cl"># außerdem: Den Zugriff verweigern!
</span></span><span class="line"><span class="ln">19</span><span class="cl">location ~ /\. {
</span></span><span class="line"><span class="ln">20</span><span class="cl">	access_log off;
</span></span><span class="line"><span class="ln">21</span><span class="cl">	log_not_found off; 
</span></span><span class="line"><span class="ln">22</span><span class="cl">	deny all;
</span></span><span class="line"><span class="ln">23</span><span class="cl">}
</span></span><span class="line"><span class="ln">24</span><span class="cl">
</span></span><span class="line"><span class="ln">25</span><span class="cl"># nicht loggen: robots.txt
</span></span><span class="line"><span class="ln">26</span><span class="cl">location = /robots.txt {
</span></span><span class="line"><span class="ln">27</span><span class="cl">	access_log off;
</span></span><span class="line"><span class="ln">28</span><span class="cl">	log_not_found off;
</span></span><span class="line"><span class="ln">29</span><span class="cl">}
</span></span></code></pre></div><h2 id="eine-sitemap-korrekt-einbinden">Eine Sitemap korrekt einbinden</h2>
<p>Die Einstellungen im Snippet sitemap.conf kommen ein wenig den berühmten &ldquo;Kanonen auf Spatzen&rdquo; gleich. Im Grunde bilde ich eine ganze Reihe von Spezialfällen ab, die beim Betrieb von Wordpress und Sitemaps auftreten. Du kannst hier sicher einige Zeilen auslassen oder die Datei ganz ignorieren, wenn du ein komplett anderes Setup nutzt:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln"> 1</span><span class="cl">rewrite ^/sitemap_index.xml$ /index.php?sitemap=1 last;
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">rewrite ^/([^/]+?)-sitemap([0-9]+)?.xml$ /index.php?sitemap=$1&amp;sitemap_n=$2 last;
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">location ~ ([^/]*)sitemap(.*).x(m|s)l$ {
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">        rewrite ^/sitemap.xml$ /sitemap_index.xml permanent;
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">        rewrite ^/([a-z]+)?-?sitemap.xsl$ /index.php?xsl=$1 last;
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">        rewrite ^/sitemap_index.xml$ /index.php?sitemap=1 last;
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        rewrite ^/([^/]+?)-sitemap([0-9]+)?.xml$ /index.php?sitemap=$1&amp;sitemap_n=$2 last;
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">}
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">rewrite ^/sitemap(-+([a-zA-Z0-9_-]+))?\.xml$ &#34;/index.php?xml_sitemap=params=$2&#34; last;
</span></span><span class="line"><span class="ln">10</span><span class="cl">rewrite ^/sitemap(-+([a-zA-Z0-9_-]+))?\.xml\.gz$ &#34;/index.php?xml_sitemap=params=$2;zip=true&#34; last;
</span></span><span class="line"><span class="ln">11</span><span class="cl">rewrite ^/sitemap(-+([a-zA-Z0-9_-]+))?\.html$ &#34;/index.php?xml_sitemap=params=$2;html=true&#34; last;
</span></span><span class="line"><span class="ln">12</span><span class="cl">rewrite ^/sitemap(-+([a-zA-Z0-9_-]+))?\.html.gz$ &#34;/index.php?xml_sitemap=params=$2;html=true;zip=true&#34; last;
</span></span></code></pre></div><h2 id="sicherheits-features">Sicherheits-Features</h2>
<p>Zum Abschluss will ich noch ein paar Sicherheitsfeatures implementieren. In der Datei <strong>safety.conf</strong> passiert nicht viel, außer dass ich den Zugriff auf bestimmte kritische Dateien verbiete. Einiges davon bezieht sich explizit auf eine Wordpress-Installation. Was du aus diesen Einstellungen mitnehmen solltest, ist die Info, wie du mit <strong>location</strong>, einer <strong>RegExe</strong> und <strong>deny all</strong> den Zugriff auf bestimmte Ressourcen verbietest.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1"># Den Upload-Ordner zusätzlich sichern und nur den Zugriff auf HTML- und Medien-Dateien zulassen:</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="n">location</span> <span class="o">~*</span> <span class="o">^/</span><span class="n">wp</span><span class="o">-</span><span class="n">content</span><span class="o">/</span><span class="n">uploads</span><span class="o">/.*.</span><span class="p">(</span><span class="n">html</span><span class="o">|</span><span class="n">htm</span><span class="o">|</span><span class="n">shtml</span><span class="o">|</span><span class="n">php</span><span class="o">|</span><span class="n">js</span><span class="o">|</span><span class="n">swf</span><span class="p">)</span><span class="o">$</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">        <span class="n">deny</span> <span class="n">all</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="c1"># In Wordpress die XML-RPC Schnittstelle deaktivieren, die ein beliebtes Angriffsziel darstellt:</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="n">location</span> <span class="o">^~</span> <span class="o">/</span><span class="n">xmlrpc</span><span class="o">.</span><span class="n">php</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        <span class="n">deny</span> <span class="n">all</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="c1"># Apache nutzt unter anderem .htaccess - das ist für uns vielleicht nicht relevant, sollte sich aber trotzdem mal eine derartige Datei in unser Dateisystem verirren, schützen wir sie vor ungewollten Blicken und zwar für alle Dateien die mit einem Punkt anfangen:</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="n">location</span> <span class="o">~</span> <span class="o">/</span>\<span class="o">.</span> <span class="p">{</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">        <span class="n">deny</span> <span class="n">all</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="c1"># Theoretisch ist es nicht möglich, dass der Nutzer im Browser den Inhalt von PHP-Dateien sieht - trotzdem schaffen wir zusätzliche Sicherheit, indem wir die wp-config.php gar nicht erst ausliefern</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="n">location</span> <span class="o">~*</span> <span class="n">wp</span><span class="o">-</span><span class="n">config</span><span class="o">.</span><span class="n">php</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">        <span class="n">deny</span> <span class="n">all</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">
</span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="c1"># Brutforce erschweren, siehe unten</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl"><span class="n">location</span> <span class="o">~</span> <span class="o">/</span><span class="n">wp</span><span class="o">-</span><span class="n">login</span><span class="o">.</span><span class="n">php</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">        <span class="n">limit_req</span> <span class="n">zone</span><span class="o">=</span><span class="n">one</span> <span class="n">burst</span><span class="o">=</span><span class="mi">1</span> <span class="n">nodelay</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">        <span class="n">fastcgi_pass</span> <span class="n">unix</span><span class="p">:</span><span class="o">/</span><span class="n">run</span><span class="o">/</span><span class="n">php</span><span class="o">/</span><span class="n">php</span><span class="o">-</span><span class="n">fpm</span><span class="o">-$</span><span class="n">server</span><span class="o">.</span><span class="n">sock</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Natürlich wollen wir nicht nur den Zugriff auf kritische Ressourcen verhindern, sondern ggf. auch andere Angriffsvektoren erschweren, wie z.B. BruteForce-Attacken. In einer Wordpress-Installation ist ein beliebter Angriffspunkt z.B. die Datei <strong>wp-login.php</strong>. Weiter oben haben wir schon mal festgelegt, wie oft eine Ressouce abgefragt werden kann. Für <strong>wp-login.php</strong> wollen wir diese Grenze noch etwa enger ziehen. Unser Setup erlaubt 5 Anfragen / Sekunde. Mit Burst verkürze ich zuerst die Warteschlange auf 1. Mit <strong>nodelay</strong> sorge ich nun dafür, dass Anfragen sofort beantwortet werden, aber der Slot in de Warteschlange nicht gleich wieder frei wird. Ergo werden direkt darauf folgende Zugriffe im erlaubten Zeitfenster mit dem <strong>HTTP-Fehler 503</strong> (Service temporarly not available) abgelehnt.</p>
<p>Weiter gehts abschließend mit der Einrichtung von <a href="https://www.nickyreinert.de/mehrere-virtuelle-server-mit-nginx-und-php-fpm-fuer-wordpress-teil-3-3/">PHP in Teil 3.</a></p>

        
        
      ]]></content:encoded>
      
      
      
      <category>hosting</category>
      
      <category>wordpress</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Mehrere virtuelle Server mit nginx und PHP-FPM für Wordpress (Teil 2 / 3) - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>guide</dc:type>
      
      
    </item><item>
      <title>WordPress Tag Cloud mit Umlauten (äöü) korrekt sortieren - Oder: Der WordPress Filter im Live-Beispiel erklärt</title>
      <link>https://nickyreinert.de/2019/2019-04-18-wordpress-tag-cloud-mit-umlauten-aeoeue-korrekt-sortieren-oder-der-wordpress-filter-im-live-beispiel-erklaert/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2019/2019-04-18-wordpress-tag-cloud-mit-umlauten-aeoeue-korrekt-sortieren-oder-der-wordpress-filter-im-live-beispiel-erklaert/</guid>
      <description>WordPress bringt von Hause aus ein Widget mit, dass die verwendeten Tags als Cloud darstellt (wer es ein wenig schöner mag, greift auf mein WordCloud Plugin …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieser Artikel behandelt WordPress Tag Cloud mit Umlauten (äöü) korrekt sortieren - Oder: Der WordPress Filter im Live-Beispiel erklärt und bietet praktische Einblicke in das Thema.</p>
          
          
          <p><strong>Hauptthemen:</strong> Web, WordPress, Development</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>WordPress bringt von Hause aus ein Widget mit, dass die verwendeten Tags als Cloud darstellt (wer es ein wenig schöner mag, <a href="https://www.nickyreinert.de/wordpress-word-cloud-2-0/">greift auf mein WordCloud Plugin zurück</a>). Das Ganze hat nur einen Haken: Die entsprechende WordPress-Funktion <strong><a href="https://developer.wordpress.org/reference/functions/wp_generate_tag_cloud/">wp_generate_tag_cloud</a></strong> nutzt <strong>aosort()</strong> als Sortierfunktion. Und die kommt mit Umlauten nicht sonderlich gut klar. Eine Lösung wäre also, die Umlaute für die Sortierung zu übersetzen, also Ä ind Ae, ö in oe und so weiter.</p>
<p>Das schöne an WordPress: Sehr viele Funktionalitäten lassen sich über <strong>Hooks</strong> und <strong>Filter</strong> modifizieren. So bietet auch der Sortier-Algorithmus die Möglichkeit an, den Array mit einer eigenen Funktion zu filtern. Die perfekte Gelegenheit, um sich mit dem Thema <strong>Filter mal</strong> etwas näher zu beschäftigen. Ein Blick in den Source-Code von <strong>wp_generate_tag_cloud()</strong> zeigt ab Zeile 875 (seit Version 4.8.0):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln"> 1</span><span class="cl">    /**
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">     * Filters how the items in a tag cloud are sorted.
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">     *
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">     * @since 2.8.0
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">     *
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">     * @param WP_Term[] $tags Ordered array of terms.
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">     * @param array     $args An array of tag cloud arguments.
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">     */
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">    $tags_sorted = apply_filters( &#39;tag_cloud_sort&#39;, $tags, $args );
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">    if ( empty( $tags_sorted ) ) {
</span></span><span class="line"><span class="ln">13</span><span class="cl">        return $return;
</span></span><span class="line"><span class="ln">14</span><span class="cl">    }
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl">...
</span></span></code></pre></div><p>Die Tags lassen sich also über den <strong>Filter</strong> <strong>tag_cloud_sort</strong> mit einer eigenen Funktion sortieren. Gesagt, getan. Folgendes packen wir in die <strong>functions.php</strong> unseres Child Themes (wir ignorieren dabei mal die Vorgabe, Funktionalitäten nicht im Theme unterzubringen):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">add_filter(&#39;tag_cloud_sort&#39;, &#39;custom_tag_sort&#39;, 10, 2);
</span></span></code></pre></div><p>Der zweite Parameter verweist auf unsere eigene Sortier-Funktion. Die 10 beschreibt die Priorität und mit 2 wird die Anzahl der Funktions-Parmaeter festgelegt, nämlich <strong>$tags und $args</strong>. Unsere eigene Sortier-Funktion sieht dann folgendermaßen aus (in Ahnlehnung an <a href="http://www.marcokrings.de/arrays-sortieren-mit-umlauten/">&ldquo;Arrays sortieren mit Umlauten&rdquo;</a>).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln"> 1</span><span class="cl">function custom_tag_sort($tags, $args) {
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">        
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    if (count($tags) == 0) { return $tags; }
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    $tagsSorted = array();
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    $tagsReturn   = array();
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    $search   = array(&#34;Ä&#34;,&#34;ä&#34;,&#34;Ö&#34;,&#34;ö&#34;,&#34;Ü&#34;,&#34;ü&#34;,&#34;ß&#34;);
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    $replace  = array(&#34;Ae&#34;,&#34;ae&#34;,&#34;Oe&#34;,&#34;oe&#34;,&#34;Ue&#34;,&#34;ue&#34;,&#34;ss&#34;);
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    foreach($tags as $key =&gt; $val) {
</span></span><span class="line"><span class="ln">10</span><span class="cl">        $tagsSorted[$key] = str_replace($search, $replace, $val-&gt;name);
</span></span><span class="line"><span class="ln">11</span><span class="cl">    }
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl">    natcasesort($tagsSorted);
</span></span><span class="line"><span class="ln">14</span><span class="cl">    
</span></span><span class="line"><span class="ln">15</span><span class="cl">    foreach($tagsSorted as $key =&gt; $val) {
</span></span><span class="line"><span class="ln">16</span><span class="cl">        $tagsReturn[$key] = $tags[$key];
</span></span><span class="line"><span class="ln">17</span><span class="cl">    }
</span></span><span class="line"><span class="ln">18</span><span class="cl">
</span></span><span class="line"><span class="ln">19</span><span class="cl">    return $tagsReturn;
</span></span><span class="line"><span class="ln">20</span><span class="cl">        
</span></span><span class="line"><span class="ln">21</span><span class="cl">}
</span></span></code></pre></div><p>Am Anfang schauen wir, ob überhaupt Tags übergeben werden, andernfalls gehts gleich wieder zurück. Danach initialisieren wir unsere Variablen. Von Interesse dürften hier vor allem <strong>$search</strong> und <strong>$replace</strong> sein. Damit legen wir fest, welche <strong>Umlaute und Sonderzeichen</strong> ersetzt werden sollen. Die Liste darfst du natürlich beliebig erweitern.</p>
<p>In der ersten foreach-Schleife durchlaufen wir die Tag-Liste und ersetzen ganz schlicht die Umlaute entsprechend der Vorgabe.</p>
<p>Danach sortieren wir unsere &ldquo;bereinigte&rdquo; Tag-List mit der alternativen Sortier-Funktion <a href="https://www.php.net/manual/de/function.natcasesort.php"><strong>natcasesort()</strong>.</a> <em>natcase</em> steht für <em>natural sort, case insensitive</em>. Sprich: Natürliche <em>Sortierung, Ignorieren der Groß-/Kleinschreibung</em>. Natürliche Sortierung heißt ganz einfach: So wie ein Mensch sortieren würde.</p>
<p>In der letzten Schleife sorgen wir dafür, dass die nun sortierte Tag-Liste wieder unsere ursprünglichen Umlaute enthält und geben die sortierte Liste dann zurück.</p>
<p>Das war es auch schon. Unsere Liste ist, unter Berücksichtigung der deutschen Umlaute, sauber sortiert. Ab dort übernimmt WordPress die weitere Verarbeitung. Und wir haben gelernt, wie wir einen <strong>einfachen Filter</strong> in WordPress implementieren.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> anleitung, filter, php, tagcloud, tutorial, wordcloud, wordpress</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      <category>anleitungen</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>WordPress Tag Cloud mit Umlauten (äöü) korrekt sortieren - Oder: Der WordPress Filter im Live-Beispiel erklärt - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>guide</dc:type>
      
      
    </item><item>
      <title>Mehrere virtuelle Server mit nginx und PHP-FPM für Wordpress (Teil 1 / 3)</title>
      <link>https://nickyreinert.de/2019/2019-04-12-mehrere-virtuelle-server-mit-nginx-und-php-fpm-fur-wordpress-teil-1-3/</link>
      <pubDate>Fri, 12 Apr 2019 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2019/2019-04-12-mehrere-virtuelle-server-mit-nginx-und-php-fpm-fur-wordpress-teil-1-3/</guid>
      <description>Bisher war ich immer recht zufrieden mit der Geschwindigkeit meiner selbstgehosteten Wordpress-Seiten. Im Schnitt hat es nicht länger als 2 Sekunden gedauert, …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieser Artikel behandelt Mehrere virtuelle Server mit nginx und PHP-FPM für Wordpress (Teil 1 / 3) und bietet praktische Einblicke in das Thema.</p>
          
          
          <p><strong>Hauptthemen:</strong> Web, WordPress, Development</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>Bisher war ich immer recht zufrieden mit der Geschwindigkeit meiner selbstgehosteten Wordpress-Seiten. Im Schnitt hat es nicht länger als 2 Sekunden gedauert, bis die Inhalte aufgebaut waren. Mal mehr, mal weniger. Und das schien mir ein akzeptabler Wert zu sein. Ich nutzte eine der üblichen Standard-Installationen, die da draußen wohl weit verbreitet ist: <strong>Apache2</strong> mit <strong>mod_php</strong>. Der PHP-Interpreter ist dabei &ldquo;Teil&rdquo; des Apache2-Servers. Das ist unkompliziert und schnell zu installieren und somit einfach eine pragmatische Lösung und auch deshalb wohl sehr weit verbreitet. Aber: Die einfachsten Lösungen sind oft nicht die besten. Geschweige denn, die sichersten.</p>
<h2 id="ziel">Ziel</h2>
<p>Um es kurz zu machen: Das Ziel ist es, einen sicheren und schnellen Web-Server mit <strong>Nginx</strong>, <strong>PHP-FPM</strong> und <strong>chroot</strong> aufzusetzen, mit dem sich mehrere getrennte Webseiten betreiben lassen. Um der Sache einen Zweck zu geben, werde ich mich im Folgenden an Wordpress orientieren.</p>
<p><strong>Warum chroot?</strong> Wenn sich mehrere Wordpress-Installationen einen (virtuellen) Server teilen, ist es fast schon fahrlässig diese einfach in ein paar Unterordner zu packen und die Domains darauf zeigen zu lassen. Wird eine Wordpress-Installation kompromittiert, ist es für den Angreifer nicht sonderlich schwer, sich im gesamten System zu auszubrreiten. Mit <strong>chroot</strong> sorge ich dafür, dass jede Wordpress-Instanz sich nur in ihrem eigenen Verzeichnis bewegen kann. Das ist in etwa zu vergleichen mit der PHP-Direktive <strong>open_basedir</strong> aber noch etwas restriktiver.</p>
<p><strong>Warum PHP-FPM?</strong> Weil es sicherer und schneller ist und weil <strong>mod_php</strong> nur unter Apache2 funktioniert. Hier stand anfangs auch <strong>FastCGI</strong> zur Wahl.  CGI bedeutet Common Gateway Interface. Mit dieser Schnittstelle können Anfragen über einen Port oder einen Datei-Socket an den PHP-Interpreter weitergeleitet werden, der dazu aber immer wieder komplett neu gestartet wird. Bei <strong>FastCGI</strong>, einer Weiterentwicklung, wird der Interpreter nicht jedes mal neu gestartet, sondern läuft permanent im Hintergrund.</p>
<p>Und <strong>FPM</strong> schließlich steht für <strong>FastCGI Process Manager</strong>, eine weitere Weiterentwicklung. Ein Neuerung ist unter anderem, dass nun mehrere PHP-Interpreter im Hintergrund laufen. Einen tieferen Überblick über die Grundlagen und Unterschiede <a href="https://www.admin-magazin.de/Das-Heft/2012/06/Der-PHP-Interpreter-PHP-FPM">bietet dieser Artikel</a>.</p>
<p><strong>Und warum nginx?</strong> Meine Seite ist nicht der größte Krümel auf dem Kuchenblech, weshalb die Performance-Vorteile vielleicht kaum ins Gewicht fallen. Dennoch: <strong>Nginx</strong> ist leichtfüßiger als der mit allen möglichen Paketen ausgestattete Apache. Außerdem hatte ich bisher frustriert versucht, <strong>PHP-FPM</strong> mit <strong>chroot</strong> unter Apache zum Laufen zu bringen. Ohne Erfolg.</p>
<p>Und den Zahn muss ich allen nginx-Kritikern gleich einmal ziehen: <strong>nginx ist nicht komplizierter zu bedienen als Apache</strong>. Wer sich bisher für Apache durch die Config-Dateien gewühlt hat, bekommt das locker auch mit nginx hin. Beide Server nehmen sich in Punkte Komplexität, Community und Dokumentation aus meiner Sicht nichts.</p>
<p>Da das ganz jetzt schon ziemlich umfangreich ist, ich den Beitrag in zwei Teile getrennt. Viel Spass beim Lesen.</p>
<h2 id="installation">Installation</h2>
<p>Alles beginnt mit einem apt für <strong>nginx</strong> und zwei wichtigen Helfern:</p>
<p>apt install nginx nscd python-certbot-nginx</p>
<p><strong>Nscd</strong> steht für Name Service Cache Daemon und dient dazu, DNS-Anfragen auch im chroot zu ermöglichen, gleichzeitig anhand eines internen Caches aber auch zu beschleunigen. Die genauen Hintergründe <a href="https://blog.kthx.at/2015/09/23/php-fpm-chroot">sind hier beschrieben</a>. Außerdem nutze ich die SSL-Zertifikate von <a href="https://letsencrypt.org/">Let&rsquo;s Encrypt</a>, da diese kostenlos sind und sich die Re-Zertifizierung außerdem bequem automatisieren lässt. Ich muss also den entsprechenden <strong>certbot</strong> für <strong>nginx</strong> installieren.</p>
<h2 id="ordnerstruktur">Ordnerstruktur</h2>
<p>Chroot (<em>change root</em>) bedeutet, dass einem Prozess (sprich: der entsprechend konfigurierten Website) ein eigenes Root-Verzeichnis <em>vorgegaugelt</em> wird. Das ist sehr sinnvoll, weil der Prozess so nicht auf die gesamte Partition zugreifen kann. Das erschwert die Sache allerdings auch, da ihm wichtige Systemfunktionen zur Verfügung gestellt werden müssen, die sich sonst irgendwo auf der Partition befinden. Die Lösung dafür lautet <em>mount</em>. Grundsätzlich forderte chroot mir bei der Konfiguration sämtlicher Pfade etwas mehr Konzentration ab, da das Root-Verzeichnis nun nicht mehr unter / sondern z.B. unter /var/www/nickyreinert/ liegt.</p>
<p>Jede Website bekommt grundsätzlich erstmal ein eigenes Verzeichnis, in dem sich jedoch nun nicht nur - wie gewohnt - die Ressourcen der Webseite befinden. Hier werden System-Funktionen, Sockets etc. eingebunden, die PHP und nginx für die einwandfreie Funktion benötigen. Die Ordner-Struktur sieht also folgendermaßen aus:</p>
<p>/ &lt;- tatsächlicher root-Ordner des Systems
/var
/var/www
/var/www/nickyreinert_de &lt;- root-Ordner für diese Website
- cache
- data
- dev
- etc
- htdocs
- logs
- sessions
- tmp
- usr
- var
/var/www/foobar_de &lt;- root-Ordner für eine andere Website
- &hellip;</p>
<p><strong>Htdocs</strong>, <strong>logs</strong>, <strong>tmp</strong> und <strong>sessions</strong> sind fester und individueller Bestandteil des Ordners. Alle anderen sind Verweise auf die tatsächlichen System-Order und werden daher per mount <strong>lesend</strong> eingebunden.</p>
<p>Um die Ordner und die fixen Bestandteile einmal initial anzulegen, nutze ich folgendes Script. Als erster Parameter wird der Name der Website erwartet.</p>
<p>#!/bin/sh
cd /var/www/
mkdir $1
cd $1
mkdir -p htdocs logs tmp sessions cache
chown root:sudo htdocs
chown $1:www-data logs
chown $1:www-data sessions
chmod 700 sessions</p>
<p>Um nun noch das das mounten zu erleichtern, nutze ich <a href="https://blog.kthx.at/2015/09/23/php-fpm-chroot">das Init-Script von kthx.at</a>, das ich noch etwas angepasst habe (Unterstützung für <em>sendmail</em> und <em>php-gettext</em>):</p>
<p>#!/bin/bash</p>
<h3 id="begin-init-info">BEGIN INIT INFO</h3>
<h1 id="provides----------php5-fpm-chroot-setup">Provides:          php5-fpm-chroot-setup</h1>
<h1 id="required-start----nscd">Required-Start:    nscd</h1>
<h1 id="required-stop">Required-Stop:</h1>
<h1 id="default-start-----2-3-4-5">Default-Start:     2 3 4 5</h1>
<h1 id="default-stop------0-1-6">Default-Stop:      0 1 6</h1>
<h1 id="short-description-mounts-needed-sockets-and-other-data-into-a-previously-set-up-chroot-environment">Short-Description: Mounts needed sockets and other data into a previously set up chroot environment.</h1>
<h3 id="end-init-info">END INIT INFO</h3>
<h1 id="hier-die-dateien-und-ordner-die-in-die-chroot-umgebung-gemountet-werden-sollen">Hier die Dateien und Ordner die in die Chroot-Umgebung gemountet werden sollen</h1>
<p>CHROOT_FILES=&quot;/usr/lib/sendmail /etc/hosts /etc/resolv.conf /etc/ssl/certs /usr/share/ca-certificates /dev/null /dev/random /dev/urandom /dev/zero /var/run/mysqld /var/run/nscd /usr/share/zoneinfo /usr/share/php/php-gettext&quot;</p>
<h1 id="siehe-unten">siehe unten!</h1>
<p>CACHE_FOLDER=&quot;/var/run/nginx/_SERVER_&quot;</p>
<p>case &ldquo;$1&rdquo; in
restart|force-reload|start)
# Aufräumen bevor wir aufbauen
$0 stop 2&gt;/dev/null</p>
<h1 id="0-stop">$0 stop</h1>
<pre><code>    for chrootdir in /var/nginx/\*; do
        # Nur in Ordnern mit eigenem /tmp Verzeichnis als Markierung einen Chroot aufsetzen
        if \[ -d &quot;${chrootdir}/tmp&quot; \]; then
            # Berechtigungen von /tmp korrigieren
            chmod 777 &quot;${chrootdir}/tmp&quot;
            chmod +t &quot;${chrootdir}/tmp&quot;

            echo &quot;Setting up ${chrootdir}...&quot;
            for f in $CHROOT\_FILES; do
                if \[ -d &quot;$f&quot; \]; then
                    # $f ist ein Pfad zu einem Verzeichnis
                    mkdir -p &quot;${chrootdir}${f}&quot;
                    mount --bind -o ro &quot;${f}&quot; &quot;${chrootdir}${f}&quot;
                else
                    # $f ist ein Pfad zu einer Datei
                    mkdir -p &quot;${chrootdir}$(dirname &quot;${f}&quot;)&quot;
                    touch &quot;${chrootdir}${f}&quot;
                    mount --bind -o ro &quot;${f}&quot; &quot;${chrootdir}${f}&quot;
                fi
            done
            # willst du den Cache-Ordner auf eine existierende RAM-Disk mounten,
            # kommentiere diesen Bereich aus und setze CACHE\_FOLDER auf den 
            # entsprechenden Zielordner
</code></pre>
<h1 id="for-c-in-cache_folder-do">for c in $CACHE_FOLDER; do</h1>
<h1 id="-f-enthält-_server_-was-als-platzhalter-dient"># f enthält _SERVER_, was als Platzhalter dient</h1>
<h1 id="serverbasename-chrootdir">server=$(basename ${chrootdir})</h1>
<h1 id="cc_server_server">c=${c/_SERVER_/$server}</h1>
<h1 id="if----d-c--then">if [ ! -d &ldquo;${c}&rdquo; ]; then</h1>
<h1 id="mkdir--p-c">mkdir -p ${c}</h1>
<h1 id="fi">fi</h1>
<h1 id="echo-setting-up-cache-in-c">echo &ldquo;Setting up cache in $c&rdquo;</h1>
<h1 id="mkdir--p-chrootdircache">mkdir -p &ldquo;${chrootdir}/cache&rdquo;</h1>
<h1 id="mount-bind--o-rw-c-chrootdircache">mount &ndash;bind -o rw &ldquo;${c}&rdquo; &ldquo;${chrootdir}/cache&rdquo;</h1>
<h1></h1>
<h1 id="done">done</h1>
<pre><code>        fi
    done
;;

stop)
    for chrootdir in /var/nginx/\*; do

        if \[ -d &quot;${chrootdir}/tmp&quot; \]; then
            echo &quot;Destructing ${chrootdir}...&quot;
            for f in $CHROOT\_FILES; do
                umount &quot;${chrootdir}${f}&quot;
                if \[ -d &quot;${chrootdir}${f}&quot; \] &amp;&amp; \[ ! $(ls -A &quot;${chrootdir}${f}&quot;) \]; then
                    # Leerer Ordner, kann man löschen
                    rmdir &quot;${chrootdir}${f}&quot;
                elif \[ -f &quot;${chrootdir}${f}&quot; \]; then
                    # Datei, kann man löschen
                    rm &quot;${chrootdir}${f}&quot;
                fi
            done
        fi
    done
;;

\*)
    echo &quot;Usage: $N {start|stop|restart|force-reload}&quot; &gt;&amp;2
    exit 1
;;
</code></pre>
<p>esac</p>
<p>exit 0</p>
<p>Soll das Script bei jedem Systemstart geladen werden, legst du es unter <strong>/etc/init.d/php-fpm-chroot-setup</strong> ab und setzt das Ausführen-Flag (chmod +x). Danach wird es für den Systemstart vorgemerkt:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">update-rc.d php-fpm-chroot-setup defaults
</span></span></code></pre></div><h2 id="die-globale-konfiguration-für-nginx">Die globale Konfiguration für nginx</h2>
<p>Meine <strong>globale Konfiguration</strong> (für gewöhnlich unter <em>/etc/nginx/nginx.conf</em>) für nginx sieht folgendermaßen aus. Die Standard-Parameter von nginx werde ich nicht näher erläutern sondern nur kurz inline kommentieren. Wichtige Anpassungen erkläre ich darunter etwas genauer.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">  1</span><span class="cl"><span class="c1"># in welcher Datei soll die Programm-Id abgelegt werden:</span>
</span></span><span class="line"><span class="ln">  2</span><span class="cl"><span class="n">pid</span> <span class="o">/</span><span class="n">run</span><span class="o">/</span><span class="n">nginx</span><span class="o">.</span><span class="n">pid</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">  3</span><span class="cl"><span class="c1"># der Benutzer, unter dem nginx gestartet wird:</span>
</span></span><span class="line"><span class="ln">  4</span><span class="cl"><span class="n">user</span> <span class="n">www</span><span class="o">-</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">  5</span><span class="cl"><span class="c1"># Beschreibung siehe unten</span>
</span></span><span class="line"><span class="ln">  6</span><span class="cl"><span class="n">worker_processes</span> <span class="mi">8</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">  7</span><span class="cl">
</span></span><span class="line"><span class="ln">  8</span><span class="cl"><span class="n">events</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">  9</span><span class="cl">		<span class="c1"># Beschreibung siehe unten</span>
</span></span><span class="line"><span class="ln"> 10</span><span class="cl">		<span class="n">worker_connections</span> <span class="mi">768</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 11</span><span class="cl">		<span class="c1"># soll jeder Worker mehr als eine Verbindung gleichzeitig annehmen? Standard: off</span>
</span></span><span class="line"><span class="ln"> 12</span><span class="cl">		<span class="n">multi_accept</span> <span class="n">off</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 13</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln"> 14</span><span class="cl">
</span></span><span class="line"><span class="ln"> 15</span><span class="cl">
</span></span><span class="line"><span class="ln"> 16</span><span class="cl"><span class="n">http</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 17</span><span class="cl">		<span class="c1">##</span>
</span></span><span class="line"><span class="ln"> 18</span><span class="cl">		<span class="c1"># Basic Settings</span>
</span></span><span class="line"><span class="ln"> 19</span><span class="cl">		<span class="c1"># Beschreibung siehe unten</span>
</span></span><span class="line"><span class="ln"> 20</span><span class="cl">		<span class="c1">##</span>
</span></span><span class="line"><span class="ln"> 21</span><span class="cl">
</span></span><span class="line"><span class="ln"> 22</span><span class="cl">		<span class="n">sendfile</span> <span class="n">on</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 23</span><span class="cl">		<span class="n">tcp_nopush</span> <span class="n">on</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 24</span><span class="cl">		<span class="n">tcp_nodelay</span> <span class="n">on</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 25</span><span class="cl">
</span></span><span class="line"><span class="ln"> 26</span><span class="cl">		<span class="n">client_body_timeout</span> <span class="mi">12</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 27</span><span class="cl">		<span class="n">client_header_timeout</span> <span class="mi">12</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 28</span><span class="cl">		<span class="n">keepalive_timeout</span> <span class="mi">65</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 29</span><span class="cl">    <span class="n">send_timeout</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 30</span><span class="cl">
</span></span><span class="line"><span class="ln"> 31</span><span class="cl">		<span class="n">types_hash_max_size</span> <span class="mi">2048</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 32</span><span class="cl">		<span class="n">server_names_hash_bucket_size</span> <span class="mi">128</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 33</span><span class="cl">    <span class="c1"># server_name_in_redirect off;</span>
</span></span><span class="line"><span class="ln"> 34</span><span class="cl">
</span></span><span class="line"><span class="ln"> 35</span><span class="cl">		<span class="n">limit_req_zone</span> <span class="o">$</span><span class="n">binary_remote_addr</span> <span class="n">zone</span><span class="o">=</span><span class="n">one</span><span class="p">:</span><span class="mi">10</span><span class="n">m</span> <span class="n">rate</span><span class="o">=</span><span class="mi">5</span><span class="n">r</span><span class="o">/</span><span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 36</span><span class="cl">
</span></span><span class="line"><span class="ln"> 37</span><span class="cl">		<span class="n">include</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">mime</span><span class="o">.</span><span class="n">types</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 38</span><span class="cl">		<span class="n">default_type</span> <span class="n">application</span><span class="o">/</span><span class="n">octet</span><span class="o">-</span><span class="n">stream</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 39</span><span class="cl">
</span></span><span class="line"><span class="ln"> 40</span><span class="cl">		<span class="c1"># Verhindere, dass nginx auf Fehlerseiten die Versionsnummer mitliefert</span>
</span></span><span class="line"><span class="ln"> 41</span><span class="cl">		<span class="c1"># Frei nach dem Motto &#34;securtiy through obscurity&#34;</span>
</span></span><span class="line"><span class="ln"> 42</span><span class="cl">		<span class="n">server_tokens</span> <span class="n">off</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 43</span><span class="cl">
</span></span><span class="line"><span class="ln"> 44</span><span class="cl">		<span class="c1">##</span>
</span></span><span class="line"><span class="ln"> 45</span><span class="cl">		<span class="c1"># Logging Settings</span>
</span></span><span class="line"><span class="ln"> 46</span><span class="cl">		<span class="c1"># Beschreibung siehe unten</span>
</span></span><span class="line"><span class="ln"> 47</span><span class="cl">		<span class="c1">##</span>
</span></span><span class="line"><span class="ln"> 48</span><span class="cl">
</span></span><span class="line"><span class="ln"> 49</span><span class="cl">		<span class="n">log_format</span> <span class="n">cache_status</span> <span class="s1">&#39;[$time_local] &#34;$request&#34;  $upstream_cache_status&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 50</span><span class="cl">
</span></span><span class="line"><span class="ln"> 51</span><span class="cl">		<span class="n">log_format</span> <span class="n">main</span> <span class="s1">&#39;$time_local|$ip_anonymized|$remote_user|&#39;</span>
</span></span><span class="line"><span class="ln"> 52</span><span class="cl">				<span class="s1">&#39;&#34;$request&#34; $status $body_bytes_sent &#39;</span>
</span></span><span class="line"><span class="ln"> 53</span><span class="cl">				<span class="s1">&#39;&#34;$http_referer&#34; &#34;$http_user_agent&#34; $upstream_cache_status&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 54</span><span class="cl">
</span></span><span class="line"><span class="ln"> 55</span><span class="cl">		<span class="n">map</span> <span class="o">$</span><span class="n">remote_addr</span> <span class="o">$</span><span class="n">ip_anonym1</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 56</span><span class="cl">		    <span class="n">default</span> <span class="mf">0.0</span><span class="o">.</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 57</span><span class="cl">		    <span class="s2">&#34;~(?P&lt;ip&gt;(\d+)\.(\d+)\.(\d+))\.\d+&#34;</span> <span class="o">$</span><span class="n">ip</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 58</span><span class="cl">		    <span class="s2">&#34;~(?P&lt;ip&gt;[^:]+:[^:]+):&#34;</span> <span class="o">$</span><span class="n">ip</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 59</span><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="ln"> 60</span><span class="cl">
</span></span><span class="line"><span class="ln"> 61</span><span class="cl">		<span class="n">map</span> <span class="o">$</span><span class="n">remote_addr</span> <span class="o">$</span><span class="n">ip_anonym2</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 62</span><span class="cl">		    <span class="n">default</span> <span class="o">.</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 63</span><span class="cl">		    <span class="s2">&#34;~(?P&lt;ip&gt;(\d+)\.(\d+)\.(\d+))\.\d+&#34;</span> <span class="o">.</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 64</span><span class="cl">		    <span class="s2">&#34;~(?P&lt;ip&gt;[^:]+:[^:]+):&#34;</span> <span class="p">::;</span>
</span></span><span class="line"><span class="ln"> 65</span><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="ln"> 66</span><span class="cl">
</span></span><span class="line"><span class="ln"> 67</span><span class="cl">		<span class="n">map</span> <span class="o">$</span><span class="n">ip_anonym1</span><span class="o">$</span><span class="n">ip_anonym2</span> <span class="o">$</span><span class="n">ip_anonymized</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 68</span><span class="cl">		    <span class="n">default</span> <span class="mf">0.0</span><span class="o">.</span><span class="mf">0.0</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 69</span><span class="cl">		    <span class="s2">&#34;~(?P&lt;ip&gt;.*)&#34;</span> <span class="o">$</span><span class="n">ip</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 70</span><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="ln"> 71</span><span class="cl">
</span></span><span class="line"><span class="ln"> 72</span><span class="cl">		<span class="n">map</span> <span class="o">$</span><span class="n">http_ignoreMe</span> <span class="o">$</span><span class="n">log_this</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 73</span><span class="cl">		    <span class="o">~</span><span class="bp">true</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 74</span><span class="cl">		    <span class="n">default</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 75</span><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="ln"> 76</span><span class="cl">
</span></span><span class="line"><span class="ln"> 77</span><span class="cl">		<span class="n">access_log</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="nb">log</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">access</span><span class="o">.</span><span class="n">log</span> <span class="n">main</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 78</span><span class="cl">		<span class="n">error_log</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="nb">log</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">error</span><span class="o">.</span><span class="n">log</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 79</span><span class="cl">
</span></span><span class="line"><span class="ln"> 80</span><span class="cl">		<span class="c1">##</span>
</span></span><span class="line"><span class="ln"> 81</span><span class="cl">		<span class="c1"># SSL Settings</span>
</span></span><span class="line"><span class="ln"> 82</span><span class="cl">		<span class="c1"># Beschreibung siehe unten</span>
</span></span><span class="line"><span class="ln"> 83</span><span class="cl">		<span class="c1">##</span>
</span></span><span class="line"><span class="ln"> 84</span><span class="cl">
</span></span><span class="line"><span class="ln"> 85</span><span class="cl">		<span class="n">ssl_session_cache</span> <span class="n">shared</span><span class="p">:</span><span class="n">SSL</span><span class="p">:</span><span class="mi">5</span><span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 86</span><span class="cl">		<span class="n">ssl_session_timeout</span> <span class="mi">1</span><span class="n">h</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 87</span><span class="cl">		<span class="n">add_header</span> <span class="n">Strict</span><span class="o">-</span><span class="n">Transport</span><span class="o">-</span><span class="n">Security</span> <span class="s2">&#34;max-age=15768000; includeSubDomains&#34;</span> <span class="n">always</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 88</span><span class="cl">
</span></span><span class="line"><span class="ln"> 89</span><span class="cl">		<span class="n">ssl_protocols</span> <span class="n">TLSv1</span> <span class="n">TLSv1</span><span class="o">.</span><span class="mi">1</span> <span class="n">TLSv1</span><span class="o">.</span><span class="mi">2</span><span class="p">;</span> <span class="c1"># Dropping SSLv3, ref: POODLE</span>
</span></span><span class="line"><span class="ln"> 90</span><span class="cl">		<span class="n">ssl_prefer_server_ciphers</span> <span class="n">on</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 91</span><span class="cl">	  <span class="n">ssl_ciphers</span> <span class="n">ECDH</span><span class="o">+</span><span class="n">AESGCM</span><span class="p">:</span><span class="n">ECDH</span><span class="o">+</span><span class="n">AES256</span><span class="p">:</span><span class="n">ECDH</span><span class="o">+</span><span class="n">AES128</span><span class="p">:</span><span class="n">DHE</span><span class="o">+</span><span class="n">AES128</span><span class="p">:</span><span class="o">!</span><span class="n">ADH</span><span class="p">:</span><span class="o">!</span><span class="n">AECDH</span><span class="p">:</span><span class="o">!</span><span class="n">MD5</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 92</span><span class="cl">
</span></span><span class="line"><span class="ln"> 93</span><span class="cl">		<span class="c1">##</span>
</span></span><span class="line"><span class="ln"> 94</span><span class="cl">		<span class="c1"># Cache</span>
</span></span><span class="line"><span class="ln"> 95</span><span class="cl">		<span class="c1"># Beschreibung siehe unten</span>
</span></span><span class="line"><span class="ln"> 96</span><span class="cl">		<span class="c1">#</span>
</span></span><span class="line"><span class="ln"> 97</span><span class="cl">
</span></span><span class="line"><span class="ln"> 98</span><span class="cl">		<span class="n">fastcgi_cache_key</span> <span class="s2">&#34;$scheme$request_method$host$request_uri&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 99</span><span class="cl">		<span class="n">add_header</span> <span class="n">X</span><span class="o">-</span><span class="n">Cache</span> <span class="o">$</span><span class="n">upstream_cache_status</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">100</span><span class="cl">
</span></span><span class="line"><span class="ln">101</span><span class="cl">		<span class="c1">##</span>
</span></span><span class="line"><span class="ln">102</span><span class="cl">		<span class="c1"># Gzip Settings</span>
</span></span><span class="line"><span class="ln">103</span><span class="cl">		<span class="c1"># Beschreibung siehe unten</span>
</span></span><span class="line"><span class="ln">104</span><span class="cl">		<span class="c1">##</span>
</span></span><span class="line"><span class="ln">105</span><span class="cl">
</span></span><span class="line"><span class="ln">106</span><span class="cl">		<span class="n">gzip</span> <span class="n">on</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">107</span><span class="cl">		<span class="n">gzip_vary</span> <span class="n">on</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">108</span><span class="cl">		<span class="n">gzip_min_length</span> <span class="mi">10240</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">109</span><span class="cl">		<span class="n">gzip_proxied</span> <span class="n">expired</span> <span class="n">no</span><span class="o">-</span><span class="n">cache</span> <span class="n">no</span><span class="o">-</span><span class="n">store</span> <span class="n">private</span> <span class="n">auth</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">110</span><span class="cl">		<span class="n">gzip_types</span> <span class="n">text</span><span class="o">/</span><span class="n">plain</span> <span class="n">text</span><span class="o">/</span><span class="n">css</span> <span class="n">text</span><span class="o">/</span><span class="n">xml</span> <span class="n">text</span><span class="o">/</span><span class="n">javascript</span> <span class="n">application</span><span class="o">/</span><span class="n">x</span><span class="o">-</span><span class="n">javascript</span> <span class="n">application</span><span class="o">/</span><span class="n">xml</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">111</span><span class="cl">		<span class="n">gzip_disable</span> <span class="s2">&#34;MSIE [1-6]\.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">112</span><span class="cl">
</span></span><span class="line"><span class="ln">113</span><span class="cl">		<span class="c1">##</span>
</span></span><span class="line"><span class="ln">114</span><span class="cl">		<span class="c1"># Virtual Host Configs</span>
</span></span><span class="line"><span class="ln">115</span><span class="cl">		<span class="c1"># wo befinden sich die Einstellungen für die Server / virtual hosts?</span>
</span></span><span class="line"><span class="ln">116</span><span class="cl">		<span class="c1"># welche Variante du nutzt, ist Geschmackssache und dir überlassen</span>
</span></span><span class="line"><span class="ln">117</span><span class="cl">		<span class="c1">##</span>
</span></span><span class="line"><span class="ln">118</span><span class="cl">
</span></span><span class="line"><span class="ln">119</span><span class="cl">		<span class="n">include</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">conf</span><span class="o">.</span><span class="n">d</span><span class="o">/*.</span><span class="n">conf</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">120</span><span class="cl">	<span class="c1">#	include /etc/nginx/sites-enabled/*.conf;</span>
</span></span><span class="line"><span class="ln">121</span><span class="cl">
</span></span><span class="line"><span class="ln">122</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><a href="https://nginx.org/en/docs/ngx_core_module.html#worker_processes">worker_processes</a> - Natürlich kannst du nginx mit einem einzigen Prozess laufen lassen. Du kannst aber auch dafür sorgen, dass sich mehrere Prozesse um die Beantwortung der Anfragen kümmern. Es empfiehlt sich <strong>für jeden Prozessor-Kern</strong> einen Prozess zu starten. Mit dem Wert &ldquo;auto&rdquo; kümmert sich nginx selber darum. Mit </p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">grep processor /proc/cpuinfo | wc -l
</span></span></code></pre></div><p>findest du heraus, wieviele Kerne dein System hat, um diesen Wert manuell zu setzen.</p>
<p><a href="https://nginx.org/en/docs/ngx_core_module.html#worker_connections">worker_connections</a> - Dieser Wert legt fest, wieviele Anfragen jeder einzelne <em>worker process</em> verarbeiten kann. Hat nginx also 8 simultane <em>worker processes</em> gestartet und ist dieser Wert  auf 1024 eingestellt, wird nginx insgesamt 8.192 Verbindungen gleichzeitig vertragen. Der Wert für diese Direktive wird allerdings durch die Anzahl gleichzeitiger offener Dateien für einen Prozess begrenzt. Diese erfährst du mit <em>ulimit -n</em>.</p>
<p><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#sendfile">sendfile</a>, tcp_nopush und tcp_nodelay - Jetzt geht es ein wenig ans Eingemachte. Diese Parameter können einerseits einen wichtigen Geschwindigkeitsgewinn bedeuten oder völlig sinnlos sein. Da mir aber kein negative Impact bekannt ist, möchte ich an der Stelle pauschal erwähnen, diesen Parameter zu aktivieren. Wenn ich mich hier irre, lasst mir gerne einen Kommentar dazu da. Sendfile optimiert die Art, wie auf eine angefragte Datei zugegriffen wird. Tcp_nopush sorgt dafür, dass die Antwort in einem Paket verschickt wird und tcp_nodelay schließlich vermeidet das Buffern von Daten die zum Versand bereit liegen. Planst du den Einsatz von Cache, solltest du unbedingt prüfen, wie sich diese Parameter dann auswirken, da ein Cache durchaus ein Kontraindikator sein kann!</p>
<p><a href="https://www.digitalocean.com/community/tutorials/how-to-optimize-nginx-configuration">client_body_timeout, client_header_timeout</a> - Diese Parameter werden die tatsächliche Geschwindigkeit weniger beeinflussen, sondern nur dafür sorgen, dass der HTTP Fehler 408 (Request time out) schneller ausgeliefert wird.</p>
<p><a href="https://www.digitalocean.com/community/tutorials/how-to-optimize-nginx-configuration">keepalive_timeout und send_timeout</a> - Diese Parameter machen vermutlich eher Sinn, wenn du mit wirklich vielen (organischen) Verbindungen konfrontiert wirst. Sie sorgen dafür, dass nicht genutzte Verbindungen schneller geschlossen werden und der Prozess so neue Anfragen annehmen kann.</p>
<p><a href="http://nginx.org/en/docs/http/ngx_http_limit_req_module.html">limit_req_zone</a> - Mit dieser Direktive legst du fest, wie viele Anfragen der Server innerhalb eines Zeitraums annimmt, bevor er mit einem Fehler antwortet. Als Indikator habe ich die IP-Adresse gewählt ($binary_remote_addr), mit $server_name lässt sich das Limit je Server einstellen. Mit zone lege ich einen Namen für diese Einstellung fest. So kann ich z.B. mehrer Zonen für beliebige Orte oder Ordner einrichten. 10m beschreibt die Größe des Speichers, in dem die IP-Adressen abgelegt werden. 10 MByte sollte für etwa 160.000 IP-Adressen reichen. Rate legt fest, wie viele Anfragen pro Sekunde erlaubt sind. Mit burst kann eine Warteschlange eingerichtet werden, die (hier) 20 Anfragen zurückstellt um sie dann abzuarbeiten.</p>
<p><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#server_names_hash_bucket_size">server_names_hash_bucket_size</a> - Damit kommst du unter Umständen in Berührung, wenn nginx dich mit der Fehlermeldung &ldquo;<em>could not build the server_names_hash, you should increase server_names_hash_bucket_size</em>&rdquo; begrüßt. Die Direktive beschreibt ihre Funktion eigentlich schon ganz gut: Die Größe des Buckets für die Hash-Werte der Server-Namen. Oder: Dein Server-Name ist zu groß und passt nicht in den Eimer.</p>
<h3 id="logging">Logging</h3>
<p>An erster Stelle definiere ich meine eigenen Log-Templates <strong>main</strong> und <strong>cache_status</strong>. Beachte, dass ich die IP-Adresse nur anonymisiert übernehme. Dies übernimmt die map-Direktive, die per regulärem Ausdruck das letzte Tupel der IP-Adresse entfernt. Das ganze ist <a href="https://blag.nullteilerfrei.de/2018/05/26/anonymize-ip-addresses-in-nginx-log-files/">hier etwas genauer dokumentiert</a>. Ebenfalls mit <strong>map</strong> lese ich einen HTTP-Header aus, um das Logging vom Client aus zu deaktivieren - warum ich das mache, <a href="https://www.nickyreinert.de/zugriff-nicht-loggen-wenn-ein-bestimmter-http-request-header-gesetzt-ist/">ist hier beschrieben</a>.</p>
<p>Schließlich lege ich mit <strong>access_log</strong> und <strong>error_log</strong> fest, an welchem Ort die Log-Files per default abgelegt werden. Das ändere ich später natürlich noch auf Server-Ebene.</p>
<h3 id="der-cache">Der Cache</h3>
<p>In der globalen Konfig-Datei werde ich nur zwei Direktiven vorgeben, die für alle Server gleich sind. Mit der Direktive <strong><a href="http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_cache_key">fastcgi_cache_key</a></strong>, lege ich fest, wie nginx die Cache-Keys erstellt. Hier sollte natürlich jeder Server unterscheidbar sein.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">fastcgi_cache_key &#34;$scheme$request_method$host$request_uri&#34;;
</span></span></code></pre></div><p>Außerdem soll jede Antwort einen Header enthalten, der den Cache-Status enthält. Mit der Variable <em>upstream_cache_status</em> kann z.B. ich so <a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html">HIT, MISS oder EXPIRED</a> übermitteln.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">add_header X-Cache $upstream_cache_status;
</span></span></code></pre></div><p>Wie der Cache bei nginx funktioniert und auf den wichtigsten Parameter fastcgi_cache_path gehe ich im 2. Teil genauer ein.</p>
<h3 id="welches-dateisystem-für-den-cache---tempfs-oder-ramfs">Welches Dateisystem für den Cache - tempfs oder ramfs?</h3>
<p>Der <strong>FastCGI</strong>-Cache ist dafür gedacht, die Auslieferung der PHP-Dateien zu beschleunigen. Es macht nämlich durchaus Sinn, eine PHP-Datei nicht jedes mal durch den PHP-Interpreter zu jagen, wenn sich am Inhalt nichts geändert hat. Dazu wird die &ldquo;interpretierte&rdquo; PHP-Datei einfach in einem Cache-Ordner abgelegt und bei Bedarf abgerufen. Dieser Ordner kann sich auf der Festplatte oder im Arbeitsspeicher befinden. Auf die Unterschiede gehe ich hier kurz ein:</p>
<p>Im <strong>Init-Script</strong> (siehe oben) wird dir ein großer, auskommentierter Block aufgefallen sein. Mein Setup ist darauf ausgelegt, dass der Cache auf der Festplatte abgelegt wird. Es ist aber wie gesagt auch möglich, eine <strong>RAM-Disk</strong> zu nutzen, wobei der Arbeitsspeicher als Ablage dient. Das ist in den meisten Fällen weitaus schneller ist als die Festplatte. <a href="https://www.searchstorage.de/tipp/Linux-Server-Unnoetige-Dateien-mit-tmpfs-vom-Storage-fernhalten">Man unterscheidet</a> zwischen zwei nutzbaren Dateisystemen: <strong>ramfs</strong> und <strong>tempfs</strong>.</p>
<p>Der <strong>Vorteil von ramfs</strong> ist, dass direkt der <strong>Arbeitsspeicher</strong> genutzt wird. Der <strong>Nachteil</strong> ist: Es gibt <strong>keine Größenbeschränkung</strong>. Mit den falschen Einstellungen kann man also ungewollt den Arbeitsspeicher volllaufen lassen. Bei <strong>tempfs</strong> kann zwar eine <strong>Obergrenze</strong> angegeben werden. Es kann aber sein, dass das <strong>Dateisystem</strong> selber eine Swap-Partition zum Zwischenspeichern nutzt (vor allem dann, wenn die vorgegeben Speichergrenze erreicht ist). Ein Test mit tempfs und normaler Festplatte hat bei mir ergeben, dass der <strong>Cache</strong> um den <strong>Faktor 10</strong> langsamer wird. Aus diesem Grund ist der Bereich hier deaktiviert. Um das Thema kümmere ich mich also vielleicht an anderer Stelle noch mal</p>
<h3 id="ssl">SSL</h3>
<p>Natürlich gehört auch SSL zu meinem Server-Setup. Ich nutze dazu <strong>Let&rsquo;s Encrypt</strong> in Verbindung mit dem certbot, da das so ziemlich den ganzen Prozess automatisiert. Der Parameter <em>ssl_session_cache</em> beschreibt, wie groß der Cache für Session-Caches ist. Der Standardwert von 5 MByte sollte hier völlig ausreichen und reicht für knapp 20.000 Sessions. Auch beim <em>ssl_session_timeout</em> kann der Standardwert übernommen werden. Nach 1 Stunde verfällt also die SSL-Session. Außerdem sorgen wir mit <em>add_header</em> Strict-Transport-Security dafür, dass nur Verbindungen über HTTPS aufgebaut werden können (HTTP Strict Transport Security, HSTS).</p>
<p>Schließlich solltest du über <em>ssl_protocols</em> die verwendeten SSL-Protokolle einschränken. Die meisten modernen Browser kommen mit TLS 1.2 schon ganz gut klar und seit August 2018 gibt es auch TLS 1.3. Ältere Versionen haben hier nichts mehr verloren, um z.B. Lücken wie <a href="https://de.wikipedia.org/wiki/Poodle">Poodle</a> keine Angriffsfläche zu bieten. Außerdem kannst du mit <em>ssl_prefer_server_ciphers</em> und <em>ssl_ciphers</em> festlegen, welche Verschlüsselungsmethoden akzeptiert werden sollen. Auch hier gibt es schwache und langsame Methoden. <a href="https://mozilla.github.io/server-side-tls/ssl-config-generator/">Mozilla bietet dafür übrigens ein Online-Tool</a> an, dessen Einstellung ich für einen guten Kompromiss zwischen Kompatibilität und Sicherheit halte</p>
<h3 id="gzip---kompression">GZIP - Kompression</h3>
<p>Neben dem Cache ist Kompression eine sinnvolle Maßnahme um den Seitenaufbau noch etwas zu beschleunigen. Die Kompression aktivierst du mit - Überraschung - <em>gzip on</em>.</p>
<p>Mit <em>gzip_vary</em> sorgst du dafür, dass komprimierte und unkomprimierte Ressourcen gecached werden. Der Parameter <em>gzip_min_length</em> legt fest, wie groß eine Ressource mindestens sein muss, um komprimiert zu werden. Mit gzip_proxied sorgst du dafür, dass Anfragen von Proxies komprimierte Daten bekommen und <em>gzip_types</em> definiert die Ressourcen-Typen, die komprimiert werden. Und schließlich sorgen wir noch dafür, dass Anfragen vom alten Internet Explorer nicht komprimiert werden, da dieser damit nicht arbeiten kann: <em>gzip_disable</em>.</p>
<p>Das war es mit der Einrichtung von nginx. Weiter geht es im 2. Teil mit den <strong>Servern</strong> bzw. wie sie unter Apache genannt werden: <strong>virtual hosts</strong>.</p>

        
        
      ]]></content:encoded>
      
      
      
      <category>hosting</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Mehrere virtuelle Server mit nginx und PHP-FPM für Wordpress (Teil 1 / 3) - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>guide</dc:type>
      
      
    </item>
  </channel>
</rss>