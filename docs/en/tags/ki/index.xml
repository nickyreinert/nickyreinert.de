<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" 
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>KI auf Nicky Reinert</title>
    <link>https://nickyreinert.de/en/tags/ki/</link>
    <description>Blog &amp; projects by Nicky Reinert (Institute for Digital Challenges): web development &amp; software development, SEO &amp; analytics, hosting &amp; DevOps, WordPress &amp; Hugo, tools &amp; projects, data protection &amp; digital culture — plus content on AI and autism &amp; society.</description>
    <generator>Hugo 0.148.2</generator>
    <language>en</language>
    <managingEditor></managingEditor>
    <webMaster></webMaster>
    <copyright></copyright>
    <lastBuildDate>Sat, 09 Aug 2025 12:34:56 +0000</lastBuildDate><atom:link href="https://nickyreinert.de/en/tags/ki/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>wad - about chatbots, captchas, and Chromecast</title>
      <link>https://nickyreinert.de/en/blog/2025/08/09/wad-about-chatbots-captchas-and-chromecast/</link>
      <pubDate>Sat, 09 Aug 2025 12:34:56 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/en/blog/2025/08/09/wad-about-chatbots-captchas-and-chromecast/</guid>
      <description>New month, new category – &ldquo;We are doomed&rdquo; (wad) is about &ldquo;smart and new technology&rdquo; that turns out to be not so smart. But new, at …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>A critical and humorous blog post from the &#34;We are doomed&#34; series, highlighting the shortcomings of &#34;smart&#34; technology through three anecdotes. The author recounts frustrating experiences with Google&#39;s Gemini chatbot (failing to provide information about Google&#39;s own product), ambiguous CAPTCHAs, and the fragmented, incompatible ecosystem of Google&#39;s Chromecast and Pixel devices.</p>
          
          
          <p><strong>Hauptthemen:</strong> Künstliche Intelligenz, Chatbots, CAPTCHA, Google Ecosystem, User Experience, Technology Criticism</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>New month, new category – &ldquo;We are doomed&rdquo; (wad) is about &ldquo;smart and new technology&rdquo; that turns out to be not so smart. But new, at least.</p>
<h2 id="chatbots-are-going-to-replace-search-engines-arent-they">Chatbots are going to replace search engines. Aren’t they?</h2>
<p>Well, no. I asked <strong>Gemini</strong> (Google&rsquo;s AI chatbot) how to update <strong>Stadia&rsquo;s</strong> firmware (Google&rsquo;s former gaming platform). Gemini suggested searching the internet for a proper solution:</p>
<p align="center">
  <a href="gemini-suggest-web-search.png" target="_blank" style="margin: 0 auto; display: block;">
    <img src="gemini-suggest-web-search.png" alt="Meme: AI outsourcing" width="400"/>
  </a>
</p>
<center>Learn how to help yourself!</center>
<br />
<br />
x
Not only that, but also notice how Google's own AI chatbot doesn’t even know that Google extended the firmware update tool on their website: https://stadia.google.com/controller/index_de.html
<p>Don’t they talk to each other?</p>
<h2 id="you-shall-not-pass">You shall not pass</h2>
<p>We all struggle with captchas from time to time. Sometimes they ignore our correct answers, and we have to solve dozens of captchas. Sometimes you get captchas like this. I’m probably not the first one to see this:</p>
<p align="center">
  <a href="bike-captcha.png" target="_blank" style="margin: 0 auto; display: block;">
    <img src="bike-captcha.png" alt="Meme: AI outsourcing" width="400"/>
  </a>
</p>
<center>Where’s the bike?</center>
<br />
<br />
<p>(<strong>Fahrrad</strong> is German for <strong>bicycle</strong>, but here it was probably shortened to &ldquo;bike,&rdquo; which can also mean any kind of motorcycle. In fact, this is more of a moped or <strong>scooter</strong>.)</p>
<h2 id="what-the-actual-fxxk">What the actual FxxK</h2>
<p>Yeah, and then we have this one. Story behind it: I have this <strong>Chromecast Ultra</strong> gathering dust for a couple of years now. Today I decided to give it a try. I connected it to my <strong>optical computer-to-human interface</strong> (the one firing a million protons directly through your eyeballs into your brain) and tried to register it. After the annoying fact that I have to install Google’s Home app to set up the Chromecast, I was referred to another app called &ldquo;Device Utility.&rdquo;</p>
<p>I have to install this tool to &ldquo;unlock&rdquo; my Chromecast. Some kind of protection? Seems like Google has activated a “kill switch” after a period of non-usage.</p>
<p>However, the problem is what you can see here: My <strong>Pixel 8 Pro</strong> – manufactured by Google – is not compatible with this app.</p>
<p align="center">
  <a href="app-store-device-utility.png" target="_blank" style="margin: 0 auto; display: block;">
    <img src="app-store-device-utility.png" alt="Meme: AI outsourcing" width="400"/>
  </a>
</p>
<center>You shall not pass.</center>
<br />
<br />
<h2 id="all-i-wanted-was-netflix-now-ive-ended-up-spinning-up-a-virtual-android-device-in-android-studio">All I wanted was Netflix. Now I’ve ended up spinning up a virtual Android device in Android Studio.</h2>
<h2 id="conclusion">Conclusion</h2>
<p align="center">
  <a href="table-flip-guy.jpg" target="_blank" style="margin: 0 auto; display: block;">
    <img src="table-flip-guy.jpg" alt="Meme: AI outsourcing" width="400"/>
  </a>
</p>
<br />
<br />

        
        
        <div class="tags">
          <p><strong>Tags:</strong> KI, Google, UX, Kritik, Tech</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/bike-captcha.png" type="image/jpeg">
        <media:title>wad - about chatbots, captchas, and Chromecast - Title Image</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>opinion_piece</dc:type>
      
      
    </item><item>
      <title>My 2,718281828459045235 Cents - State Of AI: Year 3 of the hype. Things I learned.</title>
      <link>https://nickyreinert.de/en/blog/2025/08/01/my-2718281828459045235-cents-state-of-ai-year-3-of-the-hype.-things-i-learned./</link>
      <pubDate>Fri, 01 Aug 2025 12:34:56 +0100</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/en/blog/2025/08/01/my-2718281828459045235-cents-state-of-ai-year-3-of-the-hype.-things-i-learned./</guid>
      <description>What about coding People don&rsquo;t get tired of announcing that AI will replace developers. Mostly salespeople. Microsoft claims that AI is already writing …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Ein kritischer Essay über den aktuellen Stand der Künstlichen Intelligenz (KI) und Large Language Models (LLMs) aus der Perspektive eines Entwicklers. Der Artikel beleuchtet die Grenzen von LLMs beim Coding (z.B. bei der SVG-Generierung), kritisiert ihre Herangehensweise an die Fehlerbehebung und schlägt `Sieben Regeln des AIngagements` für effektives Prompting vor. Zudem spekuliert er über die zukünftige Entwicklung von Sprache und Benutzeroberflächen im Kontext von KI.</p>
          
          
          <p><strong>Hauptthemen:</strong> Künstliche Intelligenz, Large Language Models, Softwareentwicklung, Workflow-Optimierung, Mensch-Computer-Interaktion, Prompt Engineering, Zukunft der Technologie</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> advanced</p>
          
        </div>
        
        
        <h2 id="what-about-coding">What about coding</h2>
<p>People don&rsquo;t get tired of announcing that AI will replace developers. Mostly salespeople. <a href="https://www.techrepublic.com/article/news-microsoft-meta-code-written-by-ai/">Microsoft claims that AI is already writing 30–50%</a> of their code. They also admit, that quality of C+ is behind expectations. <a href="https://www.xda-developers.com/microsofts-ceo-ai-wrote-30-percent-companys-code/">In 2030 they plan to reach a rate of 95%</a>, though human oversight and authorship remains important. But they are silent about further details. <strong>I am not totally disagreeing</strong>, but I am pretty sure that there&rsquo;s still a bumpy road ahead. You may argue: Well, then you don&rsquo;t know how to properly operate AI. Problem usually sits in front of the screen, as they say. Fair enough. That&rsquo;s why I want to share some thoughts and experiences.</p>
<p align="center">
    <a href="copilot-inline-auto-completion.png" target="_blank" style="margin: 0 auto; display: block;">
        <img src="copilot-inline-auto-completion.png" alt="Copilot - inline auto completion" width="500"/>
    </a>
</p>
<center>Copilot - inline auto completion</center>
<br />
<br />
<p>AI is increasing my efficiency to a very high degree (I am referring to common LLM solutions here, but sometimes prefer the term AI, knowing that this can be misleading). But it also requires good skills as a developer. And if you don’t keep your head up, you lose more time &ldquo;playing around&rdquo; than you win by using AI.</p>
<p align="center">
    <a href="pile-of-unfinished-side-projects.png" target="_blank" style="margin: 0 auto; display: block;">
        <img src="pile-of-unfinished-side-projects.png" alt="Meme: Pile of unfinished side projects" width="500"/>
    </a>
</p>
<br />
<br />
<p>Speaking of playing around: These days I was just doing that. AI enables me to do this more frequently. It&rsquo;s so much easier to wrap your head around foreign ground. And it&rsquo;s fun, without crawling through endless Google search results or SO threads. So I am having this idea of a simple side project, it&rsquo;s one of those little things I get stuck on. And I was in need of an SVG showing a bike. I asked several LLM to generate one.</p>
<p>I am keeping it short. They all grandiosely failed.</p>
<p><strong>Gemini</strong> does not support SVG creation on its web interface. <strong>Claude</strong> does. And this was the first result: (I am sparing you the detailed prompts, basically I just asked for a simple bike SVG, no extensive prompt, follow-up prompts were quite brief, but detailed enough to get the point across)</p>
<p align="center">
    <a href="claude-svg-bike-try-1.png" target="_blank" style="margin: 0 auto; display: block;">
        <img src="claude-svg-bike-try-1.png" alt="Claude: SVG bike - try 1" width="500"/>
    </a>
</p>
<center>Claude: SVG bike - try 1</center>
<br />
<br />
<p>OK. Close.  What else you got?</p>
<p align="center">
    <a href="claude-svg-bike-try-2.png" target="_blank" style="margin: 0 auto; display: block;">
        <img src="claude-svg-bike-try-2.png" alt="Claude: SVG bike - try 2" width="500"/>
    </a>
</p>
<center>Claude: SVG bike - try 2</center>
<br />
<br />
<p>We are getting closer. But still not a bike.</p>
<p align="center">
    <a href="claude-svg-bike-try-3.png" target="_blank" style="margin: 0 auto; display: block;">
        <img src="claude-svg-bike-try-3.png" alt="Claude: SVG bike - try 3" width="500"/>
    </a>
</p>
<center>Claude: SVG bike - try 3</center>
<br />
<br />
<p>No. Last try?</p>
<p align="center">
    <a href="claude-svg-bike-try-4.png" target="_blank" style="margin: 0 auto; display: block;">
        <img src="claude-svg-bike-try-4.png" alt="Claude: SVG bike - try 4" width="500"/>
    </a>
</p>
<center>Claude: SVG bike - try 4</center>
<br /><br />
<p>Ok. Close. Grok. Your turn.</p>
<p align="center">
    <a href="grok-svg-bike-try-1.png" target="_blank" style="margin: 0 auto; display: block;">
        <img src="grok-svg-bike-try-1.png" alt="Grok: SVG bike - try 1" width="500"/>
    </a>
</p>
<center>Grok: SVG bike - try 1</center>
<br />
<br />
<p>Expressionism. ChatGPT. Last chance to hold the lance for AI.</p>
<p align="center">
    <a href="chatgpt-svg-bike-try-1.png" target="_blank" style="margin: 0 auto; display: block;">
        <img src="chatgpt-svg-bike-try-1.png" alt="ChatGPT: SVG bike - try 1" width="500"/>
    </a>
</p>
<center>ChatGPT: SVG bike - try 1</center>
<br /><br />
<p>What&rsquo;s that? You need a doctor?</p>
<p align="center">
    <a href="chatgpt-svg-bike-try-2.png" target="_blank" style="margin: 0 auto; display: block;">
        <img src="chatgpt-svg-bike-try-2.png" alt="ChatGPT: SVG bike - try 2" width="500"/>
    </a>
</p>
<center>ChatGPT: SVG bike - try 2</center>
<br /><br />
<p>Nope. Next try!</p>
<p align="center">
    <a href="chatgpt-svg-bike-try-3.png" target="_blank" style="margin: 0 auto; display: block;">
        <img src="chatgpt-svg-bike-try-3.png" alt="ChatGPT: SVG bike - try 3" width="500"/>
    </a>
</p>
<center>ChatGPT: SVG bike - try 3</center>
<br /><br />
<p>Yeah, that&rsquo;s impressive! But wait. That&rsquo;s not SVG. Caught you cheating. Use it as a template, try again!</p>
<p align="center">
    <a href="chatgpt-svg-bike-try-4.png" target="_blank" style="margin: 0 auto; display: block;">
        <img src="chatgpt-svg-bike-try-4.png" alt="ChatGPT: SVG bike - try 4" width="500"/>
    </a>
</p>
<center>ChatGPT: SVG bike - try 4</center
><br /><br />
<p>What?  Last try. You can do it!</p>
<p align="center">
    <a href="chatgpt-svg-bike-try-5.png" target="_blank" style="margin: 0 auto; display: block;">
        <img src="chatgpt-svg-bike-try-5.png" alt="ChatGPT: SVG bike - try 5" width="500"/>
    </a>
</p>
<center>ChatGPT: SVG bike - try 5</center>
<br /><br />
<p>Cheating. Again.</p>
<p><strong>OK. Unfair comparison.</strong> I know. This is clearly not about coding, but it makes a point. I am not blaming an LLM for not being able to create a simple bike SVG.  Especially because SVG creation is not really something a developer does and it&rsquo;s not what LLM are meant for in the first place. But it&rsquo;s a perfect metaphor for how the process quickly goes sideways:</p>
<blockquote>
<p>Sidenote: Recommended associated read: <a href="https://simonwillison.net/2025/Aug/10/qwen3-4b/">Simon Willison had a similar journey with Qwen</a> at a much tinier scale, though.</p></blockquote>
<p>Those bots have an over-confident way of approaching things. They always try to flatter the user (I learned this wonderful word <strong>“sycophancy”</strong> these days – and forgot it the next day). And they rotate around problems. Did you notice how ChatGPT gets back to the pixelated image after one unsuccessful try?</p>
<p align="center">
  <a href="meme-sicophancy.png" target="_blank" style="margin: 0 auto; display: block;">
    <img src="meme-sicophancy.png" alt="Meme Sicophancy" width="500"/>
  </a>
</p>
<center>Sicophancy -  my second favorite word, first one is: Serendipity... hehe... pity!</center>
<br />
<br />
<p>While they are perfect in solving &ldquo;closed and recurring tasks&rdquo;, they suffer from the &ldquo;open-ended&rdquo; problem. <a href="https://gizmodo.com/microsoft-predicts-these-jobs-are-safe-from-ai-2000637340">Microsoft just published a study about jobs that can best benefit from AI</a>. And most of them are exactly this: Translator and interpreters.  Salespeople - easy, just train a model on product data and you are good. And so on. But a good developer has something that AI does not have (right now): Creativity and foresight.</p>
<p><em>(Don&rsquo;t get me wrong, I don&rsquo;t want to discredit the capabilities of those jobs!)</em></p>
<p align="center">
  <a href="microsoft-ai-study.png" target="_blank" style="margin: 0 auto; display: block;">
    <img src="microsoft-ai-study.png" alt="Microsoft AI Study: Applicability of AI to jobs" width="500"/>
  </a>
</p>
<center>Microsoft AI Study: Applicability of AI to jobs</center>
<br />  <br />
<p>Another devastating example where <strong>Gemini-Pro</strong> failed on a large scale: I asked for a simple Python script to download an XML sitemap and parse a couple of URLs from it. Please trust me when I say I did the prompting correctly. Also, Python and XML are not exactly an exotic combination. However, after 1 hour, over 80 prompts, and I-don&rsquo;t-know-how-many tokens, I gave up. Gemini wasn&rsquo;t able to deliver (I am using <code>gemini-cli</code> for that). It kept circling around the same problem, ignoring correction advice, and repeatedly promising, &ldquo;Now everything should work,&rdquo; many, many times. If you want to see more interesting examples of the mixed quality of LLMs at coding, <a href="https://www.youtube.com/watch?v=uks8tggX4L0">check out this wonderful video</a>.</p>
<p>If you are into <strong>troubleshooting</strong> or <strong>exploring</strong>, you may have experienced this: You ask the AI to fix a problem or explain how to achieve something. It will provide you with a solution. Which is usually quite overwhelming. You start implementing this &ldquo;pamphlet&rdquo; from step 1 to step 42 or so and at step 2 you get stuck.</p>
<p align="center">
  <a href="ai-troubleshooting-phenomenon.png" target="_blank" style="margin: 0 auto; display: block;">
    <img src="ai-troubleshooting-phenomenon.png" alt="AI troubleshooting deviation phenomenon" width="500"/>
  </a>
</p>
<center>AI troubleshooting deviation phenomenon</center>
<br />  <br />
<p>Why? The system you are working on returns an error. We have to rethink our solution process and feed that back to the LLM. <strong>We can&rsquo;t blame the machine</strong>, because the reason is usually: You did not provide enough context about the environment and circumstances. But it’s also important to say: How do you know what details are missing?</p>
<p>You can&rsquo;t. Especially in troubleshooting, it&rsquo;s part of the process. The process!</p>
<p align="center">
  <a href="meme-the-process.png" target="_blank" style="margin: 0 auto; display: block;">
    <img src="meme-the-process.png" alt="Meme: The Process" width="500"/>
  </a>
</p>
<br />  <br />
<p>The process of troubleshooting is not having a page of steps to follow and after 10 minutes you are done. If you are a system administrator, you know what troubleshooting means. It’s a complex <strong>forth and back, trial-and-error rocky road</strong>. You get better with time, that&rsquo;s what a good, seasoned, senior system administrator is: Someone who has seen a lot of problems and knows how to approach them.</p>
<p>Sure: AI has seen a lot of problems, too. <em>It&rsquo;s literally in their &ldquo;brains&rdquo; as they are trained on a lot of problems</em>. Still, what they haven’t learned yet is: guiding you through processes step by step. Or at least offering it! Instead: wasting 1,000 tokens on a 42-ish-step solution.</p>
<p>You may think it’s part of the business model: Why should the bot efficiently guide you through a process, if it can provide you with a 42-ish-step solution, which won’t work and then: Your context window is out of tokens. <strong>Purchase the pro plan or wait 6 hours to get this thing done.</strong></p>
<blockquote>
<p>I asked ChatGPT to look over my article, do a fact check. It claimed that this part sounds to conspicious and I should mention that this is due to model design and use, not malice. So, <strong>disclaimer</strong>: My goal is not to imply a business model behind this phenomenon. I&rsquo;m just kidding, okay?</p></blockquote>
<p align="center">
  <a href="meme-ai-solving-strategy.png" target="_blank" style="margin: 0 auto; display: block;">
    <img src="meme-ai-solving-strategy.png" alt="Meme: AI solving strategy" width="500"/>
  </a>
</p>
<br />  <br />
<p>Wich finally leads me to more than ranting and complaining with this word of advice: End every prompt like this. It will save you a lot of time and tokens:</p>
<p><strong>Guide me through the process step by step, don’t answer all at once, wait for my confirmation and feedback before you continue.</strong></p>
<p>But what about coding, at all? There are so many platforms offering perfect low-code or even no-code solutions. People telling you they built whole businesses without writing a single line of code.</p>
<p>Don&rsquo;t believe it? You tried it yourself? Try.</p>
<p>I am not saying that AI/LLM are not capable of e.g. writing code. They are - totally, unironically!</p>
<p>But <strong>&ldquo;real apps&rdquo; are complex</strong>. They are not just an HTML one-pager with a nice parallax effect, some neat JavaScript interactions and CSS. There are backends, data models, APIs, authentication, security, data storage and so on.</p>
<p>These days I was writing this little app that ought to visualize biking trips on a map. It grew a little out of hand. Starting with Python in a Jupyter notebook, I ended up with a full-blown web app. And you know what? I did it almost the &ldquo;vibe coding&rdquo; way. See? I am also one of those guys with this impressive stories! I only spent time thinking about user experience and features.</p>
<p>And at some point I thought: &ldquo;Hey buddy, what did you actually do there under the hood?&rdquo;</p>
<p align="center">
  <a href="meme-what-have-i-done.png" target="_blank" style="margin: 0 auto; display: block;">
    <img src="meme-what-have-i-done.png" alt="Image of the app" width="500"/>
  </a>
</p>
<br />  <br />
<p>Yes. AI was able to build this complex app (FWIW: It&rsquo;s <strong>Claude 4</strong> that right now provides best results for coding - not being paid for that).</p>
<p>I am using <a href="https://gist.github.com/nickyreinert/bbce96ea043bc73cb011066e8a8df673">an extensive pre-prompt instructions file</a>, telling the agent to use a structure of separated files, speaking function names and so on. Still I was facing a huge code base after some hours of &ldquo;vibe coding&rdquo;. The main app file was over <strong>5,000 lines</strong> of code. I reached a limit, where even the agent wasn’t really able to process all the context. It was a mess. Ok, blame me. My instructions probably weren’t that precise. &ldquo;The problem sits in front of the screen&rdquo;, as they say.</p>
<p>Well, we still can use the agent to refactor, can&rsquo;t we?</p>
<p><strong>Yes, we can</strong>. I did it. And it didn’t really work out. It was creating stubs and redundant functions and endpoints.</p>
<p>The end of the story: I had to crawl through the code myself. Like back in the days.  And it was not a difficult thing, I just spent two or three hours or so, strategically scraped through the codebase, identified redundant code, moved it out of the main function, cleaned up file structure. Like back in the days. Sure, with the help of AI, but this time only as a sidekick.</p>
<p>And this is what I am saying: You still need to be a good developer to understand code architecture and how code works. AI will not be able to deliver a fully fledged market-ready app for you. Not now.</p>
<p>However, this is not only a rant or my two cents, it&rsquo;s also about &ldquo;things I learned&rdquo;, so let’s summarize:</p>
<h3 id="seven-rules-of-aingagement">Seven Rules of AIngagement</h3>
<ol>
<li>Always include something like <strong>“step by step”</strong> in your prompts if you are about troubleshooting or exploring (always means: &ldquo;if applicalble&rdquo;)</li>
<li>Use a <strong>pre-prompt instructions</strong> file to guide the LLM/Coding Agent!</li>
<li><strong>Split the work!</strong> Use one agent to get the pre-prompt instructions that you feed to another agent instance, let another agent build you the first starting prompt, and so on - I&rsquo;ve established a mixed toolset, <strong>Copilot</strong> on one hand, <strong>Gemini-CLI</strong> on the other and some browser-based agents on the third hand</li>
<li>I also learned that it is really helpful when <strong>the agent maintains a “protocol”</strong> that contains the initial task and then, in very short bullet points, the current status of the task – this way you can always ask the agent to continue with the last task without having to re-explain everything</li>
<li>And this may not bring me many fans: Also separate tasks and codebases, to keep the context window small. This is the rise of some kind of <strong>microservices-ish architecture</strong>, because “monolithic” apps can&rsquo;t be eaten by the agent.</li>
<li>Discipline when it comes to version management. Let the LLM fix a thing, then commit the changes. <strong>Fix. Commit. Fix. Commit.</strong> You catch my drift.</li>
<li>Add a <strong>&ldquo;Got it? Any Questions?&rdquo;</strong> at the end of your prompt! You would be surprised how this changes whether the agent starts right away (remember: <strong>Sycophancy</strong>!) or gets back to you with some surprisingly important questions!</li>
</ol>
<p align="center">
  <a href="seven-rules-of-aingagement.png" target="_blank" style="margin: 0 auto; display: block;">
    <img src="seven-rules-of-aingagement.png" alt="Seven Rules Of Aingagement" width="500"/>
  </a>
</p>
<center>fancy self-made executive summary: Seven Rules Of AIngagement</center>
<br />
<br />
<h2 id="what-about-non-coding">What about &ldquo;non coding&rdquo;?</h2>
<p>Yeah, ok, this is a sweeping blow. I also have a opinion here.</p>
<p>Do you remember, back in the days, when you were &ldquo;Googling&rdquo; for information? First people started looking for the whole term, like &ldquo;how to build a web app with AI&rdquo;. But the Google algorithm was improving and so did the prompts. People reduced their search terms to &ldquo;web app AI&rdquo;. You don&rsquo;t necessarily need filler words to understand the intention of a search. And not only filler words, also spelling or grammar.</p>
<p>Right now the same happens to AI, apparently. Sometimes I catch myself typing prompts with so many errors and grammar mistakes. But it&rsquo;s doing its job. I wonder if this leads to &ldquo;degradation&rdquo; or better &ldquo;optimization&rdquo; of our language. Have you heard of <a href="https://en.wikipedia.org/wiki/Gibberlink"><strong>Gibberlink</strong></a> or <a href="https://medium.com/@diegodotta/neuralese-the-most-spoken-language-youll-never-speak-a42522f68ff3"><strong>Neuralese</strong></a>? They are supposed to be &ldquo;languages&rdquo; or &ldquo;concepts&rdquo; that are used by AI to communicate with each other. Like <strong>more efficient versions</strong> of human languages, without all the noise and &ldquo;unnecessary&rdquo; words. As we are talking to AI more and more, what if, at some point, we adapt our language to the AI?</p>
<p>Second thing that will change is probably how we will use our &ldquo;computers&rdquo;. There are not many user interfaces right now. We have the <strong>GUI - the graphical user interface</strong>, it&rsquo;s the colorful windows and buttons you see on the screen. You can touch them or use your mouse cursor to select text. We have the <strong>TUI - text user interface</strong>, which is most common for CLI (command line interface) applications. You can type commands and see the output in text form. And we have the <strong>VUI - voice user interface</strong>, which is becoming more and more common with the rise of smart speakers and voice assistants. All of them have their strengths and weaknesses. Building a <strong>PowerPoint</strong> app from the command line is probably quite difficult (<em>side note: it&rsquo;s possible and it&rsquo;s fun to automate data analytics pipelines using Python libraries and create extensive PowerPoint slide sets!</em>). Grepping through multiple servers&rsquo; request logs using voice or a mouse? No one does it.</p>
<p><em>(Leaving out <a href="https://en.wikipedia.org/wiki/Brain%E2%80%93computer_interface">brain computer interfaces</a> here, because they are still in the research phase and not widely used yet.)</em></p>
<p>There are exceptions, though. Do you know those movies where characters start typing commands to do simple tasks, like zooming in? They have the most expensive and advanced technologies, but somehow forgot to add a &ldquo;Zoom&rdquo; button, so they have to program this rare feature in real time—without even having a shell open. Absolute geniuses!</p>
<p align="center">
    <a href="zoom-by-commands.png" target="_blank" style="margin: 0 auto; display: block;">
        <img src="zoom-by-commands.png" alt="I am zooming in by typing on the keyboard" width="500"/>
    </a>
</p>
<center>"Let me quickly zoom in" - *starts typing on they keyboard (Scene from "SEALS Team", Paramount, 2017, S01E16</center>
<br />
<br />
<p>Right now, we are using AI in two ways: Most common ways are TUI and VUI. And this is interesting. Because in most cases this breaks the flow of work. You have to write long prompts, edit them, add more details. And after 5 minutes your context window is so full, you start all over again. Then you have to copy results back, interpret them, translate them into &ldquo;graphical&rdquo; interactions. And so on. Doesn&rsquo;t really sound like the peak of possible efficiency, does it?</p>
<p><em>(Good thing: You are forced to think about what you want to achieve. Which should be a no-brainer (even pre-AI): <strong>Think before you act!</strong> With AI it&rsquo;s even more important.)</em></p>
<p>Well, here comes the <strong>MCP</strong> into play - the <strong>Model Context Protocol</strong>, which connects the agent to other systems, like - sticking with this example - PowerPoint. You prompt your task, the AI controls PowerPoint and builds stuff. But at the end, you still need to read, type or speak your commands.</p>
<p>What we are missing is a <strong>GUI</strong> for AI. And as long as we don&rsquo;t have brain computer interfaces, we will find a way around this. Microsoft is trying to achieve a similar thing with <a href="https://support.microsoft.com/de-de/windows/mit-recall-ihre-schritte-zur%C3%BCckverfolgen-aa03f8a0-a78b-4b3e-b0a1-2eb8ac48701c">their Recall feature</a>, which raised a lot of anger and concerns about data privacy - which is totally understandable. Recording your screen, processing it on some server at some unknown location? Seriously?</p>
<p>But this will be the future. Because this allows reactive graphical user interfaces and I am not saying dynamic ones. Thinking of a user interface that changes because of some previous actions - that doesn&rsquo;t sound very useful, right? Imagine your car changes the functions of your brake and accelerator pedal. It&rsquo;s more an interface that &ldquo;follows&rdquo; the user, not makes the user follow the interface. Form follows function.</p>
<p>Sounds bold, I know. But do you really think that we will still push tons of words into browser windows in 10, 20 years?</p>
<p align="center">
  <a href="meme-ai-outsourcing.png" target="_blank" style="margin: 0 auto; display: block;">
    <img src="meme-ai-outsourcing.png" alt="Meme: AI outsourcing" width="500"/>
  </a>
</p>
<center>Hopefully my boss doesn't read this</center>
<br />
<br />

        
        
        <div class="tags">
          <p><strong>Tags:</strong> KI, LLM, Softwareentwicklung, Workflow, Zukunft</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/pile-of-unfinished-side-projects.png" type="image/jpeg">
        <media:title>My 2,718281828459045235 Cents - State Of AI: Year 3 of the hype. Things I learned. - Title Image</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>essay</dc:type>
      
      
    </item><item>
      <title>How to develop in 2025: Improve your Workflow with VS Code, GitHub &amp; Copilot </title>
      <link>https://nickyreinert.de/en/blog/2025/03/19/how-to-develop-in-2025-improve-your-workflow-with-vs-code-github-copilot/</link>
      <pubDate>Wed, 19 Mar 2025 12:34:56 +0200</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/en/blog/2025/03/19/how-to-develop-in-2025-improve-your-workflow-with-vs-code-github-copilot/</guid>
      <description>VS Code Workspace Settings Shortcuts First of all, I strongly suggest adding some custom shortcuts because the default ones are a bit unintuitive. For example, …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Ein umfassender Leitfaden zur Optimierung des Entwickler-Workflows im Jahr 2025. Der Artikel behandelt die effektive Nutzung von VS Code (benutzerdefinierte Shortcuts, Dev-Container), Git (Branching-Strategien) und KI-Assistenten wie GitHub Copilot. Es wird eine strukturierte Herangehensweise an die Nutzung von Large Language Models (LLMs) für die Softwareentwicklung vorgestellt.</p>
          
          
          <p><strong>Hauptthemen:</strong> Softwareentwicklung, VS Code, Git, GitHub, KI-Assistenz, DevOps, Workflow-Optimierung, Large Language Models</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <h2 id="vs-code-workspace-settings">VS Code Workspace Settings</h2>
<h3 id="shortcuts">Shortcuts</h3>
<p>First of all, I strongly suggest adding some custom shortcuts because the default ones are a bit unintuitive. For example, <code>CTRL + SHIFT + '</code> gets you to the terminal, while <code> SHIFT + FN + F6</code> brings you back to the editor, and<code>SHIFT + B</code> opens the sidebar. What a mess! A more consistent setup can definitely improve your workflow.</p>
<p>To customize your shortcuts, press <code>CMD + K</code> followed by <code>CMD + S</code> or look up &ldquo;Keybindings&rdquo; in the command palette (<code>SHIFT + CMD + P</code>). There&rsquo;s a small icon on the right to open the actual JSON file, which makes configuration much easier. What about  jumpin between the sidebar, editor, and terminal using the arrow keys while holding <code>CTRL + SHIFT</code>?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">        <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;ctrl+shift+down&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">        <span class="nt">&#34;command&#34;</span><span class="p">:</span> <span class="s2">&#34;workbench.action.terminal.focus&#34;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;ctrl+shift+up&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        <span class="nt">&#34;command&#34;</span><span class="p">:</span> <span class="s2">&#34;workbench.action.focusActiveEditorGroup&#34;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;ctrl+shift+left&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">        <span class="nt">&#34;command&#34;</span><span class="p">:</span> <span class="s2">&#34;workbench.action.focusActivityBar&#34;</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>Add more shortcuts to make your mouse-less life easier. But thats not all, I also suggest to use a tool like <a href="https://espanso.org/">Espanso</a>! It&rsquo;s a very powerfull <em>text expander</em> with two main interesting features:</p>
<ul>
<li>if you start typing certin chars, it will automaticall expand them to something you configured</li>
<li>it also provides a quick search feature that you can trigger with <code>OPTION + SPACE</code></li>
</ul>
<p>So here&rsquo;s my strategy, let&rsquo;s take some Python commands for example. I am not using unique trigger keywords, but the same one to define particular categories (<a href="https://gist.github.com/nickyreinert/91e67a7d054878338d1f1dc9fc592ae5">see a full example at this Gist</a>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="ln">1</span><span class="cl"><span class="nt">matches</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="w">  </span>- <span class="nt">trigger</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;#p1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="w">    </span><span class="nt">replace</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;source .venv/bin/activate&#34;</span><span class="w">
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="w">  </span>- <span class="nt">trigger</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;#p&#34;</span><span class="w">
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="w">    </span><span class="nt">replace</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;python3 -m venv ./.venv&#34;</span><span class="w">
</span></span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="w">  </span>- <span class="nt">trigger</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;#p&#34;</span><span class="w">
</span></span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="w">    </span><span class="nt">replace</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;pip3 install -r requirements.txt&#34;</span><span class="w">
</span></span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="w">  </span>- <span class="nt">trigger</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;#p&#34;</span><span class="w">
</span></span></span><span class="line"><span class="ln">9</span><span class="cl"><span class="w">    </span><span class="nt">replace</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;pip3 freeze &gt; requirements.tx&#34;</span><span class="w">
</span></span></span></code></pre></div><p>When I open the quick search bar, I type <code>#p</code> to get all Python commands. Ofcourse you could also add unique trigger keywords, I prefer it like that because I don&rsquo;t remember all those keywords anywawys. Now I can just show quickly browse through commands for a given category, like JavaScript, Python, C# - you name it!</p>
<h3 id="containers">Containers</h3>
<blockquote>
<p>Warning: Requires Docker!</p></blockquote>
<p>Next, let&rsquo;s talk about containers! I strongly recommend using containers for your projects. Not all of them, of course, sometimes a virtual environment is totally sufficient. But containers! Oh boy! They are quick, easy, and help keep your system clean. VS Code allows you to set up dev containers—a closed ecosystem where you can configure your development environment. This is especially useful when switching between different languages, frameworks, or systems.</p>
<p>For example, if you want to test Ruby without installing all the dependencies on your system, create a <code>.devcontainer</code> folder within your workspace and place two files in it: <code>devcontainer.json</code> and <code>Dockerfile</code>.</p>
<h4 id="example-setup-for-ruby">Example Setup for Ruby:</h4>
<h5 id="dockerfile"><code>Dockerfile</code></h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Dockerfile" data-lang="Dockerfile"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="k">FROM</span><span class="s"> ruby:3.2</span><span class="err">
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="err"></span><span class="k">ENV</span> <span class="nv">LANG</span><span class="o">=</span>C.UTF-8<span class="err">
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="err"></span><span class="k">ENV</span> <span class="nv">DEBIAN_FRONTEND</span><span class="o">=</span>noninteractive
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="k">RUN</span> apt-get update <span class="o">&amp;&amp;</span> apt-get install -y build-essential git curl zlib1g-dev <span class="se">\
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="se"></span>    libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 nodejs <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="se"></span>    rm -rf /var/lib/apt/lists/*<span class="err">
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="err"></span><span class="k">ARG</span> <span class="nv">USERNAME</span><span class="o">=</span>vscode
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="k">ARG</span> <span class="nv">USER_UID</span><span class="o">=</span><span class="m">1000</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="k">ARG</span> <span class="nv">USER_GID</span><span class="o">=</span><span class="nv">$USER_UID</span><span class="err">
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="err"></span><span class="k">RUN</span> groupadd --gid <span class="nv">$USER_GID</span> <span class="nv">$USERNAME</span><span class="err">
</span></span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="err"></span><span class="k">RUN</span> useradd --uid <span class="nv">$USER_UID</span> --gid <span class="nv">$USER_GID</span> -m <span class="nv">$USERNAME</span><span class="err">
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="err"></span><span class="k">USER</span><span class="s"> $USERNAME</span><span class="err">
</span></span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /workspace</span><span class="err">
</span></span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="err"></span><span class="k">RUN</span> gem install bundler<span class="err">
</span></span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="err"></span><span class="k">EXPOSE</span><span class="s"> 3000</span><span class="err">
</span></span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="err"></span><span class="k">CMD</span> <span class="p">[</span><span class="s2">&#34;irb&#34;</span><span class="p">]</span><span class="err">
</span></span></span></code></pre></div><h5 id="devcontainerjson"><code>devcontainer.json</code></h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Ruby Development&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="nt">&#34;build&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">        <span class="nt">&#34;dockerfile&#34;</span><span class="p">:</span> <span class="s2">&#34;Dockerfile&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">        <span class="nt">&#34;args&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">            <span class="nt">&#34;USER_GID&#34;</span><span class="p">:</span> <span class="s2">&#34;1000&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">            <span class="nt">&#34;USER_UID&#34;</span><span class="p">:</span> <span class="s2">&#34;1000&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">            <span class="nt">&#34;USERNAME&#34;</span><span class="p">:</span> <span class="s2">&#34;vscode&#34;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="nt">&#34;settings&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">        <span class="nt">&#34;terminal.integrated.defaultProfile.linux&#34;</span><span class="p">:</span> <span class="s2">&#34;bash&#34;</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">    <span class="nt">&#34;extensions&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">        <span class="s2">&#34;rebornix.ruby&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">        <span class="s2">&#34;castwide.solargraph&#34;</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">    <span class="nt">&#34;postCreateCommand&#34;</span><span class="p">:</span> <span class="s2">&#34;bundle install&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">    <span class="nt">&#34;remoteUser&#34;</span><span class="p">:</span> <span class="s2">&#34;vscode&#34;</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Save everything, and VS Code will prompt you to create and open the dev container—no need to manage Docker manually! If you don&rsquo;t see the message, open the &ldquo;Remote&rdquo; container manually by clicking the blue icon in the bottom left corner or using the shortcut <code>OPT + COMMAND + O</code>.</p>
<hr>
<h3 id="git">Git</h3>
<p>You don&rsquo;t necessarily need a GitHub account to store repositories remotely, but I encourage initializing a repository locally. This helps you track changes and maintain your work efficiently.</p>
<h4 id="configuring-multiple-github-accounts">Configuring Multiple GitHub Accounts</h4>
<p>If you use different GitHub accounts (e.g., for personal and professional projects), modify your Git config file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">[user]</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">    <span class="na">name</span> <span class="o">=</span> <span class="s">John Doe
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="s">    email = john.doe@example.com</span>
</span></span></code></pre></div><h4 id="branching-strategy">Branching Strategy</h4>
<p>If you don&rsquo;t use Git daily, consider a simple branch strategy:</p>
<ol>
<li>Use the <code>main</code> branch for stable code.</li>
<li>Use a <code>debug</code> branch for hotfixes or minor fixes.</li>
<li>Use a <code>dev</code> branch for new features.</li>
</ol>
<h5 id="example-workflow">Example Workflow:</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="ln">1</span><span class="cl">git checkout dev
</span></span><span class="line"><span class="ln">2</span><span class="cl">git pull origin main
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"># Make changes</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">git commit -m <span class="s2">&#34;Your commit message&#34;</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">git push origin dev
</span></span></code></pre></div><p>Once you&rsquo;re ready to merge changes:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="ln">1</span><span class="cl">git checkout main
</span></span><span class="line"><span class="ln">2</span><span class="cl">git merge dev
</span></span><span class="line"><span class="ln">3</span><span class="cl">git push origin main
</span></span></code></pre></div><p>This keeps your codebase organized and reduces conflicts. If needed, Copilot can assist with Git commands!</p>
<hr>
<h3 id="copilot">Copilot</h3>
<p>Copilot enhances your workflow with:</p>
<ul>
<li>Inline code completion</li>
<li>Inline chat (<code>CMD + I</code>)</li>
<li>An editor that handles multiple files (<code>CMD + SHIFT + I</code>)</li>
<li>General assistance via chat</li>
<li>Commit message suggestions</li>
</ul>
<h4 id="improving-copilots-effectiveness">Improving Copilot&rsquo;s Effectiveness</h4>
<p>To help Copilot assist you better:</p>
<ul>
<li>Use meaningful function names.</li>
<li>Add inline comments.</li>
<li>Write clean, structured code.</li>
</ul>
<h4 id="customizing-copilot">Customizing Copilot</h4>
<p>You can fine-tune Copilot&rsquo;s behavior by modifying your workspace settings. Create a <code>settings.json</code> file inside the <code>.vscode</code> folder and add custom configurations.</p>
<h5 id="example-settings">Example Settings:</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="ln">1</span><span class="cl"><span class="s2">&#34;github.copilot.chat.localeOverride&#34;</span><span class="err">:</span> <span class="s2">&#34;fr&#34;</span><span class="err">,</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="s2">&#34;github.copilot.chat.commitMessageGeneration.instructions&#34;</span><span class="err">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">    <span class="p">{</span><span class="nt">&#34;instruction&#34;</span><span class="p">:</span> <span class="s2">&#34;Start every commit message with FOOBAR&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="p">]</span><span class="err">,</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="s2">&#34;github.copilot.chat.codeGeneration.useInstructionFiles&#34;</span><span class="err">:</span> <span class="kc">true</span>
</span></span></code></pre></div><p>Now, create a <code>./.github/copilot-instructions.md</code> file with your custom instructions. Example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-md" data-lang="md"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">-</span> My project goal is a simple and performant API interface.
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="k">-</span> Code must follow modern coding standards.
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="k">-</span> Functions should have a maximum of 20 lines.
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="k">-</span> No redundant functions.
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="k">-</span> Each function must have a corresponding test function.
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="k">-</span> Include example data for testing.
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="k">-</span> Use multiple files, grouping functions logically.
</span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="k">-</span> Prefer class-based structures over standalone functions.
</span></span></code></pre></div><h4 id="finding-more-rule-sets">Finding More Rule Sets</h4>
<p>For additional guidance, check these resources:</p>
<ul>
<li><a href="https://github.com/PatrickJS/awesome-cursorrules/tree/main/rules">Awesome Cursor Rules</a></li>
<li><a href="https://github.com/Mawla/cursor_rules">Mawla Cursor Rules</a></li>
<li><a href="https://github.com/instructa/ai-prompts">Instructa AI Prompts</a></li>
</ul>
<hr>
<h3 id="claude-chatgpt-gemini-and-probably-even-v0">Claude, ChatGPT, Gemini, and Probably Even v0!</h3>
<p>It doesn’t end with <strong>Copilot</strong>. And again: <strong>You can achieve a lot with free plans!</strong> But if you really want to improve your process and build big things, consider using LLMs.</p>
<p>Before diving in, heads up: <strong>Don’t make the same mistake</strong> <a href="https://x.com/leojr94_/status/1901560276488511759">as this poor guy</a>:</p>
<blockquote>
<p><em>Guys, I&rsquo;m under attack ever since I started sharing how I built my SaaS using Cursor. Random things are happening—maxed-out usage on API keys, people bypassing the subscription, creating random stuff in the database.</em></p></blockquote>
<p>Don’t expect an LLM to generate a perfect app if you just throw some poorly written sentences at it. <strong>Garbage in, garbage out.</strong>  So, what should you do instead? <strong>Chain it!</strong>, baby.</p>
<ul>
<li><strong>Start simple.</strong></li>
<li><strong>Iterate.</strong></li>
<li><strong>Split your project into independent parts.</strong></li>
</ul>
<p>Think about developing an Android App for example. How would a human developer approach the task, what information would be required?</p>
<ol>
<li>The overall concept: What is the app about? What language is it written in?  Let&rsquo;s call it the &ldquo;soul&rdquo;</li>
<li>The UI/UX concept: How should it look and feel?  The &ldquo;body&rdquo;!</li>
<li>And, to stick to the image: The &ldquo;viscera&rdquo;:  The architecture, functions, features and internal structure.</li>
</ol>
<p>Now, ask ChatGPT to consider this <strong>&ldquo;trinity&rdquo;</strong> and generate <strong>three structured pre-prompt instructions</strong> for you.</p>
<ol>
<li>In <strong>Copilot</strong>, use the <strong>soul</strong> prompt in your pre-prompt instructions, as mentioned above.</li>
<li>Then, feed the <strong>body</strong> and <strong>viscera</strong> prompts into Copilot, Claude, or v0 to refine the results further.</li>
</ol>
<p>Of course, this isn’t a cut into stone,but it should give you a <strong>structured approach</strong> to leveraging AI effectively.</p>
<p>But do not forget this: AI Is a Tool, Not a Magic Wand. Don’t take AI-generated results for granted. The golden rule from the early internet days still applies:</p>
<blockquote>
<p><strong>&ldquo;A computer is only as smart as the person using it.&rdquo;</strong></p></blockquote>
<p>Always <strong>question and understand</strong> the output.  Don’t expect AI to <strong>perfectly execute any task instantly and without errors</strong>.  Because: The developer is still you.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> VSCode, Git, Copilot, Workflow, DevOps, KI</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/image.png" type="image/jpeg">
        <media:title>How to develop in 2025: Improve your Workflow with VS Code, GitHub &amp; Copilot - Title Image</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>guide</dc:type>
      
      
    </item>
  </channel>
</rss>