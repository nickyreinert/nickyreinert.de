<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projekte on Nicky Reinert</title>
    <link>https://nickyreinert.de/en/categories/projekte/</link>
    <description>Recent content in Projekte on Nicky Reinert</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 17 Oct 2024 12:34:56 +0100</lastBuildDate><atom:link href="https://nickyreinert.de/en/categories/projekte/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>sudoku</title>
      <link>https://nickyreinert.de/en/2024/2024-10-18-sudoku/</link>
      <pubDate>Thu, 17 Oct 2024 12:34:56 +0100</pubDate>
      
      <guid>https://nickyreinert.de/en/2024/2024-10-18-sudoku/</guid>
      
      <description>&lt;h3 id=&#34;how-to-build-a-brute-force-sudoku-solver&#34;&gt;How to build a brute force Sudoku solver&lt;/h3&gt;
&lt;p&gt;Follow my journey on how to build an algorithm that lets you create or solve Sudoku puzzles!&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>The Bitcoin Puzzle</title>
      <link>https://nickyreinert.de/en/blog/2024/10/01/the-bitcoin-puzzle/</link>
      <pubDate>Tue, 01 Oct 2024 12:34:56 +0100</pubDate>
      
      <guid>https://nickyreinert.de/en/blog/2024/10/01/the-bitcoin-puzzle/</guid>
      
      <description>&lt;p&gt;In this post, I’ll explain how I fell into a deep rabbit hole. I’ll cover how the puzzle works and how the algorithm can be optimized in Python using techniques like parallelization and pre-compiling with Cython. Finally, I’ll reveal how you can increase computation speed by nearly 100x by implementing Metal to fully harness the power of your Apple Silicon. Let’s go!&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>
