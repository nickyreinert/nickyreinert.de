<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" 
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Design auf Nicky Reinert</title>
    <link>http://localhost:1313/en/topics/design/</link>
    <description>Blog &amp; projects by Nicky Reinert (Institute for Digital Challenges): web development &amp; software development, SEO &amp; analytics, hosting &amp; DevOps, WordPress &amp; Hugo, tools &amp; projects, data protection &amp; digital culture — plus content on AI and autism &amp; society.</description>
    <generator>Hugo 0.148.2</generator>
    <language>en</language>
    <managingEditor></managingEditor>
    <webMaster></webMaster>
    <copyright></copyright>
    <lastBuildDate>Sat, 09 Aug 2025 12:34:56 +0000</lastBuildDate><atom:link href="http://localhost:1313/en/topics/design/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>wad - about chatbots, captchas, and Chromecast</title>
      <link>http://localhost:1313/en/blog/2025/08/09/wad-about-chatbots-captchas-and-chromecast/</link>
      <pubDate>Sat, 09 Aug 2025 12:34:56 +0000</pubDate>
      <author></author>
      <guid>http://localhost:1313/en/blog/2025/08/09/wad-about-chatbots-captchas-and-chromecast/</guid>
      <description>New month, new category – &ldquo;We are doomed&rdquo; (wad) is about &ldquo;smart and new technology&rdquo; that turns out to be not so smart. But new, at …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>New month, new category – &#39;We are doomed&#39; (wad) is about &#34;smart and new technology&#34; that turns out to be not so smart. But new, at least. Chatbots are going to replace search engines. Aren’t they.&#34;We are doomed&#34; (wad) is about &#34;smart and new technology&#34; that turns out to be not so smart. Bu...</p>
          
          
          <p><strong>Hauptthemen:</strong> Web, Mobile, Ai, Security, Design</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>New month, new category – &ldquo;We are doomed&rdquo; (wad) is about &ldquo;smart and new technology&rdquo; that turns out to be not so smart. But new, at least.</p>
<h2 id="chatbots-are-going-to-replace-search-engines-arent-they">Chatbots are going to replace search engines. Aren’t they?</h2>
<p>Well, no. I asked <strong>Gemini</strong> (Google&rsquo;s AI chatbot) how to update <strong>Stadia&rsquo;s</strong> firmware (Google&rsquo;s former gaming platform). Gemini suggested searching the internet for a proper solution:</p>
<p align="center">
  <a href="gemini-suggest-web-search.png" target="_blank" style="margin: 0 auto; display: block;">
    <img src="gemini-suggest-web-search.png" alt="Meme: AI outsourcing" width="400"/>
  </a>
</p>
<center>Learn how to help yourself!</center>
<br />
<br />
x
Not only that, but also notice how Google's own AI chatbot doesn’t even know that Google extended the firmware update tool on their website: https://stadia.google.com/controller/index_de.html
<p>Don’t they talk to each other?</p>
<h2 id="you-shall-not-pass">You shall not pass</h2>
<p>We all struggle with captchas from time to time. Sometimes they ignore our correct answers, and we have to solve dozens of captchas. Sometimes you get captchas like this. I’m probably not the first one to see this:</p>
<p align="center">
  <a href="bike-captcha.png" target="_blank" style="margin: 0 auto; display: block;">
    <img src="bike-captcha.png" alt="Meme: AI outsourcing" width="400"/>
  </a>
</p>
<center>Where’s the bike?</center>
<br />
<br />
<p>(<strong>Fahrrad</strong> is German for <strong>bicycle</strong>, but here it was probably shortened to &ldquo;bike,&rdquo; which can also mean any kind of motorcycle. In fact, this is more of a moped or <strong>scooter</strong>.)</p>
<h2 id="what-the-actual-fxxk">What the actual FxxK</h2>
<p>Yeah, and then we have this one. Story behind it: I have this <strong>Chromecast Ultra</strong> gathering dust for a couple of years now. Today I decided to give it a try. I connected it to my <strong>optical computer-to-human interface</strong> (the one firing a million protons directly through your eyeballs into your brain) and tried to register it. After the annoying fact that I have to install Google’s Home app to set up the Chromecast, I was referred to another app called &ldquo;Device Utility.&rdquo;</p>
<p>I have to install this tool to &ldquo;unlock&rdquo; my Chromecast. Some kind of protection? Seems like Google has activated a “kill switch” after a period of non-usage.</p>
<p>However, the problem is what you can see here: My <strong>Pixel 8 Pro</strong> – manufactured by Google – is not compatible with this app.</p>
<p align="center">
  <a href="app-store-device-utility.png" target="_blank" style="margin: 0 auto; display: block;">
    <img src="app-store-device-utility.png" alt="Meme: AI outsourcing" width="400"/>
  </a>
</p>
<center>You shall not pass.</center>
<br />
<br />
<h2 id="all-i-wanted-was-netflix-now-ive-ended-up-spinning-up-a-virtual-android-device-in-android-studio">All I wanted was Netflix. Now I’ve ended up spinning up a virtual Android device in Android Studio.</h2>
<h2 id="conclusion">Conclusion</h2>
<p align="center">
  <a href="table-flip-guy.jpg" target="_blank" style="margin: 0 auto; display: block;">
    <img src="table-flip-guy.jpg" alt="Meme: AI outsourcing" width="400"/>
  </a>
</p>
<br />
<br />

        
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>wad - about chatbots, captchas, and Chromecast - Guide</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 3 Minuten</dc:subject>
      
      
      
      <dc:type>guide</dc:type>
      
      
    </item><item>
      <title>Adobe Launch DTM Naming Conventions</title>
      <link>http://localhost:1313/en/blog/2025/04/01/adobe-launch-dtm-naming-conventions/</link>
      <pubDate>Tue, 01 Apr 2025 12:34:56 +0200</pubDate>
      <author></author>
      <guid>http://localhost:1313/en/blog/2025/04/01/adobe-launch-dtm-naming-conventions/</guid>
      <description>I&rsquo;ve worked with Adobe Tracking Suite (which is Adobe Launch and all it&rsquo;s sibblings) for quite a while and I saw many, some quite chaotic, tracking …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>I&#39;ve worked with Adobe Tracking Suite (which is Adobe Launch and all it&#39;s sibblings) for quite a while and I saw many, some quite chaotic, tracking implementations and tag managers.&#39;ve worked with Adobe Tracking Suite (which is Adobe Launch and all it&#39;s sibblings) for quite a while and I saw many...</p>
          
          
          <p><strong>Hauptthemen:</strong> Python, Web, Server, Ai, Automation, Analytics, Design</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>I&rsquo;ve worked with Adobe Tracking Suite (which is Adobe Launch and all it&rsquo;s sibblings) for quite a while and I saw many, some quite chaotic, tracking implementations and tag managers. At some point I felt the need to write down some basic rules to navigate those messy libraries. Hope that helps you, too.</p>
<h1 id="naming-convention">naming convention</h1>
<h2 id="global">Global</h2>
<p>Use a category and naming convention that allows you to track <strong>variables</strong>, <strong>metrics</strong> and <strong>dimension</strong> from the website over the tag manger to the backend of your analytics solution and the dashboard. Every category is also assigned a particular numeric range. This will improve your debugging and troubleshooting process.</p>
<p>The following basic categories should represent your default setup.</p>
<ul>
<li>Page related information (for a single page view, from 1 to 19)</li>
<li>Site related information (for the whole website, from 020 to 39)</li>
<li>User related information (describing the visitor, from 40 to 59)</li>
<li>Misc information (meta information that usually is not part of an analysis or cannot be assigned to the other categories, from 59 to</li>
</ul>
<h2 id="data-layer">Data Layer</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl">	<span class="nx">datalayer</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">		<span class="nx">page</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">			<span class="nx">category</span><span class="o">:</span> 
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">			<span class="nx">name</span><span class="o">:</span> 
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">			<span class="nx">id</span><span class="o">:</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">			<span class="nx">date</span><span class="o">:</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">			<span class="nx">language</span><span class="o">:</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">		<span class="nx">site</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">			<span class="nx">provider</span><span class="o">:</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">			<span class="nx">project</span><span class="o">:</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">			<span class="nx">domain</span><span class="o">:</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">		<span class="nx">user</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">			<span class="nx">status</span><span class="o">:</span> <span class="p">[</span><span class="nx">anonmyous</span><span class="p">,</span> <span class="nx">logged</span><span class="o">-</span><span class="k">in</span><span class="p">],</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">			<span class="nx">behavior</span><span class="o">:</span> <span class="p">[</span><span class="nx">returned</span><span class="p">,</span> <span class="k">new</span><span class="p">],</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">			<span class="nx">language</span><span class="o">:</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">		<span class="nx">misc</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">			<span class="nx">timestamp</span><span class="o">:</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">			<span class="nx">debug</span><span class="o">:</span> 
</span></span><span class="line"><span class="ln">22</span><span class="cl">			<span class="nx">utm</span><span class="o">:</span> 
</span></span><span class="line"><span class="ln">23</span><span class="cl">			<span class="nx">interaction_details</span><span class="o">:</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">	<span class="p">}</span>
</span></span></code></pre></div><blockquote>
<p>&ldquo;I&rsquo;ve implemented a page.category attribute, which I find invaluable. I&rsquo;m surprised so many implementations omit it. It allows for quicker traffic analysis at a higher level than individual pages. Categories help maintain order as pages inevitably become disorganized over time.&rdquo;</p></blockquote>
<h2 id="data-elements">Data Elements</h2>
<p>Your Data Element name should consist the numeric ID referring to the ID of your (Adobe) Analytics-implementation followed by a separator (like the pipe symbol |) and the address within the Data Layer object. Left pad the ID to a length of three to not mix up the &ldquo;order by name&rdquo; feature. The second part is the exact address of the element within the data layer. If this element does not correspond to the Data Layer, use a short description.</p>
<ul>
<li><code>000 | datalayer.page.name</code></li>
<li><code>010 | datalayer.misc.utm</code></li>
</ul>
<h2 id="dimensions">Dimensions</h2>
<p><strong>eVars</strong>, <strong>props</strong> and <strong>events</strong> are identified by a short description build from the category and the name of the information, followed by the name and the kind of variable (<strong>t</strong> for <strong>traffic variables</strong> aka <strong>props</strong>, <strong>c</strong> vor <strong>conversion variables</strong> aka <strong>eVars</strong> and <strong>e</strong> for <strong>event</strong>):</p>
<ul>
<li><code>Page Name (t010)</code></li>
<li><code>User Status (c020)</code></li>
</ul>
<h2 id="events">Events</h2>
<h3 id="naming-rules">Naming Rules</h3>
<p>You wil need three categories of rules, based on the action the perform</p>
<ul>
<li>Page View rule (mostly just one, will trigger a page view)</li>
<li>Click rules (will trigger click events)</li>
<li>Misc rule (will not trigger any call, but prepare tracking or add event listeners)</li>
</ul>
<p>Besides that, you will have three main attributes for page view and click rules that should be available in the component name itself:</p>
<ul>
<li>the according event id (custom success event, even page views can have an event ID)</li>
<li>a brief description</li>
<li>how a rule will be triggered (Page Top, Document Ready, Click, Direct Call, &hellip;)</li>
</ul>
<p>Name your rules using those three information (I prefer the pipe symbol as a separator)</p>
<p><code>[TYPE]|[TRIGGER]|[EVENT ID]|[BRIEF DESCRIPTION]</code></p>
<p>If your rule covers more than one event, post them all as a comma separated list (50,51,52). If there are too many rules, you may overthink your strategy.</p>
<p><strong>For example:</strong></p>
<ul>
<li><code>PV | DocReady | 10 | All Pages</code></li>
<li><code>PV | DocReady | 20 | Search Pages</code></li>
<li><code>CL | Trigger | 50,51,52 | Click</code></li>
<li><code>CL | Click | 60 | Bookmark Page</code></li>
<li><code>MISC | Helper Functions</code></li>
</ul>
<h4 id="reason">Reason</h4>
<p>In the rules overview this helps you to get a good first impression of all existing rules and it allows you to quickly filter the list for wanted rule types. Also, if you lookup a particular event, you quickly see the particular component that somehow works for this event.</p>
<h3 id="naming-components">Naming Components</h3>
<p>A component can be a trigger/event, condition or action. When you create a component, Adobe suggests a default name. Never use this name. The name should start with the exact sequence you defined for the rule name.</p>
<p><strong>For example:</strong></p>
<p>You have a rule to trigger page views:</p>
<p><code>PV | DocReady | 10 | All Pages</code></p>
<p>This is how you name the components of the rule</p>
<ul>
<li>trigger/event: <code>PV | DocReady | 10 | All Pages |  page top</code></li>
<li>condition: <code>PV | DocReady | 10 | All Pages |  user is logged in</code></li>
<li>action: <code>PV | DocReady | 10 | All Pages |  set variables</code></li>
<li>action: <code>PV | DocReady | 10 | All Pages |  send beacon</code></li>
<li>action: <code>PV | DocReady | 10 | All Pages |  clear variables</code></li>
</ul>
<h4 id="reason-1">Reason</h4>
<p>If you look up a particular event ID, you quickly see all according components. If you look up particular variables that belong to different events, you know quickly identify, where this variable is being used, without clicking into the component itself.</p>
<h3 id="error-handling">Error Handling</h3>
<p>If you have custom code, you should always implement try/catch error handling that also refers to the parent rule:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">let rule_name = &#39;`PV | DocReady | 10 | All Pages&#39;;
</span></span><span class="line"><span class="ln">2</span><span class="cl">try {
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl">
</span></span><span class="line"><span class="ln">5</span><span class="cl">} catch (e) {
</span></span><span class="line"><span class="ln">6</span><span class="cl">
</span></span><span class="line"><span class="ln">7</span><span class="cl">	_satellite.logger.error(rule_name + &#39; | &#39; + e);
</span></span><span class="line"><span class="ln">8</span><span class="cl">
</span></span><span class="line"><span class="ln">9</span><span class="cl">}
</span></span></code></pre></div><p>If your code grows and get more complex, you should and can, add multiple try/catch lines into your code. In this case you should add a brief description of the current area to the error message:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln"> 1</span><span class="cl">let rule_name = &#39;`PV | DocReady | 10 | All Pages&#39;;
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">try {
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">} catch (e) {
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">	_satellite.logger.error(rule_name + &#39; | init something | &#39; + e);
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">}
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">try {
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl">
</span></span><span class="line"><span class="ln">15</span><span class="cl">} catch (e) {
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl">	_satellite.logger.error(rule_name + &#39; | calculate another metric | &#39; + e);
</span></span><span class="line"><span class="ln">18</span><span class="cl">
</span></span><span class="line"><span class="ln">19</span><span class="cl">}
</span></span></code></pre></div><h4 id="reason-2">Reason</h4>
<p>Now, if you face errors in the debug console, it&rsquo;s easier to find the source, even if you handle long code blocks. You don&rsquo;t need to click through the stack trace.</p>
<h3 id="logging-and-documentation">Logging and Documentation</h3>
<p>The same goes for logging. Always logg what you are doing. I don&rsquo;t need to mention, how important inline documentation is. ;)
Logging works the same as error handling:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">_satellite.logger.info(rule_name + &#39; | calculate another metric&#39;);
</span></span></code></pre></div><h4 id="reason-3">Reason</h4>
<p>Now, if you filter the browser console, it&rsquo;s easier to get rid of the noise and debug a problem.</p>
<h3 id="inactive-rules-or-data-elements">Inactive Rules or Data Elements</h3>
<p>You will and cannot avoid to have inactive/disabled rules. You should keep that amount low, because they pollute your library. If you have inactive rules, add a prefix &ldquo;INACTIVE&rdquo; to the rules name and, preferably also to it&rsquo;s components.</p>
<h4 id="reason-4">Reason</h4>
<p>If you look up code parts, data elements or anything, the search will return you rule and component names. From those component names you will not see, if a result belongs to an inactive rule. The prefix INACTIVE will help you to quickly identify those results.</p>

        
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Adobe Launch DTM Naming Conventions - Project</media:title>
      </media:content>
      
      
      
      
      
      
      
    </item><item>
      <title>Advent of Code - Day 7 - Missing Operators (C&#43;&#43;)</title>
      <link>http://localhost:1313/en/blog/2024/12/07/advent-of-code-day-7-missing-operators-c-/</link>
      <pubDate>Sat, 07 Dec 2024 12:34:56 +0200</pubDate>
      <author></author>
      <guid>http://localhost:1313/en/blog/2024/12/07/advent-of-code-day-7-missing-operators-c-/</guid>
      <description>(task | solution)
This is the kind of task I really enjoy: finding algorithms for simple mathematical challenges! Let&rsquo;s go—this time in&hellip; C++! …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>([task](https://adventofcode.com/2024/day/7/) | [solution](https://github.com/nickyreinert/aoc2024/tree/main/solutions/day7%20-%20c%2B%2B))&#39; reading_time: 3 content_type: &#39;guide</p>
          
          
          <p><strong>Hauptthemen:</strong> Web, Docker, Git, Ai, Automation, Security, Design</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>(<a href="https://adventofcode.com/2024/day/7/">task</a> | <a href="https://github.com/nickyreinert/aoc2024/tree/main/solutions/day7%20-%20c%2B%2B">solution</a>)</p>
<p>This is the kind of task I really enjoy: finding algorithms for simple mathematical challenges! Let&rsquo;s go—this time in&hellip; C++! (Phew!)</p>
<p>You&rsquo;ll find my <a href="https://github.com/nickyreinert/aoc2024/tree/main/solutions/day7%20-%20c%2B%2B/.devcontainer">.devcontainer and Dockerfile</a> on GitHub. Once again, I don&rsquo;t want to <em>bloat</em> my system with additional compiler setups. It turns out, this is working like a charm.</p>
<h3 id="solution-to-the-first-part">Solution to the First Part</h3>
<p>Well, the idea is quite easy: We got a list of <code>operands</code> and need to find the correct combination of <code>+</code> and <code>*</code> to get a target result. What we basically need to do is: Loop through all given equations, get all possible permutations of <code>+</code> and <code>*</code> for <code>n</code> given operands, and then do the math.</p>
<p>The first tricky thing here is: They are providing a lot of huge numbers. So using 32-bit integers isn&rsquo;t sufficient. You not only need 64-bit integers, but also <strong>unsigned</strong> to work with numbers like <code>175.033.602.122.656</code>.</p>
<p>But they also hid a little pitfall in the list of possible equations: There is <strong>one</strong> (exactly <strong>one</strong>!) duplicate entry. Which makes it hard to find. Would it be ten, 42, or 100 duplicate entries, you would somehow stumble over it. But now it took me a while, and I was close to throwing this task away. I started debugging and I wondered why I am only processing 849 equations instead of 850. At first glance, it looks like one of those classic &ldquo;indexing starts at zero&rdquo; bugs. But then I did, what you usually do when filling dictionaries: You check if the entry you want to add already exists. And it does.</p>
<p>And while this wouldn&rsquo;t lead to a valid equation&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">1095: 8 5 9 3 231
</span></span></code></pre></div><p>This line certainly does</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">1095: 8 1 2 7 95 8 2 7 2 2 99
</span></span></code></pre></div><p>And so I found the missing value for the final result&hellip;</p>
<h3 id="solution-to-the-second-part">Solution to the Second Part</h3>
<p>Well, the second part took me a while because I was somehow trying to build this concatenation part into the current algorithm. We now have three operators, <code>*</code>, <code>+</code>, and <code>||</code> — but the last one should connect two integers.</p>
<p>Eventually, I had my <em>heureka</em> moment: Concatenation could be implemented as a mathematical operation, too.</p>
<p>If the left number is <code>123</code> followed by <code>45</code>, we need to multiply <code>123</code> with <code>10^2</code> and then just add <code>45</code>. Easy math.</p>
<p><strong>Side note</strong>: I was cheating a little. I now know that <code>1095</code> is a duplicated entry, and I know it would lead to a valid result, so I am adding it hard-coded to get the final result.</p>
<h2 id="whats-up-c">Whats up, C++?</h2>
<p><strong>Rating: 6/12 – painful</strong></p>
<p>Well, <code>C++</code> is undoubtedly a powerful language, but for a reason it&rsquo;s not beating all those scripting languages out there. Simple things are complicated because you have to implement them on your own. 5 out of 12 seems to be unfair for such a grown-up programming language, but this is simply my point of view. For me, right now, there&rsquo;s no reason to use C++. Which absolutely does not mean that this language is not important! Nevertheless, using it felt like an adult pro developer. ;)</p>
        
        
      ]]></content:encoded>
      
      
      
      <category>development</category>
      
      <category>aoc2024</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Advent of Code - Day 7 - Missing Operators (C&#43;&#43;) - Guide</media:title>
      </media:content>
      
      
      
      
      
      
      
    </item><item>
      <title>Advent of Code - Day 5 - Printer Updates (Bash)</title>
      <link>http://localhost:1313/en/blog/2024/12/05/advent-of-code-day-5-printer-updates-bash/</link>
      <pubDate>Thu, 05 Dec 2024 12:34:56 +0200</pubDate>
      <author></author>
      <guid>http://localhost:1313/en/blog/2024/12/05/advent-of-code-day-5-printer-updates-bash/</guid>
      <description>(task | solution)
It&rsquo;s the fifth day of our outrageous adventure, and we are dealing with printer updates. To solve this riddle, we are getting back to …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>([task](https://adventofcode.com/2024/day/5/) | [solution](https://github.com/nickyreinert/aoc2024/blob/main/solutions/day5%20-%20bash/solve.sh))&#39; reading_time: 2 content_type: &#39;guide</p>
          
          
          <p><strong>Hauptthemen:</strong> Python, Web, Git, Ai, Automation, Security, Design</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>(<a href="https://adventofcode.com/2024/day/5/">task</a> | <a href="https://github.com/nickyreinert/aoc2024/blob/main/solutions/day5%20-%20bash/solve.sh">solution</a>)</p>
<p>It&rsquo;s the fifth day of our outrageous adventure, and we are dealing with printer updates. To solve this riddle, we are getting back to the roots and our good ol&rsquo; friend <code>Bash</code>!</p>
<p>The good news here is that I don&rsquo;t need to set up any particular environment because, thankfully, <code>Bash</code> is available on most systems out of the box.</p>
<h3 id="solution-to-the-first-part">Solution to the First Part</h3>
<p>The solution is quite straightforward: We need to read the rules and the updates into an array, loop through all updates, and check if they somehow break the rules. That&rsquo;s nothing too complicated. The only thing that I am probably doing <em>unconventionally</em> is how I check.</p>
<p>I am using a regular expression that is the opposite of the rule. If it matches, I know the update is invalid:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln">1</span><span class="cl"><span class="mf">61.</span><span class="o">*</span><span class="err">?</span><span class="p">(,</span><span class="mi">29</span><span class="p">)(,</span><span class="o">|</span><span class="err">$</span><span class="p">)</span>
</span></span></code></pre></div><p>In this example, <code>29</code> is the actual rule name, and <code>61</code> should come after <code>29</code>. With <code>.*?</code>, I am <em>ungreedy</em> checking for any characters in between, and the closing group just makes sure that after <code>29</code>, there&rsquo;s either another number or the end of the update.</p>
<p>Simple thing.</p>
<h3 id="solution-to-the-second-part">Solution to the Second Part</h3>
<p>The second part looks way easier. They just want us to switch the position of the pages that we identified as erroneous.</p>
<p>Basically, it&rsquo;s just something like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">updates<span class="o">[</span>page_index<span class="o">]=</span><span class="nv">$subsequent_page</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">updates<span class="o">[</span>subsequent_page_index<span class="o">]=</span><span class="nv">$page</span>
</span></span></code></pre></div><p>But&hellip; yeah, that&rsquo;s the first bump in my journey. My code isn&rsquo;t resulting in the correct answer, and it seems like I am missing a detail. To avoid wasting any more time, I&rsquo;ll proceed to the next day&hellip; sorry folks :(</p>
<h2 id="whats-up-bash">Whats up, Bash?</h2>
<p><strong>Rating: 8/12 – weird operators and syntax</strong></p>
<p>The boss of all scripting languages: <code>Bash</code>. I still don&rsquo;t understand most of the syntax rules, but thanks to AI, it&rsquo;s not too hard to get things done in <code>Bash</code>. When working as a sysadmin, I loved automating processes and even building small user interfaces to make life on the command line easier. However, I guess there are better ways for that.</p>
<p>See you next day!</p>
        
        
      ]]></content:encoded>
      
      
      
      <category>development</category>
      
      <category>aoc2024</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Advent of Code - Day 5 - Printer Updates (Bash) - Guide</media:title>
      </media:content>
      
      
      
      
      
      
      
    </item>
  </channel>
</rss>