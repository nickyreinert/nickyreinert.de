<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" 
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Blockchain auf Nicky Reinert</title>
    <link>https://nickyreinert.de/en/topics/blockchain/</link>
    <description>Blog &amp; projects by Nicky Reinert (Institute for Digital Challenges): web development &amp; software development, SEO &amp; analytics, hosting &amp; DevOps, WordPress &amp; Hugo, tools &amp; projects, data protection &amp; digital culture — plus content on AI and autism &amp; society.</description>
    <generator>Hugo 0.148.2</generator>
    <language>en</language>
    <managingEditor></managingEditor>
    <webMaster></webMaster>
    <copyright></copyright>
    <lastBuildDate>Fri, 15 Aug 2025 12:34:56 +0000</lastBuildDate><atom:link href="https://nickyreinert.de/en/topics/blockchain/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>How to simulate proof of work in SQL and BigQuery</title>
      <link>https://nickyreinert.de/en/2025/2025-08-15-proof-of-work-in-bigquery-and-sql/</link>
      <pubDate>Fri, 15 Aug 2025 12:34:56 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/en/2025/2025-08-15-proof-of-work-in-bigquery-and-sql/</guid>
      <description>(or: How does blockchain mining work?)
A miner has to solve a mathematical problem to validate a block for the Blockhain. The so called Proof of Work requires a …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>A technical, two-part tutorial that first explains the Bitcoin &#39;Proof of Work&#39; mining algorithm in detail, and then demonstrates how to simulate this computationally intensive process using only SQL in Google BigQuery. The guide provides a complete BigQuery script that reconstructs the block header and iterates through the nonce and version fields to find a valid hash.</p>
          
          
          <p><strong>Hauptthemen:</strong> Blockchain, Bitcoin, SQL, Google BigQuery, Data Engineering, Cryptography</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> advanced</p>
          
        </div>
        
        
        <p><em>(or: How does blockchain mining work?)</em></p>
<p>A miner has to solve a mathematical problem to validate a block for the Blockhain. The so called <strong>Proof of Work</strong> requires a lot of computing power aka energy and therefore is quite expensive. <strong>Googles BigQuery</strong> has a price model, that charges you for the transferred data and not the computing power. Meaning: You can utilize a lot of computing power for free. If you are able to reproduce the mining algorithm in SQL.</p>
<p>In this article I first will explain how the mining process works. This is the main concept for a couple of <strong>Blockchain</strong> technologies. My explanation is based on Bitcoin’s blockchain. If you are already familiar with that, you may skip to <strong>part 2</strong>, where I present an SQL query that does the job.</p>
<h1 id="part-1-the-mathematical-problem-aka-mining-a-block">Part 1: The mathematical problem aka: Mining a block</h1>
<h2 id="whats-a-hash-again">What’s a hash again?</h2>
<p>A hash is a kind of unique piece of information calculated from any given input (<a href="/wie-funktioniert-der-sha256-algorithmus-im-detail-teil-1-2-7a0023cf562a">I wrote about that earlier</a>). There are a lot of hashing algorithms. The blockchain we are talking about uses <strong>SHA256</strong>. It’s important to understand, that a hash is basically just a really large number with always the same length: <strong>256 bit</strong>.</p>
<p><strong>If you change the input, even just a little, the hash changes</strong>. This makes the hash a pretty good indicator to check if the input data has been tampered: If you know the original hash and you re-calculate the hash for a given information, and both hashes are different, the initial information has been changed.</p>
<h2 id="why-does-the-blockchain-rely-on-hashes">Why does the blockchain rely on hashes?</h2>
<p>Every block in a blockchain contains two kind of information: A couple of <strong>transactions details</strong> and a <strong>block header</strong>. Among other details the header contains <strong>two</strong> important <strong>hashes</strong>: One hash for all the transactions of the current block and one hash for the header of the previous block.</p>
<p>If you would tamper the transaction data of lets say block <strong>#1337</strong>, the hash of this block’s header would change. But as the next block’s header contains a hash for the original block #1337, you could simply compare both hashes and come to the conclusion, that the data in block #1337 has changed.</p>
<p><img src="/en/2025/2025-08-15-proof-of-work-in-bigquery-and-sql/assets/image7.png" alt="How hashes ensure data integrity in a blockchain"></p>
<p>This sounds easy, because calculating one hash only takes milliseconds, even on slow computers. That’s why the blockchain protocol defines a very special requirement that every header’s hash has to meet: The hash of a block header has to be lower than a given number, the target.</p>
<blockquote>
<p>S ide note: Besides that there are some other rules that make the calculation even more difficult: For example you need to double-hash the information and you need to calculate the Merkle root of all transactions of the current block.</p></blockquote>
<p>You can meet this requirement by simply adding an incrementing number to the header information, re-calculate the hash, and see if the new hash is below the target.</p>
<p>The whole process is so complicated, that even powerful computers will take around 10 minutes to find a solution. That’s by the way a reason why Bitcoin is not the payment method: If you’d like to buy a <strong>coffee</strong>, you may have to wait around 10 minutes until your transaction is confirmed.</p>
<h2 id="the-block-header">The block header</h2>
<p>Let’s see what kind of information a block header contains. This is the header of <a href="https://learnmeabitcoin.com/explorer/block/00000000000000000006b9bf976b004581c19d800948d2eab77c8f9e07b9f088">block number 727938</a>:</p>
<p><img src="/en/2025/2025-08-15-proof-of-work-in-bigquery-and-sql/assets/image4.png" alt=""></p>
<p>You will find six important fields here:</p>
<ul>
<li>a <strong>version</strong> field,</li>
<li>the hash for the <strong>previous block’s header,</strong></li>
<li>the <strong>Merkle root,</strong></li>
<li>a <strong>timestamp,</strong></li>
<li>a <strong>bits</strong> field, that defines the target and</li>
<li>a <strong>nonce</strong></li>
</ul>
<p>Let me describe those fields in detail:</p>
<p><strong>The nonce field</strong></p>
<p>If you take all header fields <strong>except the nonce field</strong>, you get the block message:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">04c04d34702a058fee2c141a685dfc3d18c4f0efc0464d625057060000000000000000005e578fe5fe001059710edbf9f78c1bd15b110faf574723cafde35667633c18084ac23462c0400a17
</span></span></code></pre></div><p>The SHA256 hash for this looks like that:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">5c96f247d3c6a48b244be859d888dd1ee2a80dd6378cc7e10f31b9d14b78660b
</span></span></code></pre></div><p>As mentioned above, the protocol requires you to add a specific kind of information to the block message, that leads to a hash below a given value. For starters lets make that easy: Find a number that leads to a hash starting with a zero. What if we add a 1 to the block message? (Remember: This is a hexadecimal number, so I need to add two digits):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">04c04d34702a058fee2c141a685dfc3d18c4f0efc0464d625057060000000000000000005e578fe5fe001059710edbf9f78c1bd15b110faf574723cafde35667633c18084ac23462c0400a17**01**
</span></span></code></pre></div><p>That’s the resulting hash:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">855ccd41ef49272ab633eff0cf5abed6d543ed5183eaf9f8a32e12a57b7419a9
</span></span></code></pre></div><p>No leading zeros? You may get a picture of how difficult it is. The actual target value for this block was a hash with <strong>19 leading zeros</strong>. The miner need to (find and) add the number 1.396.904.612 (in hexadecimal 0x534312a4) to the block message to find a fitting hash. And that number is called **nonce **— short for <strong>number used once</strong>. That’s the resulting hash:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">00000000000000000006b9bf976b004581c19d800948d2eab77c8f9e07b9f088
</span></span></code></pre></div><p>While calculation one hash seems pretty simple, imagine how long it would take for 1 Billion calculations, or even more? Even more? Yes, you heard right: The nonce is a four byte number meaning you have <strong>2³²</strong> possible numbers (<strong>4,294,967,296</strong>) to check (the so called <strong>search space</strong>). And sometimes that’s not enough.</p>
<h2 id="the-previous-blocks-header-hash">The previous block’s header hash</h2>
<p>This is just the hash of the header of the previous block. Not much to say here: You cannot change it.</p>
<h2 id="the-bit-field">The bit field</h2>
<p>This field defines the above mentioned target. It’s a 4 byte number, too:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">0x170a40c0
</span></span></code></pre></div><p>A hash is a number with 32 bytes. And that’s strange: How can you limit a 32 byte number using only 4 bytes? Here it is: The first byte of the bit field defines an <strong>exponent</strong>: 0x17. The remaining 3 bytes define the <strong>mantissa</strong>: 0x0a40c0. The base is 256 and you need to substract 3 (length of the mantissa) from the exponent. So this is the formula to calculate the target:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">target = 0x0a40c0 × 256⁽⁰ˣ¹⁷ ⁻ ³⁾⁾
</span></span></code></pre></div><p><img src="/en/2025/2025-08-15-proof-of-work-in-bigquery-and-sql/assets/image1.png" alt="The bit field"></p>
<p>The target will be adjusted every <strong>2,016 blocks</strong>, which is roughly two weeks (6 blocks per hour × 24 hours × 7 days x 2 = 2,016). Why? The mathematical problem needs to be difficult enough to keep the chain safe but it must not be to difficult, because you do not want to wait more than 10 minutes for a transaction to be confirmed. As computing power changes or miners joining and leaving the network, the target and therefore the difficulty as to be adjusted.</p>
<h2 id="the-merkle-root">The Merkle root</h2>
<p>The Merkle root is a hash of all transactions of **the current block **(and a little more, I’m not going to much into detail here). Basically it’s pretty easy: You take two transactions and hash them to get Hash #1. Then you take two more transactions, hash them and get Hash #2. Now you take Hash #1 and Hash #2, hash it and get: Hash #3. You’re building an upside tree, where the transactions are on the bottom and the branches are dozens of hashes eventually leading to the root hash.</p>
<p><img src="/en/2025/2025-08-15-proof-of-work-in-bigquery-and-sql/assets/image3.png" alt="a simple Merkle root"></p>
<p>If the search space is not enough, the miner can change the order of the transactions to create a different Merkle root. This would change the block message and therefore lead to a different hash.</p>
<h2 id="the-timestamp">The timestamp</h2>
<p>The timestamp, well, shows at what time the block was validated. In fact there is a lot more to tell about the timestamp, but not in a mathematical way.</p>
<p>The protocol uses the timestamp to see, how fast blocks are mined. As already explained, the network uses this value to adjust the difficulty.</p>
<p><img src="/en/2025/2025-08-15-proof-of-work-in-bigquery-and-sql/assets/image6.png" alt="The date field"></p>
<p>A miner can use the timestamp field to increase the search space. A valid timestamp has to be <strong>greater</strong> than the median timestamp of the last 11 blocks and lower than the network-time plus <strong>2 hours</strong>. Eventually this gives you a <strong>3 hour</strong> window where you can adjust the timestamp to gain extra search space. 3 hours are 10,800 seconds (which is roughly 2¹³).</p>
<h2 id="the-version-field">The version field</h2>
<p>Last but definitely not least: The version field contains a lot more than you would expect. The version field is 4 bytes long and it</p>
<ul>
<li>contains the current protocol version,</li>
<li>signals readiness for soft fork proposals and</li>
<li>offers additional search space.</li>
</ul>
<p>That’s a lot of information and it’s not that easy to pull it out of those 4 bytes. The current protocol version requires the **first 3 bits **(!) to be at least <strong>0b001</strong> (2 in decimal):</p>
<p><img src="/en/2025/2025-08-15-proof-of-work-in-bigquery-and-sql/assets/image8.png" alt=""></p>
<p>Besides that, the last 13 bits are used for soft forks signaling. This simply means, if a miner is ready for a particular soft fork, he flips on of those bits to 1. Imagine there’s a soft fork BIPx that requires the 1 bit to be flipped, that’s how the miner signals readiness for BIPx:</p>
<p><img src="/en/2025/2025-08-15-proof-of-work-in-bigquery-and-sql/assets/image10.png" alt=""></p>
<p>This would lead to a version field like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">0x20000001
</span></span></code></pre></div><p>As you may have noticed, this leaves 16 bits open (32 bits at all, mins 3 bits for the version and 13 bits for soft forks = 16 bits left). This gives the miner 2¹⁶ more options to find a good hash! That technique is called overt ASIC boost. Lets take the version field from <a href="https://blockstream.info/block/00000000000000000006b9bf976b004581c19d800948d2eab77c8f9e07b9f088?expand=">block #727938</a> for example: 0x344dc004</p>
<p>This is the bit representation of the hexadecimal value:</p>
<p><img src="/en/2025/2025-08-15-proof-of-work-in-bigquery-and-sql/assets/image9.png" alt=""></p>
<p>So apparently the miner took 0b1010001001101110 (0d41582) as an additional resource to finally find the fitting nonce 0xa4124353.</p>
<p><img src="/en/2025/2025-08-15-proof-of-work-in-bigquery-and-sql/assets/image5.png" alt="The version field"></p>
<h2 id="block-header-summary">Block header summary</h2>
<p>So after all you have <strong>six fields</strong> in your header, where only <strong>two fields</strong> are fixed and <strong>cannot</strong> be changed in order to find a hash below the given target: The <strong>bit</strong> field, that describes the <strong>target</strong> itself and the hash for the **previous header — **the vital element of the Blockchain concept..</p>
<p>Besides that you may change the <strong>nonce</strong>, the one field actually designed to change. The <strong>Merkle</strong> <strong>root</strong>, by re-arranging or considering different transactions. The <strong>version</strong> field and the <strong>timestamp</strong> by exploiting the 3 hour time window.</p>
<p>To give you an idea how complex it is to utilize at least the <strong>nonce</strong> and the <strong>version</strong> field, I created a Python script that does that for you:</p>
<h1 id="part-2-using-sql-and-bigquery-to-validate-a-block">Part 2: Using SQL and BigQuery to validate a block</h1>
<p>Now as you are an expert in mining, let’s try to find a way to mine for free. I will implement a mining algorithm in SQL that iterates through the nonce and the additional version bits to find a hash below a required target. I’m not re-arranging the Merkle root and I will take the timestamp as a given value.</p>
<p>To make the whole process understandable, I will start from within the inner loop and calculate the hash from a given header, that already contains all the correct “answers”. I’m using the header for <a href="https://blockstream.info/block/000000000000000000078c7ad45ab182796bbb419c361aa3eaffaa8ddd00d4f0">block #727155</a> with all the information already in the right format. After we understand the hashing process in BigQuery, we will build the header field by field and finally add the two loops.</p>
<p>And here they are — the variables for my <strong>six header fields.</strong> Remember that the version field contains the actual version as well as the soft fork signals.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl"># header for block 727155DECLARE hash_prev_block STRING DEFAULT &#34;00000000000000000004136135b2e0cd367b56ea6c0dd5b8f79964a4cd7d2718&#34;;DECLARE merkle_root STRING DEFAULT &#34;0d14fac91555d6337b10b2f20de231858fb5225f2ff685cd9b487c235d6e8307&#34;;DECLARE header_datetime STRING DEFAULT &#34;622defb9&#34;;DECLARE bits STRING DEFAULT &#34;170a3773&#34;;DECLARE nonce STRING DEFAULT &#34;c8f05860&#34;;DECLARE version STRING DEFAULT &#34;20002000&#34;;
</span></span></code></pre></div><p>We simply need to concatenate everything into one string before we hash it. Simply? Wait…there’s one pitfall called Little Endian. Bitcoin wants you to work with values in Little Endian. This is the way how you can write a number. In one sentence: Little Endian starts with the lowest value on the left. Basically you just switch the order of the single digits in your number. Instead of 23 you write 32. The value though remains the same. You achieve that using the REVERSE() function in SQL.</p>
<p>But beware — there’s more: What would you expect if you <em>reverse</em> the following hexadecimal value to Little Endian?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">ABCDEF
</span></span></code></pre></div><p>Is it FEDCBA? No. We are working with bytes. One byte is 8 bits which is enough space for 255 values or in hexadecimal: FF. Two digits. That means we have to see all them values in pairs of two and the correct Little Endian representation is:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">EFCDAB
</span></span></code></pre></div><p>To get this result you need to read the incoming value in bytes format and afterwards transfer it back to hexadecimal string. So this is how we create the actual header:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">DECLARE header STRING;SET header =    TO_HEX(REVERSE(FROM_HEX(version))) ||    TO_HEX(REVERSE(FROM_HEX(hash_prev_block))) ||    TO_HEX(REVERSE(FROM_HEX(merkle_root))) ||    TO_HEX(REVERSE(FROM_HEX(header_datetime))) ||    TO_HEX(REVERSE(FROM_HEX(bits))) ||    TO_HEX(REVERSE(FROM_HEX(nonce)));
</span></span></code></pre></div><p>And that’s the header containing all relevant fields in Little Endian:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">0020002018277dcda46499f7b8d50d6cea567b36cde0b23561130400000000000000000007836e5d237c489bcd85f62f5f22b58f8531e20df2b2107b33d65515c9fa140db9ef2d6273370a176058f0c8
</span></span></code></pre></div><h2 id="the-hashing">The Hashing</h2>
<p>BigQuerys build-it SHA256 expects a string or a byte but the header is made of hexadecimal values. So first we need to prepare the header, meaning: convert the hexadecimal string to the bytes format:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">DECLARE b_header BYTES;SET b_header = FROM_HEX(header);
</span></span></code></pre></div><p>Now we can apply SHA256. And as mentioned above, we need to do it two times. The result of SHA256 comes in bytes, o we have to convert it back to a hexadecimal string:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">SELECT TO_HEX(SHA256(SHA256(b_header)))
</span></span></code></pre></div><p>That finally leads to this result:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">f0d400dd8daaffeaa31a369c41bb6b7982b15ad47a8c07000000000000000000
</span></span></code></pre></div><p>And now you hopefully remember that we were running everything in Little Endian. To finalize the process we need to convert it back to Big Endian and finally get to this hexadecimal number:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">SELECT TO_HEX(REVERSE(SHA256(SHA256(b_header))));
</span></span></code></pre></div><p>And that’s the result:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">000000000000000000078c7ad45ab182796bbb419c361aa3eaffaa8ddd00d4f0
</span></span></code></pre></div><p>that you now may compare to <a href="https://blockstream.info/block/000000000000000000078c7ad45ab182796bbb419c361aa3eaffaa8ddd00d4f0">the actual header hash the next block refers to</a>:</p>
<p><img src="/en/2025/2025-08-15-proof-of-work-in-bigquery-and-sql/assets/image2.png" alt=""></p>
<h2 id="prepare-the-inner-loop">Prepare the inner loop</h2>
<p>We’re going to wrap everything into a while-loop, add a break-out condition for safety reasons and start with a comparison of the just found hash and a target. Because that’s what it’s all about: Find a “number” (hash) that is lower than another “number” (target).</p>
<p>The target value is hidden in the bits field. And as already mentioned, we need to do the math to get the numeric target. The mantissa comes from the last 3 bytes, the exponent is the first byte. And the target comes from this equation:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">target = mantissa * 256 ^ exponent
</span></span></code></pre></div><p>And this, well, leads to a pretty big number. Actually to big to fit into an INT64. We have to store it into a FLOAT64 and to make it comparable against the previously calculated hash, we need to cast the hash to FLOAT64, too.</p>
<p>Here’s the loop containing the condition, that returns the nonce — that we are looking for and a little break-out-statement, because we’re just testing how it’s working:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl"># skipping previous declarations from above# [...]DECLARE mantissa INT64DECLARE exponent INT64DECLARE target FLOAT64;DECLARE max_iterations INT64 DEFAULT 100;DECLARE iteration INT64 DEFAULT 0;SET exponent = CAST(CONCAT(&#34;0x&#34;, SUBSTRING(bits, 0, 2)) AS INT64)SET mantissa = CAST(CONCAT(&#34;0x&#34;, SUBSTRING(bits, 2, 4)) AS INT64);SET target = mantissa * POWER(256, exponent);WHILE true DO    SET header         TO_HEX(REVERSE(FROM_HEX(version))) ||        TO_HEX(REVERSE(FROM_HEX(hash_prev_block))) ||        TO_HEX(REVERSE(FROM_HEX(merkle_root))) ||        TO_HEX(REVERSE(FROM_HEX(header_datetime))) ||        TO_HEX(REVERSE(FROM_HEX(bits))) ||        TO_HEX(REVERSE(FROM_HEX(nonce)));    SET b_header = FROM_HEX(header);    SET header_hash = TO_HEX(REVERSE(SHA256(SHA256(b_header))));    IF CAST(CONCAT(&#34;0x&#34;, header_hash) AS FLOAT64) &lt; target THEN        SELECT nonce;        BREAK;    END IF;    IF iteration &gt; max_iterations THEN        SELECT &#34;No nonce found&#34;;        BREAK;    END IF;    SET iteration = iteration + 1;END WHILE;
</span></span></code></pre></div><h2 id="complete-the-loop">Complete the loop</h2>
<p>Yeah well — isn’t that something? The only thing we need to do now is to actually iterate through the nonce to let the query find the correct value. To have an iterable variable we need one of the type FLOAT64. I will set the value a little bit under the expected target, to speed up the testing:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">DECLARE nonce_dec FLOAT64 DEFAULT 3371190464; 
</span></span></code></pre></div><p>Now, after the loop starts and before we collect all header details,we need to get the hexadecimal nonce. And at the end of the loop, we increment the decimal nonce:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">WHILE true DO    SET nonce = FORMAT(&#34;%X&#34;, nonce_dec);    SET header =        [....]    SET nonce_dec = nonce_dec + 1;END WHILE;
</span></span></code></pre></div><h2 id="adding-the-second-loop">Adding the second loop</h2>
<p>Now as we already learned, it may not be enough to test 2⁶⁴ possible numbers to find a fitting nonce. That’s why we’re going to add another loop to use the <strong>version field</strong> for some additional search space. Unfortunately this is a little more complicated. So, what do we need? Binary numbers!</p>
<p>This is the version for our famous block # 727155. Again we’re using this as an example. If you’d like to mine a new block, you need to adjust at least the soft fork part.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">0x20002000
</span></span></code></pre></div><p>In binary that is:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">00110100010011011100000000000100
</span></span></code></pre></div><p>The last 13 bits are representing the soft work readiness. That’s a given value. The version is pre-defined to be (at least) 001 for the first 3 bits. We’re taking the easy route here and are going to declare this in binary already. The remaining 16 bits are up and ready to be iterated through:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">DECLARE soft_forks STRING DEFAULT &#34;0000000000000&#34;;DECLARE version_roller INT64 DEFAULT 1;DECLARE version_roller_bin STRING;DECLARE version_bits STRING DEFAULT &#34;001&#34;;
</span></span></code></pre></div><blockquote>
<p>Please note, that I’m setting the version_roller to 1— that’s the one used in the block we are working on. Again, this is to speed up the demonstration here.</p></blockquote>
<p>We will use an additional outer loop to iterate over the version roller. The iteration comes at the end, at the beginning of the loop we need to process the decimal value to get 16 bits out from it and press it into the hexadecimal format:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">main_loop: WHILE true DO        SET version_roller_bin = SUBSTR(bqutil.fn.to_binary(version_roller), -16);    SET version = FORMAT(&#34;%X&#34;, bqutil.fn.from_binary(CONCAT(version_bits, version_roller_bin, soft_forks)));WHILE true DO        [....]    END WHILE;    SET version_roller = version_roller + 1;END WHILE;
</span></span></code></pre></div><p>Take care of the label I set here to address the loop: <strong>MAIN_LOOP</strong>. I <strong>have to reference</strong> the outer loop when breaking from inside the inner loop:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    [...]    BREAK main_loop;    [...]
</span></span></code></pre></div><p>Check out the full script in final part.</p>
<h2 id="congratulations-and-conclusion">Congratulations and Conclusion</h2>
<p>Basically that’s it. That’s how the full script should look like this (<a href="https://gist.github.com/nickyreinert/2d0936922bbf242429c21af3c5b6866b">gist.github.com</a>). Feel free to increase the value for <strong>max_iterations</strong> and set the starting value for <strong>nonce_dec</strong> to 0 and see how long it will take Google to find the correct nonce.</p>
<p>This is a lot of weird SQL stuff and far away from SELECT * FROM table. Is it worth it? Well, I set the starting nonce to 3370194460 and executed the script.</p>
<p>Spoiler Alert: After 10 minutes I stopped the query. Another approach (see below) seems way faster, though it’s a cheating with the actual calculations.</p>
<h2 id="disclaimer">Disclaimer</h2>
<p>I will not loose much words about <strong>Proof of Work.</strong> The process itself is sophisticated and somehow thoughtfull… as well as a little weird. But above all it’s also a huge wast of energy and there are better ways to achieve the same outcome. I’d like to end with a quote from another author on Medium who said:</p>
<blockquote>
<p>You’ve got to wonder what we’d achieve if we used even a fraction of this computing power for medical research instead…</p></blockquote>
<h1 id="additional-ressources">Additional ressources</h1>
<p><a href="https://medium.com/fcats-blockchain-incubator/understanding-the-bitcoin-blockchain-header-a2b0db06b515">This is a pretty good and helpful medium article</a> about the Blockchain header by RJ Rybarczyk. <a href="https://learnmeabitcoin.com/explorer/block/bits/170a40c0">This is a website</a> that provides a lot of technical background information as well as tools to calculate hashes or browse the Blockchain.</p>
<p>A couple of years ago Uri Shaked also <a href="https://urish.medium.com/thank-you-google-how-to-mine-bitcoin-on-googles-bigquery-1c8e17b04e62">wrote about this topic</a>. I stumbled over his article while doing research. But he was pursuing a different approach. First of all he was using a <strong>random feature</strong> to find a fitting nonce. I also considered this before, but as you cannot ensure to ge the same random value twice, you will waste a lot of time (he actually calculated the same nonce within 20 seconds, which still is faster than my approach). Besides that he was using sub-queries to create temporary tables filled with the nonce.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Blockchain, SQL, BigQuery, Tutorial, Bitcoin</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      <category>anleitungen</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/assets/image1.png" type="image/jpeg">
        <media:title>How to simulate proof of work in SQL and BigQuery - Title Image</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>tutorial</dc:type>
      
      
    </item>
  </channel>
</rss>