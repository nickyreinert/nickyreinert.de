<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" 
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Automation auf Nicky Reinert</title>
    <link>http://localhost:1313/en/topics/automation/</link>
    <description>Blog &amp; projects by Nicky Reinert (Institute for Digital Challenges): web development &amp; software development, SEO &amp; analytics, hosting &amp; DevOps, WordPress &amp; Hugo, tools &amp; projects, data protection &amp; digital culture — plus content on AI and autism &amp; society.</description>
    <generator>Hugo 0.148.2</generator>
    <language>en</language>
    <managingEditor></managingEditor>
    <webMaster></webMaster>
    <copyright></copyright>
    <lastBuildDate>Fri, 15 Aug 2025 12:34:56 +0000</lastBuildDate><atom:link href="http://localhost:1313/en/topics/automation/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>How to sinmulate proof of work in SQL and BigQuery</title>
      <link>http://localhost:1313/en/blog/2025/08/15/how-to-sinmulate-proof-of-work-in-sql-and-bigquery/</link>
      <pubDate>Fri, 15 Aug 2025 12:34:56 +0000</pubDate>
      <author></author>
      <guid>http://localhost:1313/en/blog/2025/08/15/how-to-sinmulate-proof-of-work-in-sql-and-bigquery/</guid>
      <description>(or: How does blockchain mining work?)
A miner has to solve a mathematical problem to validate a block for the Blockhain. The so called Proof of Work requires a …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>(or: How does blockchain mining work. ). A miner has to solve a mathematical problem to validate a block for the Blockhain.&#39; reading_time: 18 content_type: &#39;project</p>
          
          
          <p><strong>Hauptthemen:</strong> Python, Web, Git, Database, Mobile, Ai, Automation</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><em>(or: How does blockchain mining work?)</em></p>
<p>A miner has to solve a mathematical problem to validate a block for the Blockhain. The so called <strong>Proof of Work</strong> requires a lot of computing power aka energy and therefore is quite expensive. <strong>Googles BigQuery</strong> has a price model, that charges you for the transferred data and not the computing power. Meaning: You can utilize a lot of computing power for free. If you are able to reproduce the mining algorithm in SQL.</p>
<p>In this article I first will explain how the mining process works. This is the main concept for a couple of <strong>Blockchain</strong> technologies. My explanation is based on Bitcoin’s blockchain. If you are already familiar with that, you may skip to <strong>part 2</strong>, where I present an SQL query that does the job.</p>
<h1 id="part-1-the-mathematical-problem-aka-mining-a-block">Part 1: The mathematical problem aka: Mining a block</h1>
<h2 id="whats-a-hash-again">What’s a hash again?</h2>
<p>A hash is a kind of unique piece of information calculated from any given input (<a href="/wie-funktioniert-der-sha256-algorithmus-im-detail-teil-1-2-7a0023cf562a">I wrote about that earlier</a>). There are a lot of hashing algorithms. The blockchain we are talking about uses <strong>SHA256</strong>. It’s important to understand, that a hash is basically just a really large number with always the same length: <strong>256 bit</strong>.</p>
<p><strong>If you change the input, even just a little, the hash changes</strong>. This makes the hash a pretty good indicator to check if the input data has been tampered: If you know the original hash and you re-calculate the hash for a given information, and both hashes are different, the initial information has been changed.</p>
<h2 id="why-does-the-blockchain-rely-on-hashes">Why does the blockchain rely on hashes?</h2>
<p>Every block in a blockchain contains two kind of information: A couple of <strong>transactions details</strong> and a <strong>block header</strong>. Among other details the header contains <strong>two</strong> important <strong>hashes</strong>: One hash for all the transactions of the current block and one hash for the header of the previous block.</p>
<p>If you would tamper the transaction data of lets say block <strong>#1337</strong>, the hash of this block’s header would change. But as the next block’s header contains a hash for the original block #1337, you could simply compare both hashes and come to the conclusion, that the data in block #1337 has changed.</p>
<p><img src="/en/blog/2025/08/15/how-to-sinmulate-proof-of-work-in-sql-and-bigquery/assets/image7.png" alt="How hashes ensure data integrity in a blockchain"></p>
<p>This sounds easy, because calculating one hash only takes milliseconds, even on slow computers. That’s why the blockchain protocol defines a very special requirement that every header’s hash has to meet: The hash of a block header has to be lower than a given number, the target.</p>
<blockquote>
<p>S ide note: Besides that there are some other rules that make the calculation even more difficult: For example you need to double-hash the information and you need to calculate the Merkle root of all transactions of the current block.</p></blockquote>
<p>You can meet this requirement by simply adding an incrementing number to the header information, re-calculate the hash, and see if the new hash is below the target.</p>
<p>The whole process is so complicated, that even powerful computers will take around 10 minutes to find a solution. That’s by the way a reason why Bitcoin is not the payment method: If you’d like to buy a <strong>coffee</strong>, you may have to wait around 10 minutes until your transaction is confirmed.</p>
<h2 id="the-block-header">The block header</h2>
<p>Let’s see what kind of information a block header contains. This is the header of <a href="https://learnmeabitcoin.com/explorer/block/00000000000000000006b9bf976b004581c19d800948d2eab77c8f9e07b9f088">block number 727938</a>:</p>
<p><img src="/en/blog/2025/08/15/how-to-sinmulate-proof-of-work-in-sql-and-bigquery/assets/image4.png" alt=""></p>
<p>You will find six important fields here:</p>
<ul>
<li>a <strong>version</strong> field,</li>
<li>the hash for the <strong>previous block’s header,</strong></li>
<li>the <strong>Merkle root,</strong></li>
<li>a <strong>timestamp,</strong></li>
<li>a <strong>bits</strong> field, that defines the target and</li>
<li>a <strong>nonce</strong></li>
</ul>
<p>Let me describe those fields in detail:</p>
<p><strong>The nonce field</strong></p>
<p>If you take all header fields <strong>except the nonce field</strong>, you get the block message:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">04c04d34702a058fee2c141a685dfc3d18c4f0efc0464d625057060000000000000000005e578fe5fe001059710edbf9f78c1bd15b110faf574723cafde35667633c18084ac23462c0400a17
</span></span></code></pre></div><p>The SHA256 hash for this looks like that:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">5c96f247d3c6a48b244be859d888dd1ee2a80dd6378cc7e10f31b9d14b78660b
</span></span></code></pre></div><p>As mentioned above, the protocol requires you to add a specific kind of information to the block message, that leads to a hash below a given value. For starters lets make that easy: Find a number that leads to a hash starting with a zero. What if we add a 1 to the block message? (Remember: This is a hexadecimal number, so I need to add two digits):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">04c04d34702a058fee2c141a685dfc3d18c4f0efc0464d625057060000000000000000005e578fe5fe001059710edbf9f78c1bd15b110faf574723cafde35667633c18084ac23462c0400a17**01**
</span></span></code></pre></div><p>That’s the resulting hash:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">855ccd41ef49272ab633eff0cf5abed6d543ed5183eaf9f8a32e12a57b7419a9
</span></span></code></pre></div><p>No leading zeros? You may get a picture of how difficult it is. The actual target value for this block was a hash with <strong>19 leading zeros</strong>. The miner need to (find and) add the number 1.396.904.612 (in hexadecimal 0x534312a4) to the block message to find a fitting hash. And that number is called **nonce **— short for <strong>number used once</strong>. That’s the resulting hash:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">00000000000000000006b9bf976b004581c19d800948d2eab77c8f9e07b9f088
</span></span></code></pre></div><p>While calculation one hash seems pretty simple, imagine how long it would take for 1 Billion calculations, or even more? Even more? Yes, you heard right: The nonce is a four byte number meaning you have <strong>2³²</strong> possible numbers (<strong>4,294,967,296</strong>) to check (the so called <strong>search space</strong>). And sometimes that’s not enough.</p>
<h2 id="the-previous-blocks-header-hash">The previous block’s header hash</h2>
<p>This is just the hash of the header of the previous block. Not much to say here: You cannot change it.</p>
<h2 id="the-bit-field">The bit field</h2>
<p>This field defines the above mentioned target. It’s a 4 byte number, too:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">0x170a40c0
</span></span></code></pre></div><p>A hash is a number with 32 bytes. And that’s strange: How can you limit a 32 byte number using only 4 bytes? Here it is: The first byte of the bit field defines an <strong>exponent</strong>: 0x17. The remaining 3 bytes define the <strong>mantissa</strong>: 0x0a40c0. The base is 256 and you need to substract 3 (length of the mantissa) from the exponent. So this is the formula to calculate the target:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">target = 0x0a40c0 × 256⁽⁰ˣ¹⁷ ⁻ ³⁾⁾
</span></span></code></pre></div><p><img src="/en/blog/2025/08/15/how-to-sinmulate-proof-of-work-in-sql-and-bigquery/assets/image1.png" alt="The bit field"></p>
<p>The target will be adjusted every <strong>2,016 blocks</strong>, which is roughly two weeks (6 blocks per hour × 24 hours × 7 days x 2 = 2,016). Why? The mathematical problem needs to be difficult enough to keep the chain safe but it must not be to difficult, because you do not want to wait more than 10 minutes for a transaction to be confirmed. As computing power changes or miners joining and leaving the network, the target and therefore the difficulty as to be adjusted.</p>
<h2 id="the-merkle-root">The Merkle root</h2>
<p>The Merkle root is a hash of all transactions of **the current block **(and a little more, I’m not going to much into detail here). Basically it’s pretty easy: You take two transactions and hash them to get Hash #1. Then you take two more transactions, hash them and get Hash #2. Now you take Hash #1 and Hash #2, hash it and get: Hash #3. You’re building an upside tree, where the transactions are on the bottom and the branches are dozens of hashes eventually leading to the root hash.</p>
<p><img src="/en/blog/2025/08/15/how-to-sinmulate-proof-of-work-in-sql-and-bigquery/assets/image3.png" alt="a simple Merkle root"></p>
<p>If the search space is not enough, the miner can change the order of the transactions to create a different Merkle root. This would change the block message and therefore lead to a different hash.</p>
<h2 id="the-timestamp">The timestamp</h2>
<p>The timestamp, well, shows at what time the block was validated. In fact there is a lot more to tell about the timestamp, but not in a mathematical way.</p>
<p>The protocol uses the timestamp to see, how fast blocks are mined. As already explained, the network uses this value to adjust the difficulty.</p>
<p><img src="/en/blog/2025/08/15/how-to-sinmulate-proof-of-work-in-sql-and-bigquery/assets/image6.png" alt="The date field"></p>
<p>A miner can use the timestamp field to increase the search space. A valid timestamp has to be <strong>greater</strong> than the median timestamp of the last 11 blocks and lower than the network-time plus <strong>2 hours</strong>. Eventually this gives you a <strong>3 hour</strong> window where you can adjust the timestamp to gain extra search space. 3 hours are 10,800 seconds (which is roughly 2¹³).</p>
<h2 id="the-version-field">The version field</h2>
<p>Last but definitely not least: The version field contains a lot more than you would expect. The version field is 4 bytes long and it</p>
<ul>
<li>contains the current protocol version,</li>
<li>signals readiness for soft fork proposals and</li>
<li>offers additional search space.</li>
</ul>
<p>That’s a lot of information and it’s not that easy to pull it out of those 4 bytes. The current protocol version requires the **first 3 bits **(!) to be at least <strong>0b001</strong> (2 in decimal):</p>
<p><img src="/en/blog/2025/08/15/how-to-sinmulate-proof-of-work-in-sql-and-bigquery/assets/image8.png" alt=""></p>
<p>Besides that, the last 13 bits are used for soft forks signaling. This simply means, if a miner is ready for a particular soft fork, he flips on of those bits to 1. Imagine there’s a soft fork BIPx that requires the 1 bit to be flipped, that’s how the miner signals readiness for BIPx:</p>
<p><img src="/en/blog/2025/08/15/how-to-sinmulate-proof-of-work-in-sql-and-bigquery/assets/image10.png" alt=""></p>
<p>This would lead to a version field like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">0x20000001
</span></span></code></pre></div><p>As you may have noticed, this leaves 16 bits open (32 bits at all, mins 3 bits for the version and 13 bits for soft forks = 16 bits left). This gives the miner 2¹⁶ more options to find a good hash! That technique is called overt ASIC boost. Lets take the version field from <a href="https://blockstream.info/block/00000000000000000006b9bf976b004581c19d800948d2eab77c8f9e07b9f088?expand=">block #727938</a> for example: 0x344dc004</p>
<p>This is the bit representation of the hexadecimal value:</p>
<p><img src="/en/blog/2025/08/15/how-to-sinmulate-proof-of-work-in-sql-and-bigquery/assets/image9.png" alt=""></p>
<p>So apparently the miner took 0b1010001001101110 (0d41582) as an additional resource to finally find the fitting nonce 0xa4124353.</p>
<p><img src="/en/blog/2025/08/15/how-to-sinmulate-proof-of-work-in-sql-and-bigquery/assets/image5.png" alt="The version field"></p>
<h2 id="block-header-summary">Block header summary</h2>
<p>So after all you have <strong>six fields</strong> in your header, where only <strong>two fields</strong> are fixed and <strong>cannot</strong> be changed in order to find a hash below the given target: The <strong>bit</strong> field, that describes the <strong>target</strong> itself and the hash for the **previous header — **the vital element of the Blockchain concept..</p>
<p>Besides that you may change the <strong>nonce</strong>, the one field actually designed to change. The <strong>Merkle</strong> <strong>root</strong>, by re-arranging or considering different transactions. The <strong>version</strong> field and the <strong>timestamp</strong> by exploiting the 3 hour time window.</p>
<p>To give you an idea how complex it is to utilize at least the <strong>nonce</strong> and the <strong>version</strong> field, I created a Python script that does that for you:</p>
<h1 id="part-2-using-sql-and-bigquery-to-validate-a-block">Part 2: Using SQL and BigQuery to validate a block</h1>
<p>Now as you are an expert in mining, let’s try to find a way to mine for free. I will implement a mining algorithm in SQL that iterates through the nonce and the additional version bits to find a hash below a required target. I’m not re-arranging the Merkle root and I will take the timestamp as a given value.</p>
<p>To make the whole process understandable, I will start from within the inner loop and calculate the hash from a given header, that already contains all the correct “answers”. I’m using the header for <a href="https://blockstream.info/block/000000000000000000078c7ad45ab182796bbb419c361aa3eaffaa8ddd00d4f0">block #727155</a> with all the information already in the right format. After we understand the hashing process in BigQuery, we will build the header field by field and finally add the two loops.</p>
<p>And here they are — the variables for my <strong>six header fields.</strong> Remember that the version field contains the actual version as well as the soft fork signals.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl"># header for block 727155DECLARE hash_prev_block STRING DEFAULT &#34;00000000000000000004136135b2e0cd367b56ea6c0dd5b8f79964a4cd7d2718&#34;;DECLARE merkle_root STRING DEFAULT &#34;0d14fac91555d6337b10b2f20de231858fb5225f2ff685cd9b487c235d6e8307&#34;;DECLARE header_datetime STRING DEFAULT &#34;622defb9&#34;;DECLARE bits STRING DEFAULT &#34;170a3773&#34;;DECLARE nonce STRING DEFAULT &#34;c8f05860&#34;;DECLARE version STRING DEFAULT &#34;20002000&#34;;
</span></span></code></pre></div><p>We simply need to concatenate everything into one string before we hash it. Simply? Wait…there’s one pitfall called Little Endian. Bitcoin wants you to work with values in Little Endian. This is the way how you can write a number. In one sentence: Little Endian starts with the lowest value on the left. Basically you just switch the order of the single digits in your number. Instead of 23 you write 32. The value though remains the same. You achieve that using the REVERSE() function in SQL.</p>
<p>But beware — there’s more: What would you expect if you <em>reverse</em> the following hexadecimal value to Little Endian?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">ABCDEF
</span></span></code></pre></div><p>Is it FEDCBA? No. We are working with bytes. One byte is 8 bits which is enough space for 255 values or in hexadecimal: FF. Two digits. That means we have to see all them values in pairs of two and the correct Little Endian representation is:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">EFCDAB
</span></span></code></pre></div><p>To get this result you need to read the incoming value in bytes format and afterwards transfer it back to hexadecimal string. So this is how we create the actual header:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">DECLARE header STRING;SET header =    TO_HEX(REVERSE(FROM_HEX(version))) ||    TO_HEX(REVERSE(FROM_HEX(hash_prev_block))) ||    TO_HEX(REVERSE(FROM_HEX(merkle_root))) ||    TO_HEX(REVERSE(FROM_HEX(header_datetime))) ||    TO_HEX(REVERSE(FROM_HEX(bits))) ||    TO_HEX(REVERSE(FROM_HEX(nonce)));
</span></span></code></pre></div><p>And that’s the header containing all relevant fields in Little Endian:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">0020002018277dcda46499f7b8d50d6cea567b36cde0b23561130400000000000000000007836e5d237c489bcd85f62f5f22b58f8531e20df2b2107b33d65515c9fa140db9ef2d6273370a176058f0c8
</span></span></code></pre></div><h2 id="the-hashing">The Hashing</h2>
<p>BigQuerys build-it SHA256 expects a string or a byte but the header is made of hexadecimal values. So first we need to prepare the header, meaning: convert the hexadecimal string to the bytes format:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">DECLARE b_header BYTES;SET b_header = FROM_HEX(header);
</span></span></code></pre></div><p>Now we can apply SHA256. And as mentioned above, we need to do it two times. The result of SHA256 comes in bytes, o we have to convert it back to a hexadecimal string:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">SELECT TO_HEX(SHA256(SHA256(b_header)))
</span></span></code></pre></div><p>That finally leads to this result:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">f0d400dd8daaffeaa31a369c41bb6b7982b15ad47a8c07000000000000000000
</span></span></code></pre></div><p>And now you hopefully remember that we were running everything in Little Endian. To finalize the process we need to convert it back to Big Endian and finally get to this hexadecimal number:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">SELECT TO_HEX(REVERSE(SHA256(SHA256(b_header))));
</span></span></code></pre></div><p>And that’s the result:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">000000000000000000078c7ad45ab182796bbb419c361aa3eaffaa8ddd00d4f0
</span></span></code></pre></div><p>that you now may compare to <a href="https://blockstream.info/block/000000000000000000078c7ad45ab182796bbb419c361aa3eaffaa8ddd00d4f0">the actual header hash the next block refers to</a>:</p>
<p><img src="/en/blog/2025/08/15/how-to-sinmulate-proof-of-work-in-sql-and-bigquery/assets/image2.png" alt=""></p>
<h2 id="prepare-the-inner-loop">Prepare the inner loop</h2>
<p>We’re going to wrap everything into a while-loop, add a break-out condition for safety reasons and start with a comparison of the just found hash and a target. Because that’s what it’s all about: Find a “number” (hash) that is lower than another “number” (target).</p>
<p>The target value is hidden in the bits field. And as already mentioned, we need to do the math to get the numeric target. The mantissa comes from the last 3 bytes, the exponent is the first byte. And the target comes from this equation:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">target = mantissa * 256 ^ exponent
</span></span></code></pre></div><p>And this, well, leads to a pretty big number. Actually to big to fit into an INT64. We have to store it into a FLOAT64 and to make it comparable against the previously calculated hash, we need to cast the hash to FLOAT64, too.</p>
<p>Here’s the loop containing the condition, that returns the nonce — that we are looking for and a little break-out-statement, because we’re just testing how it’s working:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl"># skipping previous declarations from above# [...]DECLARE mantissa INT64DECLARE exponent INT64DECLARE target FLOAT64;DECLARE max_iterations INT64 DEFAULT 100;DECLARE iteration INT64 DEFAULT 0;SET exponent = CAST(CONCAT(&#34;0x&#34;, SUBSTRING(bits, 0, 2)) AS INT64)SET mantissa = CAST(CONCAT(&#34;0x&#34;, SUBSTRING(bits, 2, 4)) AS INT64);SET target = mantissa * POWER(256, exponent);WHILE true DO    SET header         TO_HEX(REVERSE(FROM_HEX(version))) ||        TO_HEX(REVERSE(FROM_HEX(hash_prev_block))) ||        TO_HEX(REVERSE(FROM_HEX(merkle_root))) ||        TO_HEX(REVERSE(FROM_HEX(header_datetime))) ||        TO_HEX(REVERSE(FROM_HEX(bits))) ||        TO_HEX(REVERSE(FROM_HEX(nonce)));    SET b_header = FROM_HEX(header);    SET header_hash = TO_HEX(REVERSE(SHA256(SHA256(b_header))));    IF CAST(CONCAT(&#34;0x&#34;, header_hash) AS FLOAT64) &lt; target THEN        SELECT nonce;        BREAK;    END IF;    IF iteration &gt; max_iterations THEN        SELECT &#34;No nonce found&#34;;        BREAK;    END IF;    SET iteration = iteration + 1;END WHILE;
</span></span></code></pre></div><h2 id="complete-the-loop">Complete the loop</h2>
<p>Yeah well — isn’t that something? The only thing we need to do now is to actually iterate through the nonce to let the query find the correct value. To have an iterable variable we need one of the type FLOAT64. I will set the value a little bit under the expected target, to speed up the testing:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">DECLARE nonce_dec FLOAT64 DEFAULT 3371190464; 
</span></span></code></pre></div><p>Now, after the loop starts and before we collect all header details,we need to get the hexadecimal nonce. And at the end of the loop, we increment the decimal nonce:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">WHILE true DO    SET nonce = FORMAT(&#34;%X&#34;, nonce_dec);    SET header =        [....]    SET nonce_dec = nonce_dec + 1;END WHILE;
</span></span></code></pre></div><h2 id="adding-the-second-loop">Adding the second loop</h2>
<p>Now as we already learned, it may not be enough to test 2⁶⁴ possible numbers to find a fitting nonce. That’s why we’re going to add another loop to use the <strong>version field</strong> for some additional search space. Unfortunately this is a little more complicated. So, what do we need? Binary numbers!</p>
<p>This is the version for our famous block # 727155. Again we’re using this as an example. If you’d like to mine a new block, you need to adjust at least the soft fork part.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">0x20002000
</span></span></code></pre></div><p>In binary that is:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">00110100010011011100000000000100
</span></span></code></pre></div><p>The last 13 bits are representing the soft work readiness. That’s a given value. The version is pre-defined to be (at least) 001 for the first 3 bits. We’re taking the easy route here and are going to declare this in binary already. The remaining 16 bits are up and ready to be iterated through:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">DECLARE soft_forks STRING DEFAULT &#34;0000000000000&#34;;DECLARE version_roller INT64 DEFAULT 1;DECLARE version_roller_bin STRING;DECLARE version_bits STRING DEFAULT &#34;001&#34;;
</span></span></code></pre></div><blockquote>
<p>Please note, that I’m setting the version_roller to 1— that’s the one used in the block we are working on. Again, this is to speed up the demonstration here.</p></blockquote>
<p>We will use an additional outer loop to iterate over the version roller. The iteration comes at the end, at the beginning of the loop we need to process the decimal value to get 16 bits out from it and press it into the hexadecimal format:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">main_loop: WHILE true DO        SET version_roller_bin = SUBSTR(bqutil.fn.to_binary(version_roller), -16);    SET version = FORMAT(&#34;%X&#34;, bqutil.fn.from_binary(CONCAT(version_bits, version_roller_bin, soft_forks)));WHILE true DO        [....]    END WHILE;    SET version_roller = version_roller + 1;END WHILE;
</span></span></code></pre></div><p>Take care of the label I set here to address the loop: <strong>MAIN_LOOP</strong>. I <strong>have to reference</strong> the outer loop when breaking from inside the inner loop:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    [...]    BREAK main_loop;    [...]
</span></span></code></pre></div><p>Check out the full script in final part.</p>
<h2 id="congratulations-and-conclusion">Congratulations and Conclusion</h2>
<p>Basically that’s it. That’s how the full script should look like this (<a href="https://gist.github.com/nickyreinert/2d0936922bbf242429c21af3c5b6866b">gist.github.com</a>). Feel free to increase the value for <strong>max_iterations</strong> and set the starting value for <strong>nonce_dec</strong> to 0 and see how long it will take Google to find the correct nonce.</p>
<p>This is a lot of weird SQL stuff and far away from SELECT * FROM table. Is it worth it? Well, I set the starting nonce to 3370194460 and executed the script.</p>
<p>Spoiler Alert: After 10 minutes I stopped the query. Another approach (see below) seems way faster, though it’s a cheating with the actual calculations.</p>
<h2 id="disclaimer">Disclaimer</h2>
<p>I will not loose much words about <strong>Proof of Work.</strong> The process itself is sophisticated and somehow thoughtfull… as well as a little weird. But above all it’s also a huge wast of energy and there are better ways to achieve the same outcome. I’d like to end with a quote from another author on Medium who said:</p>
<blockquote>
<p>You’ve got to wonder what we’d achieve if we used even a fraction of this computing power for medical research instead…</p></blockquote>
<h1 id="additional-ressources">Additional ressources</h1>
<p><a href="https://medium.com/fcats-blockchain-incubator/understanding-the-bitcoin-blockchain-header-a2b0db06b515">This is a pretty good and helpful medium article</a> about the Blockchain header by RJ Rybarczyk. <a href="https://learnmeabitcoin.com/explorer/block/bits/170a40c0">This is a website</a> that provides a lot of technical background information as well as tools to calculate hashes or browse the Blockchain.</p>
<p>A couple of years ago Uri Shaked also <a href="https://urish.medium.com/thank-you-google-how-to-mine-bitcoin-on-googles-bigquery-1c8e17b04e62">wrote about this topic</a>. I stumbled over his article while doing research. But he was pursuing a different approach. First of all he was using a <strong>random feature</strong> to find a fitting nonce. I also considered this before, but as you cannot ensure to ge the same random value twice, you will waste a lot of time (he actually calculated the same nonce within 20 seconds, which still is faster than my approach). Besides that he was using sub-queries to create temporary tables filled with the nonce.</p>

        
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      <category>anleitungen</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>How to sinmulate proof of work in SQL and BigQuery - Project</media:title>
      </media:content>
      
      
      
      
      
      
      
    </item><item>
      <title>The Thin Line Between Scam and Ambitious Entrepreneurship</title>
      <link>http://localhost:1313/en/blog/2025/08/12/the-thin-line-between-scam-and-ambitious-entrepreneurship/</link>
      <pubDate>Tue, 12 Aug 2025 19:00:00 +0000</pubDate>
      <author></author>
      <guid>http://localhost:1313/en/blog/2025/08/12/the-thin-line-between-scam-and-ambitious-entrepreneurship/</guid>
      <description>German Version
I&rsquo;m not a fan of mobile games Not because I don&rsquo;t like playing, but because a questionable business model has developed around mobile …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Not because I don&#39;t like playing, but because a questionable business model has developed around mobile games, making it very difficult to find the true gems.&#39; reading_time: 23 content_type: &#39;analysis</p>
          
          
          <p><strong>Hauptthemen:</strong> Python, Web, Mac, Git, Mobile, Ai, Automation</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><em><a href="https://nickyreinert.de/2025/2025-08-06-schmaler-grat-scam-und-unternehmertum/">German Version</a></em></p>
<h2 id="im-not-a-fan-of-mobile-games">I&rsquo;m not a fan of mobile games</h2>
<p>Not because I don&rsquo;t like playing, but because a questionable business model has developed around mobile games, making it very difficult to find the true gems. It seems like it&rsquo;s more about selling ad space or generating in-app purchases with simple game mechanics. Of course, there are exceptions, but they get lost in the sheer volume of offerings.</p>
<p>I recently stumbled upon one of these games by chance, and it perfectly represents these accusations: <strong><a href="https://play.google.com/store/apps/details?id=com.EternalStudio.DozerDemolish&amp;hl=en_US">Dozer Demolish</a></strong>.</p>
<p>On Google Play, the game is advertised <strong>without an age rating</strong>, while on Apple&rsquo;s App Store, it&rsquo;s rated <strong>4 years and up</strong>. The Android store mentions over <strong>10 million downloads</strong>, <a href="https://www.eternalgamestudio.com/">according to developer Eternal Studio, it&rsquo;s more than 15 million</a>.</p>
<p align="center">
  <a href="screenshot-playstore-usk.png" target="_blank" style="margin: 0 auto; display: block;">
    <img src="screenshot-playstore-usk.png" alt="alt text" width="500"/>
  </a>
</p>
<center><small>No age restriction and in-game purchases. Sounds like a contradiction *cough* legal capacity *cough*</small></center>
<br />
<br />
<p>The game is distributed by <strong><a href="https://www.homagames.com/">HOMA</a></strong>, which also contracts other developers. Headquarters: France. So within the jurisdiction of the GDPR. The motto of <strong>HOMA</strong> is:</p>
<p align="center">
  <a href="https://play.google.com/store/apps/dev?id=4656343638685426415&hl=en&gl=US" target="_blank" style="margin: 0 auto; display: block;">
    <img src="screenshot-playstore-motto.png" alt="HOMA Motto - Source Android Play Store https://play.google.com/store/apps/dev?id=4656343638685426415&hl=en&gl=US" width="700"/>
  </a>
</p>
<center><small>HOMA Motto - Source Android Play Store <a href="https://play.google.com/store/apps/dev?id=4656343638685426415&hl=en&gl=US">https://play.google.com/store/apps/dev?id=4656343638685426415&hl=en&gl=US</a></small></center>
<br />
<br />
<p>&ldquo;Amazing Content&rdquo; - Well, <em>let&rsquo;s see</em>!</p>
<p>Games in the &ldquo;Convenience Gaming&rdquo; category follow the same principle: There&rsquo;s hardly any depth, the rules are quickly explained, the controls are intuitive, and often not much skill or thought is required. Everything is geared towards short-term dopamine release. This doesn&rsquo;t have to be derogatory; it&rsquo;s a form of entertainment that attracts millions of players.</p>
<p>The gameplay of <strong>Dozer Demolish</strong> adheres to the industry&rsquo;s principle. You <em>roam</em> with heavy machinery across changing landscapes, destroy buildings, collect their remains, and earn money to buy new vehicles or upgrade existing ones. One-handed and on the side. On the toilet. In bed. On the train. During meetings. &ldquo;Convenience Gaming,&rdquo; indeed.</p>
<h1 id="the-thing-about-data-privacy">The thing about data privacy</h1>
<p>So far, so unspectacular. Things get interesting, provided you have a penchant for such details, when it comes to <strong>data privacy</strong>.</p>
<p align="center">
  <a href="meme-privacy.png" target="_blank" style="margin: 0 auto; display: block;">
    <img src="meme-privacy.png" alt="alt text" width="500"/>
  </a>
</p>
<br />
<br />
<p>According to its self-disclosure, the app shares data in the following categories with other companies:</p>
<ul>
<li>Financial data</li>
<li>Personal data such as email addresses and user IDs</li>
<li>App activities</li>
</ul>
<p>Not inherently reprehensible, as this makes sense for in-app purchases and advertising.</p>
<p>But location data? (Hint: Location-based advertising&hellip;)</p>
<p align="center">
  <a href="screenshot-playstore-dataprivacy.png" target="_blank" style="margin: 0 auto; display: block;">
    <img src="screenshot-playstore-dataprivacy.png" alt="alt text" width="250"/>
  </a>
</p>
<center><small>Location data. Why?</small></center>
<br />
<br />
<p>Problematic. But that&rsquo;s not all. Under security measures, it states:</p>
<blockquote>
<p>Data is not encrypted.
Data cannot be deleted.</p></blockquote>
<p>Okay. At least honest, if not up-to-date. On Google&rsquo;s Play Store, the developer&rsquo;s privacy policy is referenced, which hardly deserves the name &ldquo;privacy policy.&rdquo; A Google email address, a paragraph on Google Analytics, and then a note on &ldquo;minors&rdquo;:</p>
<p align="center">
  <a href="screenshot-eternal-dataprivacy.png" target="_blank" style="margin: 0 auto; display: block;">
    <img src="screenshot-eternal-dataprivacy.png" alt="alt text" width="700"/>
  </a>
</p>
<center><small>The privacy policy of Eternal Studio</small></center>
<br />
<br />
<blockquote>
<p>&ldquo;Eternal Studio does not knowingly collect personal information from children under the age of 13.&rdquo;</p></blockquote>
<p>Of course not. Too bad the game is offered without an age rating.</p>
<blockquote>
<p>&ldquo;If Eternal Studio learns that Eternal Studio has inadvertently gathered personal information from children under 13 years of age, Eternal Studio will take reasonable measures to promptly delete such personal data from Eternal Studio’s records.&rdquo;</p></blockquote>
<p>&ldquo;inadvertently&rdquo; - that sounds a bit like shirking responsibility.</p>
<p>This is only surpassed by the following note:</p>
<blockquote>
<p>&ldquo;If you are under the age of 13 or a minor in your country of residence, please ask your legal guardian’s permission to access and use our services.&rdquo;</p></blockquote>
<p>So the 4-year-old child is supposed to read the English privacy policy and then ask their parents for permission. Hilarious. Reminder: The game has an enormous reach with 15 million downloads. A bit more professionalism isn&rsquo;t too much to ask, is it?</p>
<p>Needless to say, the site provides no information about who you&rsquo;re actually dealing with. According to the &ldquo;Impressum,&rdquo; you can contact them via <em><a href="mailto:xxx@eternalgamestudio.com">xxx@eternalgamestudio.com</a></em>. In the privacy policy itself, it&rsquo;s <em><a href="mailto:xxx@gmail.com">xxx@gmail.com</a></em>. <a href="https://www.facebook.com/EternalApps/about_contact_and_basic_info">The Facebook page</a> refers to <em><a href="mailto:xxx@gmail.com">xxx@gmail.com</a></em>. <a href="https://x.com/eternalgamebros">On X/Twitter</a>, you at least learn that the developer studio is presumably based in Michigan (USA).</p>
<p><em>(Email addresses anonymized, although they are publicly accessible, but who knows&hellip;)</em></p>
<p>Enough complaining; perhaps — and I say this quite sincerely — the developer was surprised by the success, and I just happened to stumble upon a rare exception. Nevertheless, the game is backed by a fairly large publisher. A product with 15 million users and such an aggressive advertising strategy deserves closer scrutiny.</p>
<p>(The Apple App Store, by the way, refers to <a href="https://www.homagames.com/privacy-policy">the publisher&rsquo;s privacy policy</a>. It&rsquo;s casually written and quite detailed.)</p>
<p>At first glance, formal data privacy already fails. What about the app itself?</p>
<p>It starts with the usual consent dialog. Here, you can either accept everything unseen or influence the collected data via detailed selection. Problematic: There&rsquo;s no button to &ldquo;reject all.&rdquo; The detailed selection is hidden in a second view and is not immediately accessible.</p>
<p>The list of technologies used is impressively long for a game. <strong>69 vendors</strong> measure ad performance, 24 measure app performance. 33 providers analyze target groups, 57 improve services. 7 providers handle targeting.</p>
<p>Each category is optimistically declared as &ldquo;legitimate interest.&rdquo; Reminder: The game is offered without an age rating. For minors, special protections apply under the GDPR.</p>
<p>Even the individual processing categories must be manually deselected. Needless to say, the explanations are anything but understandable for a normal user, let alone a minor. (Incidentally, the industry association <strong>IAB</strong> has done an excellent job here, selling this kind of overspecification called <strong>TCF</strong> (Transparency and Consent Framework) as &ldquo;transparency.&rdquo;)</p>
<div align="center">
<table>
  <tr>
    <td align="center">
      <a href="screenshot-consent-dialog-1.png" target="_blank">
        <img src="screenshot-consent-dialog-1.png" alt="alt text" width="250"/>
      </a>
      <br />
      <small>Legitimate interest? Please manually deselect!</small>
    </td>
    <td align="center">
      <a href="screenshot-consent-dialog-2.png" target="_blank">
        <img src="screenshot-consent-dialog-2.png" alt="alt text" width="250"/>
      </a>
      <br />
      <small>Transparency doesn't mean comprehensibility</small>
    </td>
  </tr>
</table>
</div>
<br />
<br />
<p>But that&rsquo;s not all: In the app, you can&rsquo;t correct your selection afterward; there&rsquo;s simply no menu option for it. This is also hardly compatible with GDPR requirements.</p>
<p>The app doesn&rsquo;t leave the best impression regarding data privacy. But that&rsquo;s not all, let alone what makes a game.</p>
<blockquote>
<p>(And here we are again with my general criticism of data privacy: Most users are probably more annoyed by the endless consent banners than feeling informed. Complete data collection avoidance isn&rsquo;t feasible either; as a data analyst, I&rsquo;m aware of this. But smaller studios and companies are likely overwhelmed by the legal requirements.)</p></blockquote>
<p>Never mind. What about the content?</p>
<h2 id="the-thing-about-advertising">The thing about advertising</h2>
<p>As mentioned above, a business model has established itself here where free games seemingly only serve as platforms to push advertising onto devices with — attention, subjective exaggeration for dramatic effect — a blatant lack of subtlety. It reminds me of a not-so-famous quote <a href="https://nickyreinert.de/2020/2020-10-24-marketing-killed-the-internet-star/">that I once fittingly recited</a>:</p>
<blockquote>
<p>Journalistic content is the vehicle to capture the audience&rsquo;s attention for advertising content.</p>
<p><em>Springer lawyers in 2015</em></p></blockquote>
<p>And here, it seems no different. From a business perspective, I respect the success. From a user&rsquo;s perspective, this practice is only a hair away from being a scam.</p>
<p>The game is offered for free. For <strong>€1.99</strong>, you can purchase an ad-free package. This is at least misleading — more on that shortly — and technically poorly implemented:</p>
<p>I bought the package on one device, but on a second device, ad banners still appear at the bottom of the game.</p>
<p align="center">
  <a href="screenshot-dozer-unlocked.png" target="_blank" style="margin: 0 auto; display: block;">
    <img src="screenshot-dozer-unlocked.png" alt="alt text" width="250"/>
  </a>
</p>
<center><small>That works well with the ad-free package.</small></center>
<br />
<br />
<p>The entire advertising isn&rsquo;t even disabled. You get <em>three dozen</em> &ldquo;upgrade tickets,&rdquo; which finance certain in-game actions. After about 1 hour of gameplay, these are already used up. Then, upgrades and other game mechanics sporadically but also with intrusive regularity require ad videos.</p>
<p>And these are intense. We&rsquo;re not talking about small 30-second inserts like on YouTube.</p>
<p>&ldquo;Dozer Demolish&rdquo; usually plays two spots, totaling almost 2 minutes. Some of the advertised games can even be played directly for about 15 seconds. Can you close the ad overlay now? No. First, you&rsquo;re taken to the Play Store. From there, you return to the ad overlay, with a final ad message that can now be closed.</p>
<p>Wow.</p>
<div align="center">
<table>
  <tr>
    <td align="center">
      <a href="screenshot-dozer-temu-ad.png" target="_blank">
        <img src="screenshot-dozer-temu-ad.png" alt="The first insert usually lasts 60 seconds." width="250"/>
      </a>
      <br />
      <small>The first insert usually lasts 60 seconds.</small>
    </td>
    <td align="center">
      <a href="screenshot-dozer-lastwar-ad.png" target="_blank">
        <img src="screenshot-dozer-lastwar-ad.png" alt="Then another one, about the same length." width="250"/>
      </a>
      <br />
      <small>Then another one, about the same length.</small>
    </td>
  </tr>
</table>
</div>
<p>Since basic game mechanics are affected by these inserts, you easily spend 2 minutes playing and 2 minutes under ad pressure. If you don&rsquo;t want this, you can replenish the upgrade ticket quota. For example, 10 tickets cost €6.99. This corresponds to about 10 minutes of gameplay under normal conditions. The most expensive package costs €9.99 and contains 60 tickets.</p>
<div align="center">
<table>
  <tr>
    <td align="center">
      <a href="screenshot-dozer-pricelist.png" target="_blank">
        <img src="screenshot-dozer-pricelist.png" alt="In-app purchases in 'Dozer Demolish'" width="220"/>
      </a>
      <br />
      <small>In-app purchases in "Dozer Demolish" (Source: <a href="https://apps.apple.com/de/app/dozer-demolish-stadtabriss/id6447895913">iOS App Store</a>)</small>
    </td>
    <td align="center">
      <a href="screenshot-dozer-store-1.png" target="_blank">
        <img src="screenshot-dozer-store-1.png" alt='"Best Value": 60 tickets for €9.99' width="220"/>
      </a>
      <br />
      <small>The best value: 60 tickets for €9.99—2 minutes of your life cost you €0.16.</small>
    </td>
    <td align="center">
      <a href="screenshot-dozer-store-2.png" target="_blank">
        <img src="screenshot-dozer-store-2.png" alt="Special offer! €6.99 for 10 tickets" width="220"/>
      </a>
      <br />
      <small>Special offer! €6.99 for 10 tickets and some upgrades. The price of your life increases to €0.69!</small>
    </td>
  </tr>
</table>
</div>
<h2 id="whats-the-problem">What&rsquo;s the problem?</h2>
<p>&ldquo;Well, everyone can decide for themselves!&rdquo; one might say. What&rsquo;s the problem? As mentioned, it&rsquo;s a brilliant business model. The problem is primarily the age rating and the handling of data privacy requirements. Secondly, from a personal perspective, the excessive coupling of game mechanics to ad delivery.</p>
<p><strong>Do you want to develop games or deliver ads?</strong></p>
<p align="center">
  <a href="meme-wo-problem.png" target="_blank" style="margin: 0 auto; display: block;">
    <img src="meme-wo-problem.png" alt="alt text" width="500"/>
  </a>
</p>
<br />
<br />
<h3 id="problem-1-legal-capacity-of-minors">Problem 1: Legal capacity of minors</h3>
<p>With an <strong>age rating</strong> of 0 (or 4 years on iOS), this game is accessible to a group of people who, at least under German law, are not legally capable. Only at 7 years old are they partially legally capable and can make <strong>small purchases</strong> (&ldquo;pocket money clause&rdquo;) without parental consent. How does this align with the sometimes very expensive in-app purchases?</p>
<p>Google describes the <strong>age rating</strong> of 0 in two different ways:</p>
<p align="center">
  <a href="usk-0-description-long.png" target="_blank" style="margin: 0 auto; display: block;">
    <img src="usk-0-description-long.png" alt="alt text" width="500"/>
  </a>
</p> 
<center><small>USK 0 - Long description source: https://play.google.com/store/apps/details?id=com.farmadventure.global</small></center>
<br />
<br />
<p>or way less informative:</p>
<p align="center">
  <a href="usk-0-description-brief.png" target="_blank" style="margin: 0 auto; display: block;">
    <img src="usk-0-description-brief.png" alt="alt text" width="500"/>
  </a>
</p>
<center><small>USK 0 - Brief description source: https://play.google.com/store/apps/details?id=com.farmadventure.global</small></center>
<br />
<br />
<h3 id="problem-2-dark-patterns">Problem 2: Dark patterns</h3>
<p>The game uses <strong>dark patterns</strong> to place ads, such as when transitioning to a new day. A large green button starts an ad block and rewards with in-game currency. The small text below skips it. Many upgrades are advertised as &ldquo;free,&rdquo; but they usually involve an ad insert. Does only my moral compass sound the alarm when this practice is applied to minors?</p>
<div align="center">
<table>
  <tr>
    <td align="center">
      <a href="screenshot-dozer-earned.png" target="_blank">
        <img src="screenshot-dozer-earned.png" alt="Collect Double" width="250"/>
      </a>
      <br />
      <small>Please press the big green button; it won't be to your disadvantage!</small>
    </td>
    <td align="center">
      <a href="screenshot-dozer-upgrade.png" target="_blank">
        <img src="screenshot-dozer-upgrade.png" alt="alt text" width="250"/>
      </a>
      <br />
      <small>Behind this button is an ad insert. Would you have recognized it?</small>
    </td>
  </tr>
</table>
</div>
<h3 id="problem-3-accessibility-of-games-with-higher-age-ratings">Problem 3: Accessibility of games with higher age ratings</h3>
<p>The ads are not only intrusive; they are often far from age-appropriate! This is especially problematic when a minor has the opportunity (not to say &ldquo;is forced&rdquo;) to test a game for 15 seconds, and the advertised game has a different age rating! Imagine going to the cinema with your child to watch Cars 7, and before the movie, there&rsquo;s a trailer for Texas Chainsaw Massacre.</p>
<div align="center">
<table>
  <tr>
    <td align="center">
      <img src="screenshot-dozer-kingshot-ad.png" alt="Test game" width="220"/>
      <br />
      <small>Hey kid, still unsure? Test our game now. Or resist the temptation for 15 seconds.</small>
    </td>
    <td align="center">
      <img src="screenshot-dozer-kingshot-store.png" alt="Rated 12 years and up" width="220"/>
      <br />
      <small>The game is rated 12 years and up. But you don't have to tell your parents.</small>
    </td>
    <td align="center">
      <img src="screenshot-dozer-tophereos-ad.png" alt="Ad break test" width="220"/>
      <br />
      <small>This game can also be tested during the ad break.</small>
    </td>
  </tr>
  <tr>
    <td align="center">
      <img src="screenshot-dozer-tophereos-store.png" alt="Rated 12 years and up" width="220"/>
      <br />
      <small>Rated 12 years and up here as well.</small>
    </td>
    <td align="center">
      <img src="screenshot-dozer-lastwar-ad-1.png" alt="Shooting" width="220"/>
      <br />
      <small>Every 4-year-old loves it. Shooting.</small>
    </td>
    <td align="center">
      <img src="screenshot-dozer-lastwar-ad-2.png" alt="Shooting yourself" width="220"/>
      <br />
      <small>And so it's not just watching: Shooting yourself makes you want more!</small>
    </td>
  </tr>
  <tr>
    <td align="center">
      <img src="screenshot-dozer-lastwar-store.png" alt="Rated 12 years and up" width="220"/>
      <br />
      <small>Rated 12 years and up here as well.</small>
    </td>
    <td align="center">
      <img src="screenshot-dozer-monopoly-ad.png" alt="Monopoly clone" width="220"/>
      <br />
      <small>A Monopoly clone is also advertised. Rating here: 16 years</small>
    </td>
    <td align="center">
      <img src="screenshot-dozer-zombie-ad.png" alt="Zombie game" width="220"/>
      <br />
      <small>Can't be missing as ad entertainment: A zombie game, rated 16+. Sweet dreams tonight, little prince.</small>
    </td>
  </tr>
</table>
</div>
<p>Guess why Monopoly is rated 16 years and up? Not because of violence, apparently, but because of incentives to buy and in-game purchases.</p>
<p align="center">
  <a href="monopoly-rating.png" target="_blank" style="margin: 0 auto; display: block;">
    <img src="monopoly-rating.png" alt="alt text" width="250"/>
  </a>
</p>
<center><small>Monopoly clone with in-game purchases. Rated 16 years and up.</small></center>
<br />
<br />
<h2 id="sad-isolated-case">Sad isolated case?</h2>
<p>I stumbled upon Dozer Demolish by chance. Homa currently offers 50 games in the Google Play Store. I looked at four other games.</p>
<p><a href="https://play.google.com/store/apps/details?id=com.homagames.studio.allinhole&amp;hl=gsw">All in Hole!</a>. Here, ad delivery is much less aggressive. After 15 minutes of gameplay, there were no ads, not even as an overlay at the bottom of the screen. But the in-game purchases are hefty. The largest package costs €99. On consoles &amp; PC, you get high-quality triple-A titles for that. Interesting: The <strong>age rating is 12 years</strong>. That doesn&rsquo;t really make sense, as I didn&rsquo;t see any ads here and the gameplay is anything but &ldquo;not suitable for minors.&rdquo;</p>
<p align="center">
  <a href="screenshot-allinhole-prices.jpg" target="_blank" style="margin: 0 auto; display: block;">
    <img src="screenshot-allinhole-prices.jpg" alt="alt text" width="250"/>
  </a>
</p>
<center><small>€99.99 - that's hardly justifiable by development costs.
</small></center>
<br />
<br />
<p><a href="https://play.google.com/store/apps/details?id=com.happykamp.aquariumland">Aquarium Land</a> (from 0 years, 50 million downloads). Here, the first ad appears after 5 minutes. Again, a game from another age category is advertised.</p>
<p><a href="https://play.google.com/store/apps/details?id=com.cosmo.cube.blast.adventure.free&amp;hl=de">Cube Blast Journey</a> (0 years, 1 million): This game comes without a consent dialog. That&rsquo;s unusual. And indeed: monitoring diligently records requests, some of which clearly count as tracking and analytics requests. For example, those to gameanalytics.com, amazon-adsystem.com, applovin.com, adjust.com, or doubleclick.net.</p>
<p align="center">
  <a href="screenshot-cube-requests.png" target="_blank" style="margin: 0 auto; display: block;">
    <img src="screenshot-cube-requests.png" alt="alt text" width="250"/>
  </a>
</p>
<center><small>Tracking and analytics requests in Cube Blaster Journey</small></center>
<br />
<br />
<p><a href="https://play.google.com/store/apps/details?id=com.homa.free.solitaire.card.game&amp;hl=de">Solitaire Klondike Classic</a> (0 years, &gt;5 million). The game is distributed by Homa, but after a short time, you&rsquo;re referred in broken German to &ldquo;<a href="https://play.google.com/store/apps/details?id=solitaire.klondike.classic.card.games">the new version</a> (0 years, &gt;1 million),&rdquo; distributed by <strong><a href="https://www.freelaxgame.com/about.html">Freelax</a></strong>. Also, due to the banner at the top of the screen, it&rsquo;s not really clear whether this is a legitimate reference or simply advertising.</p>
<p align="center">
  <a href="screenshot-solitaire-solitaire-ad.jpg" target="_blank" style="margin: 0 auto; display: block;">
    <img src="screenshot-solitaire-solitaire-ad.jpg" alt="alt text" width="250"/>
  </a>
</p>
<center><small>Strange way to offer an "update"</small></center>
<br />
<br />
<p>In Solitaire Classic, right after the familiar TCF consent dialog, there&rsquo;s another consent request — this time preselected. Since GDPR, this is no longer permitted, as it doesn&rsquo;t constitute &ldquo;explicit consent.&rdquo;</p>
<p align="center">
  <a href="screenshot-solitaire-consent.jpg" target="_blank" style="margin: 0 auto; display: block;">
    <img src="screenshot-solitaire-consent.jpg" alt="alt text" width="250"/>
  </a>
</p>
<center><small>Consent preselected - that's not GDPR-compliant.</small></center>
<br />
<br />
<p>The supposed successor is even bolder regarding consent. Here, starting the game is tied to consent—which is also legally questionable.</p>
<p align="center">
  <a href="screenshot-solitaire-start.jpg" target="_blank" style="margin: 0 auto; display: block;">
    <img src="screenshot-solitaire-start.jpg" alt="alt text" width="250"/>
  </a>
</p>
<center><small>Even less GDPR-compliant: Starting the game is tied to consent.</small></center>
<br />
<br />
<p><a href="https://play.google.com/store/apps/details?id=com.germanicus.cmioo&amp;hl=de">Cat &amp; Mouse</a> (6 years, 10 million). Here, too, ads are actively displayed, referring to apps and games that are not age-appropriate.</p>
<h2 id="what-about-other-publishers">What about other publishers?</h2>
<p>Remarkably, the games advertised that I mentioned previously do not pursue a comparable advertising strategy, in fact some <strong>do not even offer in-game ads</strong> at all. Which doesn&rsquo;t mean that the publisher behind them doesn&rsquo;t have assets in stock following the same principle. Let&rsquo;s look at <a href="https://play.google.com/store/apps/dev?id=6832375891198423999">Century Games PTE. LTD.</a>, the publisher behind <strong>Kingshot</strong>. They have 23 games in their library, of which 12 have in-game ads (according to their Google Play Store listing), 5 with no age restriction. I checked these three:</p>
<p><a href="https://play.google.com/store/apps/details?id=com.fatmerge.global">Tasty Travels: Merge Game</a> comes without a valid consent dialog, but according to their data privacy policy collects data for several purposes, including marketing. Eventually, after playing for a while, I was presented a playable demo for <a href="https://play.google.com/store/apps/details?id=com.gof.global">Whiteout Survival</a> (<a href="https://www.centurygames.com/">Century Game PTE LTD</a>, age rating 12+).</p>
<div align="center">
<table>
  <tr>
    <td align="center">
      <a href="free-energy.png" target="_blank">
        <img src="free-energy.png" alt="alt text" width="250"/>
      </a>
      <br />
      <small>Playable ad for Family Farm Adventure</small>
    </td>
    <td align="center">
      <a href="whiteout.survival.png" target="_blank">
        <img src="whiteout.survival.png" alt="alt text" width="250"/>
      </a>
      <br />
      <small>Playable ad for Idle Courier</small>
    </td>
  </tr>
</table>
</div>
<p><a href="https://play.google.com/store/apps/details?id=com.farmadventure.global">Family Farm Adventure</a> has a questionable consent dialog, like the one that Dozer Demolish offers. While I didn&rsquo;t notice any ads at all, the prices are even worse than experienced before. 120 Euros for an in-game package - without knowing how long this lasts, this is clearly nothing you want to offer to minors.</p>
<p align="center">
  <a href="family-farm-adventure.png" target="_blank" style="margin: 0 auto; display: block;">
    <img src="family-farm-adventure.png" alt="alt text" width="250"/>
  </a>
</p>
<center><small>Price table for Family Farm Adventure</small></center>
<br />
<br />
<p><a href="https://play.google.com/store/apps/details?id=com.centurygames.idlecourier">Idle Courier</a> also comes with this not-so-really-transparent consent dialog and the &ldquo;coupled consent&rdquo; (if you go on, you accept our privacy policy). In this game it only took me 2 minutes to face the first playable ad for Kingshot (rating 12 years and up).</p>
<p><a href="https://play.google.com/store/apps/developer?id=RiverGame">River Game</a> and <a href="https://play.google.com/store/apps/developer?id=FUNFLY&#43;PTE.&#43;LTD.">Funfly PTE</a> do not offer any games with an age rating of 0 years. <a href="https://play.google.com/store/apps/developer?id=FunPlus&#43;International&#43;AG">FunPlus International AG</a> has 15 games in stock. All of them with age ratings between 12 and 16 years. <a href="https://play.google.com/store/apps/dev?id=9028773071151690823">Scopely</a> has just one game with age rating of 0, but without ads.</p>
<h2 id="conclusion">Conclusion?</h2>
<p>The games mentioned pursue their advertising goals far less aggressively than &ldquo;Dozer Demolish&rdquo;, but the delivery also seems to suffer from the same problem: Although a certain age restriction is given, ads for games for older ages are displayed. And not only that, they can even be tried out directly.</p>
<p>Now, one can argue whether 4-year-old children should even have access to tablets and smartphones to play such games. But that&rsquo;s a pedagogical question. Ultimately, the games are distributed with a certain age restriction, but still pave the way to content that is not age-appropriate. That&rsquo;s no longer just a pedagogical issue. And I am not even talking about consent dialogs or price ranges way beyond reasonability.</p>
<p>It&rsquo;s remarkable that such successful games fly under the radar. From my own experience, I know that Google at least formally has very strict requirements. Compliance with platform guidelines is (automated?) monitored and enforced with deadlines and the threat of de-publication. That&rsquo;s my impression. Is Google sometimes a bit more lenient because its own revenue depends on advertising income?</p>
<p>Don&rsquo;t get me wrong: Most of the games have quite a high quality, some even with a decent story behind them. It&rsquo;s only fair that the developer or publisher tries to monetize the game to cover development costs. Also, I only stumbled upon Homa by chance, and I don&rsquo;t want to portray the publisher as a black sheep here. But as this is about the youngest target group, lax data privacy practices, ads beyond control and expensive in-game purchases - I think it&rsquo;s worth taking a closer look.</p>
<p>Some games make me wonder: Is it still about delivering good entertainment or just flooding the market with low effort to keep users glued to the device with simple game ideas for as long as possible, in order to show as much advertising as possible? Advertising that is no longer just the blinking banner at the edge of the screen, but interactive content that demands more time than the actual game?</p>
<p>I&rsquo;m not a fan of mobile games. And now you know why.</p>
<h2 id="statement-from-homa-and-google">Statement from Homa and Google</h2>
<p>On 30.07. I asked <strong>Homa</strong> and <strong>Google</strong> for a statement. Homa responded within 2 days and announced that they would address the issue internally. Exemplary, I&rsquo;m curious. Google has not responded so far.</p>

        
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>The Thin Line Between Scam and Ambitious Entrepreneurship - Analysis</media:title>
      </media:content>
      
      
      
      
      
      
      
    </item><item>
      <title>Adobe Launch DTM Naming Conventions</title>
      <link>http://localhost:1313/en/blog/2025/04/01/adobe-launch-dtm-naming-conventions/</link>
      <pubDate>Tue, 01 Apr 2025 12:34:56 +0200</pubDate>
      <author></author>
      <guid>http://localhost:1313/en/blog/2025/04/01/adobe-launch-dtm-naming-conventions/</guid>
      <description>I&rsquo;ve worked with Adobe Tracking Suite (which is Adobe Launch and all it&rsquo;s sibblings) for quite a while and I saw many, some quite chaotic, tracking …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>I&#39;ve worked with Adobe Tracking Suite (which is Adobe Launch and all it&#39;s sibblings) for quite a while and I saw many, some quite chaotic, tracking implementations and tag managers.&#39;ve worked with Adobe Tracking Suite (which is Adobe Launch and all it&#39;s sibblings) for quite a while and I saw many...</p>
          
          
          <p><strong>Hauptthemen:</strong> Python, Web, Server, Ai, Automation, Analytics, Design</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>I&rsquo;ve worked with Adobe Tracking Suite (which is Adobe Launch and all it&rsquo;s sibblings) for quite a while and I saw many, some quite chaotic, tracking implementations and tag managers. At some point I felt the need to write down some basic rules to navigate those messy libraries. Hope that helps you, too.</p>
<h1 id="naming-convention">naming convention</h1>
<h2 id="global">Global</h2>
<p>Use a category and naming convention that allows you to track <strong>variables</strong>, <strong>metrics</strong> and <strong>dimension</strong> from the website over the tag manger to the backend of your analytics solution and the dashboard. Every category is also assigned a particular numeric range. This will improve your debugging and troubleshooting process.</p>
<p>The following basic categories should represent your default setup.</p>
<ul>
<li>Page related information (for a single page view, from 1 to 19)</li>
<li>Site related information (for the whole website, from 020 to 39)</li>
<li>User related information (describing the visitor, from 40 to 59)</li>
<li>Misc information (meta information that usually is not part of an analysis or cannot be assigned to the other categories, from 59 to</li>
</ul>
<h2 id="data-layer">Data Layer</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl">	<span class="nx">datalayer</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">		<span class="nx">page</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">			<span class="nx">category</span><span class="o">:</span> 
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">			<span class="nx">name</span><span class="o">:</span> 
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">			<span class="nx">id</span><span class="o">:</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">			<span class="nx">date</span><span class="o">:</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">			<span class="nx">language</span><span class="o">:</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">		<span class="nx">site</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">			<span class="nx">provider</span><span class="o">:</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">			<span class="nx">project</span><span class="o">:</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">			<span class="nx">domain</span><span class="o">:</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">		<span class="nx">user</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">			<span class="nx">status</span><span class="o">:</span> <span class="p">[</span><span class="nx">anonmyous</span><span class="p">,</span> <span class="nx">logged</span><span class="o">-</span><span class="k">in</span><span class="p">],</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">			<span class="nx">behavior</span><span class="o">:</span> <span class="p">[</span><span class="nx">returned</span><span class="p">,</span> <span class="k">new</span><span class="p">],</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">			<span class="nx">language</span><span class="o">:</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">		<span class="nx">misc</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">			<span class="nx">timestamp</span><span class="o">:</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">			<span class="nx">debug</span><span class="o">:</span> 
</span></span><span class="line"><span class="ln">22</span><span class="cl">			<span class="nx">utm</span><span class="o">:</span> 
</span></span><span class="line"><span class="ln">23</span><span class="cl">			<span class="nx">interaction_details</span><span class="o">:</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">	<span class="p">}</span>
</span></span></code></pre></div><blockquote>
<p>&ldquo;I&rsquo;ve implemented a page.category attribute, which I find invaluable. I&rsquo;m surprised so many implementations omit it. It allows for quicker traffic analysis at a higher level than individual pages. Categories help maintain order as pages inevitably become disorganized over time.&rdquo;</p></blockquote>
<h2 id="data-elements">Data Elements</h2>
<p>Your Data Element name should consist the numeric ID referring to the ID of your (Adobe) Analytics-implementation followed by a separator (like the pipe symbol |) and the address within the Data Layer object. Left pad the ID to a length of three to not mix up the &ldquo;order by name&rdquo; feature. The second part is the exact address of the element within the data layer. If this element does not correspond to the Data Layer, use a short description.</p>
<ul>
<li><code>000 | datalayer.page.name</code></li>
<li><code>010 | datalayer.misc.utm</code></li>
</ul>
<h2 id="dimensions">Dimensions</h2>
<p><strong>eVars</strong>, <strong>props</strong> and <strong>events</strong> are identified by a short description build from the category and the name of the information, followed by the name and the kind of variable (<strong>t</strong> for <strong>traffic variables</strong> aka <strong>props</strong>, <strong>c</strong> vor <strong>conversion variables</strong> aka <strong>eVars</strong> and <strong>e</strong> for <strong>event</strong>):</p>
<ul>
<li><code>Page Name (t010)</code></li>
<li><code>User Status (c020)</code></li>
</ul>
<h2 id="events">Events</h2>
<h3 id="naming-rules">Naming Rules</h3>
<p>You wil need three categories of rules, based on the action the perform</p>
<ul>
<li>Page View rule (mostly just one, will trigger a page view)</li>
<li>Click rules (will trigger click events)</li>
<li>Misc rule (will not trigger any call, but prepare tracking or add event listeners)</li>
</ul>
<p>Besides that, you will have three main attributes for page view and click rules that should be available in the component name itself:</p>
<ul>
<li>the according event id (custom success event, even page views can have an event ID)</li>
<li>a brief description</li>
<li>how a rule will be triggered (Page Top, Document Ready, Click, Direct Call, &hellip;)</li>
</ul>
<p>Name your rules using those three information (I prefer the pipe symbol as a separator)</p>
<p><code>[TYPE]|[TRIGGER]|[EVENT ID]|[BRIEF DESCRIPTION]</code></p>
<p>If your rule covers more than one event, post them all as a comma separated list (50,51,52). If there are too many rules, you may overthink your strategy.</p>
<p><strong>For example:</strong></p>
<ul>
<li><code>PV | DocReady | 10 | All Pages</code></li>
<li><code>PV | DocReady | 20 | Search Pages</code></li>
<li><code>CL | Trigger | 50,51,52 | Click</code></li>
<li><code>CL | Click | 60 | Bookmark Page</code></li>
<li><code>MISC | Helper Functions</code></li>
</ul>
<h4 id="reason">Reason</h4>
<p>In the rules overview this helps you to get a good first impression of all existing rules and it allows you to quickly filter the list for wanted rule types. Also, if you lookup a particular event, you quickly see the particular component that somehow works for this event.</p>
<h3 id="naming-components">Naming Components</h3>
<p>A component can be a trigger/event, condition or action. When you create a component, Adobe suggests a default name. Never use this name. The name should start with the exact sequence you defined for the rule name.</p>
<p><strong>For example:</strong></p>
<p>You have a rule to trigger page views:</p>
<p><code>PV | DocReady | 10 | All Pages</code></p>
<p>This is how you name the components of the rule</p>
<ul>
<li>trigger/event: <code>PV | DocReady | 10 | All Pages |  page top</code></li>
<li>condition: <code>PV | DocReady | 10 | All Pages |  user is logged in</code></li>
<li>action: <code>PV | DocReady | 10 | All Pages |  set variables</code></li>
<li>action: <code>PV | DocReady | 10 | All Pages |  send beacon</code></li>
<li>action: <code>PV | DocReady | 10 | All Pages |  clear variables</code></li>
</ul>
<h4 id="reason-1">Reason</h4>
<p>If you look up a particular event ID, you quickly see all according components. If you look up particular variables that belong to different events, you know quickly identify, where this variable is being used, without clicking into the component itself.</p>
<h3 id="error-handling">Error Handling</h3>
<p>If you have custom code, you should always implement try/catch error handling that also refers to the parent rule:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">let rule_name = &#39;`PV | DocReady | 10 | All Pages&#39;;
</span></span><span class="line"><span class="ln">2</span><span class="cl">try {
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl">
</span></span><span class="line"><span class="ln">5</span><span class="cl">} catch (e) {
</span></span><span class="line"><span class="ln">6</span><span class="cl">
</span></span><span class="line"><span class="ln">7</span><span class="cl">	_satellite.logger.error(rule_name + &#39; | &#39; + e);
</span></span><span class="line"><span class="ln">8</span><span class="cl">
</span></span><span class="line"><span class="ln">9</span><span class="cl">}
</span></span></code></pre></div><p>If your code grows and get more complex, you should and can, add multiple try/catch lines into your code. In this case you should add a brief description of the current area to the error message:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln"> 1</span><span class="cl">let rule_name = &#39;`PV | DocReady | 10 | All Pages&#39;;
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">try {
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">} catch (e) {
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">	_satellite.logger.error(rule_name + &#39; | init something | &#39; + e);
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">}
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">try {
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl">
</span></span><span class="line"><span class="ln">15</span><span class="cl">} catch (e) {
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl">	_satellite.logger.error(rule_name + &#39; | calculate another metric | &#39; + e);
</span></span><span class="line"><span class="ln">18</span><span class="cl">
</span></span><span class="line"><span class="ln">19</span><span class="cl">}
</span></span></code></pre></div><h4 id="reason-2">Reason</h4>
<p>Now, if you face errors in the debug console, it&rsquo;s easier to find the source, even if you handle long code blocks. You don&rsquo;t need to click through the stack trace.</p>
<h3 id="logging-and-documentation">Logging and Documentation</h3>
<p>The same goes for logging. Always logg what you are doing. I don&rsquo;t need to mention, how important inline documentation is. ;)
Logging works the same as error handling:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">_satellite.logger.info(rule_name + &#39; | calculate another metric&#39;);
</span></span></code></pre></div><h4 id="reason-3">Reason</h4>
<p>Now, if you filter the browser console, it&rsquo;s easier to get rid of the noise and debug a problem.</p>
<h3 id="inactive-rules-or-data-elements">Inactive Rules or Data Elements</h3>
<p>You will and cannot avoid to have inactive/disabled rules. You should keep that amount low, because they pollute your library. If you have inactive rules, add a prefix &ldquo;INACTIVE&rdquo; to the rules name and, preferably also to it&rsquo;s components.</p>
<h4 id="reason-4">Reason</h4>
<p>If you look up code parts, data elements or anything, the search will return you rule and component names. From those component names you will not see, if a result belongs to an inactive rule. The prefix INACTIVE will help you to quickly identify those results.</p>

        
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Adobe Launch DTM Naming Conventions - Project</media:title>
      </media:content>
      
      
      
      
      
      
      
    </item><item>
      <title>Advent of Code - Day 7 - Missing Operators (C&#43;&#43;)</title>
      <link>http://localhost:1313/en/blog/2024/12/07/advent-of-code-day-7-missing-operators-c-/</link>
      <pubDate>Sat, 07 Dec 2024 12:34:56 +0200</pubDate>
      <author></author>
      <guid>http://localhost:1313/en/blog/2024/12/07/advent-of-code-day-7-missing-operators-c-/</guid>
      <description>(task | solution)
This is the kind of task I really enjoy: finding algorithms for simple mathematical challenges! Let&rsquo;s go—this time in&hellip; C++! …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>([task](https://adventofcode.com/2024/day/7/) | [solution](https://github.com/nickyreinert/aoc2024/tree/main/solutions/day7%20-%20c%2B%2B))&#39; reading_time: 3 content_type: &#39;guide</p>
          
          
          <p><strong>Hauptthemen:</strong> Web, Docker, Git, Ai, Automation, Security, Design</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>(<a href="https://adventofcode.com/2024/day/7/">task</a> | <a href="https://github.com/nickyreinert/aoc2024/tree/main/solutions/day7%20-%20c%2B%2B">solution</a>)</p>
<p>This is the kind of task I really enjoy: finding algorithms for simple mathematical challenges! Let&rsquo;s go—this time in&hellip; C++! (Phew!)</p>
<p>You&rsquo;ll find my <a href="https://github.com/nickyreinert/aoc2024/tree/main/solutions/day7%20-%20c%2B%2B/.devcontainer">.devcontainer and Dockerfile</a> on GitHub. Once again, I don&rsquo;t want to <em>bloat</em> my system with additional compiler setups. It turns out, this is working like a charm.</p>
<h3 id="solution-to-the-first-part">Solution to the First Part</h3>
<p>Well, the idea is quite easy: We got a list of <code>operands</code> and need to find the correct combination of <code>+</code> and <code>*</code> to get a target result. What we basically need to do is: Loop through all given equations, get all possible permutations of <code>+</code> and <code>*</code> for <code>n</code> given operands, and then do the math.</p>
<p>The first tricky thing here is: They are providing a lot of huge numbers. So using 32-bit integers isn&rsquo;t sufficient. You not only need 64-bit integers, but also <strong>unsigned</strong> to work with numbers like <code>175.033.602.122.656</code>.</p>
<p>But they also hid a little pitfall in the list of possible equations: There is <strong>one</strong> (exactly <strong>one</strong>!) duplicate entry. Which makes it hard to find. Would it be ten, 42, or 100 duplicate entries, you would somehow stumble over it. But now it took me a while, and I was close to throwing this task away. I started debugging and I wondered why I am only processing 849 equations instead of 850. At first glance, it looks like one of those classic &ldquo;indexing starts at zero&rdquo; bugs. But then I did, what you usually do when filling dictionaries: You check if the entry you want to add already exists. And it does.</p>
<p>And while this wouldn&rsquo;t lead to a valid equation&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">1095: 8 5 9 3 231
</span></span></code></pre></div><p>This line certainly does</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">1095: 8 1 2 7 95 8 2 7 2 2 99
</span></span></code></pre></div><p>And so I found the missing value for the final result&hellip;</p>
<h3 id="solution-to-the-second-part">Solution to the Second Part</h3>
<p>Well, the second part took me a while because I was somehow trying to build this concatenation part into the current algorithm. We now have three operators, <code>*</code>, <code>+</code>, and <code>||</code> — but the last one should connect two integers.</p>
<p>Eventually, I had my <em>heureka</em> moment: Concatenation could be implemented as a mathematical operation, too.</p>
<p>If the left number is <code>123</code> followed by <code>45</code>, we need to multiply <code>123</code> with <code>10^2</code> and then just add <code>45</code>. Easy math.</p>
<p><strong>Side note</strong>: I was cheating a little. I now know that <code>1095</code> is a duplicated entry, and I know it would lead to a valid result, so I am adding it hard-coded to get the final result.</p>
<h2 id="whats-up-c">Whats up, C++?</h2>
<p><strong>Rating: 6/12 – painful</strong></p>
<p>Well, <code>C++</code> is undoubtedly a powerful language, but for a reason it&rsquo;s not beating all those scripting languages out there. Simple things are complicated because you have to implement them on your own. 5 out of 12 seems to be unfair for such a grown-up programming language, but this is simply my point of view. For me, right now, there&rsquo;s no reason to use C++. Which absolutely does not mean that this language is not important! Nevertheless, using it felt like an adult pro developer. ;)</p>
        
        
      ]]></content:encoded>
      
      
      
      <category>development</category>
      
      <category>aoc2024</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Advent of Code - Day 7 - Missing Operators (C&#43;&#43;) - Guide</media:title>
      </media:content>
      
      
      
      
      
      
      
    </item><item>
      <title>Advent of Code - Day 6 - Walking the map (JavaScript)</title>
      <link>http://localhost:1313/en/blog/2024/12/06/advent-of-code-day-6-walking-the-map-javascript/</link>
      <pubDate>Fri, 06 Dec 2024 12:34:56 +0200</pubDate>
      <author></author>
      <guid>http://localhost:1313/en/blog/2024/12/06/advent-of-code-day-6-walking-the-map-javascript/</guid>
      <description>(task | solution)
This task looks tricky, so I am once again choosing a simple language that I am familiar with: JavaScript (which, by the way, was developed in …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>([task](https://adventofcode.com/2024/day/6/) | [solution](https://github.com/nickyreinert/aoc2024/tree/main/solutions/day6%20-%20javascript))&#39; reading_time: 2 content_type: &#39;tutorial</p>
          
          
          <p><strong>Hauptthemen:</strong> Python, Web, Git, Mobile, Ai, Automation, Security</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>(<a href="https://adventofcode.com/2024/day/6/">task</a> | <a href="https://github.com/nickyreinert/aoc2024/tree/main/solutions/day6%20-%20javascript">solution</a>)</p>
<p>This task looks tricky, so I am once again choosing a simple language that I am familiar with: JavaScript (<a href="https://nickyreinert.medium.com/ne-34-javascript-was-developed-within-10-days-0116b32a38b6">which, by the way, was developed in just 10 days</a>).</p>
<p>With no further ado&hellip;</p>
<h3 id="solution-to-the-first-part">Solution to the First Part</h3>
<p>There&rsquo;s not much to explain. As expected, I just need to move the <code>guard</code> through the maze by increasing and decreasing rows and columns. When I hit an obstacle, I change direction. When I hit the border of the maze, I’ve solved the task. Easy peasy&hellip;</p>
<h3 id="solution-to-the-second-part">Solution to the Second Part</h3>
<p>The second part is kind of tricky. They want us to find positions of additional obstacles that make the maze unsolvable.</p>
<p>Well, there&rsquo;s an easy pattern behind it. You will see it if you visualize it:</p>
<p>An infinite loop occurs when you have four obstacles on each edge of a rectangle, like this:</p>
<p><img src="/en/blog/2024/12/06/advent-of-code-day-6-walking-the-map-javascript/image.png" alt="alt text"></p>
<p>So, all we need to do at every step on our path is to try to draw a rectangle. If it has three existing obstacles, we get one potential solution for an &ldquo;artificial obstacle.</p>
<p>In case you&rsquo;re wondering: I didn&rsquo;t finish the second part. I know the solution approach, but seeing that I am three days behind already, I stopped working on it.</p>
<h2 id="whats-up-javascript">Whats up, JavaScript?</h2>
<p><strong>Rating: 9/12 – god ol&rsquo; frien&rsquo;</strong></p>
<p>Fun Fact: <a href="https://nickyreinert.medium.com/javascript-how-to-find-prime-numbers-fast-cbcf6bd62e3d">I was writing an algorithm</a> to find prime numbers and found out that JavaScript is way faster than Python.</p>
<p>However, I really like JavaScript and often use it when I want to build small <em>proof of concepts</em>. It&rsquo;s quick, runs everywhere (like in every browser), and is quite straightforward.</p>
<p>Despite the second bump in the journey to endless glory, I hope to see you again tomorrow!</p>
        
        
      ]]></content:encoded>
      
      
      
      <category>development</category>
      
      <category>aoc2024</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Advent of Code - Day 6 - Walking the map (JavaScript) - Tutorial</media:title>
      </media:content>
      
      
      
      
      
      
      
    </item><item>
      <title>Advent of Code - Day 5 - Printer Updates (Bash)</title>
      <link>http://localhost:1313/en/blog/2024/12/05/advent-of-code-day-5-printer-updates-bash/</link>
      <pubDate>Thu, 05 Dec 2024 12:34:56 +0200</pubDate>
      <author></author>
      <guid>http://localhost:1313/en/blog/2024/12/05/advent-of-code-day-5-printer-updates-bash/</guid>
      <description>(task | solution)
It&rsquo;s the fifth day of our outrageous adventure, and we are dealing with printer updates. To solve this riddle, we are getting back to …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>([task](https://adventofcode.com/2024/day/5/) | [solution](https://github.com/nickyreinert/aoc2024/blob/main/solutions/day5%20-%20bash/solve.sh))&#39; reading_time: 2 content_type: &#39;guide</p>
          
          
          <p><strong>Hauptthemen:</strong> Python, Web, Git, Ai, Automation, Security, Design</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>(<a href="https://adventofcode.com/2024/day/5/">task</a> | <a href="https://github.com/nickyreinert/aoc2024/blob/main/solutions/day5%20-%20bash/solve.sh">solution</a>)</p>
<p>It&rsquo;s the fifth day of our outrageous adventure, and we are dealing with printer updates. To solve this riddle, we are getting back to the roots and our good ol&rsquo; friend <code>Bash</code>!</p>
<p>The good news here is that I don&rsquo;t need to set up any particular environment because, thankfully, <code>Bash</code> is available on most systems out of the box.</p>
<h3 id="solution-to-the-first-part">Solution to the First Part</h3>
<p>The solution is quite straightforward: We need to read the rules and the updates into an array, loop through all updates, and check if they somehow break the rules. That&rsquo;s nothing too complicated. The only thing that I am probably doing <em>unconventionally</em> is how I check.</p>
<p>I am using a regular expression that is the opposite of the rule. If it matches, I know the update is invalid:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln">1</span><span class="cl"><span class="mf">61.</span><span class="o">*</span><span class="err">?</span><span class="p">(,</span><span class="mi">29</span><span class="p">)(,</span><span class="o">|</span><span class="err">$</span><span class="p">)</span>
</span></span></code></pre></div><p>In this example, <code>29</code> is the actual rule name, and <code>61</code> should come after <code>29</code>. With <code>.*?</code>, I am <em>ungreedy</em> checking for any characters in between, and the closing group just makes sure that after <code>29</code>, there&rsquo;s either another number or the end of the update.</p>
<p>Simple thing.</p>
<h3 id="solution-to-the-second-part">Solution to the Second Part</h3>
<p>The second part looks way easier. They just want us to switch the position of the pages that we identified as erroneous.</p>
<p>Basically, it&rsquo;s just something like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">updates<span class="o">[</span>page_index<span class="o">]=</span><span class="nv">$subsequent_page</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">updates<span class="o">[</span>subsequent_page_index<span class="o">]=</span><span class="nv">$page</span>
</span></span></code></pre></div><p>But&hellip; yeah, that&rsquo;s the first bump in my journey. My code isn&rsquo;t resulting in the correct answer, and it seems like I am missing a detail. To avoid wasting any more time, I&rsquo;ll proceed to the next day&hellip; sorry folks :(</p>
<h2 id="whats-up-bash">Whats up, Bash?</h2>
<p><strong>Rating: 8/12 – weird operators and syntax</strong></p>
<p>The boss of all scripting languages: <code>Bash</code>. I still don&rsquo;t understand most of the syntax rules, but thanks to AI, it&rsquo;s not too hard to get things done in <code>Bash</code>. When working as a sysadmin, I loved automating processes and even building small user interfaces to make life on the command line easier. However, I guess there are better ways for that.</p>
<p>See you next day!</p>
        
        
      ]]></content:encoded>
      
      
      
      <category>development</category>
      
      <category>aoc2024</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Advent of Code - Day 5 - Printer Updates (Bash) - Guide</media:title>
      </media:content>
      
      
      
      
      
      
      
    </item><item>
      <title>Advent of Code - Day 4 - Finding patters (Excel)</title>
      <link>http://localhost:1313/en/blog/2024/12/04/advent-of-code-day-4-finding-patters-excel/</link>
      <pubDate>Wed, 04 Dec 2024 12:34:56 +0200</pubDate>
      <author></author>
      <guid>http://localhost:1313/en/blog/2024/12/04/advent-of-code-day-4-finding-patters-excel/</guid>
      <description>(task)
I Made It to Day 4!
And today&rsquo;s task perfectly fits Excel. Some—if not most—people don&rsquo;t like Excel and would never consider it a serious …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>And today&#39;s task perfectly fits Excel. Some—if not most—people don&#39;t like Excel and would never consider it a serious tool for data analytics, exploration, or even &#39;engineering.&#39; reading_time: 4 content_type: &#34;analysis</p>
          
          
          <p><strong>Hauptthemen:</strong> Python, Web, Database, Mobile, Ai, Automation, Security</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>(<a href="https://adventofcode.com/2024/day/4/">task</a>)</p>
<p>I Made It to Day 4!</p>
<p>And today&rsquo;s task perfectly fits Excel. Some—if not most—people don&rsquo;t like Excel and would never consider it a serious tool for data analytics, exploration, or even &ldquo;engineering.&rdquo; Well, you&rsquo;re wrong about Excel. It&rsquo;s quite powerful if you know how to use it. Let me show you&hellip;</p>
<p>The first part of the task is a kind of word riddle where we have to count occurrences of &ldquo;XMAS&rdquo; in a huge grid of letters. And actually, that&rsquo;s pretty easy with Excel. I&rsquo;d even say it&rsquo;s easier than using a fully-fledged scripting tool.</p>
<h3 id="solution-to-the-first-part">Solution to the First Part</h3>
<p>The input comes as a couple of lines. To make each character addressable, we first need to split each character into its own column. While I could use &ldquo;Text to Columns,&rdquo; the goal is to make this dynamic, so I will utilize a formula:</p>
<p><em>_LENGTH refers to <code>[C2]</code></em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">[D1]=MID(B4;SEQUENCE(1;_LENGTH);1)
</span></span></code></pre></div><p>If you pull this formula down, you get a matrix like this (referring to the example input):</p>
<p><img src="/en/blog/2024/12/04/advent-of-code-day-4-finding-patters-excel/image-1.png" alt="alt text"></p>
<p>The following image shows all possible solutions:</p>
<p><img src="/en/blog/2024/12/04/advent-of-code-day-4-finding-patters-excel/starting_matrix.png" alt="starting matrix"></p>
<p>We start with the most simple solution, where <code>XMAS</code> is <em>plotted</em> from the center to the right. The surrounding <code>if-condition</code> is temporary, only to make the result visible:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">=IF(CONCAT(G21;H21;I21;J21)=&#34;XMAS&#34;;&#34;+&#34;;&#34;&#34;)
</span></span></code></pre></div><p>It&rsquo;s quite easy, right? We copy the formula (not the result of the cell!) to a text editor and modify it to get the other seven directions.</p>
<p>Eventually, you end up with eight lines looking like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">=IF(CONCAT(G21;H21;I21;J21)=&#34;XMAS&#34;;&#34;+&#34;;&#34;&#34;)
</span></span><span class="line"><span class="ln">2</span><span class="cl">=IF(CONCAT(G21;H22;I23;J24)=&#34;XMAS&#34;;&#34;+&#34;;&#34;&#34;)
</span></span><span class="line"><span class="ln">3</span><span class="cl">=IF(CONCAT(G21;G22;G23;G24)=&#34;XMAS&#34;;&#34;+&#34;;&#34;&#34;)
</span></span><span class="line"><span class="ln">4</span><span class="cl">=IF(CONCAT(G21;F22;E23;D24)=&#34;XMAS&#34;;&#34;+&#34;;&#34;&#34;)
</span></span><span class="line"><span class="ln">5</span><span class="cl">=IF(CONCAT(G21;F22;E23;D24)=&#34;XMAS&#34;;&#34;+&#34;;&#34;&#34;)
</span></span><span class="line"><span class="ln">6</span><span class="cl">=IF(CONCAT(G21;F20;E19;D18)=&#34;XMAS&#34;;&#34;+&#34;;&#34;&#34;)
</span></span><span class="line"><span class="ln">7</span><span class="cl">=IF(CONCAT(G21;G20;G19;G18)=&#34;XMAS&#34;;&#34;+&#34;;&#34;&#34;)
</span></span><span class="line"><span class="ln">8</span><span class="cl">=IF(CONCAT(G21;H20;I19;J18)=&#34;XMAS&#34;;&#34;+&#34;;&#34;&#34;)
</span></span></code></pre></div><p>To count the occurrences of all existing solutions, we could either build some kind of <code>LAMBDA</code> function or use a simple trick: We just cast the <code>TRUE</code> or <code>FALSE</code> result to an integer:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">=--(VERKETTEN(G21;H21;I21;J21)=&#34;XMAS&#34;)+
</span></span><span class="line"><span class="ln">2</span><span class="cl">    --(VERKETTEN(G21;H22;I23;J24)=&#34;XMAS&#34;)+
</span></span><span class="line"><span class="ln">3</span><span class="cl">    --(VERKETTEN(G21;G22;G23;G24)=&#34;XMAS&#34;)+
</span></span><span class="line"><span class="ln">4</span><span class="cl">    --(VERKETTEN(G21;F21;E21;D21)=&#34;XMAS&#34;)+
</span></span><span class="line"><span class="ln">5</span><span class="cl">    --(VERKETTEN(G21;F22;E23;D24)=&#34;XMAS&#34;)+
</span></span><span class="line"><span class="ln">6</span><span class="cl">    --(VERKETTEN(G21;F20;E19;D18)=&#34;XMAS&#34;)+
</span></span><span class="line"><span class="ln">7</span><span class="cl">    --(VERKETTEN(G21;G20;G19;G18)=&#34;XMAS&#34;)+
</span></span><span class="line"><span class="ln">8</span><span class="cl">    --(VERKETTEN(G21;H20;I19;J18)=&#34;XMAS&#34;)
</span></span></code></pre></div><p>And now apply it to our testing dataset. Copy the cell (not the formula!) next to our matrix. It should refer to the first column in the first row. Then drag it to the right and down to cover the whole area. You should end up with something like this:</p>
<p><img src="/en/blog/2024/12/04/advent-of-code-day-4-finding-patters-excel/image-5.png" alt="alt text"></p>
<p>The sum of the matrix is 18 — which is exactly the number of <code>XMAS</code> hidden in the test dataset. Now take the actual puzzle input, copy it to your sheet, and apply your <em>magic formula</em> to it. If you want to avoid dragging the formula to the right and down, you could use <code>SEQUENCE</code> again, but we&rsquo;ll save that for later&hellip;</p>
<p>The good thing about the Excel approach is that the second part doesn&rsquo;t make it more complicated. We stick with our strategy and now just look for all possible variations of <code>X-MAS</code>. There are four:</p>
<p><img src="/en/blog/2024/12/04/advent-of-code-day-4-finding-patters-excel/image-6.png" alt="alt text"></p>
<p>And our formula changes a little. We know that <code>A</code> has to be in the middle. We concatenate the surrounding four cells and just test for all four possible combinations of <code>S</code> and <code>M</code>, which leads us to something like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">=--(OR(CONCAT(F210;G209;G211;E211;E209)=&#34;AMSSM&#34;;
</span></span><span class="line"><span class="ln">2</span><span class="cl">    CONCAT(F210;G209;G211;E211;E209)=&#34;ASSMM&#34;;
</span></span><span class="line"><span class="ln">3</span><span class="cl">    CONCAT(F210;G209;G211;E211;E209)=&#34;ASMMS&#34;;
</span></span><span class="line"><span class="ln">4</span><span class="cl">    CONCAT(F210;G209;G211;E211;E209)=&#34;AMMSS&#34;))
</span></span></code></pre></div><p>It&rsquo;s even simpler than the previous one! Again, just make it reference your dataset, and you get the correct result!</p>
<h2 id="whats-up-excel">Whats up, Excel?</h2>
<p><strong>Rating: 10/12 – understimated and powerful</strong></p>
<p>I&rsquo;m not gonna lie: I really love Excel. Since a couple of years, Excel also supports <code>LAMBDA</code>, which allows for more complex calculations and even functional programming. <a href="https://nickyreinert.medium.com/how-to-create-an-animated-ticker-in-excel-without-vba-1c4fdb17a0d4">You can even build an animated ticker in Excel</a> (shameless self-promotion)!</p>
<p>That said&hellip; see you next day!</p>
        
        
      ]]></content:encoded>
      
      
      
      <category>development</category>
      
      <category>aoc2024</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Advent of Code - Day 4 - Finding patters (Excel) - Analysis</media:title>
      </media:content>
      
      
      
      
      
      
      
    </item>
  </channel>
</rss>