<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" 
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Nerd-Enzyklopädie auf Nicky Reinert</title>
    <link>http://localhost:1313/tags/nerd-enzyklop%C3%A4die/</link>
    <description>Blog &amp; Projekte von Nicky Reinert (Institut für digitale Herausforderungen): Webentwicklung &amp; Software Development, SEO &amp; Analytics, Hosting &amp; DevOps, WordPress &amp; Hugo, Tools &amp; Projekte, Datenschutz und digitale Kultur – plus Texte zu KI sowie Autismus &amp; Gesellschaft.</description>
    <generator>Hugo 0.148.2</generator>
    <language>de</language>
    <managingEditor></managingEditor>
    <webMaster></webMaster>
    <copyright></copyright>
    <lastBuildDate>Sat, 19 Apr 2025 12:19:31 +0100</lastBuildDate><atom:link href="http://localhost:1313/tags/nerd-enzyklop%C3%A4die/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>Die Nerd Enzyklopädie 48 - Die dienstälteste Software</title>
      <link>http://localhost:1313/2025/2025-04-20-nerd-enzyklop%C3%A4die-48---alte-software/</link>
      <pubDate>Sat, 19 Apr 2025 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2025/2025-04-20-nerd-enzyklop%C3%A4die-48---alte-software/</guid>
      <description>So ganz genau lässt sich nicht feststellen, welche Software am längsten in Verwendung ist. Wer weiß schon, welches seltsame Konstrukt im Tante-Emma-Laden um die …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Erkundung aus der &#39;Nerd Enzyklopädie&#39; über die dienstältesten Software-Systeme der Welt. Der Artikel stellt das Reservierungssystem SABRE (seit 1960) und das IRS Individual Master File (IMF, ebenfalls seit 1960, in COBOL und IBM Assembler geschrieben) vor und beleuchtet die Herausforderungen bei der Modernisierung solcher komplexen und kritischen Legacy-Systeme.</p>
          
          
          <p><strong>Hauptthemen:</strong> Softwaregeschichte, Legacy-Systeme, COBOL, Assembler, IT-Infrastruktur, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>So ganz genau lässt sich nicht feststellen, welche Software am längsten in Verwendung ist. Wer weiß schon, welches seltsame Konstrukt im Tante-Emma-Laden um die Ecke die antike Kasse antreibt? Man kann sich der Frage aber durchaus annähern und wird auf zwei Programme stoßen, die sich den Thron teilen:
Zunächst wäre da das <a href="https://en.wikipedia.org/wiki/Sabre_%28travel_reservation_system%29">Semi-Automated Business Research Environment (SABRE)</a>, eingeführt 1960. SABRE ist ein Reservierungssystem für so ziemlich alles, was irgendwie mit Reisen zu tun hat, angefangen bei Flügen, Zügen und Hotels bis hin zu Dienstleistungen und sogar Taxis. Entwickelt wurde es von American Airlines.</p>
<p>Der zweite Thronhalter ist das <a href="https://www.guinnessworldrecords.com/world-records/636196-oldest-software-system-in-continuous-use">IRS Individual Master File (kurz IMF)</a>, ebenfalls seit 1960 im Dienst. Das IMF wurde in COBOL und IBM Assembler geschrieben. Allein der Assembler-Teil umfasst 20 Mio. Zeilen. Das IMF ist ein System, das die US-amerikanischen Steuerbehörden einsetzen, um Steuerzahlungen zu verwalten.
In diesem kritischen Bereich sollte eine Modernisierung eigentlich an erster Stelle stehen. Die Komplexität des Steuersystems und fehlendes Budget haben das aber lange verhindert. Im Jahr 2000 begann man mit der Entwicklung des Nachfolgers, der Customer Account Data Engine (CADE). Neun Jahre später wurde mit der Entwicklung eines weiteren Nachfolgers, CADE2, begonnen. Trotzdem konnte beide Systeme das IMF noch nicht vollständig ablösen, da sie jeweils nur einen Teilbereich an Funktionen abdecken. Man geht davon aus, dass das IMF um das Jahr 2030 wohl endlich in den verdienten Ruhestand geschickt wird.</p>
<p><img src="/2025/2025-04-20-nerd-enzyklop%C3%A4die-48---alte-software/image.png" alt="alt text"></p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Software, IT-Geschichte, Nerd-Enzyklopädie, Legacy</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 48 - Die dienstälteste Software - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 47 - Die 500-Meilen-E-Mail</title>
      <link>http://localhost:1313/2025/2025-03-10-nerd-enzyklop%C3%A4die-47---die-500-meilen-e-mail/</link>
      <pubDate>Wed, 02 Apr 2025 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2025/2025-03-10-nerd-enzyklop%C3%A4die-47---die-500-meilen-e-mail/</guid>
      <description>Dieser Moment, in denen man an seiner Wahrnehmung zweifelt, weil ein Computer, der doch eigentlich nach den strengen Regeln der Logik arbeiten sollte, plötzlich …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Nacherzählung aus der &#39;Nerd Enzyklopädie&#39; über die berühmte &#39;500-Meilen-E-Mail&#39;-Anekdote. Der Artikel beschreibt einen bizarren Softwarefehler, bei dem E-Mails nur innerhalb eines bestimmten Radius zugestellt wurden. Die Ursache war ein unentdecktes Downgrade des &#39;sendmail&#39;-Servers, das zu einem 0-Sekunden-Timeout führte, wodurch entfernte Server nicht rechtzeitig antworten konnten.</p>
          
          
          <p><strong>Hauptthemen:</strong> E-Mail, Netzwerktechnik, Softwarefehler, Debugging, Systemadministration, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Dieser Moment, in denen man an seiner Wahrnehmung zweifelt, weil ein Computer, der doch eigentlich nach den strengen Regeln der Logik arbeiten sollte, plötzlich Dinge tut, die gar nicht mehr so logisch erscheinen. Dieser Moment muss <strong>2002</strong> wohl auch <strong>Trey Harris</strong> ereilt haben (<a href="https://web.mit.edu/jemorris/humor/500-miles">MIT1</a>).</p>
<p>Harris, Mitglied der <strong>System Administrators Guild</strong> (SAGE), arbeitete als Admin für eine Universität in <strong>North Carolina</strong> und war dort für das E-Mail-System verantwortlich. Eines Tages rief ihn der Vorsitzende der Statistik-Abteilung an und behauptet, dass seine E-Mails nicht ankommen, sobald der Empfänger mehr als <strong>500 Meilen</strong> entfernt sei. Das Problem bestand offenbar schon ein paar Tage. Um es zu dokumentieren, hatte man auf einer Karte markiert, bei welchen Empfänger der E-Mail-Versand funktionierte. Und das funktioniere wohl nur bei Empfängern innerhalb eines 500-Meilen-Radius.</p>
<p>Harris war skeptisch und testete das System selbst. Er sendete einige Test-E-Mails unter anderem nach <strong>Richmond</strong>, <strong>Atlanta</strong> und <strong>Washington</strong> - alle Ziele befinden sich innerhalb des 500 Meilen Radius. Ohne Probleme. Und dann nach <strong>Memphis</strong> - <strong>600 Meilen</strong> Distanz. Die E-Mail ging nicht durch. <strong>Providence</strong>, 580 Meilen? Kein Erfolg. <strong>New York</strong>, 420 Meilen? Funktioniert.</p>
<p>Harris verglich die Konfigurationen des E-Mail-Servers mit anderen Systemen und fand keinerlei Auffälligkeiten. Zur weiteren Diagnose wählte er sich per Telnet auf den SMTP-Port des Servers ein. Der Server reagierte, wie erwartet mit dem <strong>SunOS Sendmail Logo</strong>. Und das führte Harris auf die richtige Fährte.</p>
<p>Der Vorsitzende der Statistik-Abteilung erwähnte zwar, dass vor ein paar Tagen ein Wartungs-Updates für des Betriebssystems installiert wurde. Angeblich betraf das aber nicht <strong>sendmail</strong>, welches Harris vor längerer Zeit in der <strong>Version 8</strong> installiert hatte. Das besagte Update von SunOS enthielt jedoch noch die alte <strong>Version 5</strong> von sendmail! Der E-Mail-Server wurde durch das Update des Betriebssystem auf eine alte Version zurückgesetzt. Die Konfigurations-Dateien, die Harris für die Version 8 angelegt hatte, waren allerdings noch vorhanden. Nur waren sie nicht mit Version 5 kompatibel. So wurde für einige wichtige Parametern von sendmail der <strong>Standard-Wert 0</strong> angenommen.</p>
<p>Einer dieser Parameter bezog sich auf das <strong>Timeout</strong> für die Verbindung zum externen SMTP-Server. Der Wert dafür betrug nun <strong>0 Sekunden</strong>.</p>
<p>Aber was hatte das zu bedeuten? Wenn sendmail versucht, eine Verbindung mit einem externen SMTP-Server aufzubauen, schickt es eine Anfrage in das Internet und  wartete dann auf die Antwort. Aufgrund der Auslastung des Systems brauchte sendmail einen Augenblick, um die Routine für die Verarbeitung der Antwort aufzurufen.</p>
<p>Harris fand heraus, das sendmail dafür etwa 3 Millisekunden benötigt. Eine Antwort, die nach 3 Millisekunden bei sendmail eintraf, wurde aufgrund des Timeouts als nicht erfolgreich gewertet.</p>
<p>Da die Universität über ein Glasfasernetz an das Internet angeschlossen war, gelang eine derartige Anfrage mit nahezu Lichtgeschwindigkeit nach draußen. Also fragte sich Harris, wie weit das Signal innerhalb von 3 Millisekunden kommen konnte. Er bemühte <strong>units</strong>, ein Kommandozeilen-Programm, um die Distanz auszurechnen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">$ units
</span></span><span class="line"><span class="ln">2</span><span class="cl">1311 units, 63 prefixes
</span></span><span class="line"><span class="ln">3</span><span class="cl">You have: 3 millilightseconds
</span></span><span class="line"><span class="ln">4</span><span class="cl">You want: miles
</span></span><span class="line"><span class="ln">5</span><span class="cl">* 558.84719
</span></span><span class="line"><span class="ln">6</span><span class="cl">/ 0.0017893979
</span></span></code></pre></div><p>*(Das <em>-Zeichen ist kein Operator, sondern zeigt das Ergebnis an.)</em></p>
<p>558 Meilen!  Harris hatte die Ursache für das seltsame Verhalten gefunden.</p>
<p>Harris räumte später ein, einige technische Details, auch aus dramaturgischen Gründen, nicht ganz exakt wiedergeben zu haben. So musste  auch die Antwort vom SMTP-Server innerhalb von 3 Sekunden wieder bei sendmail landen, womit sich die verfügbare Zeit eigentlich auf 1,5 Millisekunden halbiert. Das ändert aber nichts daran, dass das Zusammenspiel aus Timeout, Übertragungsgeschwindigkeit und Verzögerung bei der Verarbeitung dafür gesorgt haben, dass E-Mails nur in einem bestimmten Radius versendet werden konnten, nämlich circa 500 Meilen…</p>
<p>…but I would walk 500 miles, and I would walk 500 more…</p>
<p><img src="/2025/2025-03-10-nerd-enzyklop%C3%A4die-47---die-500-meilen-e-mail/image.png" alt="alt text"></p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> E-Mail, Netzwerk, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 47 - Die 500-Meilen-E-Mail - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 45 - 80 Spalten und die Legende vom Pferdehintern</title>
      <link>http://localhost:1313/2024/2024-01-15-nerd-enzyklop%C3%A4die-45---80-spalten-und-die-legende-vom-pferdehintern/</link>
      <pubDate>Mon, 15 Jan 2024 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2024/2024-01-15-nerd-enzyklop%C3%A4die-45---80-spalten-und-die-legende-vom-pferdehintern/</guid>
      <description>Für die einen ist sie unerforschtes Land, für die anderen die linke Westentasche: Die Kommandozeile! Eine Eigenschaft eint die meisten Kommandozeilen-Programme …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Erkundung aus der &#39;Nerd Enzyklopädie&#39; über die Ursprünge des 80-Zeichen-Spaltenstandards in der Informatik. Der Artikel beleuchtet historische Einflüsse wie Schreibmaschinen und Lochkarten (insbesondere IBMs 80-Spalten-Lochkarten) und diskutiert die Lesbarkeitsargumente. Humorvoll wird die Verbindung zur &#39;Pferdehintern-Legende&#39; hergestellt, um die oft obskuren Ursprünge technischer Standards zu illustrieren.</p>
          
          
          <p><strong>Hauptthemen:</strong> Computergeschichte, Standardisierung, Programmierung, Typografie, Nerd-Kultur, Humor</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Für die einen ist sie unerforschtes Land, für die anderen die <strong>linke</strong> <strong>Westentasche</strong>: Die <strong>Kommandozeile</strong>! Eine Eigenschaft eint die meisten Kommandozeilen-Programme unter <strong>Windows</strong>, <strong>MacOS</strong> und <strong>Linux</strong>: Sie sind in der Standard-Konfiguration <strong>80 Zeichen</strong> bzw. <strong>Spalten</strong> breit. Dieser Standard begegnet einem auch an anderen Orten, wie in <strong>Code Editoren</strong> oder <strong>Style Guides</strong> von Programmiersprachen, die 80 Zeichen pro Zeile als sinnvollen Standard beschreiben.</p>
<p><img src="/2024/2024-01-15-nerd-enzyklop%C3%A4die-45---80-spalten-und-die-legende-vom-pferdehintern/image_1.png" alt=""></p>
<p>Es gibt viele Erklärungsversuche für dieses Standard-Maß. Der erste liegt in der Lesbarkeit:</p>
<p>Sind die Zeilen zu kurz,
muss man beim Lesen
öfter die Zeile
wechseln, was den
Lesefluss
erschwert.</p>
<p>Sind sie zu lang, ist es sehr schwer, einzelne Zeilen zu unterscheiden.</p>
<p>In der Typographie gelten deshalb <strong>40 bis 90 Zeichen</strong> pro Zeile als sinnvoll, ideal sind mindestens <strong>60 Zeichen</strong> [<a href="https://www.semanticscholar.org/paper/Markus-Itkonen-Typography-and-readability-Itkonen-groteski/4b67cd16136d47682f547619e705e2151d2b98df">SEMAN1</a>]. Das erklärt allerdings noch nicht, warum wir in der elektronischen Datenverarbeitung 80 Zeichen bevorzugen.</p>
<p>Einer weiterer Grund könnte die technische Limitierung alter <strong>Schreibmaschinen</strong> sein. Diese konnten in der Regel nur <strong>70 bis 80 Zeichen</strong> pro Zeile verarbeiten. Hier spielte auch die Breite des Papiers eine wichtige Rolle: Der US-Standard „<strong>Letter</strong>“ erlaubte mit seinem <strong>8,5 x 11 Zoll</strong> in etwa <strong>85 bis 102 Zeichen pro Zeile</strong> bei einer Schriftgröße von <strong>10 bis 12 Punkten</strong>. Berücksichtigt man den linken und rechten Rand, kam man auf <strong>55–78 Zeichen pro Zeile</strong> [<a href="https://en.wikipedia.org/wiki/Characters_per_line">WIKI15</a>].</p>
<p>Und dann gibt es noch diese Erklärung: Das 80-Zeichen-Limit stammte von den Terminals der <strong>1960er</strong> und <strong>1970er</strong> Jahre. Dort nutze man ebenfalls <strong>80 Spalten bei 24 bis 25 Zeilen</strong>. Damit orientierte man sich an den damals üblichen <strong>Lochkarten</strong>. Lochkarten waren zu dieser Zeit weit verbreitete Datenträger. Sie enthielten auf einer Zeile bis zu <strong>80 Löcher</strong>. Zwar gab es auch Lochkarten mit mehr oder weniger Spalten. Aber <strong>IBM</strong>, damals schon ein Big-Player, hatte <strong>80-Spalten-Lochkarten</strong> im Angebot und diese Konfiguration sozusagen als Standard etabliert [<a href="https://en.wikipedia.org/wiki/Punched_card">WIKI16</a>].</p>
<p>Warum IBM ausgerechnet 80 Löcher pro Zeile wählte, ist nicht sicher belegt. Einerseits aus den oben schon genannten ergonomischen Gründen, sicher aber auch aus technischen Gründen: So konnten genug Löcher mit einer sinnvollen Größe auf dem Standard-Papier untergebracht werden.</p>
<p>Mehr Löcher würden die Integrität der Lochkarten stören, kleinere Löchere wären anfälliger für Fehler und weniger und größere Löcher wären unwirtschaftlich. Außerdem basierten die IBM-Lochkarten auf einer weitaus älteren Maschine: <strong>Holleriths Tabulatormaschine</strong>. <strong>Herman Hollerith</strong> erfand die Tabulatormaschine um <strong>1890</strong>, um die US Volkszählung zu unterstützen.</p>
<p>Ab hier geht die Geschichte sehr verworrene Wege: Holleriths Lochkarten könnten auf den Lochkarten basieren, die <strong>Basile Bouchon</strong> um <strong>1725</strong> erfand, um seinen „<strong>automatischen Webstuhl</strong>“ zu steuern; damals noch einfaches perforiertes Papier. <strong>Bouchon</strong> hat sich für seine Entwicklung vermutlich am Standard für Banknoten orientiert: Um <strong>1400</strong> nutze man das Papierformat “<strong>British Imperial Foolscap</strong>“, um Banknoten zu drucken: Auf einer Seite wurden <strong>8 Banknoten</strong> in <strong>2 Spalten</strong> angeordnet. Man könnte nun noch etwas weiter gehen: Die Breite des Papiers lässt sich auf den Herstellungsprozess zurückführen: Die Spannweite der Arme der Arbeiter:innen während der Papierherstellung gibt ein natürliches Maß für die maximale Breite der Papierbögen vor.</p>
<p>Das Standardmaß „80 Zeichen pro Seite“ kann also, mit etwas Fantasie und Augenzwinkern, also auf die Spannbreite der Arme des Menschen zurückgeführt werden. Und das erinnert stark an die Herleitung der Durchmesser von <strong>Glasflaschen</strong>, der sich über <strong>Europaletten</strong>, die <strong>Spurbreite</strong> von <strong>Schienen</strong> schließlich auf die <strong>Breite von Pferdehintern</strong> zurückzuführen lässt: die sogenannte <strong>Pferdehintern-Geschichte</strong> (<strong>Horse Ass Story</strong>) — bei der es sich übrigens auch nur um eine urbane Legende handelt [<a href="https://parovoz.com/spravka/standardgauge-de.html">PARO1</a>].</p>
<p>Nachdem wir uns nun mühsam durch mehr als 600 Jahre Geschichte gekämpft haben, kommt ein klitzekleiner Dämpfer: Auch wenn <strong>80 Zeichen pro Zeile</strong> weit verbreitet sind, werden mitunter auch <strong>72, 79, 100, 132</strong> oder gar <strong>180</strong> Zeichen pro Zeile gerne als Standard genutzt [<a href="https://en.wikipedia.org/wiki/Characters_per_line">WIKI18</a>]. Und vermutlich versteckt sich hinter jeder dieser Angaben eine kleine Pferdehintern-Legende…</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> IT-Geschichte, Standard, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 45 - 80 Spalten und die Legende vom Pferdehintern - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 44 - Von Fliegenklatschen und Häkeldeckchen</title>
      <link>http://localhost:1313/2024/2024-01-10-nerd-enzyklop%C3%A4die-44---von-fliegenklatschen-und-h%C3%A4keldeckchen/</link>
      <pubDate>Wed, 10 Jan 2024 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2024/2024-01-10-nerd-enzyklop%C3%A4die-44---von-fliegenklatschen-und-h%C3%A4keldeckchen/</guid>
      <description>Auch damals, als Informationen noch auf Lochkarten gespeichert wurden, ließ man es sich nicht nehmen, den Kolleg:innen kleine Streiche zu spielen. Wie z.B. alle …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Anekdote aus der &#39;Nerd Enzyklopädie&#39; über Streiche mit Lochkarten in den frühen Tagen der Computertechnik. Der Artikel erklärt, wie das Ausstanzen aller Löcher auf einer Lochkarte zu Instabilität führte und wie diese manipulierten Karten humorvolle Namen wie &#39;Fliegenklatsche&#39; oder &#39;Häkeldeckchen&#39; erhielten.</p>
          
          
          <p><strong>Hauptthemen:</strong> Computergeschichte, Lochkarten, Humor, Nerd-Kultur, IT-Folklore</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Auch damals, als Informationen noch auf <strong>Lochkarten</strong> gespeichert wurden, ließ man es sich nicht nehmen, den Kolleg:innen kleine Streiche zu spielen. Wie z.B. alle verfügbaren Löcher einer Lochkarte ausstanzen! Die Folge: Aufgrund der vielen Löcher war das Papier nicht mehr stabil genug. Die Karte konnte leichter verbiegen und so den Mechanismus im Kartenleser blockieren.</p>
<p><img src="/2024/2024-01-10-nerd-enzyklop%C3%A4die-44---von-fliegenklatschen-und-h%C3%A4keldeckchen/image_1.png" alt=""></p>
<center>normale Lochkarte und „Fliegenklatsche“</center><br />
<p>Und diese Art von manipulierten Lochkarten bekamen entsprechende Namen: **whoppee card (**Spaßkarte), <strong>lace card</strong> (Spitzenkarte, in Anlehnung an die kunstvoll ausgestanzten Grußkarten), <strong>flyswatter</strong> (Fiegenklatsche), <strong>IBM doily</strong> (Häkeldeckchen) oder <strong>ventilator card</strong> (Beatmungskarte) [<a href="http://catb.org/jargon/oldversions/jarg421.txt">CATB3</a>, <a href="https://en.wikipedia.org/wiki/Lace_card">WIKI19</a>].</p>
<p><img src="/2024/2024-01-10-nerd-enzyklop%C3%A4die-44---von-fliegenklatschen-und-h%C3%A4keldeckchen/image_2.png" alt=""></p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> IT-Geschichte, Nerd-Enzyklopädie, Humor, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 44 - Von Fliegenklatschen und Häkeldeckchen - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 43 - 0x5f3759df</title>
      <link>http://localhost:1313/2024/2024-01-01-nerd-enzyklop%C3%A4die-43---0x5f3759df/</link>
      <pubDate>Mon, 01 Jan 2024 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2024/2024-01-01-nerd-enzyklop%C3%A4die-43---0x5f3759df/</guid>
      <description>In der Informationstechnologie gibt es zwei wichtige Innovationstreiber: Die Porno-Industrie und die Spiele-Industrie. Quake III ist ein wegweisender Vertreter …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine detaillierte Erkundung aus der &#39;Nerd Enzyklopädie&#39; über den berühmten &#39;Fast Inverse Square Root&#39;-Algorithmus (&#39;0x5f3759df&#39;) aus dem Quellcode von Quake III. Der Artikel erklärt die mathematischen Grundlagen der Vektornormierung, die Funktionsweise des Algorithmus mit seinem &#39;evil floating point bit hack&#39; und der &#39;magischen Konstante&#39;, und beleuchtet die ungeklärte Urheberschaft sowie die heutige Relevanz.</p>
          
          
          <p><strong>Hauptthemen:</strong> Algorithmen, Computergrafik, Floating Point, Programmierung, IT-Geschichte, Nerd-Kultur, Quake III</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> advanced</p>
          
        </div>
        
        
        <p>In der Informationstechnologie gibt es zwei wichtige Innovationstreiber: Die <strong>Porno-Industrie</strong> und die <strong>Spiele-Industrie</strong>. <strong>Quake III</strong> ist ein wegweisender Vertreter der Spiele-Industrie. Der Pionier unter den Ego-Shootern wurde <strong>1999</strong> veröffentlicht, eroberte die Herzen der spielenden Gemeinde im Sturm und glänzte mit für die damaligen Verhältnisse herausragenden optischen Effekten. Und das trotz vergleichsweise geringer Anforderungen an die Hardware.</p>
<p><img src="/2024/2024-01-01-nerd-enzyklop%C3%A4die-43---0x5f3759df/image_1.png" alt=""></p>
<p>Nerd-Enzyklopädie #43</p>
<p>Um das zu ermöglichen nutzte <strong>Quake</strong> die „<strong>fast inverse square root</strong>“ (zu Deutsch klingt es etwas sperriger: „Schnelle umgekehrte Quadratwurzel”).</p>
<p>Aber… warum? Um in einer dreidimensionalen Welt bestimmte physikalische Effekt zu simulieren, nutzt man <strong>Vektoren</strong>. Nehmen wir z.B. die Berechnung von <strong>Lichtreflektionen</strong>: Um den Einfalls- und Ausfallswinkel auf einer beliebigen Fläche korrekt zu berechnen, benötigt man einen Vektor, genau genommen einen <strong>normierten Vektor</strong>.</p>
<p>Die Formel für die Berechnung des Betrages eines Vektor (sprich seiner „Länge“) sieht folgendermaßen aus:</p>
<p><img src="/2024/2024-01-01-nerd-enzyklop%C3%A4die-43---0x5f3759df/image_2.png" alt=""></p>
<p>Wer in der Schule gut aufgepasst hat, sollte davon nicht sonderlich beeindruckt sein. Es handelt sich im Prinzip um den <strong>Satz des Pythagoras</strong> <strong>auf Steroiden</strong>.</p>
<p>Ein <strong>normierter Vektor</strong> hat einen Betrag von 1, die Richtung bleibt unverändert:</p>
<p><img src="/2024/2024-01-01-nerd-enzyklop%C3%A4die-43---0x5f3759df/image_3.png" alt=""></p>
<p>Um einen Vektor zu normieren, multipliziert man ihm mit dem Kehrwert seines Betrages:</p>
<p><img src="/2024/2024-01-01-nerd-enzyklop%C3%A4die-43---0x5f3759df/image_4.png" alt=""></p>
<p>Diese Formel muss <strong>millionenfach</strong> ausgeführt werden, wenn man eine Lichtbrechung mit einer halbwegs ansehnlichen Qualität in einem Spiel erzeugen möchte.</p>
<p>Für die Summen und Potenzen (das sind ja letztlich auch nur Summen) ist das kein Problem, wohl aber für die Wurzel bzw. den Kehrwert der Wurzel — die <strong>inverse square root</strong>.</p>
<p>Anfangs behalf man sich mit riesigen Tabellen, die die Ergebnisse zahlreicher Berechnungen enthielten. Das sprengt irgendwann den Rahmen und man musste eine andere Lösung finden. Und diese ist und war <strong>elegant und rebellisch</strong> zugleich — der „<strong>fast inverse square root</strong>“ Algorithmus:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln"> 1</span><span class="cl">    <span class="ne">float</span> <span class="n">Q_rsqrt</span><span class="p">(</span> <span class="ne">float</span> <span class="n">number</span> <span class="p">)</span>  
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="p">{</span>  
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">        <span class="n">long</span> <span class="n">i</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">        <span class="ne">float</span> <span class="n">x2</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">        <span class="k">const</span> <span class="ne">float</span> <span class="n">threehalfs</span> <span class="o">=</span> <span class="mf">1.5</span><span class="n">F</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">        <span class="n">x2</span> <span class="o">=</span> <span class="n">number</span> <span class="o">*</span> <span class="mf">0.5</span><span class="n">F</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="n">y</span> <span class="o">=</span> <span class="n">number</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        <span class="n">i</span> <span class="o">=</span> <span class="o">*</span> <span class="p">(</span> <span class="n">long</span> <span class="o">*</span> <span class="p">)</span> <span class="o">&amp;</span><span class="n">y</span><span class="p">;</span> <span class="o">//</span> <span class="n">evil</span> <span class="n">floating</span> <span class="n">point</span> <span class="n">bit</span> <span class="n">level</span> <span class="n">hacking</span>  
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="n">i</span> <span class="o">=</span> <span class="mh">0x5f3759df</span> <span class="o">-</span> <span class="p">(</span> <span class="n">i</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span> <span class="p">);</span> <span class="o">//</span> <span class="n">what</span> <span class="n">the</span> <span class="n">fuck</span><span class="err">?</span>   
</span></span><span class="line"><span class="ln">10</span><span class="cl">        <span class="n">y</span> <span class="o">=</span> <span class="o">*</span> <span class="p">(</span> <span class="ne">float</span> <span class="o">*</span> <span class="p">)</span> <span class="o">&amp;</span><span class="n">i</span><span class="p">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y</span> <span class="o">*</span> <span class="p">(</span> <span class="n">threehalfs</span> <span class="o">-</span> <span class="p">(</span> <span class="n">x2</span> <span class="o">*</span> <span class="n">y</span> <span class="o">*</span> <span class="n">y</span> <span class="p">)</span> <span class="p">);</span> <span class="o">//</span> <span class="mi">1</span><span class="n">st</span> <span class="n">iteration</span>  
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="o">//</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y</span> <span class="o">*</span> <span class="p">(</span> <span class="n">threehalfs</span> <span class="o">-</span> <span class="p">(</span> <span class="n">x2</span> <span class="o">*</span> <span class="n">y</span> <span class="o">*</span> <span class="n">y</span> <span class="p">)</span> <span class="p">);</span> <span class="o">//</span> <span class="mi">2</span><span class="n">nd</span> <span class="n">iteration</span><span class="p">,</span> <span class="n">this</span> <span class="n">can</span> <span class="n">be</span> <span class="n">removed</span>  
</span></span><span class="line"><span class="ln">12</span><span class="cl">        <span class="k">return</span> <span class="n">y</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="p">}</span>
</span></span></code></pre></div><p>In dieser Funktion passieren einige spannende, um nicht zu sagen verrückte Dinge. Wie zum Beispiel der „<strong>evil floating point bit hack</strong>“.</p>
<p>Dazu ein kurzer Ausflug in das mysteriöse Reich der <strong>Fließkommazahlen</strong>: Diese zeichnen sich durch eine spezielle Art der Speicherung aus, damit in unseren binär geprägten Computern (Nullen und Einsen) auch <strong>Dezimalzahlen</strong> verarbeiten werden können. Dazu wird die Dezimalzahl als Kombination von <strong>Vorzeichen</strong>, <strong>Exponent</strong> und <strong>Mantisse</strong> abgespeichert: Das <strong>IEEE-754</strong> Format!</p>
<p>Der Nachteil: Beim Zurückrechnen kann es zu Ungenauigkeiten kommen. So wird der Wert 3,3 nach IEEE-754 binär abgespeichert:</p>
<p><code>01000001001000011001100110011010</code></p>
<p>Berechnet man diesen Wert zurück in ein Dezimalzahl, erhält man:</p>
<p><code>3.2999999523162841796875</code></p>
<p>Nicht schön, aber selten und meistens auch ausreichend genau.</p>
<p>Der „<strong>evil floating point bit hack</strong>“ schnappt sich den binären Wert der Fließkommazahl und interpretiert ihn schlicht als Ganzzahl, ohne die aufwendige Berechnung nach <strong>IEEE-754</strong>. Aus 3,3 wird damit der „evil integer“ <strong>1.079.194.419</strong>.</p>
<p>Als nächstes kommt es zu einer unter Fachleuten auch als <strong>What-The-Fuck-Transformation</strong> bezeichneten <strong>What-The-Fuck-Transformation</strong>. Unser „evil integer“ wird zunächst per <strong>Bitshift</strong> halbiert (ein bitweises verschieben nach links oder rechts kommt einer Multiplikation oder Division mit 2 gleich — probier es mal aus!). Das Ergebnis wird von einer <strong>höchstseltsamen Konstante</strong> abgezogen. Da ist sie — sie ist wunderschön:</p>
<p><code>0x5f3759df</code></p>
<p>Der dezimale Wert dieser mathematischen Grazie ist <strong>1.597.463.007</strong> — nicht sonderlich spannend. Behandelt man den Wert aber ebenfalls als Fließkommazahl nach <strong>IEEE-754</strong>, erhält man diese Kombination aus Exponent und Mantisse:</p>
<p><code>0.10111110.01101110101100111011111</code></p>
<p>Daraus ergibt sich ein <strong>Exponent</strong> von <strong>63</strong> und die <strong>Mantisse</strong> mit <strong>1,43243014812469482421875</strong>. Zusammen errechnet sich daraus die ziemlich große Zahl: <strong>13.211.836.172.961.054.720</strong> Und das ist eine ziemlich gute Annäherung an die Wurzel von <code>2¹²⁷</code>, nämlich <code>13.043.817.825.332.782.212,349…</code></p>
<p>Das Ergebnis dieser wahnwitzigen Operation wird nun über einen umgedrehten „<strong>evil floating point hack</strong>“ zurück in eine Fließkommazahl „umgewandelt“.</p>
<p>Abschließend findet noch ein weiterer kleiner Trick aus der wunderbaren Welt der Mathematik Anwendung: Mittels des <strong>Newton-Verfahrens</strong> erfolgt eine Korrektur des bisherigen Ergebnisses.</p>
<p>Schließlich kann die Funktion den <strong>Kehrwert einer Wurzel</strong> in etwa genauso gut bestimmen, wie eine konventionelle Berechnung, aber weitaus schneller.</p>
<p>Diese geniale Optimierung der Berechnung wird übrigens oft alleine <strong>John Carmack</strong> zugeschrieben, einem der Schöpfer von <strong>Quake III</strong>. Tatsächlich führen die Wurzeln (<strong>no pun intended…</strong>) aber viel weiter zurück. So basiert die Funktion wohl auf den Arbeiten vieler schlauer Köpfe.</p>
<p>Bereits <strong>1974</strong> tauchte eine ähnliche Routine im Quellcode für den <strong>PDP-11</strong> auf [<a href="https://minnie.tuhs.org/cgi-bin/utree.pl?file=V5%2Fusr%2Fsource%2Fs3%2Fsqrt.s"><strong>TUHS1</strong></a>]. In einem Quellcode von <strong>1993</strong> findet sich ein Kommentar mit dem Verweis auf eine wissenschaftliche Arbeit von <strong>William Kahan</strong> und <strong>K.C. Ng</strong> aus <strong>1983</strong>, in dem sie genau diese optimierte Methode beschreiben. Kahan gilt übrigens als „Architekt“ der IEEE-Fließkommazahlen-Aritmetik. <strong>1997</strong> präsentierte <strong>Jim Blinn</strong> in den „Floating-point tricks“ eine vergleichbare Funktion, dort noch ohne die „magische Konstante“ [<a href="https://ieeexplore.ieee.org/document/595279">IEEE2</a>].</p>
<p>Aber zurück zu John Carnack, der die Urheberschaft ganz explizit von sich wies:</p>
<blockquote>
<p>Not me, and I don’t think it is Michael [Abrash]. Terje Matheson perhaps?</p>
<p>~John Carmack, per E-Mail in 2004</p></blockquote>
<p>Der nächste „Verdächtige“ wäre <strong>Gary Tarolli</strong>, <strong>NVidia</strong>-Mitarbeiter der ersten Stunde und Mitbegründer von <strong>3Dfx</strong>. Dieser räumte ein, Mitte der 1990er Jahre die besagte Funktion genutzt und vielleicht sogar optimiert zu haben, weißt aber die eigentliche Urheberschaft ebenfalls von sich [<a href="https://www.beyond3d.com/content/articles/8/">BEYON1</a>].</p>
<p>Die Spur führt schließlich zu <strong>Greg Walsh</strong>, Ende der 1980er Jahre Entwickler bei der <strong>Ardent Computer Corporation</strong>. Inspiriert von der Arbeit seines Kollegen, dem Informatiker und Mathematiker <strong>Cleve Moler</strong>, Autor von <strong>MatLab</strong>, war es wohl Walsh, der die berüchtigte Funktion entwickelte.</p>
<p>Übrigens: Auch zwischen Moler und Kahan gibt es eine Verbindung. Zwar ist nicht klar wie eng die Bekanntschaft war, aber sie sind sich zumindest einmal über den Weg gelaufen [<a href="https://blogs.mathworks.com/cleve/2014/07/07/floating-point-numbers/">MATH1</a>].</p>
<p>Zurück zu Ardent: Das Unternehmen wurde damals unter anderem von <strong>Kubota</strong> “finanziell unterstützt”, einem japanischen Mischkonzern. Für Kubota arbeitete seinerzeit auch <strong>Gary Tarolli</strong>! So gelang der Quellcode wohl in die Hände von Tarolli. Die Verbindung zu John Carmack und <strong>id Software</strong> entstand dann vermutlich über <strong>Brian Hook</strong>, einem der ersten Angestellten von 3Dfx und später auch Entwickler bei id Software [<a href="https://www.quakewiki.net/profile-retro-interview-brian-hook/">QUAKE1</a>]. Und so schließt sich der Kreis…</p>
<p>Der <strong>Fast Inverse Square Root Algorithmus</strong> hat nichts an Faszination eingebüßt, vielleicht aber etwas an Bedeutung. Moderne Computer ermöglichen mittlerweile — dank hoher Leistung und angepasster Befehlssätze — eine sehr schnelle Berechnung von Wurzeln und deren Kehrwerten.</p>
<p>Hinter der mysteriösen Konstante und der merkwürdigen Optimierung steckt also eine verworrene Geschichte und am Ende fast schon der tragische Untergang in die Bedeutungslosigkeit. Wenn das kein Material für einen <strong>Nerd-Blockbuster</strong> ist…</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Algorithmus, Programmierung, Nerd-Enzyklopädie, IT-Geschichte, Quake</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 43 - 0x5f3759df - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 42 - Mit einem nassen Seil ins Internet</title>
      <link>http://localhost:1313/2023/2023-10-05-nerd-enzyklop%C3%A4die-42---mit-einem-nassen-seil-ins-internet/</link>
      <pubDate>Thu, 05 Oct 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-10-05-nerd-enzyklop%C3%A4die-42---mit-einem-nassen-seil-ins-internet/</guid>
      <description>
Nerd-Enzyklopädie #42
Um Breitband-Internet in die Wohnungen und Büros zu bekommen, wird viel Aufwand betrieben und am Ende beschweren sich die Kunden …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Anekdote aus der &#39;Nerd Enzyklopädie&#39; über einen britischen Internet-Techniker, dem es gelang, Daten über ein nasses Seil zu übertragen. Der Artikel beschreibt das Experiment, bei dem über eine Distanz von 2 Metern eine Geschwindigkeit von 3,5 MBit/Sekunde erreicht wurde, und beleuchtet die unerwarteten Möglichkeiten der Datenübertragung.</p>
          
          
          <p><strong>Hauptthemen:</strong> Netzwerktechnik, Internet, Kuriositäten, Nerd-Kultur, Datenübertragung</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-10-05-nerd-enzyklop%C3%A4die-42---mit-einem-nassen-seil-ins-internet/image1.png" alt=""></p>
<p>Nerd-Enzyklopädie #42</p>
<p>Um Breitband-Internet in die Wohnungen und Büros zu bekommen, wird viel Aufwand betrieben und am Ende beschweren sich die Kunden trotzdem. Als Internet-Provider hat man es wahrlich nicht leicht.<br>
Kupferkabel, Glasfaserleitungen oder große Satelliten-Anlagen sind den meisten von uns ein Begriff. Aber es geht auch günstiger: Einem Techniker des Internet-Anbieters Andrew &amp; Arnolds aus dem Vereinigten Königreich ist es gelungen, ein nasses Seil als Übertragungsmedium zu nutzen. Über eine Entfernung von 2 Metern erreichte er so eine Übertragungsgeschwindigkeit von 3,5 MBit/Sekunde! Reicht für die Prokrastination!</p>
<p><img src="/2023/2023-10-05-nerd-enzyklop%C3%A4die-42---mit-einem-nassen-seil-ins-internet/image2.png" alt=""></p>
<p>Nasses Seil [<a href="https://www.revk.uk/2017/12/its-official-adsl-works-over-wet-string.html">REVK1</a>]</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Netzwerk, Kuriosität, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 42 - Mit einem nassen Seil ins Internet - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 39 - Der Kerzen-Controller</title>
      <link>http://localhost:1313/2023/2023-06-19-nerd-enzyklop%C3%A4die-39---der-kerzen-controller/</link>
      <pubDate>Mon, 19 Jun 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-06-19-nerd-enzyklop%C3%A4die-39---der-kerzen-controller/</guid>
      <description>Eine Infrarot-Fernbedienung funktioniert nach einem einfachen Prinzip: Die Fernbedienung erzeugt Signale im Infrarot-Bereich, die der Empfänger im Fernseher …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine kuriose Anekdote aus der &#39;Nerd Enzyklopädie&#39;, die erklärt, wie man zwei Kerzen als Ersatz für die Sensorleiste der Nintendo Wii verwenden kann. Der Artikel beschreibt das Prinzip der Infrarot-Kommunikation der Wiimote und wie Kerzen Infrarotstrahlen emittieren, die der Controller zur Positionsbestimmung nutzen kann.</p>
          
          
          <p><strong>Hauptthemen:</strong> Gaming, Nintendo Wii, Infrarot, Hardware-Hack, Nerd-Kultur, Kuriositäten</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Eine <strong>Infrarot-Fernbedienung</strong> funktioniert nach einem einfachen Prinzip: Die Fernbedienung erzeugt Signale im Infrarot-Bereich, die der Empfänger im Fernseher verarbeiten kann. Lichtblitze, wenn man so will, die für das menschliche Auge nicht sichtbar sind.</p>
<p><img src="/2023/2023-06-19-nerd-enzyklop%C3%A4die-39---der-kerzen-controller/image1.png" alt=""></p>
<p>Die Spielekonsole <strong>Wii</strong> von <strong>Nintendo</strong> nutzt dieses Prinzip, um mit dem Controller, der <strong>Wiimote</strong>, zu kommunizieren. In einer Leiste, die am Fernseher platziert wird, befinden sich zwei Infrarot-Sender, die als Referenzpunkt dienen. So können die Controller ihre Position im Raum bestimmen und Objekte auf dem Fernseher anvisieren.</p>
<p>Sollte die Infrarot-Leiste einmal ausfallen, muss man nicht auf ein teures Ersatzteil zurückgreifen. Man stellt einfach zwei Kerzen im richtigen Abstand vor den Fernseher. Auch Kerzen geben neben dem sichtbaren Licht Infrarotstrahlen ab, die der Controller als Signal zur Positionsbestimmung verarbeiten kann [<a href="https://www.dkoldies.com/blog/you-can-use-candles-instead-of-the-wii-sensor-bar/">DKOL1</a>].</p>
<p><img src="/2023/2023-06-19-nerd-enzyklop%C3%A4die-39---der-kerzen-controller/image2.png" alt=""></p>
<p>Screenshot DKOldies.com@<a href="https://www.youtube.com/watch?v=NZzMeCyeiUI&amp;t=1s">youtube.com</a></p>
<p>Das ganze hat noch einen Vorteil: Die Kerzen haben eine begrenzte Brenndauer: Du kommst nicht umhin, nach ein paar Stunden eine Pause einzulegen.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Gaming, Hardware, Nerd-Enzyklopädie, Kuriosität</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 39 - Der Kerzen-Controller - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 38 - Du Idiot</title>
      <link>http://localhost:1313/2023/2023-06-16-nerd-enzyklop%C3%A4die-38---du-idiot/</link>
      <pubDate>Fri, 16 Jun 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-06-16-nerd-enzyklop%C3%A4die-38---du-idiot/</guid>
      <description>
You fool. You absolute, unmitigated, unadulterated, complete and utter, fool” [GIST2]
Das ist die unverblümte, ungeschönte und zeitlose Reaktion von Robert J. …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Erkundung aus der &#39;Nerd Enzyklopädie&#39; über das ikonische Zitat &#39;You fool&#39; von OpenPGP-Entwickler Robert J. Hansen. Der Artikel beleuchtet den Hintergrund dieses Ausbruchs: einen Angriff auf das SKS-Netzwerk, der durch die Ausnutzung bekannter Schwachstellen in einer veralteten, als Proof-of-Concept gedachten Software erfolgte, und dient als Warnung vor vernachlässigter Softwarewartung in kritischen Infrastrukturen.</p>
          
          
          <p><strong>Hauptthemen:</strong> Software-Sicherheit, OpenPGP, SKS-Netzwerk, Softwarewartung, IT-Sicherheit, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-06-16-nerd-enzyklop%C3%A4die-38---du-idiot/image1.png" alt=""></p>
<blockquote>
<p>You fool. You absolute, unmitigated, unadulterated, complete and utter, fool” [<a href="https://gist.github.com/rjhansen/67ab921ffb4084c865b3618d6955275f">GIST2</a>]</p></blockquote>
<p>Das ist die unverblümte, ungeschönte und zeitlose Reaktion von <strong>Robert J. Hansen</strong>, einem Entwickler von <strong>OpenPGP</strong>, nach einen Angriff auf das <strong>SKS - Netzwerk</strong>. Er richtet sich damit an diejenigen, die diesen Angriff zu verantworten haben.</p>
<p>Das SKS-Netzwerk (<strong>Synchronizing Key Server</strong>) speichert öffentliche Schlüssel, die sich z.B. für die vertrauenswürdige Kommunikation über E-Mail nutzen lassen. Die Server nutzen dazu eine in <strong>OCaml</strong> entwickelte Software, die von <strong>Yaron Minsky</strong> im Rahmen einer Doktorarbeit geschrieben wurde und eigentlich nur als <strong>Proof Of Concept</strong> gedacht war.</p>
<p>Die Programmiersprache ist nicht sehr weit verbreitet, die Software sehr komplex und damit nur schwer zu warten. Das System ist also weder für den produktiven Einsatz noch für hohe Belastungen ausgelegt — eben ein Proof Of Concept [<a href="https://securityaffairs.co/88071/hacking/poisoning-pgp-sks-key-network.html">SECU1</a>].</p>
<p>Und es gab Probleme, die schon seit Jahren bekannt waren. So durfte man beliebig viele, auch irrelevante, Informationen ungeprüft auf den Server laden, die dann nicht mehr gelöscht werden konnten.</p>
<p>Eine Software, die kaum gewartet und optimiert wird, die Teil einer kritischen Infrastruktur ist, mit bekannten Sicherheitslücken — was kann da schon schief gehen?</p>
<p>Das zeigte sich im <strong>Sommer 2019</strong>. Unbekannte nutzten die Schwachstelle aus und überfluteten die öffentlichen Schlüssel von <strong>Robert J. Hansen</strong> und <strong>Daniel Kahn Gillmor</strong>, ebenfalls Open-PGP Entwickler, mit Spam. So zwangen sie das veraltete System in die Knie und Programme, die darauf angewiesen waren, konnten nicht mehr verwendet werden [<strong>FIFT1</strong>]. Ein absehbarer Super-GAU, auf den Hansen in einem relativ langen, ikonischen Kommentar auf GitHub entsprechend ungehalten reagiert.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Sicherheit, OpenPGP, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 38 - Du Idiot - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 37 - Mehrdeutige Bilder</title>
      <link>http://localhost:1313/2023/2023-06-13-nerd-enzyklop%C3%A4die-37---mehrdeutige-bilder/</link>
      <pubDate>Tue, 13 Jun 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-06-13-nerd-enzyklop%C3%A4die-37---mehrdeutige-bilder/</guid>
      <description>
Ein Bild ist ein Bild ist ein Bild. Ob in der realen Welt oder auf dem Computer. Oder? ODER? Du ahnst es schon: Die Sache hätte keinen Haken, wenn ich es nicht …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Erklärung aus der &#39;Nerd Enzyklopädie&#39; über &#39;mehrdeutige Bilder&#39; und eine spezifische Schwachstelle in Apples PNG-Implementierung. Der Artikel beschreibt, wie ein und dieselbe PNG-Datei aufgrund eines Bugs in Apples proprietärem &#39;iDOT&#39;-Chunk auf Apple-Geräten anders dargestellt werden konnte als auf anderen Systemen, und beleuchtet die Komplexität der Bildverarbeitung.</p>
          
          
          <p><strong>Hauptthemen:</strong> Bildformate, PNG, Apple, Software-Sicherheit, Computer-Grafik, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p><img src="/2023/2023-06-13-nerd-enzyklop%C3%A4die-37---mehrdeutige-bilder/image1.png" alt=""></p>
<p>Ein Bild ist ein Bild ist ein Bild. Ob in der realen Welt oder auf dem Computer. Oder? ODER? Du ahnst es schon: Die Sache hätte keinen Haken, wenn ich es nicht so betonen würde.</p>
<p>Ein Bild auf dem Computer muss „interpretiert“ werden, denn schließlich handelte sich dabei um nichts anderes als eine Datei voller verrückter Zeichen — Nullen und Einsen. Es gibt verschiedene Formate, um Bilder in Dateien zu speichern, allen voran <strong>JPG</strong>, <strong>GIF</strong> und <strong>PNG</strong>.</p>
<p>Per Definition besteht eine PNG-Datei aus vielen kleinen <strong>Chunks</strong> (“Stücken”), die unterschiedliche Informationen enthalten, um das Bild aufzubauen. Dazu gehören z.B. die Farbpalette, die tatsächlichen Bild-Daten, Meta-Daten und so weiter [<a href="https://einstein.informatik.uni-oldenburg.de/rechnernetze/png.htm">EINS1</a>].</p>
<p>Zwar folgt PNG einem fest definierten Standard, aber wie es mit Standards so ist: Jeder kocht sein eigenes Süppchen. So auch <strong>Apple</strong>. Dort hat man für die eigenen Zwecke einen zusätzlichen Chunk names <strong>iDOT</strong> eingeführt. Um diesen zu verarbeiten, greifen Apple-Geräte auf einen nur dafür entwickelten Algorithmus zurück, der die Informationen aus dem iDOT-Chunk nutzbar macht. Apple hat die Funktion von iDOT nicht öffentlich dokumentiert und so ist der Zweck nicht ganz klar. Anonymen Hinweisen nach soll damit aber die optimierte Verarbeitung der Bilddaten auf Mehrkern-Prozessoren im Vordergrund stehen [<a href="https://www.hackerfactor.com/blog/index.php?/archives/895-Connecting-the-iDOTs.html">HACK1</a>].</p>
<p><strong>Ende 2021</strong> fand <strong>David Buchanan</strong> heraus, dass dieser Algorithmus fehlerbehaftet ist und sich die Bild-Datei so manipulieren lässt, dass das Bild auf einem Apple-Gerät anders dargestellt wird als auf einem Windows-Computer. Und das sieht dann so aus:</p>
<p><img src="/2023/2023-06-13-nerd-enzyklop%C3%A4die-37---mehrdeutige-bilder/image2.png" alt=""></p>
<p>Das gleiche PNG-Bild, dargestellt auf einem nicht-Apple-Computer (links) und auf einem Apple-Computer (rechts) [<a href="https://www.da.vidbuchanan.co.uk/widgets/pngdiff/">DAVI1</a>]</p>
<p>Apple den Bug mittlerweile „leider„ behoben…</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> PNG, Apple, Sicherheit, Nerd-Enzyklopädie, Bild</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 37 - Mehrdeutige Bilder - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 36 - Das kik &amp; left-pad Drama</title>
      <link>http://localhost:1313/2023/2023-06-10-nerd-enzyklop%C3%A4die-36---das-kik--left-pad-drama/</link>
      <pubDate>Sat, 10 Jun 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-06-10-nerd-enzyklop%C3%A4die-36---das-kik--left-pad-drama/</guid>
      <description>
NPM (Node Package Manager) ist ein Paket Manager für JavaScript und eine Plattform für Pakete, also Software, um die Funktionalität von JavaScript zu …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Nacherzählung des &#39;kik &amp; left-pad Dramas&#39; von 2016, das die JavaScript-Entwicklergemeinschaft erschütterte. Der Artikel erklärt, wie die Entfernung eines kleinen, aber weit verbreiteten npm-Pakets namens &#39;left-pad&#39; aufgrund eines Namensstreits zu weitreichenden Problemen in Tausenden von Softwareprojekten führte und die Fragilität moderner Software-Abhängigkeiten aufzeigte.</p>
          
          
          <p><strong>Hauptthemen:</strong> JavaScript, npm, Open Source, Softwareentwicklung, Abhängigkeiten, Nerd-Kultur, Fallstudie</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-06-10-nerd-enzyklop%C3%A4die-36---das-kik--left-pad-drama/image1.png" alt=""></p>
<p><strong>NPM (Node Package Manager)</strong> ist ein Paket Manager für <strong>JavaScript</strong> und eine Plattform für Pakete, also Software, um die Funktionalität von <strong>JavaScript</strong> zu erweitern. Es gibt einige Pakete, die sehr populär sind und in vielen JavaScript-Programmen verwendet werden. Dass das nicht nur praktisch ist sondern auch kritische Abhängigkeiten erzeugt, demonstrierte <strong>Azer Koçulu</strong> im Jahr <strong>2016</strong>.</p>
<p>Koçulu stellte damals über NPM eine Vielzahl von Paketen zur Verfügung, darunter auch <strong>kik</strong>, ein kaum bekanntes Paket, um Templates zu erstellen. kik ist aber auch der Name einer Messenger-App mit seinerzeit rund <strong>270. Mio</strong>. aktiven Nutzer:innen.<br>
Eines Tages erhielt Koculu Post von <strong>Bob Stratton</strong>, einem Rechtsanwalt, der die Interessen von <strong>Kik interactive</strong> vertrat, dem Unternehmen hinter dem Messenger. Stratton bat darum, dass Koculu sein Paket umbenennt, verwies dabei auf die eingetragene Handelsmarke und bot im Gegenzug sogar <strong>30.000 Dollar</strong> an.</p>
<p>Für Koculu war das keine Option, also nahm Stratton Kontakt mit NPM auf. Dort schlug man sich auf die Seite von Stratton, was Koculu nicht sonderlich wohlwollend aufnahm. Er fühlte sich als <strong>David</strong> im Kampf gegen <strong>Goliath</strong>. Koçulu gegen die seit jeher wenig beliebten Patentanwälte!</p>
<p>Seine Konsequenz: Er zog all seine <strong>273 Pakete</strong> von NPM zurück. Darunter befand sich auch „<strong>left-pad</strong>“, ein unscheinbares Paket, das nur aus 11 Zeilen bestand und lediglich dem Zweck diente, eine Zeichenkette mit einem bestimmten Wert zu befüllen.</p>
<p>Das löste eine Kaskade von Ereignissen aus: left-pad wurde von vielen Entwickler:innen in ihren Projekten genutzt, darunter auch Pakete, die wiederum in anderen Projekten genutzt wurden. So entstanden tausende Abhängigkeiten und Fehlermeldungen. Es kam zu massiven Problemen bei Updates und der Entwicklung, nur weil 11 Zeilen simpler JavaScript Code nicht mehr verfügbar waren.</p>
<p>Das Problem wurde zum Glück relativ schnell behoben. Innerhalb von 10 Minuten veröffentlichte <strong>Cameron Westland</strong> eine Alternative. Insgesamt dauerte die Fehlerbehebung <strong>2,5 Stunden</strong> [<a href="https://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm">NPM1</a>] [<a href="https://www.infoworld.com/article/3047177/how-one-yanked-javascript-package-wreaked-havoc.html">INFO4</a>].</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> JavaScript, npm, Open-Source, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 36 - Das kik &amp; left-pad Drama - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 34 - JavaScript wurde innerhalb von 10 Tagen entwickelt</title>
      <link>http://localhost:1313/2023/2023-06-04-nerd-enzyklop%C3%A4die-34---javascript-wurde-innerhalb-von-10-tagen-entwickelt/</link>
      <pubDate>Sun, 04 Jun 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-06-04-nerd-enzyklop%C3%A4die-34---javascript-wurde-innerhalb-von-10-tagen-entwickelt/</guid>
      <description>
JavaScript ist eine der am weitesten verbreiteten Programmiersprachen der Welt und für die Funktion und Popularität des WWW von großer Bedeutung. Während HTML …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine historische Erkundung aus der &#39;Nerd Enzyklopädie&#39; über die Entstehung von JavaScript, das innerhalb von nur 10 Tagen entwickelt wurde. Der Artikel beleuchtet die Notwendigkeit einer Skriptsprache für dynamische Webseiten, die Rolle von Brendan Eich bei Netscape, die Namensentwicklung von Mocha zu JavaScript und Microsofts Reaktion mit JScript.</p>
          
          
          <p><strong>Hauptthemen:</strong> JavaScript, Webentwicklung, Programmiersprachen, IT-Geschichte, Nerd-Kultur, Netscape</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-06-04-nerd-enzyklop%C3%A4die-34---javascript-wurde-innerhalb-von-10-tagen-entwickelt/image1.png" alt=""></p>
<p><strong>JavaScript</strong> ist eine der am weitesten verbreiteten Programmiersprachen der Welt und für die Funktion und Popularität des <strong>WWW</strong> von großer Bedeutung. Während <strong>HTML</strong> die statische Darstellung von Inhalten im Browser ermöglicht, lassen sich dank JavaScript diese Inhalte dynamisch darstellen und modifizieren. JavaScript hat in den letzten Jahrzehnten eine beeindruckende Entwicklung hingelegt, angefangen als <strong>Script-Sprache</strong> innerhalb des Browsers bis hin zur Grundlage für eine leistungsfähige <strong>Webserver-Architektur</strong>.</p>
<p>Es gibt zahlreiche Anwendungsgebiete, sei es als Sprache innerhalb des Datenbanksystems <strong>MongoDB</strong>, für die Entwicklung von Spielen und Anwendungen oder als serverseitige Applikation [<a href="https://thenewstack.io/brendan-eich-on-creating-javascript-in-10-days-and-what-hed-do-differently-today/">THEN1</a>].</p>
<p>JavaScript ist extrem erfolgreich, vielseitig und beliebt. Und alles begann mit einer kleinen Sprache, die <strong>innerhalb von 10 Tagen</strong> entwickelt wurde!</p>
<p>Als das Web noch ganz jung war, wurden Seiten mit HTML dargestellt. HTML war relativ simpel und so musste man keine große Programmierer:in sein, um eigene Inhalte auf die Bühne des Webs zu hieven. Diese Einfachheit war ein wichtiger Erfolgsfaktor für das frühe World Weide Web.</p>
<p>Dank des plattformunabhängigen Browsers <strong>Netscape</strong> waren Webentwickler:innen in der Lage, ihre Programme unkompliziert für unterschiedliche Betriebssysteme zur Verfügung zu stellen. Was fehlte war die Möglichkeit mit den Inhalten zu interagieren. Netscape erkannt das Problem und betraute <strong>1995</strong> <strong>Brendan Eich</strong> mit wichtigen Aufgabe eine Lösung in Form einer entsprechenden Programmiersprache zu entwickeln.</p>
<blockquote>
<p>“But Marc Andreessen of Netscape, Bill Joy of Sun, and myself [Brendan Eich] and a few others saw that there was a need for a language that was approachable, that you could put directly in the web page,”<br>
Brendan Eich, InfoWorld, 2011</p></blockquote>
<p>Anfangs hieß es noch, dass die Programmiersprache <strong>Scheme</strong> als Grundlage dienen könnte. Dann wurde <strong>Java</strong> in Betracht gezogen und so verhandelte Netscape mit <strong>Sun Microsystems</strong>, um Java im hauseigenen Browser zu unterstützen. Aber Java (damals noch <strong>Oak</strong> genannt) war groß und komplex. Sollte die Webentwicklung weiterhin zugänglich sein, war Java nicht die beste Wahl. Es musste eine einfache Lösung her, ähnlich wie <strong>Microsofts</strong> <strong>VisualBasic</strong>, das als Einstiegs-Alternative für <strong>C</strong> oder <strong>C++</strong> galt.</p>
<p>Und so kam es, dass Eich im <strong>Mai 1995</strong> innerhalb von <strong>10 Tagen</strong> einen ersten funktionsfähigen Prototypen von JavaScript entwickelte, da noch unter dem Namen <strong>Mocha</strong>. Mocha wurde erstmal mit dem Netscape Navigator 2.0 vorgestellt. Im <strong>September 1995</strong> änderte man den Namen zu **LiveScript **— Live klang aus Marketingsicht dynamischer. Außerdem hatte Eich die Zeit genutzt, um einen Großteil des Codes aufzuräumen; zehn Tage sind erwartungsgemäß sehr knapp, um eine gewisse Codequalität zu erhalten.</p>
<p>Im <strong>Dezember 1995</strong> wurde dann der Name JavaScript eingeführt, um die Bedeutung als einfache Alternative zu Java zu unterstreichen und sicherlich auch um ein wenig von Javas Popularität zu profitieren. Intern wird die JavaScript-Engine bis heute als <strong>SpiderMonkey</strong> bezeichnet.</p>
<p>Der große Konkurrent auf dem Browser-Markt, <strong>Microsoft</strong>, ließ nicht lange auf sich warten. Im <strong>August 1996</strong> zog man nach und implementierte seine eigene JavaScript-Engine im Internet Explorer: <strong>JScript</strong>. Da man damals aber noch nicht soviel von Standards hielt, war JScript nur bedingt kompatibel zu SpiderMonkey. Nur eine Folge des Browser-Krieges, die in den folgenden Jahren vielen Web-Entwickler:innen Kopfschmerzen und schlaflose Nächte bereiten sollte.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> JavaScript, IT-Geschichte, Nerd-Enzyklopädie, Programmierung</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 34 - JavaScript wurde innerhalb von 10 Tagen entwickelt - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 33 - GCJ-02</title>
      <link>http://localhost:1313/2023/2023-06-01-nerd-enzyklop%C3%A4die-33---gcj-02/</link>
      <pubDate>Thu, 01 Jun 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-06-01-nerd-enzyklop%C3%A4die-33---gcj-02/</guid>
      <description>
WGS steht für World Geodetic System und beschreibt ein Referenzsystem für die Kartographie und Vermessung der Welt. Das WGS spielt unter anderem für die …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Erklärung aus der &#39;Nerd Enzyklopädie&#39; über GCJ-02, Chinas nationalen Standard für geografische Koordinaten. Der Artikel beleuchtet, wie dieser Standard bewusst Abweichungen zum globalen WGS-System einführt, offiziell aus Gründen der nationalen Sicherheit, und wie dies zu Problemen für Navigationssysteme führt. Auch der davon abgeleitete Baidu-Standard BD-09 wird kurz vorgestellt.</p>
          
          
          <p><strong>Hauptthemen:</strong> Geografie, Kartographie, GPS, China, Zensur, Technologiepolitik, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-06-01-nerd-enzyklop%C3%A4die-33---gcj-02/image1.png" alt=""></p>
<p><strong>WGS</strong> steht für <strong>World Geodetic System</strong> und beschreibt ein Referenzsystem für die Kartographie und Vermessung der Welt. Das WGS spielt unter anderem für die Navigation mit <strong>GPS</strong> eine wichtige Rolle.</p>
<p>Nicht jedoch in <strong>China</strong>. Dort wurde in <strong>2002</strong> der Standard <strong>GCJ-02</strong> eingeführt, der zwar auf WGS basiert, aber einen Algorithmus implementiert, der dafür sorgt, dass Längen- und Breiten-Angaben anders berechnet werden [<a href="https://abstractkitchen.com/blog/a-short-guide-to-chinese-coordinate-system-de-de/">ABST1</a>].</p>
<p>Dadurch ergeben sich im Vergleich zu WGS <strong>Abweichungen von bis zu 500 Metern</strong>, in Ausnahmefällen sogar mehreren Kilometern [<a href="https://github.com/leifgehrmann/gcj02-distortion-map">GITH3</a>]. Die Motivation für diesen Standard ist laut offizieller Stelle die nationale Sicherheit. In der Realität führt das dazu, dass „nicht lizensierte“ Navigationssysteme dich an den falschen Zielort schicken.</p>
<p><img src="/2023/2023-06-01-nerd-enzyklop%C3%A4die-33---gcj-02/image2.jpg" alt=""></p>
<p style="text-align: center;font-style:italic">
Abweichung von GCJ-02 zu WGS [[GITH3](https://github.com/leifgehrmann/gcj02-distortion-map)]
</p>
<p><strong>Baidu</strong>, eine chinesische Suchmaschine, geht noch einen Schritt weiter. Dort wurde der von GCJ-02 abgeleitete Standard <strong>BD-09</strong> eingeführt, der die Koordinaten in China noch weiter verschleiert. Man will damit vermeiden, dass andere Anbieter die Daten von Baidus Kartendienst verwenden.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> China, Geografie, Nerd-Enzyklopädie, Technologie</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 33 - GCJ-02 - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 32 - Was haben PHP, Visa und Mandelbrot gemeinsam?</title>
      <link>http://localhost:1313/2023/2023-05-28-nerd-enzyklop%C3%A4die-32---was-haben-php-visa-und-mandelbrot-gemeinsam/</link>
      <pubDate>Sun, 28 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-28-nerd-enzyklop%C3%A4die-32---was-haben-php-visa-und-mandelbrot-gemeinsam/</guid>
      <description>
PHP ist eine der populärsten Sprachen im WWW. PHP steht für PHP: Hypertext Preprocessor und ist damit ein rekursives Akronym. Ursprünglich stand PHP für …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Erkundung aus der &#39;Nerd Enzyklopädie&#39;, die die Gemeinsamkeit zwischen PHP, Visa und Mandelbrot aufdeckt: rekursive Akronyme und selbst-referenzielle Konzepte. Der Artikel erklärt die Bedeutung von rekursiven Akronymen in der IT und beleuchtet humorvolle Legenden rund um Namen wie Benoit B. Mandelbrot und Bing.</p>
          
          
          <p><strong>Hauptthemen:</strong> Rekursive Akronyme, Sprache, Informatik, Mathematik, Nerd-Kultur, Etymologie</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-28-nerd-enzyklop%C3%A4die-32---was-haben-php-visa-und-mandelbrot-gemeinsam/image1.png" alt=""></p>
<p><strong>PHP</strong> ist eine der populärsten Sprachen im <strong>WWW</strong>. PHP steht für <strong>PHP: Hypertext Preprocessor</strong> und ist damit ein rekursives Akronym. Ursprünglich stand PHP für <strong>Personal HomePage Tools</strong>. Ab Version 3 gab es allerdings grundlegende Änderungen, weshalb man sich von dem Vorgänger absetzen wollte und daher genau diesen Namen wählte. In der IT gibt es viele mal mehr oder weniger populäre rekursive Akronyme, wie z.B.</p>
<ul>
<li><strong>WINE</strong>: WINE Is Not an Emulator (Software),</li>
<li><strong>cURL</strong>: cURL URL Request Library (Software),</li>
<li><strong>RPM</strong>: RPM Package Manager (Paketmanager),</li>
<li><strong>GNU</strong>: GNU is not UNIX (Betriebssystem,</li>
<li><strong>ATI</strong>: ATI Technologies Inc. (Hardwarehersteller),</li>
<li><strong>NANO</strong>: Nano’s Another editor (Texteditor)</li>
</ul>
<p>&hellip;und viele mehr, unter anderem auch <strong>VISA</strong> für Visa International Service Association.</p>
<p>Nun geht das Gerücht um, dass das <strong>B</strong> im Namen des berühmten Mathematikers <strong>Benoit B. Mandelbrot</strong> für <strong>Benoit B Mandelbrot</strong> steht [<a href="https://www.nytimes.com/2010/10/17/us/17mandelbrot.html">NYTI1</a>]. Eine Anspielung auf eines seiner bekanntesten Vermächtnisse: Die wunderschöne Mandelbrot-Menge — ein rekursives mathematisches Kunstwerk!</p>
<p><img src="/2023/2023-05-28-nerd-enzyklop%C3%A4die-32---was-haben-php-visa-und-mandelbrot-gemeinsam/image2.png" alt=""></p>
<p style="text-align: center;font-style:italic">Bis zum Ende zoomen! [[WIKI5](https://de.wikipedia.org/wiki/Beno%C3%AEt_Mandelbrot)]</p>
<p>Fest steht: Das B als Initial hat sich Mandelbrot in seiner Autobiographie selber gegeben. Dass das B aber für <strong>Benoit B. Mandelbrot</strong> steht ist leider nicht belegt — es ist nur ein Initial [<a href="https://www.theguardian.com/science/2010/oct/17/benoit-mandelbrot-obituary">THEG1</a>].</p>
<p>Einer weiteren aber nicht belegbaren und vermutlich nicht ganz srnst gemeinten Legende nach steht <strong>Bing</strong> übrigens für <strong>Bing ist not Google</strong>…</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Akronym, Nerd-Enzyklopädie, Humor, Sprache</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 32 - Was haben PHP, Visa und Mandelbrot gemeinsam? - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 31 - Der allererste Bug</title>
      <link>http://localhost:1313/2023/2023-05-25-nerd-enzyklop%C3%A4die-31---der-allererste-bug/</link>
      <pubDate>Thu, 25 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-25-nerd-enzyklop%C3%A4die-31---der-allererste-bug/</guid>
      <description>
Als ein Bug wird ein Fehler in einem Programm verstanden. Am 9. September des Jahres 1945 soll es sich zugetragen habe, dass der Mark II, ein Computer der …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine historische Untersuchung aus der &#39;Nerd Enzyklopädie&#39; über den Ursprung des Begriffs &#39;Bug&#39; in der Informatik. Der Artikel entlarvt den Mythos der Motte im Harvard Mark II Computer als Ursprung und verfolgt die wahre Etymologie des Wortes zurück zu Thomas Edison im späten 19. Jahrhundert, während er Grace Hoppers Rolle bei der Popularisierung des Begriffs in der Computerwelt würdigt.</p>
          
          
          <p><strong>Hauptthemen:</strong> Computergeschichte, Softwarefehler, Etymologie, Nerd-Kultur, Informatik</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-25-nerd-enzyklop%C3%A4die-31---der-allererste-bug/image1.png" alt=""></p>
<p>Als ein Bug wird ein <strong>Fehler in einem Programm</strong> verstanden. Am <strong>9. September des Jahres 1945</strong> soll es sich zugetragen habe, dass der <strong>Mark II</strong>, ein Computer der <strong>Harvard University</strong>, eine Fehlermeldung≤ ausgab. Selbst Universitäts-Computer sind davor nicht gefeit.</p>
<p>Man öffnete im Rahmen der Fehlersuche also den Computer — die waren zu der Zeit ja etwas größer als die Smartwatch an unserem Handgelenk — und fand die offensichtliche Ursache des Problems: Eine <strong>Motte</strong>! Sie wollte es sich im <strong>Panel F im Relay 70</strong> gemütlich machen und hat dieses wagemutige Vorhaben mit dem Leben bezahlt - die Todesursache ist leider nicht überliefert.</p>
<p>Die leiblichen Überreste der Motte wurden in ein Logbuch geklebt (warum eigentlich?) und von <strong>Dr. Grace Hopper</strong> mit der berühmten Bemerkung kommentiert: “First actual case of bug being found.”</p>
<p><img src="/2023/2023-05-25-nerd-enzyklop%C3%A4die-31---der-allererste-bug/image2.png" alt=""></p>
<p style="text-align: center;font-style:italic">Quelle [[AMER1](https://americanhistory.si.edu/collections/search/object/nmah_334663)]</p>
<p>Zwar war das der erste dokumentierte Fall einer Motte in einem Computer. Doch das war mitnichten, wie oft angenommen, die Geburt des Begriffs Bug als Synonym für einen Fehler in einem System. Dazu kam es weitaus früher, nämlich <strong>Ende des 19. Jahrhunderts</strong> durch unseren alten Bekannten <strong>Thomas Edison</strong>:</p>
<blockquote>
<p>‘Bugs’ — as such little faults and difficulties are called — show themselves and months of intense watching, study and labor are requisite before commercial success or failure is certainly reached.<br>
Thomas Edison an Theodore Puskas, 1878 [<a href="https://www.computerworld.com/article/2515435/moth-in-the-machine--debugging-the-origins-of--bug-.html">COMP1</a>]</p></blockquote>
<p>Der Begriff fand dann sogar Einzug in das <strong>Oxford English Dictionary</strong>:</p>
<blockquote>
<p>a defect or fault in a machine, plan, or the like.</p></blockquote>
<p>Dort wird als Quelle die <strong>Pall Mall Gazette</strong> angegeben [<a href="https://daily.jstor.org/the-bug-in-the-computer-bug-story/">JSTO1</a>]:</p>
<blockquote>
<p>“Mr [Thomas] Edison… had been up the two previous nights discovering a ‘bug’ in his phonograph — an expression for solving a difficulty, and implying that some imaginary insect had secreted itself inside and is causing all the trouble.<br>
Thomas Edison, March 11, 1889</p></blockquote>
<p>Es sollte auch erwähnt werden, dass <strong>Dr. Hopper</strong> die Motte weder gefunden noch in das Logbuch geklebt, sondern nur den ikonischen Kommentar darunter verfasste [<a href="https://www.pcwelt.de/article/1484644/die-beruhmtesten-bugs-der-it-geschichte.html">PCWE1</a>].</p>
<p>Nichtsdestotrotz sollten wir erfurchtsvoll anerkennen, dass die Motte in Panel F ihr Leben dafür gelassen hat, dem Begriff Bug zum Durchbruch zu verhelfen, ihn zu prägen. Danke, Motte.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> IT-Geschichte, Softwarefehler, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 31 - Der allererste Bug - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 30 - Die falsche Fehlermeldung</title>
      <link>http://localhost:1313/2023/2023-05-22-nerd-enzyklop%C3%A4die-30---die-falsche-fehlermeldung/</link>
      <pubDate>Mon, 22 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-22-nerd-enzyklop%C3%A4die-30---die-falsche-fehlermeldung/</guid>
      <description>
Mitte der 1990er Jahre startete in den USA ein besonderer Internet-Provider seinen Dienst: WebTV Networks Incorporated. In der Regel benötigte man zu dieser …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Anekdote aus der &#39;Nerd Enzyklopädie&#39; über einen peinlichen Fehler im Registrierungsprozess des frühen Internetdienstes WebTV. Ein falsch konfigurierter Filter für Benutzernamen führte dazu, dass jede Eingabe als &#39;schlechtes Wort&#39; (&#39;That&#39;s a bad word.&#39;) abgewiesen wurde, was die Bedeutung gründlicher Tests unterstreicht.</p>
          
          
          <p><strong>Hauptthemen:</strong> WebTV, Internetgeschichte, Softwarefehler, Debugging, Benutzerverwaltung, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-22-nerd-enzyklop%C3%A4die-30---die-falsche-fehlermeldung/image1.png" alt=""></p>
<p>Mitte der 1990er Jahre startete in den USA ein besonderer Internet-Provider seinen Dienst: <strong>WebTV</strong> <strong>Networks Incorporated</strong>. In der Regel benötigte man zu dieser Zeit für den Zugang zum Internet ein Modem, das zwischen Telefon-Dose und Computer angeschlossen wurde. WebTV funktionierte mit einer <strong>Set-Top-Box</strong> und einem <strong>Fernseher</strong> und ermöglichte so den Zugang zum Internet auch ohne Computer. Der Werbe-Slogan lautete:</p>
<blockquote>
<p>You’re surfing the Web with a remote control in one hand and a handful of cheese puffs in the other. Now that’s progress.</p></blockquote>
<p>Am <strong>18. September 1996</strong> wollte das Unternehmen seinen Dienst der Öffentlichkeit zugänglich machen. Ab diesem Datum war es möglich, ein Benutzerkonto für WebTV anzulegen. Einen Tag vorher saßen Techniker, Programmier und Gründer zusammen, um den Prozess der Benutzeranmeldung zu prüfen und das System auf Fehler zu untersuchen.</p>
<p>Bei einer Benutzeranmeldung ist es üblich, bestimmte anzügliche oder geschützte Begriffe für den Namen des Kontos zu verhindern. Seien es Beleidigungen oder reservierte Begriff wie „<strong>admin</strong>“, „<strong>root“</strong> und so weiter. Bei WebTV setzte man dazu auf eine Datei, die diese gesperrten Begriff enthielt. Die Datei war folgendermaßen aufgebaut:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    admin.*   
</span></span><span class="line"><span class="ln">2</span><span class="cl">    User names may not start with “admin”.   
</span></span><span class="line"><span class="ln">3</span><span class="cl">    postmaster   
</span></span><span class="line"><span class="ln">4</span><span class="cl">    You’re not the postmaster.   
</span></span><span class="line"><span class="ln">5</span><span class="cl">    poop   
</span></span><span class="line"><span class="ln">6</span><span class="cl">    That’s a bad word.   
</span></span><span class="line"><span class="ln">7</span><span class="cl">    weenie That’s a bad word.
</span></span></code></pre></div><p>Jeder Eintrag bestand demnach aus zwei Zeilen. Die <strong>erste Zeile</strong> enthielt einen regulären Ausdruck, der den nicht zugelassenen Begriff beschreibt. Die <strong>zweite Zeile</strong> beinhaltet die Fehlermeldung, sollte jemand versuchen den Begriff für sein Benutzerkonto zu verwenden. Wenn also jemand ein Konto mit dem Benutzernamen <strong>admin</strong> einrichten wollte, wurde ihm das mit der Fehlermeldung “<strong>User names may not start with ‘admin’”</strong> verweigert.</p>
<p>Einer der Techniker hatte beim Anlegen der Datei einen Fehler gemacht. Er wollte die Datei in zwei Listen unterteilen: Eine Liste mit geschützten Namen (<strong>admin</strong>, <strong>postmaster</strong>, root, …) sowie eine Liste mit anzüglichen, obszönen Namen (<strong>fuck</strong>, <strong>poop</strong>, …). Zur besseren Lesbarkeit trente er die beiden Listen durch eine leere Zeile:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    admin.* User names may not start with “admin”.   
</span></span><span class="line"><span class="ln">2</span><span class="cl">    postmaster You&#39;re not the postmaster.  
</span></span><span class="line"><span class="ln">3</span><span class="cl">      
</span></span><span class="line"><span class="ln">4</span><span class="cl">    fuck  
</span></span><span class="line"><span class="ln">5</span><span class="cl">    That&#39;s a bad word.
</span></span></code></pre></div><p>Aber auch die leere Zeile wurde vom System als regulärer Ausdruck interpretiert. Und dieser passte zu jeder Eingabe! Die Folge war, dass der Schutzmechanismus beim Anlegen eines Benutzerkontos auf jeden Namen reagierte und die darauffolgende Zeile, wie programmiert, als Fehlermeldung an die Benutzer:in zurückgab. Und in diesem Fall war das:</p>
<p><img src="/2023/2023-05-22-nerd-enzyklop%C3%A4die-30---die-falsche-fehlermeldung/image2.png" alt=""></p>
<p style="text-align: center;font-style:italic">
Die falsche Fehlermeldung bei der Anmeldung zu WebTV [[FADD1](https://fadden.com/tech/images/fkdialog.jpg)]
</p>
<p>Der Fehler wurde natürlich umgehend behoben. Als WebTV am nächsten Tag der Öffentlichkeit zugänglich gemacht wurde, kam es dem Vernehmen nach zu keinen beleidigenden Zwischenfällen.</p>
<p>Der Vorfall verdeutlich jedenfalls wie wichtig es ist, ein System in einer geschützten Umgebung ausgiebig zu testen.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> IT-Geschichte, Softwarefehler, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 30 - Die falsche Fehlermeldung - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 29 - Programmieren mit Emojis</title>
      <link>http://localhost:1313/2023/2023-05-19-nerd-enzyklop%C3%A4die-29---programmieren-mit-emojis/</link>
      <pubDate>Fri, 19 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-19-nerd-enzyklop%C3%A4die-29---programmieren-mit-emojis/</guid>
      <description>
Texte bestehen aus Sätzen, Sätze bestehen aus Wörtern und Wörter bestehen aus Buchstaben bzw. genauer Schriftzeichen. Wir alle kennen es, das lateinische …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine unterhaltsame Erkundung aus der &#39;Nerd Enzyklopädie&#39; über das Programmieren mit Emojis. Der Artikel erklärt die Grundlagen der Zeichenkodierung (Unicode, UTF-8) und beleuchtet die (begrenzten) Möglichkeiten, Emojis in gängigen Programmiersprachen zu verwenden. Zudem wird &#39;Emojicode&#39; vorgestellt, eine Programmiersprache, die ausschließlich auf Emojis basiert.</p>
          
          
          <p><strong>Hauptthemen:</strong> Programmierung, Emojis, Unicode, Zeichenkodierung, Programmiersprachen, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-19-nerd-enzyklop%C3%A4die-29---programmieren-mit-emojis/image1.png" alt=""></p>
<p>Texte bestehen aus Sätzen, Sätze bestehen aus Wörtern und Wörter bestehen aus Buchstaben bzw. genauer Schriftzeichen. Wir alle kennen es, das lateinische Alphabet, arabische Ziffern aber auch kyrillische Schriftzeichen oder die Sinogramme der chinesischen Schrift. All diese Symbole versteht der Computer dank einer großen Tabelle oder auch „ Zeichensatz“. Als Quasi-Standard hat sich in den letzten Jahren <strong>Unicode</strong> etabliert.</p>
<h2 id="hefte-raus-lerneinheit">Hefte raus, Lerneinheit!</h2>
<p>Ein <strong>Zeichensatz</strong> (engl. „<strong>character set</strong>“) beschreibt die Menge aller verfügbaren Zeichen. Das wäre z.B. ein sehr kleiner Zeichensatz, der nur die Großbuchstaben des lateinischen Alphabets darstellen kann:</p>
<pre><code>[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z]
</code></pre>
<p>Wird jedem Zeichen eine numerische Position zugeordnet, der sogenannte. „<strong>codepoint</strong>“, spricht man von einem <strong>kodierten Zeichensatz</strong> („<strong>coded character set</strong>“). Uns kleines Biespiel sieht dann so aus:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">  1 -&gt; A  
</span></span><span class="line"><span class="ln">2</span><span class="cl">  2 -&gt; B  
</span></span><span class="line"><span class="ln">3</span><span class="cl">  3 -&gt; C  
</span></span><span class="line"><span class="ln">4</span><span class="cl">  …  
</span></span><span class="line"><span class="ln">5</span><span class="cl">  26 -&gt; Z
</span></span></code></pre></div><p>Sehr weit verbreitet ist der Zeichensatz <strong>UCS</strong> (<strong>Universal Coded Character Set</strong>), besser bekannt <strong>Unicode,</strong> der in der <strong>ISO 10646</strong> definiert ist. Theoretisch umfasst Unicode einen Bereich von <strong>1.114.112</strong> codepoints. Diese sind in <strong>17 Ebenen</strong> (<strong>planes</strong>) zu je <strong>16 Bit</strong> aufgeteilt, also 65.536 codepoints pro Ebene. Aufgrund verschiedener technischer Vorgaben sind effektiv <strong>1.111.998</strong> codepoints nutzbar. Unicode enthält nicht nur die uns bekannten Buchstaben von A bis Z, Zahlen und Schriftzeichen anderer Sprachen, sondern mittlerweile auch Emojis:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">😆🫠😇
</span></span></code></pre></div><p>Um jedes der über 1 Mio. Zeichen ansprechen zu können, kann man auf <strong>UTF-32</strong> (<strong>Unicode Transformation Format</strong>) nutzen. UTF-32 besitzt einen 32 Bit (4 Byte) großen Adress-Bereich, um damit jedes beliebige Zeichen in Unicode zu kodieren. Das ist simpel, aber auch eine irrsinnige Platzverschwendung. Der häufigste deutsche Buchstabe „e“ wird wie folgt in UTF-32 kodiert:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    00 00 00 65
</span></span></code></pre></div><p>In binär:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    00000000000000000000000001100101
</span></span></code></pre></div><p>Ein Adress-Bereich mit 4 Byte um ein Zeichen abzubilden, für das 1 Byte ausreicht? Um Platz zu sparen, wurden Algorithmen entwickelt, die zwar etwas aufwendiger codieren, dafür aber weniger Platz verbrauchen. Sehr weit verbreitet ist <strong>UTF-8</strong>, eine — wenn man so will — „dynamische“ Kodierung.</p>
<p>UTF-8 wurde <strong>1992</strong> von <strong>Ken Thompson</strong> und <strong>Rob Pike</strong> entwickelt, zwei Programmierern des Betriebssystems <strong>Plan9</strong> (benannt nach dem gleichnamigen Film „<strong>Plan9 from outer Space</strong>“ von <strong>Ed Wood</strong>, dem angeblich „schlechtesten Science Fiction Film aller Zeiten“) [<a href="https://de.wikipedia.org/wiki/Plan_9_%28Betriebssystem%29">WIKI14</a>].</p>
<p>UTF-8 kodiert den ersten Bereich von Unicode mit 7 Bit — das erste Bit bzw. höchstwertige Bit ist immer 0. Das „e“ wird also folgendermaßen kodiert:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    65
</span></span></code></pre></div><p>In binär:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    01100101
</span></span></code></pre></div><p>Man belegt also nur noch 1 Byte anstatt 4. Will man exotische, also höherwertige Zeichen aus Unicode kodieren, hängt UTF-8 weitere Bytes an, bei denen die höchstwertigen Bits ebenfalls fest gesetzt werden. Das Euro-Zeichen wird in UTF-8 mit 3 Bytes dargestellt:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    E2 82 AC
</span></span></code></pre></div><p>In binär:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    11100010 10000010 10101100
</span></span></code></pre></div><h2 id="zurück-zum-thema">Zurück zum Thema</h2>
<p>Wie du siehst, sind Buchstaben für den Computer auch nur bestimmte Orte in einer großen Tabelle. Da die Unicode-Tabelle auch Emojis umfasst, sollte es doch eigentlich möglich sein, Emojis als Bezeichner für Funktionen und Variablen zu nutzen?</p>
<p>Ganz so leicht ist es leider nicht. Die gängigen Programmiersprachen haben einen festgelegten Bereich von Zeichen, die für derartige Deklarationen zulässig sind. Ein Ausweg sind <strong>Emoticons</strong>, also Zeichen, die als Emoji interpretiert werden können. Vor allem nicht-lateinische Schriften bieten eine Menge Möglichkeiten. In <strong>JavaScript</strong> ist z.B. folgendes möglich:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl">    <span class="k">var</span> <span class="err">ツ</span> <span class="o">=</span> <span class="err">„</span><span class="n">smile</span><span class="err">“</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln">2</span><span class="cl">    <span class="k">var</span> <span class="err">ൠ</span> <span class="o">=</span> <span class="err">„</span><span class="n">alien</span><span class="err">“</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln">3</span><span class="cl">    <span class="n">function</span> <span class="err">ಠ</span><span class="n">_ಠ</span> <span class="p">(){</span><span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="err">“</span><span class="n">Viel</span> <span class="n">Spaß</span> <span class="n">beim</span> <span class="n">Refactoring</span><span class="o">!</span><span class="err">”</span><span class="p">);}</span>
</span></span></code></pre></div><p>Es gibt allerdings auch eine Programmiersprache, die ausschließlich auf Emojis basiert: Emojicode [<a href="https://www.emojicode.org/">EMOJI1</a>]. Erfunden wurde die Sprache von <strong>Theo Weidmann</strong>. Und so sieht „<strong>Hello World</strong>“ in Emojicode aus:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    🏁 🍇  
</span></span><span class="line"><span class="ln">2</span><span class="cl">    😀 🔤Hello World!🔤❗️  
</span></span><span class="line"><span class="ln">3</span><span class="cl">    🍉
</span></span></code></pre></div>
        
        
        <div class="tags">
          <p><strong>Tags:</strong> Programmierung, Emojis, Nerd-Enzyklopädie, Sprache</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 29 - Programmieren mit Emojis - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 28 - Damönen aus der Nase</title>
      <link>http://localhost:1313/2023/2023-05-16-nerd-enzyklop%C3%A4die-28---dam%C3%B6nen-aus-der-nase/</link>
      <pubDate>Tue, 16 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-16-nerd-enzyklop%C3%A4die-28---dam%C3%B6nen-aus-der-nase/</guid>
      <description>
In der Informatik gibt es den Begriff des „undefinierten Verhaltens“ (undefined behaviour) [WIKI7]: Wenn eine Software bzw. Code auf unterschiedlichen Systemen …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Erklärung aus der &#39;Nerd Enzyklopädie&#39; über das Konzept des &#39;undefinierten Verhaltens&#39; in der Informatik, insbesondere in der Programmiersprache C. Der Artikel beleuchtet den Ursprung des humorvollen Ausdrucks &#39;nasal demons&#39; und demonstriert anhand eines einfachen C-Code-Beispiels die unvorhersehbaren Konsequenzen, wenn ein Compiler auf undefiniertes Verhalten trifft.</p>
          
          
          <p><strong>Hauptthemen:</strong> C-Programmierung, Undefined Behavior, Compiler, Softwareentwicklung, Nerd-Kultur, Programmiersprachen</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-16-nerd-enzyklop%C3%A4die-28---dam%C3%B6nen-aus-der-nase/image1.png" alt=""></p>
<p>In der Informatik gibt es den Begriff des <strong>„undefinierten Verhaltens“</strong> (<strong>undefined behaviour</strong>) [<a href="https://en.wikipedia.org/wiki/Undefined_behavior">WIKI7</a>]: Wenn eine Software bzw. Code auf unterschiedlichen Systemen zu unterschiedlichen Ergebnissen führt, was natürlich nicht vorkommen darf, spricht man von eben diesem „undefinierten Verhalten“. In der Programmiersprache C hat sich dafür der Begriff „<strong>nasal demons</strong>“ etabliert. Den Ursprung hat dieser Ausspruch in der Usenet Gruppe <strong>comp.std.c</strong> und einer Diskussion in <strong>1992</strong>. Ein Nutzer meinte damals:</p>
<blockquote>
<p>“When the compiler encounters [a given undefined construct] it is legal for it to make demons fly out of your nose” [<a href="http://catb.org/jargon/html/N/nasal-demons.html">CATB</a>]</p></blockquote>
<p>Übersetzt also: Trifft der Compiler auf ein „<strong>undefiniertes Konstrukt</strong>“, sollte es ihm erlaubt sein, Dämonen aus deiner Nase fliegen zu lassen.</p>
<p>Ein einfaches Beispiel in C ist z.B. dieses [<a href="https://accu.org/journals/overload/21/115/maudel_1857/">ACCU1</a>]:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    bool b;  
</span></span><span class="line"><span class="ln">2</span><span class="cl">    if (b)  
</span></span><span class="line"><span class="ln">3</span><span class="cl">      printf(“b is true\n”);  
</span></span><span class="line"><span class="ln">4</span><span class="cl">    if (!b)  
</span></span><span class="line"><span class="ln">5</span><span class="cl">      printf(“b is false\n”);
</span></span></code></pre></div><p>B wird als Boolesche Variable deklariert, aber nicht initialisiert. Es ist also nicht eindeutig klar, ob B wahr oder falsch ist. Der Compiler darf machen, “was er will”. Wie z.B. <strong>Dämonen aus deiner Nase fliegen</strong> lassen…</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> C, Programmierung, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 28 - Damönen aus der Nase - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 27 - Die Geschichte von Mel</title>
      <link>http://localhost:1313/2023/2023-05-13-nerd-enzyklop%C3%A4die-27---die-geschichte-von-mel/</link>
      <pubDate>Sat, 13 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-13-nerd-enzyklop%C3%A4die-27---die-geschichte-von-mel/</guid>
      <description>
Die “Geschichte von Mel“ ist eine Reminiszenz an die frühen Jahre der Informationstechnologie. In der Geschichte verarbeitet Ed Nather seine Erlebnisse als …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Nacherzählung der berühmten Anekdote &#39;Die Geschichte von Mel&#39; aus der Computerprogrammierung. Der Artikel beleuchtet das Genie des legendären Programmierers Mel Kaye, seine unkonventionellen Optimierungstechniken in Assemblersprache und die Herausforderungen, die sein selbstmodifizierender Code für andere Entwickler darstellte, insbesondere am Beispiel eines manipulierten Blackjack-Spiels.</p>
          
          
          <p><strong>Hauptthemen:</strong> Computergeschichte, Programmierung, Assemblersprache, Folklore, Nerd-Kultur, Softwareentwicklung</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-13-nerd-enzyklop%C3%A4die-27---die-geschichte-von-mel/image1.png" alt=""></p>
<p>Die “<strong>Geschichte von Mel</strong>“ ist eine Reminiszenz an die frühen Jahre der Informationstechnologie. In der Geschichte verarbeitet <strong>Ed Nather</strong> seine Erlebnisse als Softwareentwickler bei der <strong>Royal McBee Computer Corporation</strong>, einem Hersteller von Computern.</p>
<p>In <strong>1956</strong> vertrieb die Royal McBee zusammen mit der <strong>General Precision Inc</strong>. den <strong>LGP-30</strong>, einen „<strong>röhrenbestückten Magnettrommelrechner</strong>“ [<a href="http://computermuseum.informatik.uni-stuttgart.de/dev/lgp30/">STUT1</a>]. Der Rechner kostete damals beeindruckende <strong>47.000 USD</strong>, was heute in etwa <strong>470.000 USD</strong> entspricht [<a href="https://en.wikipedia.org/wiki/LGP-30">WIKI8</a>].</p>
<p><strong>Melvin „Mel“ Kaye</strong> (geb. <strong>Kornitzky</strong>), Nathers Kollege, entwickelte für diesen Computer ein BlackJack-Spiel, das sich sehr großer Beliebtheit erfreute und z.B. auf Messen zu Demonstrationszwecken vorgeführt wurde.</p>
<p>Mit dem <strong>RPC 4000</strong> veröffentlichte die RoyalBee in <strong>1960</strong> einen leistungsfähigeren Nachfolger für den LGP-30. Das <strong>230-kg-Ungetüm</strong> ging damals für saftige <strong>87.500 USD</strong> über die hoffentlich stabile Ladentheke [<a href="https://en.wikipedia.org/wiki/LGP-30">WIKI8</a>]. Um auf Messen weiterhin für Unterhaltung zu sorgen, wurde Kaye damit beauftragt, sein BlackJack-Spiel auf den RPC 4000 zu portieren.<br>
Auf Anraten des Vertriebs bat die Geschäftsführung Kaye darum, einen Schalter einzubauen, mit dem sich einstellen lässt, dass der Computer verliert. Mutmaßlich, um den interessierten Käufen auf den Messen wohlwollend zu begegnen.</p>
<p>Nather porträtiert Kaye als <strong>Archetypen eines ethischen Hackers</strong>. Ein exzellenter Softwareentwickler mit Prinzipien. Kaye kam dem Wunsch der Geschäftsführung nicht ganz nach. Er implementierte eine umgekehrte Funktion und so sorgte der Schalter dafür, dass der Computer immer gewinnt.</p>
<p>Ein Ärgernis für die Geschäftsführung und den Vertrieb. Da Kaye die RoyalBee kurz darauf verließ, offensichtlich weil sich seine Werte nicht mit denen des Unternehmens deckten [<a href="https://melsloop.com/docs/the-story-of-mel/pages/preface">MELS1</a>], wurde Nather damit beauftragt, den „Bug“ zu beheben. Und das fiel ihm nicht sonderlich leicht, dafür hatte Kaye mit einigen programmatischen Hürden gesorgt.<br>
Nather beschreibt sein Vorgehen als Abenteuer und Kaye als „<strong>unbesungenes Genie</strong>“. Die technischen Finessen und Tricks, die Kaye in den Quellcode eingebaut hatte, beeindruckten Nather zutiefst:</p>
<blockquote>
<p>When the light went on it nearly blinded me.<br>
(The Story of Mel, Ed Nather, 1983)</p></blockquote>
<p>So berichtet Nather von Endlosschleifen und Quellcode, der sich selber modifizierte. Letztlich gelang es Nather nicht, den Bug zu beheben, vielleicht auch aus Respekt vor dessen Schöpfer. Also blieb die Funktion des Schalters bestehen: Er sorgte weiterhin dafür, dass der Computer gewinnt.</p>
<p>Wann genau sich die Geschichte zugetragen hat, ist nicht sicher überliefert. Nather verarbeitet das Geschehen in Gedichtform und veröffentlichte dies am <strong>21. Mai 1983</strong> im Usenet [<a href="http://www.catb.org/jargon/html/story-of-mel.html">CATB1</a>].</p>
<p>Vermutlich hätten wir nie erfahren, um wen es sich bei „Mel“ handelt. Nather hatte Kaye nicht direkt namentlich erwähnt. Erst in <strong>2012</strong> begann der Programmierer <strong>Anthony Cuozzo</strong> die Hintergründe der Geschichte zu recherchieren. Per E-Mail nahem er Kontakt zum vermeintlichen Kaye auf und erhielt genau eine Antwort [<a href="https://melsloop.com/docs/the-story-of-mel/pages/mel-kaye-cv">MELS2</a>]:</p>
<blockquote>
<p>Mel Kaye <a href="mailto:rimel3@roadrunner.com">rimel3@roadrunner.com</a><br>
Tue, Apr 17, 2012 at 12:01 PM<br>
To: acuozzo@<em><strong>.</strong></em>**<em><strong>.</strong></em><br>
— -<br>
Yes, I did, many, many years ago I worked for both of them.<br>
I believe I worked for Royal McBee first.<br>
Mel Kaye</p></blockquote>
<p>Danach hörte er nie wieder etwas von ihm.</p>
<p><em>Melvin Kaye verstarb 2018.</em></p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Computergeschichte, Programmierung, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 27 - Die Geschichte von Mel - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 26 - FOCAL</title>
      <link>http://localhost:1313/2023/2023-05-10-nerd-enzyklop%C3%A4die-26---focal/</link>
      <pubDate>Wed, 10 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-10-nerd-enzyklop%C3%A4die-26---focal/</guid>
      <description>
FOCAL (für Formulating On-line Calculations in Algebraic Language) ist eine Programmiersprache, die 1968 erstmals vorgestellt wurde. Entwickelt wurde sie von …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine historische Erkundung aus der &#39;Nerd Enzyklopädie&#39; über die Programmiersprache FOCAL (Formulating On-line Calculations in Algebraic Language), entwickelt 1968 von Richard Merrill (DEC). Der Artikel beleuchtet FOCALs Einsatz auf PDP-Computern, seine Ähnlichkeit mit BASIC, die Gründe für seine begrenzte Popularität (u.a. durch eine Anekdote über Microsoft) und seinen kurzen zweiten Frühling in der Sowjetunion.</p>
          
          
          <p><strong>Hauptthemen:</strong> Programmiersprachen, Computergeschichte, DEC, BASIC, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-10-nerd-enzyklop%C3%A4die-26---focal/image1.png" alt=""></p>
<p><strong>FOCAL</strong> (für <strong>Formulating On-line Calculations in Algebraic Language</strong>) ist eine Programmiersprache, die <strong>1968</strong> erstmals vorgestellt wurde. Entwickelt wurde sie von <strong>Richard Merrill</strong> von <strong>DEC</strong>, Digital Equipment Corporation.</p>
<p>FOCAL war für den Einsatz auf den <strong>PDP</strong> Computern gedacht (<strong>Programed Data Processors</strong>). <strong>1969</strong> veröffentliche <strong>Jim Storer,</strong> damals Schüler an der <strong>Lexington High School</strong>, für den <strong>PDP-8</strong> das in FOCAL geschrieben Spiel <strong>Lunar Lander</strong>. Der Programmcode bestand aus nur 40 Zeilen! FOCAL ist vergleichbar mit <strong>BASIC</strong>; aber bei weitem nicht so populär. Ein Grund war sicherlich die strenge Lizenzierungs-Politik von DEC. Aber auch <strong>Microsoft</strong> könnte, wenn man diese Spekulation zulässt, seinen Teil zum Misserfolg von FOCAL beigetragen haben.</p>
<p>Microsoft vertrieb damals einen FOCAL-Interpreter. <strong>1980</strong> wurde der Verkauf aber eingestellt. Der Grund ist banal: Nachdem eine Bestellung für diese Software einging, konnte man das <strong>Master-Tape</strong> nicht mehr finden, um eine Kopie anzufertigen. Die Bestellung wurde kurzerhand mit dem Hinweis storniert, dass das Produkt nicht mehr verkauft wird. Dass es vermutlich einfach nur „verloren“ ging, behielt man für sich [<a href="https://devblogs.microsoft.com/oldnewthing/20200616-00/?p=103869">MICR3</a>].</p>
<p>In der damaligen Sowjetunion erlebte FOCAL Mitte der <strong>1980er</strong> Jahre einen zweiten Frühling. Der russische Heimcomputer <strong>Electronica BK</strong>, eine Kopie des <strong>PDP-11</strong>, wurde zusammen mit FOCAL ausgeliefert. Aber auch dort wurde FOCAL später durch BASIC verdrängt…</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Programmiersprache, IT-Geschichte, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 26 - FOCAL - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 25 - Bare Metal Programming</title>
      <link>http://localhost:1313/2023/2023-05-07-nerd-enzyklop%C3%A4die-25---bare-metal-programming/</link>
      <pubDate>Sun, 07 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-07-nerd-enzyklop%C3%A4die-25---bare-metal-programming/</guid>
      <description>
Übersetzt heißt „bare metal programming“ etwa so viel wie „Programmieren am reinen Metall“. Gemeint ist damit, dass man eine Software entwickelt, die direkt …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Anekdote aus der &#39;Nerd Enzyklopädie&#39;, die das Konzept des &#39;Bare Metal Programming&#39; veranschaulicht. Der Artikel erzählt die Geschichte eines Entwicklers, der bei einem Programmfehler auf einem &#39;discrete component&#39; Computer buchstäblich mit einem Schraubenzieher in die Hardware eingreifen musste, um das System zu stoppen.</p>
          
          
          <p><strong>Hauptthemen:</strong> Programmierung, Hardware, Computergeschichte, Nerd-Kultur, Softwareentwicklung</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-07-nerd-enzyklop%C3%A4die-25---bare-metal-programming/image1.png" alt=""></p>
<p>Übersetzt heißt „bare metal programming“ etwa so viel wie „Programmieren am reinen Metall“. Gemeint ist damit, dass man eine Software entwickelt, die direkt mit der Hardware kommuniziert, ohne Umwege über Bibliotheken, Schnittstellen oder ein Betriebssystem.</p>
<p>Ein Entwickler, dessen Name nicht überliefert ist, weshalb das ganze vielleicht eher der Kategorie „sympathische Legende“ zuzuordnen ist, nahm den Begriff des „Bare Metal Programmings“ Ende der der 1980er etwas zu wörtlich. Er arbeitete an einem „discrete component“ Computer, also einem Computer, bei dem die Transistoren sichtbar im Gerät verbaut sind (der erste Supercomputer, der IBM 7030 von 1961, bestand aus 169.100 Transistoren. Damit benötigte alleine die CPU eine Fläche von knapp 83qm [<a href="http://ed-thelen.org/comp-hist/vs-ibm-stretch.html">EDTH1</a>].)</p>
<p>Das Programm unseres Entwicklers schien jedenfalls einen Bug zu haben, weshalb er versucht hat das Programm zu stoppen. Was ihm nicht gelang, da das System — bugbedingt — alle Steuersignale ignorierte. Auch der Versuch den Computer selber anzuhalten, war nicht von Erfolg gekrönt. Da er das Gerät — aus Angst vor Datenverlust — nicht einfach ausschalten wollte, rief er einen Techniker dazu.</p>
<p>Bei dieser Art von Computern konnte man recht leicht feststellen, an welcher Stelle ein Programm bzw. eine einzelne Anweisung verarbeitet wurde, da die zuständigen Komponenten ja buchstäblich sicht- und greifbar waren. Man sah sich also zu einer ungewöhnlichen Maßnahme gezwungen, die wohl nicht deutlicher zeigen konnte, wie „Bare Metal Programming“ auch aussehen kann: Der Computer wurde geöffnet, um mit einem Schraubenzieher einen Kurzschluss an der Komponente zu erzeugen, von der man annahm, dass sie für den Bug verantwortlich war [<a href="https://yarchive.net/comp/tales.html">YARC1</a>].</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Programmierung, Hardware, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 25 - Bare Metal Programming - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 24 - Zeichenketten braten</title>
      <link>http://localhost:1313/2023/2023-05-04-nerd-enzyklop%C3%A4die-24---zeichenketten-braten/</link>
      <pubDate>Thu, 04 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-04-nerd-enzyklop%C3%A4die-24---zeichenketten-braten/</guid>
      <description>
Nerd-Enzyklopädie #24
Ganz frei nach dem Motto: Es gibt nichts, was man nicht braucht (oder so ähnlich) hat man sich bei der Programmiersprache C wohl gedacht …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Vorstellung der C-Funktion &#39;strfry&#39; aus der &#39;Nerd Enzyklopädie&#39;. Der Artikel erklärt, wie diese Funktion eine Zeichenkette zufällig neu anordnet, um ein Anagramm zu erzeugen, und beleuchtet die Kuriosität solcher Funktionen in Programmiersprachen.</p>
          
          
          <p><strong>Hauptthemen:</strong> C-Programmierung, Zeichenketten, Algorithmen, Nerd-Kultur, Programmiersprachen</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-04-nerd-enzyklop%C3%A4die-24---zeichenketten-braten/image1.png" alt=""></p>
<p>Nerd-Enzyklopädie #24</p>
<p>Ganz frei nach dem Motto: Es gibt nichts, was man nicht braucht (oder so ähnlich) hat man sich bei der <strong>Programmiersprache C</strong> wohl gedacht und eine Funktion implementiert, die aus einer Zeichenkette ein Anagram erzeugt [<a href="https://man7.org/linux/man-pages/man3/strfry.3.html">MAN1</a>]:</p>
<pre><code>strfry
</code></pre>
<p>Ausgesprochen steht <strong>strfry</strong> für „<strong>string fry</strong>“, also „<strong>Zeichenkette braten</strong>“ und diese Funktion macht nichts anderes, als die Zeichen eines Strings zufällig neu anzuordnen:</p>
<pre><code>strfy(„Hello World“)  
eoWloHl dlr
</code></pre>
<p>Guten Appetit.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> C, Programmierung, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 24 - Zeichenketten braten - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 23 - 30 x 10 = 1.000</title>
      <link>http://localhost:1313/2023/2023-05-01-nerd-enzyklop%C3%A4die-23---30-x-10--1.000/</link>
      <pubDate>Mon, 01 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-05-01-nerd-enzyklop%C3%A4die-23---30-x-10--1.000/</guid>
      <description>
Wenn du deinen Python-Nachlass mit ein wenig Pfeffer würzen willst, empfiehlt es sich, die „Definition eines Integers“ zu ändern. Wenn du in Python eine Zahl …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Demonstration aus der &#39;Nerd Enzyklopädie&#39;, die zeigt, wie man in Python die interne Darstellung von Integer-Objekten mittels &#39;ctypes&#39; manipuliert. Der Artikel präsentiert ein Code-Beispiel, das dazu führt, dass eine scheinbar einfache Multiplikation wie &#39;30 * 10&#39; ein unerwartetes Ergebnis von &#39;1000&#39; liefert, und warnt vor den daraus resultierenden Debugging-Herausforderungen.</p>
          
          
          <p><strong>Hauptthemen:</strong> Python, Speichermanagement, Programmierung, Debugging, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> advanced</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-01-nerd-enzyklop%C3%A4die-23---30-x-10--1.000/image1.png" alt=""></p>
<p>Wenn du deinen Python-Nachlass mit ein wenig Pfeffer würzen willst, empfiehlt es sich, die „Definition eines Integers“ zu ändern. Wenn du in Python eine Zahl verwendest, nehmen wir die 30, verwendet Python die 30 als Referenz auf ein Objekt im Speicher, in dem wiederum der Wert 30 hinterlegt wird. Die 30 ist also ein Verweis auf ein Objekt, das den tatsächlichen Wert enthält. In der Regel sollten Verweis und Wert gleich sein, sonst wird das mit der Mathematik schwierig.</p>
<p>Schwierig? Das mögen Nerds doch!</p>
<p>Mit dieser Funktion kannst du einen derartigen Verweis anpassen und einen abweichenden Wert hinterlegen:</p>
<pre><code>import ctypes   
def reference(val):  
  return ctypes.cast(id(val), ctypes.POINTER(ctypes.c_int))
</code></pre>
<p>Und so aktivierst du den „Spaß“:</p>
<pre><code>reference(30)[6] = 100
</code></pre>
<p>Willst du nun mit der Ziffer 30 mathematische Operationen durchführen, erzeugt das interessante Ergebnisse:</p>
<pre><code>&gt;&gt;&gt; 30 * 10  
&gt;&gt;&gt; 1000
</code></pre>
<p>Viel Spaß beim Debuggen!</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Python, Code-Trick, Nerd-Enzyklopädie, Debugging</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 23 - 30 x 10 = 1.000 - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>code_demonstration</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 20 - Elvis und Raumschiffe</title>
      <link>http://localhost:1313/2023/2023-04-22-nerd-enzyklop%C3%A4die-20---elvis-und-raumschiffe/</link>
      <pubDate>Sat, 22 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-04-22-nerd-enzyklop%C3%A4die-20---elvis-und-raumschiffe/</guid>
      <description>
Wer sich mit der Entwicklung von Software beschäftigt wird früher oder später über seltsam anmutende Abkürzungen stolpern mit denen sich ausufernder …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Erklärung aus der &#39;Nerd Enzyklopädie&#39; über zwei spezielle Operatoren in Programmiersprachen: den &#39;Elvis Operator&#39; (&#39;?:&#39;), der einen Standardwert zuweist, wenn eine Variable null oder falsch ist, und den &#39;Spaceship Operator&#39; (&#39;&lt;=&gt;&#39;), der einen Drei-Wege-Vergleich durchführt. Der Artikel beleuchtet die Herkunft ihrer ungewöhnlichen Namen.</p>
          
          
          <p><strong>Hauptthemen:</strong> Programmierung, Operatoren, Programmiersprachen, Nerd-Kultur, Humor</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-04-22-nerd-enzyklop%C3%A4die-20---elvis-und-raumschiffe/image1.png" alt=""></p>
<p>Wer sich mit der Entwicklung von Software beschäftigt wird früher oder später über seltsam anmutende Abkürzungen stolpern mit denen sich ausufernder Programmcode zu einem kompakten Kunstwerk aufwerten lässt. Dazu zählen z.B. <strong>ternäre Operatoren,</strong> die langweilige **if-then-**Bedingungen in einfache Einzeiler verwandeln:</p>
<pre><code>sAllGoodMan = foo == bar ? true : false;
</code></pre>
<p>Hier wird die boolesche Variable <strong>sAllGoodMan</strong> auf <strong>True</strong> gesetzt, wenn die Werte von <strong>foo</strong> und <strong>bar</strong> identisch sind, andernfalls ist <strong>sAllGoodMan =</strong> <strong>False</strong>.<br>
Weitaus weniger bekannt ist die gehobene Variante des ternären Operators, der sogenannte <strong>Elvis-Operator,</strong> der nur aus einem Fragezeichen gefolgt von einem Doppelpunkt besteht:</p>
<pre><code>?:
</code></pre>
<p>Und was kann der Elvis-Operator, außer gut aussehen und nicht singen? Er weist einer Variable einen Standard-Wert zu, wenn eine andere Variable <strong>Null</strong> oder <strong>Falsch</strong> ist:</p>
<pre><code>myValue = aValue ?: „default“;
</code></pre>
<p>Wenn die Variable <strong>aValue</strong> nicht gesetzt wurde und damit <strong>Null</strong> oder <strong>Falsch</strong> ist (die Interpretation von „nicht gesetzt“ kann von der jeweiligen Programmiersprache abhängen), wird der Variable myValue der Standard-Wert default zugewiesen. Das funktioniert natürlich auch mit dem Rückgabewert von Funktionen:</p>
<pre><code>Name = getName(‚id‘) ?: „John Doe“;
</code></pre>
<p>Kann kein Name ermittelt werden, wird als Standardname „<strong>John Doe</strong>“ verwendet.</p>
<p>Seinen Namen hat der Elvis-Operator von dem Fragezeichen, das zusammen mit dem Doppelpunkt ein Emoticon darstellt, das an Elvis Presley erinnern soll.</p>
<p>Eine andere weniger bekannte Abkürzung ist der <strong>Spaceship-Operator</strong>:</p>
<pre><code>&lt;==&gt;
</code></pre>
<p>Dieser führt einen <strong>3-Wege-Vergleich</strong> durch und heißt deswegen ganz offiziell eigentlich <strong>Drei-Wege-Vergleichsoperator</strong>. Der Spaceship-Operator erlaubt zwei Element auf drei Arten zu vergleichen, größer, kleiner oder gleich:</p>
<pre><code>A &lt; B, A == B, A &gt; B
</code></pre>
<p>Der Spaceship-Operator fasst die drei Vergleiche zusammen und liefert -1 für kleiner, 0 für genau gleich groß und +1 für größer als zurück.</p>
<p>Die Verbindung zu einem Raumschiff geht angeblich auf das Spiel <strong>Star Trek</strong> von <strong>1971</strong> zurück — dort wurde ein Raumschiff genau so abgebildet: <strong>&lt;==&gt;</strong>.<br>
Die Fraktion der <strong>StarWars-Fans</strong> sieht das anders. Dort wird behauptet, dass <strong>&lt;==&gt;</strong> eher an den <strong>Tie Fighter</strong> aus Star Wars erinnert.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Programmierung, Operatoren, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 20 - Elvis und Raumschiffe - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 19 - Das Brieftauben-Protokoll</title>
      <link>http://localhost:1313/2023/2023-04-19-nerd-enzyklop%C3%A4die-19---das-brieftauben-protokoll/</link>
      <pubDate>Wed, 19 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-04-19-nerd-enzyklop%C3%A4die-19---das-brieftauben-protokoll/</guid>
      <description>Schon mal was von IPoAC gehört? Dabei handelt es sich um eine Abkürzung für „IP over Avian Carriers“ was soviel heißt wie „Internet-Protokoll via gefiedertem …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Erkundung aus der &#39;Nerd Enzyklopädie&#39; über das &#39;IP over Avian Carriers&#39; (IPoAC) Protokoll, auch bekannt als &#39;Brieftauben-Protokoll&#39;. Der Artikel beschreibt die Entstehung dieses Aprilscherzes als offiziellen RFC, seine Aktualisierung für IPv6 und einen realen Testlauf in Norwegen, der die Grenzen der Datenübertragung per Brieftaube aufzeigt.</p>
          
          
          <p><strong>Hauptthemen:</strong> Internet-Protokolle, Netzwerktechnik, Humor, RFC, Nerd-Kultur, Kuriositäten</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Schon mal was von <strong>IPoAC</strong> gehört? Dabei handelt es sich um eine Abkürzung für „<strong>IP over Avian Carriers</strong>“ was soviel heißt wie „<strong>Internet-Protokoll via gefiedertem Träger”</strong>. Die Idee für dieses Protokoll wurde 1999 als Aprilscherz vorgestellt.</p>
<p><img src="/2023/2023-04-19-nerd-enzyklop%C3%A4die-19---das-brieftauben-protokoll/image1.png" alt=""></p>
<p style="text-align: center;font-style:italic">
craiyon.com: “Internet protocol over Avian Carriers”
</p>
<p>Das Internet Protokoll (IP) ist ein elementarer Bestandteil der Kommunikation im <em>Trommelwirbel</em> <strong>Internet</strong>! Es bildet die Grundlage für den elektronischen Datenaustausch zwischen zwei Computern. Beim <strong>IPoAC</strong> werden die Daten nicht elektronisch übermittelt, sondern mithilfe von <strong>Brieftauben</strong>.<br>
Auch wenn das ganze nur als Scherz gedacht war, fand <strong>IPoAC</strong> Einzug in ein sogenanntes <strong>Request for Comment</strong> (genauer der <strong>RFC1149</strong> [<a href="https://datatracker.ietf.org/doc/html/rfc1149">RFCE1</a>]) — ein offizielles Dokument zur Spezifikation von Standards. In <strong>2011</strong> wurde das Protokoll aktualisiert, um mit <strong>IPv6</strong> kompatibel zu sein.</p>
<p>In <strong>2021</strong> kam es in Norwegen sogar zu einem Testlauf des sonderbaren Protokolls. Dabei wurden Daten in <strong>neun Pakete</strong> aufgeteilt und mithilfe von <strong>neun Tauben</strong> über eine Strecke von <strong>fünf Kilometern</strong> übertragen. Die Übertragung dauerte <strong>zwei Stunden</strong> und nur <strong>vier Pakete</strong> wurden erfolgreich übermittelt. Da soll sich noch mal einer über das schlechte Mobilfunknetz beschweren!</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Netzwerk, IT-Geschichte, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 19 - Das Brieftauben-Protokoll - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 18 - Willkommen auf Null Island</title>
      <link>http://localhost:1313/2023/2023-04-16-nerd-enzyklop%C3%A4die-18---willkommen-auf-null-island/</link>
      <pubDate>Sun, 16 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-04-16-nerd-enzyklop%C3%A4die-18---willkommen-auf-null-island/</guid>
      <description>Die geografischen Koordinaten 0° Nord und 0° Ost zeigen auf einem Punkt im Atlantik vor der West-Küste Afrikas. Eigentlich gibt es dort nicht viel zu sehen, …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Einführung in &#39;Null Island&#39; aus der &#39;Nerd Enzyklopädie&#39;, eine fiktive Insel am Nullmeridian und Äquator (0°N, 0°O). Der Artikel erklärt, wie dieser geografische Punkt als &#39;Auffangbecken&#39; für Fehler in geografischen Systemen dient, wenn Ortsdaten nicht korrekt verarbeitet werden können, und beleuchtet die humorvolle Community, die sich um dieses Konzept gebildet hat.</p>
          
          
          <p><strong>Hauptthemen:</strong> Geografie, Kartographie, GPS, Softwarefehler, Datenqualität, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Die geografischen Koordinaten <strong>0° Nord und 0° Ost</strong> zeigen auf einem Punkt im <strong>Atlantik</strong> vor der West-Küste <strong>Afrikas</strong>. Eigentlich gibt es dort nicht viel zu sehen, außer Wasser, noch mehr Wasser, ganz viel Wasser, ab und zu mal ein Fisch und natürlich die <strong>PIRATA</strong>-Boje.</p>
<p><img src="/2023/2023-04-16-nerd-enzyklop%C3%A4die-18---willkommen-auf-null-island/image1.png" alt=""></p>
<p style="text-align: center;font-style:italic">
Null Island oder nur eine Boje? [[WIKI6](https://de.wikipedia.org/wiki/Null_Island)]
</p>
<p>Bei dieser Ortsangabe handelt es sich nämlich um eine Art Hilfsmittel, um Fehler in geografischen Systemen, Datenbanken oder Programmen abzufangen. Da <em>Null</em> für das Fehlen von Daten oder auch die fehlerhafte Rückmeldung eines Programmes stehen kann, führt ein Problem bei der Verarbeitung geografischer Daten eben zu <em>Null —</em> also 0 und damit zu der Koordinate <strong>0 Grad Nord und 0 Grad Ost</strong>.</p>
<p>Seit 2011 hat sich eine kleine Fan-Gemeinde der Aufgabe unterworfen, an diesem Ort der fiktiven Insel <strong>Null Island</strong> ein Gesicht zu geben. So erschuf man unter anderem eine Flagge, geografische Informationen und sogar eine eigene Sprache für Null Island.</p>
<p>Tatsächlich passiert auf dieser nicht existierenden Insel sehr viel: Jedes Mal wenn es in irgendeiner Software zu Problemen mit Ortsangaben kommt, werden die restlichen Daten Null Island zugeordnet. Deine Fitness-App hatte keine Verbindung zu den GPS-Satelliten? Dann verläuft die Fahrrad-Route jetzt wohl über Null Island. Beim Fotografieren stand kein GPS- Signal zur Verfügung? Dann wurde das Foto wohl auf Null Island gemacht! Und damit dürfte Null Island wohl einer der belebtesten Orte auf diesem Planeten sein.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Geografie, IT-Geschichte, Nerd-Enzyklopädie, Kuriosität</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 18 - Willkommen auf Null Island - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 17 - Fuenf — In your Face</title>
      <link>http://localhost:1313/2023/2023-04-13-nerd-enzyklop%C3%A4die-17---fuenf--in-your-face/</link>
      <pubDate>Thu, 13 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-04-13-nerd-enzyklop%C3%A4die-17---fuenf--in-your-face/</guid>
      <description>“Fuenf — In your Face” ist der Name eines Werkes von Farbrausch, einer Gruppe aus der Demo Szene, die laut pouet.net seit 2000 aktiv ist [POUE1].
Aber was ist …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Einführung in die Demoszene und ihre Geschichte, am Beispiel der berühmten 5-Byte-Demo &#39;Fuenf — In your Face&#39; der Gruppe Farbrausch. Der Artikel erklärt, wie Demos als audiovisuelle Kunstwerke technische und kreative Fähigkeiten unter extremen Größenbeschränkungen demonstrieren und wie sich die Demoszene aus der Warez-Szene entwickelte.</p>
          
          
          <p><strong>Hauptthemen:</strong> Demoszene, Computerkultur, Programmierung, Retrocomputing, Nerd-Kultur, Softwareentwicklung</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>“<strong>Fuenf — In your Face</strong>” ist der Name eines Werkes von <strong>Farbrausch</strong>, einer Gruppe aus der Demo Szene, die laut pouet.net seit 2000 aktiv ist [<a href="https://www.pouet.net/groups.php?which=322&amp;order=release&amp;reverse=1">POUE1</a>].</p>
<p>Aber was ist die Demo-Szene? Dieser Begriff beschreibt eine der ältesten Communities des digitalen Zeitalters. Demos sind musikalisch untermalte und animierte Grafiken, die die technischen und kreativen Fähigkeiten einer Gruppe zur Schau stellen — also demonstrieren — sollen. Eine Art digitales audiovisuelles Aushängeschild.</p>
<p><img src="/2023/2023-04-13-nerd-enzyklop%C3%A4die-17---fuenf--in-your-face/image1.png" alt=""></p>
<p style="text-align: center;font-style:italic">
craiyon.com: “democe scene around 2000”
</p>
<p>Die Demo-Szene ist auch eng vernüpft mit der “Warez-Szene”, <strong>Warez</strong> steht für Raubkopien. Raubkopien waren schon immer ein Problem, erst Recht um 1980 herum. Damals wie auch heute erforderte das Anfertigen einer Raubkopie ein gewisses technisches Verständnis, um den Kopierschutz mit mal mehr mal weniger Aufwand zu umgehen. Dieser Vorgang wird als „cracken“ bezeichnet, also „aufbrechen“.</p>
<p>Die Gruppen, die für die Raubkopie verantwortlich waren, versahen <em>gecrackte</em> Software mit einem Intro, das beim Start der Software angezeigt wurde. Das waren in der Regel digitale Musik-Videos, die den Namen der Cracker-Gruppe kunstvoll in Szene setzen sollen. Diese Intros wurden anfangs <strong>Cracktros</strong> genannt.</p>
<p>Mit der Zeit wurde dem Erstellen der Cracktros mehr Bedeutung beigemessen, wohl auch weil es oft aufwendiger war, beeindruckende Cracktros mit geringem Speicherbedarf zu produzieren, als den Kopierschutz zu umgehen. Diese Visitenkarte musste ja mit dem Spiel ausgeliefert und irgendwie auf den Datenträger gequetscht werden. Speicherplatz war damals eine wertvolle Ressource. Auf einer 1,44 MByte-Diskette, die ein komplettes Spiel enthielt, gab es eigentlich keinen Platz für aufwendige Animationen.</p>
<p>Aus dem <strong>Cracktros</strong> wurden schließlich Demos, die auf speziellen Demo-Disks verteilt wurden. Aus der Not wurde eine Tugend und schließlich der Wettbewerb, mit möglichst wenig Code beeindruckende Animationen zu erschaffen.</p>
<p>Die Demo-Szene war geboren und nabelte sich recht schnell von ihrem bösen Geschwister, der Raubkopierer-Szene, ab. Eine dieser Gruppen war die aus Deutschland stammende Gruppe <strong>Farbrausch.</strong> Seit <strong>2000</strong> liefert Farbrausch recht ansehnliche Werke ab, <strong>fuenf (in your face)</strong> gehört vermutlich eher nicht dazu und ist vielmehr einer der ersten klassischen Troll-Versuche des Internets: Es handelt sich dabei um ein 5 Byte große Demo vom <strong>29. Dezember 2001</strong>, von der man zunächst großes erwartet.</p>
<p>Letztlich handelt es sich aber nur um ziemlich anstrengende <strong>Störgeräusche</strong>, die sogar dazu führen konnten, dass der Computer nicht mehr auf Eingaben reagieren. Farbrausch verstand dieses “Werk” als Antwort auf eine ähnliche Produktion der Demogruppe <strong>TEXTEM</strong>, die nur <strong>6 Byte</strong> groß war.</p>
<p>Das sind die <strong>5 Byte</strong>, mit denen Farbrausch vermutlich für die eine oder andere akustische Irritation sorgte:</p>
<pre><code>95 cd 21 eb fc
</code></pre>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Demoszene, IT-Geschichte, Nerd-Enzyklopädie, Kultur</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 17 - Fuenf — In your Face - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 16 - USERSEEUSERDO</title>
      <link>http://localhost:1313/2023/2023-04-10-nerd-enzyklop%C3%A4die-16---userseeuserdo/</link>
      <pubDate>Mon, 10 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-04-10-nerd-enzyklop%C3%A4die-16---userseeuserdo/</guid>
      <description>„User See User Do“ ist eine Anspielung auf das englische Sprichwort “Monkey See, Monkey Do“, was in etwa so viel heißt wie “Was der Affe sieht, das macht er …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Erklärung aus der &#39;Nerd Enzyklopädie&#39; über die &#39;USERSEEUSERDO&#39;-Funktion in Windows 3.1. Der Artikel beleuchtet, wie diese Funktion zur Simulation von Benutzerverhalten für Stresstests des Betriebssystems eingesetzt wurde und ihren Namen vom Sprichwort &#39;Monkey See, Monkey Do&#39; ableitet.</p>
          
          
          <p><strong>Hauptthemen:</strong> Windows, Software Testing, Betriebssysteme, IT-Geschichte, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>„<strong>User See User Do</strong>“ ist eine Anspielung auf das englische Sprichwort “<strong>Monkey See, Monkey Do</strong>“, was in etwa so viel heißt wie “Was der Affe sieht, das macht er nach”. So weit, so despektierlich.<br>
Bei <strong>USER­SEE­USER­DO</strong> handelt es sich um eine Funktion innerhalb von <strong>Windows 3.1</strong>., die die Entwickler<em>innen dazu genutzt haben, Stresstests durchzuführen. Das Ziel der Funktion ist es, das Verhalten der Nutzer</em>innen zu simulieren, mit all seinen vielleicht nicht ganz so sinnvollen Ausprägungen, um die Funktionalität des Betriebssystems auch unter den widrigsten Bedingungen zu prüfen. [<a href="https://devblogs.microsoft.com/oldnewthing/20190731-00/?p=102743">MICR2</a>]</p>
<p><img src="/2023/2023-04-10-nerd-enzyklop%C3%A4die-16---userseeuserdo/image1.png" alt=""></p>
<p style="text-align: center;font-style:italic">
crayion.com: “Monkey See, Monkey Do”
</p>
        
        
        <div class="tags">
          <p><strong>Tags:</strong> Windows, Testing, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 16 - USERSEEUSERDO - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 15 - Der O’Reilly Zoo</title>
      <link>http://localhost:1313/2023/2023-04-07-nerd-enzyklop%C3%A4die-15---der-oreilly-zoo/</link>
      <pubDate>Fri, 07 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-04-07-nerd-enzyklop%C3%A4die-15---der-oreilly-zoo/</guid>
      <description>Wer sich in die faszinierenden Tiefen der Informationstechnologie wagt wird früher oder später über O’Reilly stolpern. Einem Verlag für Computerbücher, 1978 von …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Erkundung aus der &#39;Nerd Enzyklopädie&#39; über die Entstehungsgeschichte der ikonischen Tierillustrationen auf den Covern der O&#39;Reilly Computerbücher. Der Artikel erzählt, wie die Illustratorin Ellie Friedmann durch historische Tierstiche inspiriert wurde und wie Tim O&#39;Reilly das Alleinstellungsmerkmal dieser Designs erkannte, die später auch dazu dienten, auf bedrohte Tierarten aufmerksam zu machen.</p>
          
          
          <p><strong>Hauptthemen:</strong> O&#39;Reilly, IT-Geschichte, Buchdesign, Branding, Nerd-Kultur, Publishing</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Wer sich in die faszinierenden Tiefen der Informationstechnologie wagt wird früher oder später über <strong>O’Reilly</strong> stolpern. Einem Verlag für Computerbücher, <strong>1978</strong> von <strong>Tim O’Reilly</strong> in den <strong>USA</strong> gegründet. Den Büchern von O’Reilly gebührt ein fester Platz in den Regalen jeder Nerd-Bücherei. Ja, die digitale Revolution verschafft mitunter auch den altertümlichen Informationsträgern eine gewisse Daseinsberechtigung.</p>
<p><img src="/2023/2023-04-07-nerd-enzyklop%C3%A4die-15---der-oreilly-zoo/image1.png" alt=""></p>
<p style="text-align: center;font-style:italic">
craiyon.com: “draw an o’reilly animal”
</p>
<p>Eine Eigenschaft prägt fast alle diese Bücher: Auf dem Cover prangt unter dem Titel ein handgezeichnetes Tier [<a href="http://animals.oreilly.com/">OREI1</a>, <a href="https://www.oreilly.com/content/a-short-history-of-the-oreilly-animals/">OREI2</a>], sozusagen das Erkennungszeichen von O´Reilly. Aber das war nicht immer so.<br>
Mitte der 80er Jahre plante O’Reilly den Verkauf seiner Bücher auf eine neue Ebene zu heben und beauftragte die Marketing-Abteilung damit, neue Wege der Vermarktung zu finden. Eine Mitarbeiterin im Marketing stieß während der Suche nach Inspiration auf ihre Nachbarin, die Illustratorin <strong>Ellie Friedmann</strong>, die sie um Entwürfe für das Buch-Cover bat.</p>
<p>Friedmann tat sich anfangs schwer, stammten die Themen der Bücher doch aus einer ihr völlig unbekannten Welt. Linux und Netzwerke waren Mitte der <strong>1980er</strong> Jahre eher eine Randerscheinung. Bei der Suche nach Ideen stieß sie auf <strong>Tier-Gravuren</strong> aus dem <strong>19. Jahrhundert</strong>. Sie beschäftigte sich mit den Eigenschaften der Tiere und den Fachbegriffen aus den Büchern und war so inspiriert, dass sie ein ganzes Wochenende damit verbrachte, Vorschläge anzufertigen, die ihre Nachbarin dann der Marketing-Abteilung vorstellen konnte.</p>
<p>Dort war man zunächst kaum begeistert von den Tieren. Sie wurden als seltsam und sogar angsteinflössend aufgenommen. Tim O’Reilly sah das anders und erkannte das Alleinstellungsmerkmal. Von nun an sollten Tier-Zeichnungen einen Großteil der Bücher prägen. Für Friedman erfüllt die Darstellung der Tiere später auch einen höheren Zweck, abseits des schnöden Marketings. Sie will damit das öffentliche Interesse für die Bedrohung der Tiere wecken, deren Existenz von <strong>Jagd</strong>, <strong>Wilderei</strong> und der <strong>Zerstörung</strong> von Lebensraum bedroht ist.</p>
<p><strong>Ellie Friedmann</strong> arbeitet seit <strong>1986</strong> für den O’Reilly-Verlag, mittlerweile in der Funktion des <strong>Director of Brand Management</strong>.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> O&#39;Reilly, IT-Geschichte, Nerd-Enzyklopädie, Kultur</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 15 - Der O’Reilly Zoo - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 14 - FCKGW-RHQQ2-YXRKT-8TG6W-2B7Q8</title>
      <link>http://localhost:1313/2023/2023-04-04-nerd-enzyklop%C3%A4die-14---fckgw-rhqq2-yxrkt-8tg6w-2b7q8/</link>
      <pubDate>Tue, 04 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-04-04-nerd-enzyklop%C3%A4die-14---fckgw-rhqq2-yxrkt-8tg6w-2b7q8/</guid>
      <description>Hätte ich diese Zeichenfolge vor 20 Jahren veröffentlicht, würde morgen vermutlich der Staatsanwalt an meine Tür klopfen. Heute kann ich damit ein T-Shirt …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine historische Anekdote aus der &#39;Nerd Enzyklopädie&#39; über den berüchtigten Windows XP Volumenlizenzschlüssel &#39;FCKGW-RHQQ2-YXRKT-8TG6W-2B7Q8&#39;. Der Artikel beleuchtet die Geschichte dieses Schlüssels, seine Verbreitung durch Hacker, Microsofts Reaktion und die Entwicklung von Lizenzschutzmechanismen in der Softwareindustrie.</p>
          
          
          <p><strong>Hauptthemen:</strong> Softwarepiraterie, Lizenzmanagement, Windows XP, IT-Geschichte, Nerd-Kultur, Hacking</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Hätte ich diese Zeichenfolge vor 20 Jahren veröffentlicht, würde morgen vermutlich der Staatsanwalt an meine Tür klopfen. Heute kann ich damit ein T-Shirt bedrucken und beim Verband der Software-Industrie sorglos über die Flure flanieren.</p>
<p>Es handelt sich hierbei um einen <strong>Lizenzschlüssel</strong>, der Ende der <strong>1990er</strong> Jahre zu zweifelhafter Berühmtheit gelangte. Die Software-Industrie versuchte (damals wie auch heute) ihre Produkte mit <strong>Lizenzschlüsseln</strong> vor unerwünschten Kopien zu schützen. Diese mussten beim ersten Start der Software eingegeben werden, um das Programm nutzen zu können. So auch beim Betriebsystem <strong>Windows XP</strong>, das am <strong>28. August 2001</strong> erschien. Microsoft verteilte dafür unter anderem auch sogenannte Volumen-Lizenzschlüssel, die Unternehmen nutzen konnten, um gleich mehrere Kopien von Windows zu aktivieren.</p>
<p>Der Hacker-Gruppe <strong>devil’s0wn</strong> gelang <strong>35 Tage</strong> vor dem offiziellen Start von Windows XP der Coup schlechthin: Sie gelangten an eine Kopie des Betriebssystem und brachten diese zusammen mit dem funktionierenden Volumen-Lizenzschlüssel <strong>FCKGW-RHQQ2-YXRKT-8TG6W-2B7Q8</strong> in Umlauf.<br>
Das Foto einer selbstgebrannten CD und diesem Schlüssel machte im Internet die Runde und kann durchaus als Mittelfinger in Richtung Microsoft gedeutet werden:</p>
<p><img src="/2023/2023-04-04-nerd-enzyklop%C3%A4die-14---fckgw-rhqq2-yxrkt-8tg6w-2b7q8/image1.png" alt=""></p>
<p style="text-align: center;font-style:italic">
  Die legendäre Aufnahme der Raubkopie von Windows XP einen Monat bevor das Betriebssystem offiziell erscheinen sollte.
</p>
<p>Microsoft reagierte relativ spät und setzte den Schlüssel erst im August <strong>2004</strong> auf eine Blockier-Liste, um die weitere Nutzung zu unterbinden. Die Zeichenfolge sicherte sich trotzdem einen Platz in der IT-Popkultur und wird mittlerweile sogar auf T-Shirts vertrieben.</p>
<p>Andere berühmte Lizenzschlüssel sind z.B. die <strong>111–1111111</strong> und die <strong>000–0000007</strong> für <strong>Window 95</strong>. Die Mechanismen, um die Gültigkeit von Lizenzschlüsseln zu bewerten, waren damals noch nicht sehr ausgereift. Heutzutage muss man die Software aufwendig aktivieren oder benötigt eine Internetverbindung, um die Rechtmäßigkeit der Kopie prüfen zu können. In Windows 95 gab es ein paar einfache Regeln, nach denen der Lizenzschlüssel überprüft wurde. Im Prinzip bestand der Schlüssel nur aus einer Datumsangabe und einer Zahl, deren <strong>Quersumme 7</strong> ergibt [<a href="https://infosecwriteups.com/reversing-microsofts-windows95-product-key-check-mechanism-ca7e825014b6">INFOS1</a>]. Natürlich gab es auch Ausnahmen, so wurden auch 10 mal die 1 oder die James-Bond-Zeichenfolge akzeptiert.</p>
<p>Mittlerweile sind die Methoden der Software-Industrie weitaus ausgefeilter. So kann z.B. über eine ständige Internet-Verbindung die Validität geprüft werden. Oder es gibt Launcher, die die jeweilige Software starten und den Lizenz-Status überwachen.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Windows, IT-Geschichte, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 14 - FCKGW-RHQQ2-YXRKT-8TG6W-2B7Q8 - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 13 - Total hours wasted here = 42</title>
      <link>http://localhost:1313/2023/2023-04-01-nerd-enzyklop%C3%A4die-13---total-hours-wasted-here-42/</link>
      <pubDate>Sat, 01 Apr 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-04-01-nerd-enzyklop%C3%A4die-13---total-hours-wasted-here-42/</guid>
      <description>Dass Entwickler*innen einen speziellen Humor haben sollte bekannt sein. Und es gibt keinen Ort, an dem das klarer wird, als im Quellcode. Ein ikonisches …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Erkundung aus der &#39;Nerd Enzyklopädie&#39; über den speziellen Humor von Entwicklern, der sich in Quellcode-Kommentaren und unkonventionellen Programmierpraktiken widerspiegelt. Der Artikel beleuchtet das berühmte &#39;total_hours_wasted_here = 42&#39;-Meme und präsentiert weitere Beispiele für witzige, zynische oder selbstironische Code-Kommentare und &#39;quick and dirty&#39;-Lösungen.</p>
          
          
          <p><strong>Hauptthemen:</strong> Programmierung, Softwareentwicklung, Humor, Nerd-Kultur, Code-Qualität, Douglas Adams</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Dass Entwickler*innen einen speziellen Humor haben sollte bekannt sein. Und es gibt keinen Ort, an dem das klarer wird, als im Quellcode. Ein ikonisches Beispiel ist dieser subtile Hinweis auf die „Komplexität“ des entsprechenden Code-Bereichs:</p>
<pre><code>// total_hours_wasted_here = 42
</code></pre>
<p>Die <strong>42</strong> ist eine Anspielung auf das Buch “<strong>Per Anhalter durch die Galaxis</strong>” von <strong>Douglas Adams</strong>. Ein Supercomputer gibt darin die Antwort <strong>42</strong> auf „<strong>die ultimative Frage nach dem Leben, dem Universum und dem ganzen Rest</strong>“.</p>
<p>Die 42 wird oft als Verweis auf diese Szene verwendet, wenn eine Zahlenangabe erforderlich ist. So auch in jener flapsigen Dokumentation ist, gerne auch eingebettet in einen zynischen Kommentar zur Code-Qualität:</p>
<pre><code>// Dear maintainer:   
// Once you are done trying to ‘optimize’ this routine,  
// and have realized what a terrible mistake that was,   
// please increment the following counter as a warning   
// to the next guy:   
//  
// total_hours_wasted_here = 42
</code></pre>
<p>In der IT hat sich für derartigen Code der Begriff „quick and dirty“ eingebürgert. Die Lösung ist vielleicht nicht schön, aber dafür schnell implementiert. Wer auch immer sich später mit dem Quellcode auseinander setzt bzw. auseinander setzen muss, wird davon sicherlich nicht begeistert sein. Aber das dürfte wohl auch zum Berufsrisiko gehören.</p>
<p>Noch nicht genug Nerd-Humor? In der Community hat sich dankenswerterweise ein sportlicher Ergeiz entwickelt, möglichst einfallsreichen Quellcode zu produzieren. Wie wäre es mit einem angepassten <strong>Error-Handling</strong>?</p>
<pre><code>Exception up = new Exception(“Something is really wrong.”);  
throw up:
</code></pre>
<p>Oder einer <strong>Selbsterkenntnis</strong> wie dieser:</p>
<pre><code>// drunk, fix later
</code></pre>
<p>Dann hätten wir noch umgekehrte boolsche Werte in der <strong>Programmiersprache C</strong>:</p>
<pre><code>#define TRUE FALSE
</code></pre>
<p>Eine überraschende Offenbarung:</p>
<pre><code>return 1; # returns 1
</code></pre>
<p>Mein persönlicher Favorit: mathematische Trickserein:</p>
<pre><code>// I can’t divide with zero, so I have to divide with something very similar  
result = number / 0.00000000000001;
</code></pre>
<p>Noch mehr unterhaltsame Code-Kuriositäten, die ein ganzes Buch füllen würden, gibt es auf <strong>Stackoverflow</strong>: [<a href="https://stackoverflow.com/questions/184618/what-is-the-best-comment-in-source-code-you-have-ever-encountered">STACK1</a>].</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Programmierung, Humor, Nerd-Enzyklopädie, Kultur</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 13 - Total hours wasted here = 42 - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>cultural_analysis</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 12 - A CPU is literally a rock that we tricked into thinking</title>
      <link>http://localhost:1313/2023/2023-03-28-nerd-enzyklop%C3%A4die-12---a-cpu-is-literally-a-rock-that-we-tricked-into-thinking/</link>
      <pubDate>Tue, 28 Mar 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-03-28-nerd-enzyklop%C3%A4die-12---a-cpu-is-literally-a-rock-that-we-tricked-into-thinking/</guid>
      <description>Eine CPU ist nicht mehr als ein zerbröselter Felsen in den der Blitz eingeschlagen hat.
In Gänze lautet dieses wunderbare Bonmot:
If you ever code something …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Erkundung aus der &#39;Nerd Enzyklopädie&#39; über das Bonmot &#39;A CPU is literally a rock that we tricked into thinking&#39;. Der Artikel beleuchtet die wörtliche Wahrheit hinter dieser Aussage, indem er die Zusammensetzung einer CPU aus Silizium (Quarzsand) erklärt und auf ein Video von Intel verweist, das den Herstellungsprozess dokumentiert.</p>
          
          
          <p><strong>Hauptthemen:</strong> Computerhardware, CPU, Silizium, Informatik, Nerd-Kultur, Humor</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Eine CPU ist nicht mehr als ein zerbröselter Felsen in den der Blitz eingeschlagen hat.</p>
<p>In Gänze lautet dieses wunderbare Bonmot:</p>
<blockquote>
<p>If you ever code something that “feels like a hack but it works,” just remember that a CPU is literally a rock that we tricked into thinking […] first you have to flatten the rock and put lightning inside it […]<br>
@daisyowl am 15.03.2017 auf Twitter [<a href="https://twitter.com/daisyowl/status/841806379962646532">TWIT1</a>]</p></blockquote>
<p>Die Verfasserin spielt damit darauf an, dass nicht jede programmatische Lösung so elegant ist, wie man es sich vielleicht wünscht. Und schließlich besteht die CPU ja auch nur aus “<strong>elektrifiziertem Sand</strong>”: Das wichtigste Bauteil, das für die Berechnungen im Computer zuständig ist besteht zu einem Großteil aus <strong>Silizium</strong> und das wird in der Regel aus <strong>Quarzsand</strong> gewonnen. Der Strom stammt dann zwar nicht aus einem Blitz, das rundet das Bild aber passend ab.</p>
<p>Ob <strong>Intel</strong> sich von dem Tweet hat inspirieren lassen oder selber auf diese Idee kam, ist nicht überliefert. Jedenfalls hat man in <strong>2020</strong> die Herstellung der CPU in einem Video dokumentiert — vom Quarzsand bis zur Elektrifizierung [<a href="https://www.youtube.com/watch?v=_VMYPLXnd7E">YOUT1</a>].</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Hardware, Nerd-Enzyklopädie, Humor, Informatik</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 12 - A CPU is literally a rock that we tricked into thinking - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 11 - Der kleine Bobby Tables</title>
      <link>http://localhost:1313/2023/2023-03-25-nerd-enzyklop%C3%A4die-11---der-kleine-bobby-tables/</link>
      <pubDate>Sat, 25 Mar 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-03-25-nerd-enzyklop%C3%A4die-11---der-kleine-bobby-tables/</guid>
      <description>Der kleine Robert „Bobby” Tables ist Gegenstand eines Comics von xkcd (einer recht legendären Sammlung von Web-Comics von Randall Munroe). Der Comic über …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Erklärung aus der &#39;Nerd Enzyklopädie&#39; über den berühmten xkcd-Comic &#39;Der kleine Bobby Tables&#39; und die von ihm illustrierte Sicherheitslücke: SQL-Injection. Der Artikel erläutert, wie bösartiger SQL-Code über Eingabefelder in Datenbanken eingeschleust werden kann, um unerwünschte Aktionen auszuführen, und betont die Notwendigkeit der Validierung von Benutzereingaben.</p>
          
          
          <p><strong>Hauptthemen:</strong> SQL Injection, Web-Sicherheit, Datenbanken, Programmierung, Nerd-Kultur, xkcd</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Der kleine <strong>Robert</strong> „<strong>Bobby” Tables</strong> ist Gegenstand eines Comics von <strong>xkcd</strong> (einer recht legendären Sammlung von Web-Comics von <strong>Randall Munroe</strong>). Der Comic über besagten <strong>Bobby Tales</strong> trägt den Titel “<strong>Exploits of a Mom</strong>” [<a href="https://xkcd.com/327/">XKCD2</a>]. Ein <strong>Exploit</strong> beschreibt die Ausnutzung einer Sicherheitslücke in Computer-Systemen. In dem Comic geht es um einen Schüler, dessen Mutter ihren Sohn folgendem Namen verleiht — natürlich nur temporär:</p>
<pre><code>Robert’); DROP TABLE Students; — 
</code></pre>
<p>Das, was hinter dem Vornamen steht, mag wie Hieroglyphen oder ein Tippfehler aussehen. In der Tat handelt es sich aber um eine <strong>SQL-Anweisung</strong>, also den Befehl, die Tabelle mit dem Namen „<strong>Students</strong>“ zu löschen. Der Comic thematisiert damit die Sicherheitslücke <strong>SQL-Injection</strong>.</p>
<p>Dabei wird über eine Eingabemaske eine spezielle Zeichenfolge an das System übergeben, das diese ungeprüft übernimmt und so zu einer ungewünschten Aktion „überrumpelt“ wird. Das Ziel muss nicht unbedingt das Löschen von Daten sein, auch der Abruf von kritischen Informationen wie Passwörtern ist denkbar.</p>
<p>Die Moral der Geschichte, die sich an die Entwickler<em>innen von Eingabeformularen oder Datenbank-Schnittstellen wendet: Prüfe die Eingabe deiner Nutzer</em>innen.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> SQL, Sicherheit, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 11 - Der kleine Bobby Tables - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 10 - Brainfuck</title>
      <link>http://localhost:1313/2023/2023-03-22-nerd-enzyklop%C3%A4die-10---brainfuck/</link>
      <pubDate>Wed, 22 Mar 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-03-22-nerd-enzyklop%C3%A4die-10---brainfuck/</guid>
      <description>Die Behauptung ist natürlich starker Tobak. Bei Brainfuck handelt es sich um eine sogenannte “esoterische Programmiersprache”, entworfen vom Schweizer Urban …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Einführung aus der &#39;Nerd Enzyklopädie&#39; in die esoterische Programmiersprache Brainfuck. Der Artikel erklärt die acht minimalistischen Befehle der Sprache, demonstriert ihre Komplexität anhand eines &#39;Hello World!&#39;-Beispiels und beleuchtet ihren Zweck als Lernwerkzeug oder Coding-Challenge, anstatt für den produktiven Einsatz.</p>
          
          
          <p><strong>Hauptthemen:</strong> Programmiersprachen, Esoterische Programmierung, Informatik, Nerd-Kultur, Algorithmen</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Die Behauptung ist natürlich starker Tobak. Bei <strong>Brainfuck</strong> handelt es sich um eine sogenannte “<strong>esoterische Programmiersprache</strong>”, entworfen vom Schweizer <strong>Urban Müller</strong>. Brainfuck sollte eigentlich leicht zu lernen sein, da sie gerade einmal <strong>acht Befehle</strong> umfasst, die jeweils nur aus <strong>einem Zeichen</strong> bestehen. Was soll da schon schief gehen?</p>
<p>Eine ganze Menge. Denn diese besondere Eigenschaft dürfte das Programmieren ein wenig erschweren. Was nicht heißt, dass es unmöglich ist. Probier es doch mal aus. Das sind die acht Befehle, die du kennen musst:</p>
<pre><code>+ Wert der aktuellen Zelle inkrementieren  
- Wert der aktuellen Zelle dekremeWentieren  
&gt; Zeiger inkrementieren  
&lt; Zeiger dekrementieren  
[ Schleifen-Start  
] Schleifen-Ende  
. aktuellen Zellenwert ausgeben (zur Standardausgabe)  
, aktuellen Zellenwert einlesen (von Standardausgabe)
</code></pre>
<p>Fertig? Herzlich Glückwunsch, du kannst jetzt „Brainfuck“! und hast nun bestimmt kein Problem damit, diese „<strong>Hello World!</strong>“-Implementierung in Brainfuck zu verstehen [<a href="https://en.wikipedia.org/wiki/Brainfuck">WIKI13</a>]:</p>
<pre><code>++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt; — -.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++. — — — . — — — — .&gt;&gt;+.&gt;++.
</code></pre>
<p><strong>Brainfuck</strong> ist für den produktiven Einsatz natürlich kaum geeignet, sondern eher um das Konzept der Programmierung zu vermitteln oder für eine gemütliche Coding-Challenge am sonntäglichen Frühstückstisch.</p>
<p>Übrigens: Die Programmiersprache mit den meisten Keywords, nämlich <strong>217</strong>, heißt <strong>Visual Basic</strong>. [<a href="https://github.com/e3b0c442/keywords#c-ansi-c89-32-keywords">GITH2</a>].</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Programmiersprache, Nerd-Enzyklopädie, Humor, Informatik</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 10 - Brainfuck - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 9 - Der Streisand-Effekt</title>
      <link>http://localhost:1313/2023/2023-03-19-nerd-enzyklop%C3%A4die-9---der-streisand-effekt/</link>
      <pubDate>Sun, 19 Mar 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-03-19-nerd-enzyklop%C3%A4die-9---der-streisand-effekt/</guid>
      <description>Der Streisand-Effekt ist für die meisten sicherlich ein alter Hut, gehört aber auch in dieses illustre Kompendium der digitalen Phänomene. Der Streisand-Effekt …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Erklärung aus der &#39;Nerd Enzyklopädie&#39; über den &#39;Streisand-Effekt&#39;, ein Phänomen, bei dem der Versuch, Informationen zu unterdrücken, unbeabsichtigt zu deren weiterer Verbreitung führt. Der Artikel beleuchtet den Ursprung des Begriffs anhand des Rechtsstreits von Barbara Streisand um ein Luftbild ihres Anwesens und die tatsächliche Prägung des Begriffs durch Mike Masnick im Zusammenhang mit einem &#39;Pissoir&#39;-Fall.</p>
          
          
          <p><strong>Hauptthemen:</strong> Internet-Phänomene, Datenschutz, Medienrecht, Zensur, Nerd-Kultur, Informationskontrolle</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Der <strong>Streisand-Effekt</strong> ist für die meisten sicherlich ein alter Hut, gehört aber auch in dieses illustre Kompendium der digitalen Phänomene. Der Streisand-Effekt kann seine Dynamik vor allem auf Grund der schier endlosen Verbreitungsmöglichkeiten des Internets entfalten. Aber wie kam es dazu und welche Rolle spielen Pissoirs?</p>
<h3 id="am-anfang-war-die-erosion">Am Anfang war die Erosion…</h3>
<p>In <strong>2003</strong> fertige <strong>Kenneth Adelmann</strong> für <strong>pictopia.com</strong> zahlreiche Luftaufnahmen der kalifornischen Küste an, um die dort vorherrschende <strong>Erosion</strong> zu dokumentieren. Auf einer der <strong>12.000 (!) Aufnahmen</strong> war auch das Anwesen von <strong>Barbara Streisand</strong> zu sehen. Die war davon aber kaum angetan, wohl in Sorge um Ihre Privatsphäre (<strong>Google</strong> <strong>StreetView</strong>, Streisands Endgegner, startete übrigens erst 4 Jahre später). Also verklagte sie Adelmann prompt auf Schadensersatz in Höhe von <strong>50 Mio. USD.</strong></p>
<p><img src="/2023/2023-03-19-nerd-enzyklop%C3%A4die-9---der-streisand-effekt/image1.png" alt=""></p>
<p style="text-align: center;font-style:italic">
Das Grundstück von Barbara Streisand um 2003 an der Küste Kaliforniens ([WIKI12](https://de.wikipedia.org/wiki/Streisand-Effekt#/media/Datei:Streisand_Estate.jpg))
</p>
<p>Natürlich wusste die Öffentlichkeit bisher nicht, wo sich das Anwesen von Streisand befand. Und vermutlich hätte sie es auch nicht erfahren, denn das Thema Küstenerosion — ein wichtiges Forschungsthema — dürfte für einen Smalltalk am Stammtisch nicht gerade geeignet sein. Bis dahin wurde die Aufnahme <strong>6 mal</strong> aufgerufen [<a href="https://www.techdirt.com/2015/01/08/10-years-everyones-been-using-streisand-effect-without-paying-now-im-going-to-start-issuing-takedowns/">TECHD1</a>].</p>
<p>Mit der Klage änderte sich das. Das öffentliche Interesse war geweckt. Leider nicht zugunsten des Küstenschutzes, sondern für diese eine Luftaufnahme, die sich schlagartig im Internet verbreitete und im ersten Monat <strong>420.00 Aufrufe</strong> generierte. Die Position von Streisands Küstendomizil war nun gar nicht mehr so unbekannt. Barbara Streisand hatte mir ihrer Klage genau das Gegenteil erreicht und sich damit auch einen Platz in der Popkultur gesichert — abseits von ihrer musikalischen Leistung: Der Streisand-Effekt beschreibt den hilflosen und ungeschickten Versuch eine unbeliebte und noch nicht sehr weit verbreitet Information zu unterdrücken, was ihre Bekanntheit in der Öffentlichkeit erst erhöht. Doch das war nicht die Geburtsstunde des Begriffs!</p>
<p>Erst in <strong>2005</strong> wurde der „Streisand-Effekt“ erstmals erwähnt: Auf der Seite <strong>urinal.net</strong> gibt es Aufnahmen von Toiletten. Unter anderem aus dem <strong>Marco Beach Ocean Resort</strong>. Und das Ressort hat den Betreiber der Seite in 2005 abgemahnt. In der Folge erlangte die Aufnahme dieses Pissoirs eine gewisse Aufmerksamkeit im Internet. <strong>Mike Manik</strong>, Autor des Online-Magazins <strong>Techdirt</strong>, berichtete über diesen ungewollten Popularitäts-Zuwachs und nannte das den „Streisand-Effekt“ [<a href="https://www.techdirt.com/2015/01/08/10-years-everyones-been-using-streisand-effect-without-paying-now-im-going-to-start-issuing-takedowns/">TECHD1</a>].</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Internet, Datenschutz, Nerd-Enzyklopädie, Phänomen</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 9 - Der Streisand-Effekt - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>cultural_analysis</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 7 - Das allererste Easter-Egg</title>
      <link>http://localhost:1313/2023/2023-03-13-nerd-enzyklop%C3%A4die-7---das-allererste-easter-egg/</link>
      <pubDate>Mon, 13 Mar 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-03-13-nerd-enzyklop%C3%A4die-7---das-allererste-easter-egg/</guid>
      <description>Als Easter Egg - also Osterei - wird eine versteckte Botschaft, Feature oder Gimmick in einem Programm, Computerspiel und eigentlich überall bezeichnet. Der …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine historische Erkundung aus der &#39;Nerd Enzyklopädie&#39; über die Ursprünge von &#39;Easter Eggs&#39; in Software und Spielen. Der Artikel beleuchtet frühe Beispiele wie den &#39;make love&#39;-Befehl und das Spiel &#39;Moonlander&#39;, konzentriert sich aber auf das erste bekannte Easter Egg in Ataris &#39;Adventure&#39; von Warren Robinett und die Prägung des Begriffs durch Steve Wright.</p>
          
          
          <p><strong>Hauptthemen:</strong> Computergeschichte, Gaming, Softwareentwicklung, Easter Egg, Nerd-Kultur, Atari</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Als Easter Egg - also Osterei - wird eine versteckte Botschaft, Feature oder Gimmick in einem Programm, Computerspiel und eigentlich überall bezeichnet. Der Kreativität sind keine Grenzen gesetzt. So z.B. der Aufkleber mit dem Intel-Logo auf der CPU-Verpackung, der auf der Rückseite wie das Innenleben einer CPU aussieht [REDDI1].</p>
<p>Das erste bekannte Easter Egg überhaupt  befindet sich im <strong>make</strong>-Befehl der Computer <strong>PDP-6</strong> und <strong>PDP-10.</strong> Führte man den Befehl mit dem Argument <strong>love</strong> gab es die Ausgabe <strong>not war</strong> zurück, bevor es die Ausführung fortführte:</p>
<pre><code>$ make love

not war
</code></pre>
<p><strong>Moonlander (1973)</strong> von <strong>Jack Burness</strong> von <strong>DEC</strong> (Digital Equipment Corporation) war das erste Spiel mit einer versteckten Funktion. Bewegte man sich lange genug horizontal, erschien irgendwann ein McDonalds Restaurant. Das Spiel wurde für den <strong>GT40</strong> entwickelt und diente eher dazu, die Fähigkeiten des Terminals zu demonstrieren. 1979 adaptierte <strong>Atari</strong> mit <strong>Lunar Lander</strong> das Konzept und entwickelte daraus ein „echtes“ Spiel.</p>
<p>Der Begriff Easter Egg wurde allerdings erst in <strong>1979</strong> geprägt und zwar bei eben jenem Unternehmen: <strong>Atari</strong>. Das Management von Atari hatte ja bekanntermaßen ein schwieriges Verhältnis zu seinen Mitarbeitern (siehe —&gt; Die Entstehungsgeschichte von Activision). Einerseits war man nicht an Gehaltsverhandlungen interessiert, andererseits hielt man es nicht für nötig, die Namen der Entwickler beim Abspann der Spiele zu erwähnen. Heutzutage eine Selbstverständlichkeit. Also die Erwähnung, nicht die Nicht-Erwähnung.</p>
<p>Der Grund für diese Praxis: Man wollte verhindern, dass die Konkurrenz weiß, wen sie bei Atari abwerben muss. Der Entwickler des Spiels <strong>Adventure</strong>, <strong>Warren Roinett</strong>, wählte eine ganz besondere Form des Protests: Er verewigte sich mit diesen Worten innerhalb eines Raum, der im Spiel nur schwer zu erreichen war:</p>
<p><img src="/2023/2023-03-13-nerd-enzyklop%C3%A4die-7---das-allererste-easter-egg/Adventure_EastereggPNG.png" alt=""></p>
<p style="text-align: center;font-style:italic">
„Created by Warren Robinett“ in Ataris Adventure, 1979 \[WIKI4\]
</p>
<p>Das Easter Egg wurde erst nach dem Weggang von <strong>Robinett</strong> entdeckt. Der 15-jährige <strong>Adam Clayton</strong> aus Salt Lake City fand die „geheime Botschaft“ und beschrieb in einem Brief an Atari, welche Schritte notwendig waren, um in den versteckten Raum zu gelangen (ob jemand anders die Entdeckung vor ihm gemacht hat, ist nicht übermittelt). <strong>Adam Clayton</strong> wurde später selber Software-Entwickler, entwickelte sogar Spiele für die Atari-System und arbeitet heute für <strong>Warner Bros Entertainment</strong>.</p>
<p>Die Begeisterung seitens Atari hielt sich in Grenzen. Da Robinett das Unternehmen bereits verlassen hat, machte man sich im Quellcode auf die Suche nach dem Easter Egg. <strong>Brad Stewart</strong> fand die entsprechende Stelle, tat sich aber auch schwer damit, die Nachricht zu entfernen. Weniger aus technischer Sicht, vielmehr aus rebellischem Antrieb. Er hielt mehr davon, die Nachricht durch „Fixed by Brad Stewart“ zu ersetzen [WARR1].</p>
<p>Atari verzichtete schließlich auf die Anpassung des Spiels, nicht nur, weil die Herstellung eines neue ROM-Masters - sozusagen die Vorlage für die Massenproduktion - etwa <strong>10.000 USD</strong> gekostet hätte. <strong>Steve Wright</strong>, damals Direktor für Software Development bei Atari, fand Gefallen an der Idee einer versteckten Botschaft und wählte dafür den Begriff „Easter Egg“. In vielen Spielem (und wie gesagt auch in anderen Produkten) sollten fortan diese kleinen versteckten Botschaften zu finden sein.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Gaming, IT-Geschichte, Nerd-Enzyklopädie, Anekdote</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 7 - Das allererste Easter-Egg - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 5 - Gesehen, gelacht, F8</title>
      <link>http://localhost:1313/2023/2023-03-07-nerd-enzyklop%C3%A4die-5---gesehen-gelacht-f8/</link>
      <pubDate>Tue, 07 Mar 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-03-07-nerd-enzyklop%C3%A4die-5---gesehen-gelacht-f8/</guid>
      <description>Dieser fröhliche Ausspruch geht auf eine populäre Software zurück bzw. auf eine ganze Software-Familie: Die alternativen Dateimanager. Einer ihrer ältesten und …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieser Artikel aus der &#39;Nerd Enzyklopädie&#39; beleuchtet die Herkunft des Ausdrucks &#39;Gesehen, gelacht, F8&#39; im Kontext der frühen Computer-Dateiverwaltung. Er erklärt die Rolle des Norton Commanders und seiner Klone, wie dem Total Commander, und wie die Funktionstaste F8 zum Löschen von Dateien zu einem humorvollen Ausdruck für das Verwerfen enttäuschender Software oder Medien wurde.</p>
          
          
          <p><strong>Hauptthemen:</strong> Computergeschichte, Dateimanager, Norton Commander, Total Commander, DOS, Tastenkombinationen, Nerd-Kultur, Humor</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Dieser fröhliche Ausspruch geht auf eine populäre Software zurück bzw. auf eine ganze Software-Familie: Die alternativen Dateimanager. Einer ihrer ältesten und wichtigsten Vertreter ist der sagenumwobene <strong>Norton Commander</strong>. Jeder Nerd sollte bei diesem Anblick feuchte Augen bekommen:</p>
<p><img src="/2023/2023-03-07-nerd-enzyklop%C3%A4die-5---gesehen-gelacht-f8/image.png" alt=""></p>
<p style="text-align: center;font-style:italic">
Der Norton Commander Version 5 (1995) [[WIKI3](https://de.wikipedia.org/wiki/Norton_Commander)]
</p>
<p>Der Norton Commander wurde 1984 unter dem Namen <strong>VisualDOS</strong> (VDOS, DOS steht für Disc Operating System) von <strong>John Socha</strong> entwickelt und später von <strong>Peter Norton Computing</strong> vertrieben. DOS war seinerzeit ein Betriebsystem, das ohne grafische Benutzeroberfläche auskam. Für viele Anwender*innnen heutzutage vermutlich eine seltsame Vorstellung.</p>
<p>Mithilfe des Norton Commanders konnte man nicht nur Dateioperationen bequem durchführen, sondern hatte auch andere nützliche Funktionen an zentraler Stelle zur Verfügung. Selbst als mit <strong>Microsoft Windows</strong> eine grafische Benutzeroberfläche zur Verfügung stand, galt der Norton Commander noch als willkommene Alternative zum hauseigenem und etwas sperrigen Dateimanager. Der Norton Commander wird seit 2000 nicht mehr weiterentwickelt. Mittlerweile gibt es zahlreiche Ableger und Klone für alle gängigen Betriebssysteme und sogar für Smartphones. Der <a href="https://www.ghisler.com/deutsch.htm"><strong>Total Commander</strong> von Christian Ghisler</a> dürfte wohl zum bekanntesten Vertreter dieser Gattung gehören.</p>
<p>Wie dem auch sei: Dateien und Ordner ließen sich schnell über die <strong>Funktionstaste F8</strong> löschen. Ein Tastenkürzel, das von den meisten Norton-Commander-Klonen weiterhin unterstützt wird. Wenn man vom Unterhaltungswert eines Spiels, einer Software oder eines Videos enttäuscht war, wurde es so einfach vom Computer entfernt. So entstand der Ausruf „gesehen“ (das Spiel getestet, das Video angesehen, …) „gelacht“ (im Sinne einer abwertenden Beurteilung) und „F8“ (Löschen!).</p>
<p>Gesehen. Gelacht. F8…</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Computergeschichte, Dateimanager, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 5 - Gesehen, gelacht, F8 - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie 4 - RegExen — Jetzt hast du zwei Probleme</title>
      <link>http://localhost:1313/2023/2023-03-04-nerd-enzyklop%C3%A4die-4---regexen--jetzt-hast-du-zwei-probleme/</link>
      <pubDate>Sat, 04 Mar 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-03-04-nerd-enzyklop%C3%A4die-4---regexen--jetzt-hast-du-zwei-probleme/</guid>
      <description>Reguläre Ausdrücke sind umstritten: Geliebt als vielseitiges Werkzeug, verdammt als undurchschaubare Fehlerquelle. Nicht ohne Grund heißt es: Reguläre Ausdrücke …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle und kritische Auseinandersetzung mit regulären Ausdrücken (RegEx) und dem bekannten Programmierer-Meme &#39;Jetzt hast du zwei Probleme&#39;. Der Artikel beleuchtet die Komplexität, den Missbrauch und die Sicherheitsrisiken (Catastrophic Backtracking, ReDOS) von RegEx und verfolgt die Ursprünge des berühmten Zitats.</p>
          
          
          <p><strong>Hauptthemen:</strong> Reguläre Ausdrücke, Programmierung, Softwareentwicklung, Sicherheit, Nerd-Kultur, Algorithmen</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>Reguläre Ausdrücke sind umstritten: Geliebt als vielseitiges Werkzeug, verdammt als undurchschaubare Fehlerquelle. Nicht ohne Grund heißt es: Reguläre Ausdrücke lösen ein Problem und schaffen zwei neue.<br>
Woher kommt diese Hassliebe?</p>
<h2 id="eine-exotische-tierart">Eine exotische Tierart</h2>
<p>Reguläre Ausdrücke, kurz RegExen, sind mitunter schwer zu entwickeln und irgendwann kaum noch lesbar. Das erschwert das Debugging, also die Fehlersuche. Wie wäre es zum Beispiel mit diesem Schmuckstück:</p>
<pre><code>^(?=.*[A-Z].*[A-Z])(?=.*[!@#$&amp;*])(?=.*[0–9].*[0–9])(?=.*[a-z].*[a-z].*[a-z]).{8}$
</code></pre>
<p>Na, erkannt? Diese RegExe überprüft ob eine Passwort-Zeichenfolge bestimmten Sicherheitsanforderungen entspricht. Diesen Hinweis kann man im Quellcode vielleicht noch dokumentieren. Aber was wenn sich die Sicherheitsanforderungen im Detail ändern?</p>
<h2 id="mit-kanonen-auf-spatzen">Mit Kanonen auf Spatzen…</h2>
<p>RegExen werden außerdem gerne dort eingesetzt, wo eigentlich bessere, standardisierte Lösungen vorhanden sind, wie z.B. für das Parsen von XML [<a href="https://flapenguin.me/xml-regex">FLAP1</a>]:</p>
<pre><code>\s*  
(?(?=&lt;)  
  (?&lt;opentag&gt;  
    &lt; \s*  
    (?&lt;tagname&gt;\w+)  
    (?&lt;attibute&gt;  
      \s+  
      (?&lt;attrname&gt;[^\s&gt;]+)  
      =  
      (?&lt;attrquote&gt;&quot;|'|)  
      (?&lt;attrvalue&gt;[^\s&quot;'&gt;]+)  
      (\k{attrquote})  
    )*  
    \s*  
    (?&lt;selfclosing&gt;\/\s*)?  
    &gt;  
  )  
  (?(&lt;selfclosing&gt;)|  
    (?&lt;children&gt;(?R))  
    (?&lt;closetag&gt;&lt;\s* \/ \s* \k{tagname} \s*&gt;)  
  )  
|  
  (?&lt;text&gt;[^&lt;]*)  
)*  
\s*
</code></pre>
<p>Was aussieht als wäre deine Katze auf der Tastatur eingeschlafen, ist eine funktionsfähige RegExe. Mit genau einem Vorteil: Wenn man den Ausdruck Stück für Stück zerpflückt, um ihn zu verstehen, kann man viel über die Möglichkeiten regulärer Ausdrücke lernen. Im produktiven Betrieb sollte man trotzdem auf alternative Ansätze zurückgreifen, um mit XML-Daten zu arbeiten. Wie z.B. XML-Parser, die soll es ja wirklich geben.</p>
<h2 id="backtracking">Backtracking</h2>
<p>RegExen können auch zu handfesten Sicherheitsproblemen führen. Die Ursache liegt in der Art, wie RegExen verarbeitet werden. Sie durchlaufen einen String zeichenweise, bis eine Bedingung nicht mehr erfüllt wird und springen dann zu dem Zeichen zurück, an dem der Ausdruck vielleicht einen anderen Lösungsweg nehmen kann. Dieses Vorgehen nennt man <strong>Backtracking</strong>, also Rückverfolgung. Diese Funktion kann aber zu einem Rückkopplungs-Effekt führen, wodurch die Dauer der Verarbeitung exponentiell ansteigt. Die Folge nennt man „Catastrophic Backtracking“, eine wichtige Grundlage für <a href="https://medium.com/@nitinpatel_20236/what-are-evil-regexes-7b21058c747e">ReDOS</a> (<a href="https://medium.com/@nitinpatel_20236/what-are-evil-regexes-7b21058c747e">Regular Expression Denial Of Service</a>) Angriffe [<a href="https://www.regular-expressions.info/catastrophic.html">REGU1</a>]. Ein einfaches Beispiel ist dieser reguläre Ausdruck [<a href="https://medium.com/@nitinpatel_20236/what-are-evil-regexes-7b21058c747e">MEDI1</a>]:</p>
<pre><code>(x+x+)+y.
</code></pre>
<p>Diese RegExe lässt sich sicherlich optimieren, sie soll auch nur zeigen, wie schnell die Verarbeitung eskalieren kann. Als Test-String dient diese einfache Zeichenkette:</p>
<pre><code>xxxxxy
</code></pre>
<p>Die Verarbeitung erfordert in diesem Fall in <strong>123 Schritte</strong>. Passen wir die Zeichenkette nun etwas an:</p>
<pre><code>xxxxxxxxxxxxxy
</code></pre>
<p>Mehr als <strong>38.000 Schritte</strong> sind jetzt erforderlich, um den regulären Ausdruck zu prüfen. Mit dem richtigen regulären Ausdruck und der passenden Zeichenkette kann ein Browser „mühelos“ zum Absturz gebracht werden.</p>
<p>Der Einsatz von regulären Ausdrücken ist also streitbar. Übrigens: Dem Netscape Entwickler <strong>Jamie Zawinski</strong> wird zugeschrieben, diese Erkenntnis als erster in Worte gefasst zu haben. Er stellte bereits <strong>1997</strong> fest [<a href="https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/">CODI1</a>]:</p>
<blockquote>
<p>Some people, when confronted with a problem, think “I know, I’ll use regular expressions.” Now they have two problems.</p></blockquote>
<p>Dieser Ausspruch geht wiederum auf <strong>David Tilbrook</strong> zurück, der sich (selber nur vage) erinnert, wie er <strong>1985</strong> auf einer Konferenz in <strong>Dublin</strong> die Nutzung des Kommandozeilen-Tools <strong>awk</strong> kommentiert [<a href="http://regex.info/blog/2006-09-15/247">REGE1</a>]:</p>
<blockquote>
<p>“If you have a problem and you think awk is the solution, then you have two problems.”</p></blockquote>
<p><strong>RegExen</strong> und <strong>awk</strong> sind nicht die einzigen zweifelhaften Tools, auch <a href="http://regex.info/blog/2006-09-15/247">Perl</a> hat einen gewissen Ruf. Aber vermutlich ist das nur eine besondere Art von Nerd-Humor, vor der niemand sicher ist:</p>
<p><img src="/2023/2023-03-04-nerd-enzyklop%C3%A4die-4---regexen--jetzt-hast-du-zwei-probleme/image.png" alt=""></p>
<p style="text-align: center;font-style:italic">
Bildquelle [[XKCD1](https://xkcd.com/1171/)]
</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> RegEx, Programmierung, Sicherheit, Nerd-Enzyklopädie, Humor</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie 4 - RegExen — Jetzt hast du zwei Probleme - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie - 640K Speicher sind genug</title>
      <link>http://localhost:1313/2023/2023-03-01-die-nerd-enzyklop%C3%A4die---640k-speicher-sind-genug/</link>
      <pubDate>Wed, 01 Mar 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2023/2023-03-01-die-nerd-enzyklop%C3%A4die---640k-speicher-sind-genug/</guid>
      <description>Diese Aussage gehört wohl in jedes gut gepflegte Informatik-Seminar: Bill Gates unterlag anscheinend dem Irrglauben, dass 640 KByte Arbeitsspeicher für Computer …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine Untersuchung aus der &#39;Nerd Enzyklopädie&#39; über das berühmte, aber oft falsch zugeschriebene Zitat von Bill Gates: &#39;640K Speicher sind genug&#39;. Der Artikel entlarvt den Mythos, dass Gates diese Aussage je gemacht hat, und verfolgt die Ursprünge der Fehlzuschreibung in verschiedenen Publikationen, während er die Hartnäckigkeit des Gerüchts beleuchtet.</p>
          
          
          <p><strong>Hauptthemen:</strong> IT-Geschichte, Bill Gates, Microsoft, Computerhardware, Mythen, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Diese Aussage gehört wohl in jedes gut gepflegte Informatik-Seminar: Bill Gates unterlag anscheinend dem Irrglauben, dass 640 KByte Arbeitsspeicher für Computer genügen würden. Wir alle wissen, dass selbst unsere Armbanduhren ein vielfaches davon benötigen.</p>
<p>Bereits 1981 soll sich Bill Gates dieses umstrittene Bonmot abgerungen haben und es kursiert immer noch  durch das Internet und ominöse IT-Vorlesungen.Dabei erklärte Gates knapp 15 Jahre später, dass die Aussage gar nicht von ihm stammt. Seine Erklärung ergibt durchaus Sinn: Der damals erschienene IBM PC konnte mit bis zu 640 KB Arbeitsspeicher ausgerüstet werden. Kam es jemals vor, dass sich Software-Entwickler mit den gegebenen Ressourcen zufrieden geben? Das Ausreizen technischer Grenzen ist wohl eher eine sportliche Disziplin in der IT. Man kann also annehmen, dass Gates eher der gegenteiligen Ansicht war [<a href="https://abcnews.go.com/Technology/PCWorld/story?id=5214635">GO1</a>]:</p>
<blockquote>
<p>&ldquo;Do you realize the pain the industry went through while the IBM PC was limited to 640K? The machine was going to be 512K at one point, and we kept pushing it up. I never said that statement &mdash; I said the opposite of that.”</p>
<p><em>Bill Gates gegenüber Bloomberg Business News, 1996</em></p></blockquote>
<p>Woher stammt das angebliche Zitat? Ein erster Hinweis findet sich in der Zeitschrift &ldquo;InfoWorld” vom 29. April 1985 [<a href="https://books.google.de/books?id=2C4EAAAAMBAJ&amp;lpg=PA5&amp;vq=%22nobody%20would%22&amp;pg=PA5">INFOW1</a>] - allerdings ohne Hinweis auf ein eventuell statt gefundenes Interview:</p>
<p>When we set the upper limit of PC-DOS at 640K, we thought nobody would ever need that much memory.</p>
<p><img src="/2023/2023-03-01-die-nerd-enzyklop%C3%A4die---640k-speicher-sind-genug/Unbekannt2.png" alt=""></p>
<p style="text-align: center;font-style:italic">
William Gates, chairman of Microsoft in InfoWorld, 1985
</p>
<p>Von dem zweifelhaften Kontext abgesehen, ist diese Aussage auch weit entfernt von: &ldquo;640 KByte sind genug&rdquo;. Das gleiche Magazin veröffentlichte einige Jahre später ein ähnliches Zitat - aber auch hier ohne Hinweis auf den Kontext, wie z.B. ein Interview:</p>
<blockquote>
<p>&ldquo;640K ought to be enough for anyone”</p>
<p><em>Bill Gates, InfoWorld, 1990</em></p></blockquote>
<p>Knapp fünf Jahre später griff die Washington Post die Aussage im Rahmen einer Zitatesammlung mit dem Titel &ldquo;If They Only Knew&rdquo; (&ldquo;Wenn sie nur wüssten&rdquo;) auf. Hier hieß es, dass Gates die besagte Aussage 1981 machte.</p>
<p>Es folgte eine Kaskade von Referenzen, wie z.B. im Buch &ldquo;The Experts Speak: The Definitive Compendium of Authoritative Misinformation” mit einem Verweis auf die Washing Post [<a href="https://quoteinvestigator.com/2011/09/08/640k-enough/1">QUOTE1</a>].</p>
<p>Die Beweislage ist also relativ dünn und sogar widersprüchlich. Der Recherche-Blog Quote Investigator hat den Wahrheitsgehalt untersucht - und gibt ausreichend Anlass zur Skepsis [<a href="https://quoteinvestigator.com/2011/09/08/640k-enough/1">QUOTE1</a>]. Trotzdem hält sich das Gerücht hartnäckig; das Computer-Magazin chip glaubte noch 2016 daran:</p>
<p><img src="/2023/2023-03-01-die-nerd-enzyklop%C3%A4die---640k-speicher-sind-genug/Unbekannt.png" alt=""></p>
<p style="text-align: center;font-style:italic">
Bildquelle \[[CHIP1](https://www.chip.de/news/640-kB-sollten-genug-sein-Die-groessten-Technik-Irrtuemer-der-Geschichte_92787690.html)\]
</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> IT-Geschichte, Microsoft, Nerd-Enzyklopädie, Mythos</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie - 640K Speicher sind genug - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>historical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie - Computer sind nicht pünktlich</title>
      <link>http://localhost:1313/2022/2022-01-30-die-nerd-enzyklop%C3%A4die/</link>
      <pubDate>Mon, 30 Jan 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2022/2022-01-30-die-nerd-enzyklop%C3%A4die/</guid>
      <description>Es war einmal im Jahr 2000 und 23… Computer sind nicht nur notorisch unpünktlich, sie haben grundsätzliche ein Problem mit “Zeit”. Aber warum? Es ist die Art, …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine umfassende Erkundung aus der &#39;Nerd Enzyklopädie&#39; über die Herausforderungen von Computern bei der Zeitmessung und -verarbeitung. Der Artikel beleuchtet historische Zeitfehler wie das Jahr-2038-Problem und den Y2K-Bug, zukünftige Limitierungen von 64-Bit-Systemen, die Komplexität von Schaltsekunden und die Ursachen für die &#39;Unpünktlichkeit&#39; von Computern.</p>
          
          
          <p><strong>Hauptthemen:</strong> Computergeschichte, Zeitmessung, Softwarefehler, Y2K, Unixzeit, Schaltsekunden, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <h2 id="es-war-einmal-im-jahr-2000-und-23">Es war einmal im Jahr 2000 und 23…</h2>
<p>Computer sind nicht nur notorisch unpünktlich, sie haben grundsätzliche ein Problem mit “Zeit”. Aber warum? Es ist die Art, wie Computer Zeit messen bzw. Zeitangaben verarbeiten. Stell dir vor, du könntest bis 2.000 zählen. Welches Jahr haben wir jetzt? 2000… und 23? Gesprochen klingt das noch ganz gut, aber spätestens beim Aufschreiben wird es unübersichtlich. Bei Computern ist es noch etwas komplizierter.</p>
<h2 id="the-epoch">The Epoch</h2>
<p>Schauen wir uns mal „The Epoch“ oder auch die „Unixzeit“ an. Damit wird das Startdatum der Zeitrechnung der meisten Computer bezeichnet: Der 1. Januar 1970.</p>
<p>Ursprünglich wählte man als Beginn der Zeitrechnung den 1. Januar 1971. Die Zeit sollte durch einen Zähler repräsentiert werden, der an diesem Tag bei 0 beginnt und dann in regelmäßigen Abständen (Takten) um 1 erhöht wird. Die eingebaute Uhr der damaligen Computer bot sich als Taktgeber an. Sie arbeitete mit einer Frequenz von 60 Hz, also 60 Takten pro Sekunde. Das entspricht nicht nur zufällig der Frequenz der Stromnetze in Nordamerika. Der Zeitzähler wurde also 60 mal pro Sekunde erhöht bzw. jede Sekunde um den Wert 60.</p>
<p>Die Obergrenze von 4.294.967.295 ergibt sich aus der Größe einer einzelnen Speicherstelle: 32 Bit . Wenn man am 1. Januar 1971 bei 0 anfängt zu zählen indem man 60 mal pro Sekunde 1 dazu addiert, erreicht man die 32 Bit-Grenze nach 71.582.788 Sekunden. Das entspricht 1.193.046 Minuten, 19.884 Stunden oder in etwa 2,5 Jahre. Man hätte die Zeit also damals schon nur bis 1973 messen können — ein Bug, der bereits bei der Beschreibung des entsprechenden Datentyps bekannt war:</p>
<p><img src="/2022/2022-01-30-die-nerd-enzyklop%C3%A4die/image.png" alt=""></p>
<p>Quelle: Unix Programmer’s Manual, System calls, Teil 2 (Bell Labs, 3.11.1971, Seite 13) [<a href="https://www.bell-labs.com/usr/dmr/www/pdfs/man22.pdf">BELL</a>]</p>
<p>Also änderte man kurze Zeit später die Zählfrequenz auf 1 Sekunde und setzte das Startdatum auf den 01.01.1970. Gleichzeit entschied man sich aber auch für einen “vorzeichenbehafteten“ Zähler, ein sogenannter „signed integer”: Das erste der 32 Bit wird als Vorzeichen verwendet. Ist es auf 1 gesetzt, interpretiert der Computer die gesamte Zahl als negativ. So ist man in der Lage, die Zeit auch rückwärts zu erfassen.</p>
<p>Da nun nur noch 31 Bit zur Verfügung stehen, reduzierte sich die Obergrenze für die Zeitzählung auf 2.147.483.647. Mit der außerdem angepassten Zählfrequenz von 1 Sekunde war der Computer in der Lage 68 Jahre lang die die Zeit sekundengenau zu messen. Das neue Enddatum für die Zeitrechnung ist damit der 19. Januar 2038. An diesem Dienstag um 3 Uhr nachts, 14 Minuten und 7 Sekunden mitteleuropäischer Zeit wird der Zähler den Wert 2³¹ erreichen. In binärer Schreibweise sehen die 3 Sekunden um diesen Zeitpunkt herum so aus:</p>
<pre><code>Dienstag, 19. Januar 2038 04:14:07:   
01111111111111111111111111111111 (dezimal: 2147483647)  
Dienstag, 19. Januar 2038 04:14:08:   
10000000000000000000000000000000 (dezimal: 2147483648)  
Dienstag, 19. Januar 2038 04:14:09:   
10000000000000000000000000000001 (dezimal: 2147483649)
</code></pre>
<h2 id="es-war-einmal-in-1901">Es war einmal in 1901…</h2>
<p>Das erste Bit, das Vorzeichen-Bit, ist ab dann auf 1 gesetzt. Der Wert der restlichen 31 Bit wird als negativ interpretiert. Um 04:14:09 liest der Computer also -1. Und zieht damit eine Sekunde vom Startdatum “The Epoch” ab: Das Datum errechnet sich dann aus 1. Januar 1970, 00:00 Uhr minus 1 Sekunde, 2 Sekunden und so weiter. 68 Jahre lang, bis zum Freitag, den 13. Dezember 1901, 20:45:52 (in der Realität irgendwann in 2106). Die iterierte Quersumme dieser Uhrzeit ist übrigens die 9, die göttliche Zahl. Mythischer kann ein Bug wohl kaum sein.</p>
<h2 id="apokalypse">Apokalypse!</h2>
<p>Doch damit ist es noch nicht getan. Du erinnerst dich vielleicht an die Panik kurz vor der Jahrtausendwende? Man nahm an, dass Computer, die ja gerade erst anfingen unsere Alltagsroutinen zu optimieren, den Wechsel in das Jahr 2000 nicht vertragen würden. Aus zwei Gründen:</p>
<p>Erstens war es üblich die Jahreszahl verkürzt darzustellen, um Speicherplatz zu sparen und vielleicht auch aus analoger Bequemlichkeit. Anstatt 1986 erfasste man also nur die 86. Mit dem Wechsel in das Jahr 2000 war dann aber nicht mehr so ganz klar, worauf sich z.B. die Angabe 00 beziehen würde — auf das Jahr 1900 oder 2000?</p>
<p>Die zweite Ursache ergibt sich aus der Berechnung der Schaltjahre. Dass ein Schaltjahr durch vier teilbar ist, dürfte landläufig bekannt sein. Es gibt aber außerdem die Regel, dass ein Jahr, welches durch 100 teilbar ist, kein Schaltjahr ist. Und das ist noch nicht alles: Ist das Jahr außerdem durch 400 teilbar, ist es eben doch ein Schaltjahr. Zwei Regeln, die nicht sonderlich weit verbreitet waren und vermutlich immer noch nicht sind. Excel denkt selbst in 2022 noch, dass das Jahr 1900 ein Schaltjahr sei. Bug-Alarm! [<a href="https://learn.microsoft.com/en-us/office/troubleshoot/excel/wrongly-assumes-1900-is-leap-year">MICR1</a>]</p>
<p>Die Abhängigkeit von den Computern war seinerzeit vielleicht noch nicht so weit gediehen wie heute. Trotzdem vertrauten Versicherungen, Fluggesellschaften und Krankenkassen auf die „elektronische Datenverarbeitung“ (bei den öffentlichen Behörden lässt das papierlose Büro zum Glück noch eine Weile auf sich warten). Man erwartet also nichts geringeres als: Die Apokalypse!</p>
<p>Die US-Regierung rechnete mit Kosten zwischen 400 Millionen und 600 Millarden USD [<a href="https://www.congress.gov/105/crpt/hrpt827/CRPT-105hrpt827.pdf">CON1</a>]. Bei einem verfügbaren Haushaltsbudget von 3,4 Billionen USD (1999) nicht gerade ein Pappenstiel. Letztlich beliefen sich die Kosten für die Vorbereitungen auf immer noch erstaunliche 300 Mrd. USD [<a href="http://news.bbc.co.uk/2/hi/talking_point/586938">BBC1</a>] und noch mal 308 Mrd. USD für die Beseitigung der Schäden [<a href="https://www.computerworld.com/article/2522197/y2k--the-good--the-bad-and-the-crazy.html">COMP1</a>] — weltweit.</p>
<p>Trotz aller Sorgen sind wir recht glimpflich davon gekommen, nicht zuletzt aufgrund der immensen Anstrengungen, die Systeme und die Software mit Updates auf den Jahreswechsel vorzubereiten.</p>
<p>Ganz ohne Problem ging der Jahreswechseln jedoch nicht an uns vorüber. In Singapur versagten Taxameter ihren Dienst [<a href="https://money.cnn.com/1999/01/12/technology/y2k_moneyline/">MONEY1</a>], in Australien fielen Fahrscheinautomaten aus. In den USA funktionierten einige Lotterie-Maschinen nicht mehr und in Frankreich wurde die Wettervorhersage für den 01.01.1900 angezeigt [<a href="http://news.bbc.co.uk/2/hi/science/nature/586620.stm">BBC2</a>].</p>
<h2 id="es-war-einmal-in-1975">Es war einmal… in 1975…</h2>
<p>Das (vermutlich) erste Problem mit der Verarbeitung von Datumsangaben geht übrigens auf das Jahr 1964 zurück. Die Zeitrechnung des DEC PDP-10 — ein recht populärer Computer zu dieser Zeit — begann am 1. Januar 1964. Dem PDP-10 standen aber nur 12 Bit zur Verfügung. Auch wenn es nur um die taggenaue Zeitrechnung ging, endete sie aus oben genannten Gründen für den PDP-10 am 4. Januar 1975: mit 12 Bit lassen sich 4.095 Tage zählen [<a href="http://catless.ncl.ac.uk/Risks/4.45.html">CATL1</a>].</p>
<h2 id="und-2010">…und 2010…</h2>
<p>2010 führte ein Problem mit der Verarbeitung von Datumsangaben dazu, dass in Deutschland mehr als 30 Mio. Bankkarten unbrauchbar wurden [<a href="https://www.spiegel.de/wirtschaft/unternehmen/kartenpanne-franzoesische-firma-schuld-an-2010-fehler-a-670400.html">SPON1</a>].<br>
Exchange, der E-Mail-Server von Microsoft, hatte beim Übergang in das Jahr 2022 ein Problem: Hier wurden Uhrzeit und Tag schlicht zusammengesetzt: Aus dem 1. Februar 2022 12:34 Uhr wurde 2201021234 — zu groß für einen vorzeichenbehafteten 32 Bit Integer [<a href="https://www.golem.de/news/e-mail-server-microsoft-behebt-exchange-y2k22-fehler-2201-162124.html">GOLEM1</a>].</p>
<h2 id="und-es-wird-einmal-sein-in-292277026596">Und es wird einmal sein in 292.277.026.596…</h2>
<p>Und auch in der fernen Zukunft werden wir immer wieder mit den Grenzen der „modernen“ Informationstechnologie konfrontiert, seien es die Jahre 2040, 2080, 2137 und so weiter [<a href="https://en.wikipedia.org/wiki/Time_formatting_and_storage_bugs">WIKI1</a>]. Das Jahr 10.000 ist das erste fünfstellige Jahr. Das stellt die bis gewohnte 4-stellige Schreibweise für Jahre vor ein Problem. Das Jahr 30.828 wird von Windows nicht als Systemdatum akzeptiert und selbst im Jahr 292.277.026.596, wenn weder Erde noch Sonne und vielleicht nicht einmal das Universum existieren, an einem bitterkalten Winter-Sonntag, dem 4. Dezember, zur besten Kaffee- und Kuchenzeit vor dem Kamin, um 15.30 Uhr und 8 Sekunden, werden auch die heute üblichen 64 Bit Computer ihren Dienst versagen. Aus oben erklärten Gründen.</p>
<h2 id="die-schaltsekunde">Die Schaltsekunde</h2>
<p>Als wäre die Verarbeitung Zeitangaben und Schaltjahre nicht schon Herausforderung genug: Die Rotation der Erde um ihre eigene Achse dauert nicht immer exakt 24 Stunden. Sie ist in der Regel langsamer, in 2020 war sie sogar schneller. Die kaum berühmte aber dennoch berüchtigte Schaltsekunde!</p>
<p>Seit Beginn der „Computerzeitrechnung“ in 1972 (dort wurde ja erst „The Epoch„ definiert) sind hier bereits 37 Sekunden fällig geworden [<a href="https://de.wikipedia.org/wiki/Schaltsekunde">WIKI2</a>]. Nur: Die Geschwindigkeit der Erde unterliegt „nichtperiodischen Schwankungen“. Wir können heute also noch nicht sagen, wieviele Schaltsekunden bis 2.100 anfallen werden. Das macht jede Kalendererinnerung für die Zukunft sehr unzuverlässig. Computer sind unpünktlich</p>
<h2 id="unwahrheiten">Unwahrheiten</h2>
<p>Das Thema “Zeitrechnung“ ist von zahlreichen Missverständnisse geprägt und diese Lanze muss man für die Computer dann doch brechen: Das Problem sitzt nicht zuletzt vor dem Monitor. Und deswegen haben sich fleißige Entickler<em>innen und Expert</em>innen die Mühe gemacht, die Probleme mit der Verarbeitung von Daten und Zeiten in einem Gist zu sammeln: [<a href="https://gist.github.com/timvisee/fcda9bbdff88d45cc9061606b4b923ca">GIST1</a>].</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> IT-Geschichte, Softwarefehler, Nerd-Enzyklopädie, Zeit</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie - Computer sind nicht pünktlich - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklopädie - Warum ist 1 Byte 8 Bit groß?</title>
      <link>http://localhost:1313/2022/2022-01-15-die-nerd-enzyklop%C3%A4die---warum-ist-1-byte-8-bit-gro%C3%9F/</link>
      <pubDate>Mon, 30 Jan 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>http://localhost:1313/2022/2022-01-15-die-nerd-enzyklop%C3%A4die---warum-ist-1-byte-8-bit-gro%C3%9F/</guid>
      <description>Die Einführung in das Binärsystem dürfte Gegenstand jeder Informatik-Vorlesung sein und schon für viele verzweifelte Gesichter gesorgt haben. Sei es drum: Um …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine detaillierte historische und technische Erklärung, warum ein Byte heute standardmäßig 8 Bit groß ist. Der Artikel beleuchtet die Ursprünge des Begriffs &#39;Byte&#39;, die Entwicklung von Bit-Größen in frühen Computersystemen, die Rolle von ASCII und IBM bei der Etablierung des 8-Bit-Standards und die spätere offizielle Normierung sowie die Einführung des Begriffs &#39;Oktett&#39;.</p>
          
          
          <p><strong>Hauptthemen:</strong> Computer Science, Informatik, Hardware, Datenrepräsentation, Geschichte der IT, Standardisierung</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Die Einführung in das Binärsystem dürfte Gegenstand jeder Informatik-Vorlesung sein und schon für viele verzweifelte Gesichter gesorgt haben. Sei es drum: Um einen kleinen Ausflug in das Binär-System kommen wir nicht herum, wenn wir die Frage nach dem Byte klären wollen. Und da uns das binäre Zahlensystem noch öfter begegnen wird, steht dieses Kapitel ganz am Anfang.</p>
<p>Der Begriff Byte kam bereits 1956 auf und wurde von Werner Buchholz geprägt. Buchholz arbeitete für IBM an dem Supercomputer IBM 7030,  Projektname &ldquo;Stretch&rdquo;. In einem Konzeptpapier beschrieb er den Einsatz von &ldquo;characters, or &lsquo;bytes&rsquo; as we have called them&rdquo;. Buchholz leitete Byte vom englischen &ldquo;bite&rdquo; für &ldquo;der Bissen&rdquo; ab und wählte die Schreibweise mit dem Y, um eine Verwechselung mit  dem Bit zu vermeiden. Er definierte Bytes damals als Folge von 2 bis 6 Bits [<a href="https://blog.hnf.de/bitte-ein-byte/">HNF1</a>].</p>
<p>Das Bit ist ein Kofferwort aus <em><strong>b</strong>inary</em> und <em>dig<strong>it</strong>.</em> - zweiwertige Ziffer. 0 und 1. Bit ist aber auch ein englisches Wort und heißt übersetzt &ldquo;das Bisschen&rdquo;. Es geht hier also um Bisschen und Bissen. Guten Appetit.</p>
<p>Der begriffliche Vorgänger des Bytes nennt sich übrigens Syllable, kurz Slab. Aber auch die Slabs unterwarfen sich keiner einheitlichen Ordnung. Der Computer der Saturn V Rakete arbeitet z.B. mit 13 Bit großen Syllables.</p>
<p>Aber zurück zu den Bits und Bytes und der Frage, warum 1 Byte genau 8 Bit groß ist.</p>
<p>Ein Computer versteht genau zwei Zustände: Entweder fließt ein Strom oder es fließt  kein Strom. Aus oder An (damit ignorieren wir übrigens komplett die Architektur der sogenannten Quanten-Computer).</p>
<p>Mithilfe dieses Prinzips kann ein Computer Informationen speichern, verarbeiten und wiedergeben. Es handelt sich um die kleinste Informationseinheit: 1 Bit. Stellen wir uns einfach vor, dass es sich hierbei um kleine Lämpchen handelt, die entweder an oder aus sind und diesen Zustand beschreiben wir mit 0 für aus und 1 für an. Hier sind 8 Lämpchen nebeneinander:</p>
<pre><code>0000 0000
</code></pre>
<p>So sieht es aus, wenn das kleine Lämpchen ganz rechts an ist:</p>
<pre><code>0000 0001
</code></pre>
<p>Und daraus kann man nun einen Zahlenwert ablesen, indem man Potenzen bildet - und das ist ein Stück faszinierende Mathematik. Da es genau zwei Zustände gibt (aus oder an), ist die Basis der Potenz 2. Die Position des aktivierten Lämpchens dient als Exponent. Gezählt wird von rechts nach links und wir fangen bei 0 an - 0 ist ja auch ein Wert, wenngleich kein großer.</p>
<p>Damit lautet die Rechnung  2^0 und das ist 1! Die 1 ganz rechts steht für den Wert 1. Ok, das war noch einfach. Was ist mit der 2?</p>
<pre><code>0000 0010
</code></pre>
<p>Nun ist das Lämpchen an der 1. Position an. 2^1^. Oder: 2. Das mit den Einsen und Nulle ist eigentlich gar nicht so schwer, oder? Manchmal frage ich mich, warum wir uns überhaupt mit dem Dezimalsystem abmühen.</p>
<p>Jetzt bist du dran. Welchen Wert sehen wir hier?</p>
<pre><code>0000 0011
</code></pre>
<p>Korrekt: 3. Warum? Man summiert die Werte der einzelnen Positionen:</p>
<pre><code>2¹ + 2⁰ = 2 + 1 = 3
</code></pre>
<p>Bravo. Du hast das binäre System verstanden. Je mehr Lämpchen leuchten, desto größere Zahlen können wir abbilden. Die kleinen Lämpchen im Computer geben natürlich kein sichtbares Licht ab, dafür aber Wärme. Jetzt weißt du, warum dein Handy manchmal so heiß wird.</p>
<p>Mit 8 Bit lassen sich z.B. Werte bis zu 2⁸ - 1 verarbeiten. Warum -1? Da man die Positionen von 0 anfängt zu zählen, ist die größte Position 7.  Das ist also der größte Exponent. Sind also alle Bits aktiviert (auf 1 gesetzt), berechnet man den Wert folgendermaßen:</p>
<pre><code>128 + 64 + 32 + 16 + 8 + 4 + 2 + 1 = 255
</code></pre>
<p>Und für die 255 gibt es eine kleine Abkürzung: Das ist nämlich nichts anderes als 2⁸ - 1.</p>
<p>Den höchsten Wert darf man allerdings nicht mit der Anzahl möglicher Werte verwechseln. Die 0 ist auch Teil der kleinen Familie. Damit gibt es 256 unterschiedliche Werte.</p>
<p>Nach dieser rührenden Familienzusammenführung gebe ich mit der folgenden Frage zurück ins Hauptstadtstudio: Warum hat 1 Byte denn nun ausgerechnet 8 Bit?</p>
<p>Wir können mit den Bits zwar beliebige Zahlen abbilden, aber wie sieht es mit  Buchstaben aus? Die Lösung ist so fantastisch simpel: Wir legen eine Tabelle an, eine Zeichentabelle, auch Codetabelle genannt. Jeder Buchstabe wird durch eine Zahl repräsentiert:</p>
<pre><code>1 A
2 B
3 C
...
</code></pre>
<p>Die minimale Größe der Tabelle ist zunächst naheliegend: Wir brauchen mindestens 26 Einträge. Um ein einfaches Alphabet abbilden zu können, muss der Speicher also mindestens 5 Bit groß sein:</p>
<pre><code>2⁵ = 32 Einträge
</code></pre>
<p>(Warum nicht 2⁵ - 1 = 31 Einträge? Weil die 0 in einer Code-Tabelle theoretisch auch als Verweis dienen kann, denk an die Familie!)</p>
<p>5 Bit entspricht der Größe der ersten Codetabelle mit dem Namen Baudot-Code bzw. Baudot-Murray-Code. Auf der 0. Position befand sich tatsächlich nichts. Die Position 1 (00001) verweist auf Buchstaben E &mdash;weil das der häufigste Buchstabe ist. A wird mit der 3 codiert (00011) und so weiter. </p>
<p>Das erklärt aber immer noch nicht warum 1 Byte genau 8 Bit groß ist. Also weiter in der Geschichte:</p>
<p>Der Baudot-Murray-Code hatte für die elektronische Datenverarbeitung noch keine große Bedeutung. Man konnte nicht zwischen Groß- und Kleinschreibung unterscheiden, die Zahlen 0 bis 9 waren nicht darstellbar  und was ist mit den ganzen Satzzeichen? Man brauchte eigentlich eine Tabelle mit mindestens 26 + 26 + 10, also 62 Einträgen.</p>
<p>Das Militär entwickelte 1956 im Rahmen des FIELDATA-Projekts eine Zeichentabelle mit 6 Bit, also 64 Einträgen, die auch als Basis für den UNIVAC 1100 diente [<a href="https://de.wikipedia.org/wiki/Fieldata">WIKI9</a>]. Diese Tabelle ermöglichte zwar keine Kleinschreibung, dafür aber Satzzeichen,  Ziffern und Steuerzeichen.
Wozu Steuerzeichen? Da eine Zeichentabelle als Grundlage zur Darstellung auf den Monitor dient, muss sie auch Anweisungen wie z.B. Leerzeichen, Entfernen und so weiter enthalten.</p>
<p>Für den wirklich praktischen Gebrauch kamen also nur 7 Bit infrage. Und genau das ist auch die Länge der berühmt-berüchtigten ASCII-Codetabelle von 1963, die uns noch eine ganze Weile begleiteten wird. Um nicht zu sagen: ASCI wird dir auch in 2023 noch begegnen.</p>
<p>Aus den 7 Bits für ein sinnvollen Zeichensatz wurden recht schnell 8 Bit und zwar aus vielen Gründen: Die 8 ist ein vielfaches von 2. Und das ist in einem binären System viel schöner als die 7. Außerdem konnte man das zusätzliche Bit für andere Funktionen nutzen, wie zB. zur Fehlerkontrolle (&ldquo;Parity-Bit”) oder um den Umfang der Tabelle zu erhöhen. Und dann kam auch noch IBM um die Ecke und brachte 1981 den allerersten und extrem erfolgreichen Personal Computer (PC) auf den Markt. IBM stattete diesen mit einer 8 Bit-Zeichentabelle aus. Der Name: Code Page 437. In den folgenden Jahren hat sich so die Größe von 8 Bit für 1 Byte als Quasi-Standard etabliert.</p>
<p>Tatsächlich konnte ein Byte aber alles sein: Angefangen bei einem 1 Bit bis zu dem, was Mitte des 20. Jahrhunderts als Speicher so verfügbar war: 6 Bit, 9 Bit, 10 Bit.  Beim Nixdorf 820 betrug die Größe eines Bytes 12 Bit. Es gibt Systeme, bei denen die Byte-Größe sogar frei wählbar war und immer noch ist. Der PDP-10 erlaubte eine wählbare Größe zwischen 1 und 36 Bit [<a href="https://de.wikipedia.org/wiki/Byte">WIKI10</a>].</p>
<p>Die traurige Wahrheit lautet also: Es gab sehr lange gar keine einheitliche Definition für die Größe von 1 Byte. Anfang der 1990er Jahre, als Computer begannen die privaten Haushalte zu erobern, rang man sich dann doch noch zu einem offiziellen Standard durch: In der ISO/IEC 2382-1:1993 wurde die Byte-Größe mit 8 Bit definiert.</p>
<p>Allerdings halten sich auch heute nicht alle ans diesen Standard. Viele Programmiersprachen erlauben die Anzahl von Bits individuell festzulegen. Um das Byte mit seiner unsteten Beziehung zu den Bits zu unterscheiden, wurde mit dem Standard IEC 60027-2 in 1999 die Bezeichnung Oktet eingeführt. Ein Oktet entspricht immer 8 Bits.</p>
<p>Wenn du also auf Nummer Sicher gehen willst, solltest du dich nicht darauf verlassen, dass 1 Byte genau 8 Bit enthält.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Informatik, Geschichte, Hardware, Nerd-Enzyklopädie</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklopädie - Warum ist 1 Byte 8 Bit groß? - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item>
  </channel>
</rss>