<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" 
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Sprache auf Nicky Reinert</title>
    <link>https://nickyreinert.de/tags/sprache/</link>
    <description>Blog &amp; Projekte von Nicky Reinert (Institut f√ºr digitale Herausforderungen): Webentwicklung &amp; Software Development, SEO &amp; Analytics, Hosting &amp; DevOps, WordPress &amp; Hugo, Tools &amp; Projekte, Datenschutz und digitale Kultur ‚Äì plus Texte zu KI sowie Autismus &amp; Gesellschaft.</description>
    <generator>Hugo 0.148.2</generator>
    <language>de</language>
    <managingEditor></managingEditor>
    <webMaster></webMaster>
    <copyright></copyright>
    <lastBuildDate>Sun, 28 May 2023 12:19:31 +0100</lastBuildDate><atom:link href="https://nickyreinert.de/tags/sprache/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>Die Nerd Enzyklop√§die 32 - Was haben PHP, Visa und Mandelbrot gemeinsam?</title>
      <link>https://nickyreinert.de/2023/2023-05-28-nerd-enzyklop%C3%A4die-32---was-haben-php-visa-und-mandelbrot-gemeinsam/</link>
      <pubDate>Sun, 28 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2023/2023-05-28-nerd-enzyklop%C3%A4die-32---was-haben-php-visa-und-mandelbrot-gemeinsam/</guid>
      <description>
PHP ist eine der popul√§rsten Sprachen im WWW. PHP steht f√ºr PHP: Hypertext Preprocessor und ist damit ein rekursives Akronym. Urspr√ºnglich stand PHP f√ºr ‚Ä¶</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine humorvolle Erkundung aus der &#39;Nerd Enzyklop√§die&#39;, die die Gemeinsamkeit zwischen PHP, Visa und Mandelbrot aufdeckt: rekursive Akronyme und selbst-referenzielle Konzepte. Der Artikel erkl√§rt die Bedeutung von rekursiven Akronymen in der IT und beleuchtet humorvolle Legenden rund um Namen wie Benoit B. Mandelbrot und Bing.</p>
          
          
          <p><strong>Hauptthemen:</strong> Rekursive Akronyme, Sprache, Informatik, Mathematik, Nerd-Kultur, Etymologie</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-28-nerd-enzyklop%C3%A4die-32---was-haben-php-visa-und-mandelbrot-gemeinsam/image1.png" alt=""></p>
<p><strong>PHP</strong> ist eine der popul√§rsten Sprachen im <strong>WWW</strong>. PHP steht f√ºr <strong>PHP: Hypertext Preprocessor</strong> und ist damit ein rekursives Akronym. Urspr√ºnglich stand PHP f√ºr <strong>Personal HomePage Tools</strong>. Ab Version 3 gab es allerdings grundlegende √Ñnderungen, weshalb man sich von dem Vorg√§nger absetzen wollte und daher genau diesen Namen w√§hlte. In der IT gibt es viele mal mehr oder weniger popul√§re rekursive Akronyme, wie z.B.</p>
<ul>
<li><strong>WINE</strong>: WINE Is Not an Emulator (Software),</li>
<li><strong>cURL</strong>: cURL URL Request Library (Software),</li>
<li><strong>RPM</strong>: RPM Package Manager (Paketmanager),</li>
<li><strong>GNU</strong>: GNU is not UNIX (Betriebssystem,</li>
<li><strong>ATI</strong>: ATI Technologies Inc. (Hardwarehersteller),</li>
<li><strong>NANO</strong>: Nano‚Äôs Another editor (Texteditor)</li>
</ul>
<p>&hellip;und viele mehr, unter anderem auch <strong>VISA</strong> f√ºr Visa International Service Association.</p>
<p>Nun geht das Ger√ºcht um, dass das <strong>B</strong> im Namen des ber√ºhmten Mathematikers <strong>Benoit B. Mandelbrot</strong> f√ºr <strong>Benoit B Mandelbrot</strong> steht [<a href="https://www.nytimes.com/2010/10/17/us/17mandelbrot.html">NYTI1</a>]. Eine Anspielung auf eines seiner bekanntesten Verm√§chtnisse: Die wundersch√∂ne Mandelbrot-Menge ‚Äî ein rekursives mathematisches Kunstwerk!</p>
<p><img src="/2023/2023-05-28-nerd-enzyklop%C3%A4die-32---was-haben-php-visa-und-mandelbrot-gemeinsam/image2.png" alt=""></p>
<p style="text-align: center;font-style:italic">Bis zum Ende zoomen! [[WIKI5](https://de.wikipedia.org/wiki/Beno%C3%AEt_Mandelbrot)]</p>
<p>Fest steht: Das B als Initial hat sich Mandelbrot in seiner Autobiographie selber gegeben. Dass das B aber f√ºr <strong>Benoit B. Mandelbrot</strong> steht ist leider nicht belegt ‚Äî es ist nur ein Initial [<a href="https://www.theguardian.com/science/2010/oct/17/benoit-mandelbrot-obituary">THEG1</a>].</p>
<p>Einer weiteren aber nicht belegbaren und vermutlich nicht ganz srnst gemeinten Legende nach steht <strong>Bing</strong> √ºbrigens f√ºr <strong>Bing ist not Google</strong>‚Ä¶</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Akronym, Nerd-Enzyklop√§die, Humor, Sprache</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklop√§die 32 - Was haben PHP, Visa und Mandelbrot gemeinsam? - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_anecdote</dc:type>
      
      
    </item><item>
      <title>Die Nerd Enzyklop√§die 29 - Programmieren mit Emojis</title>
      <link>https://nickyreinert.de/2023/2023-05-19-nerd-enzyklop%C3%A4die-29---programmieren-mit-emojis/</link>
      <pubDate>Fri, 19 May 2023 12:19:31 +0100</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2023/2023-05-19-nerd-enzyklop%C3%A4die-29---programmieren-mit-emojis/</guid>
      <description>
Texte bestehen aus S√§tzen, S√§tze bestehen aus W√∂rtern und W√∂rter bestehen aus Buchstaben bzw. genauer Schriftzeichen. Wir alle kennen es, das lateinische ‚Ä¶</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine unterhaltsame Erkundung aus der &#39;Nerd Enzyklop√§die&#39; √ºber das Programmieren mit Emojis. Der Artikel erkl√§rt die Grundlagen der Zeichenkodierung (Unicode, UTF-8) und beleuchtet die (begrenzten) M√∂glichkeiten, Emojis in g√§ngigen Programmiersprachen zu verwenden. Zudem wird &#39;Emojicode&#39; vorgestellt, eine Programmiersprache, die ausschlie√ülich auf Emojis basiert.</p>
          
          
          <p><strong>Hauptthemen:</strong> Programmierung, Emojis, Unicode, Zeichenkodierung, Programmiersprachen, Nerd-Kultur</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p><img src="/2023/2023-05-19-nerd-enzyklop%C3%A4die-29---programmieren-mit-emojis/image1.png" alt=""></p>
<p>Texte bestehen aus S√§tzen, S√§tze bestehen aus W√∂rtern und W√∂rter bestehen aus Buchstaben bzw. genauer Schriftzeichen. Wir alle kennen es, das lateinische Alphabet, arabische Ziffern aber auch kyrillische Schriftzeichen oder die Sinogramme der chinesischen Schrift. All diese Symbole versteht der Computer dank einer gro√üen Tabelle oder auch ‚Äû Zeichensatz‚Äú. Als Quasi-Standard hat sich in den letzten Jahren <strong>Unicode</strong> etabliert.</p>
<h2 id="hefte-raus-lerneinheit">Hefte raus, Lerneinheit!</h2>
<p>Ein <strong>Zeichensatz</strong> (engl. ‚Äû<strong>character set</strong>‚Äú) beschreibt die Menge aller verf√ºgbaren Zeichen. Das w√§re z.B. ein sehr kleiner Zeichensatz, der nur die Gro√übuchstaben des lateinischen Alphabets darstellen kann:</p>
<pre><code>[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z]
</code></pre>
<p>Wird jedem Zeichen eine numerische Position zugeordnet, der sogenannte. ‚Äû<strong>codepoint</strong>‚Äú, spricht man von einem <strong>kodierten Zeichensatz</strong> (‚Äû<strong>coded character set</strong>‚Äú). Uns kleines Biespiel sieht dann so aus:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">  1 -&gt; A  
</span></span><span class="line"><span class="ln">2</span><span class="cl">  2 -&gt; B  
</span></span><span class="line"><span class="ln">3</span><span class="cl">  3 -&gt; C  
</span></span><span class="line"><span class="ln">4</span><span class="cl">  ‚Ä¶  
</span></span><span class="line"><span class="ln">5</span><span class="cl">  26 -&gt; Z
</span></span></code></pre></div><p>Sehr weit verbreitet ist der Zeichensatz <strong>UCS</strong> (<strong>Universal Coded Character Set</strong>), besser bekannt <strong>Unicode,</strong> der in der <strong>ISO 10646</strong> definiert ist. Theoretisch umfasst Unicode einen Bereich von <strong>1.114.112</strong> codepoints. Diese sind in <strong>17 Ebenen</strong> (<strong>planes</strong>) zu je <strong>16 Bit</strong> aufgeteilt, also 65.536 codepoints pro Ebene. Aufgrund verschiedener technischer Vorgaben sind effektiv <strong>1.111.998</strong> codepoints nutzbar. Unicode enth√§lt nicht nur die uns bekannten Buchstaben von A bis Z, Zahlen und Schriftzeichen anderer Sprachen, sondern mittlerweile auch Emojis:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">üòÜü´†üòá
</span></span></code></pre></div><p>Um jedes der √ºber 1 Mio. Zeichen ansprechen zu k√∂nnen, kann man auf <strong>UTF-32</strong> (<strong>Unicode Transformation Format</strong>) nutzen. UTF-32 besitzt einen 32 Bit (4 Byte) gro√üen Adress-Bereich, um damit jedes beliebige Zeichen in Unicode zu kodieren. Das ist simpel, aber auch eine irrsinnige Platzverschwendung. Der h√§ufigste deutsche Buchstabe ‚Äûe‚Äú wird wie folgt in UTF-32 kodiert:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    00 00 00 65
</span></span></code></pre></div><p>In bin√§r:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    00000000000000000000000001100101
</span></span></code></pre></div><p>Ein Adress-Bereich mit 4 Byte um ein Zeichen abzubilden, f√ºr das 1 Byte ausreicht? Um Platz zu sparen, wurden Algorithmen entwickelt, die zwar etwas aufwendiger codieren, daf√ºr aber weniger Platz verbrauchen. Sehr weit verbreitet ist <strong>UTF-8</strong>, eine ‚Äî wenn man so will ‚Äî ‚Äûdynamische‚Äú Kodierung.</p>
<p>UTF-8 wurde <strong>1992</strong> von <strong>Ken Thompson</strong> und <strong>Rob Pike</strong> entwickelt, zwei Programmierern des Betriebssystems <strong>Plan9</strong> (benannt nach dem gleichnamigen Film ‚Äû<strong>Plan9 from outer Space</strong>‚Äú von <strong>Ed Wood</strong>, dem angeblich ‚Äûschlechtesten Science Fiction Film aller Zeiten‚Äú) [<a href="https://de.wikipedia.org/wiki/Plan_9_%28Betriebssystem%29">WIKI14</a>].</p>
<p>UTF-8 kodiert den ersten Bereich von Unicode mit 7 Bit ‚Äî das erste Bit bzw. h√∂chstwertige Bit ist immer 0. Das ‚Äûe‚Äú wird also folgenderma√üen kodiert:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    65
</span></span></code></pre></div><p>In bin√§r:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    01100101
</span></span></code></pre></div><p>Man belegt also nur noch 1 Byte anstatt 4. Will man exotische, also h√∂herwertige Zeichen aus Unicode kodieren, h√§ngt UTF-8 weitere Bytes an, bei denen die h√∂chstwertigen Bits ebenfalls fest gesetzt werden. Das Euro-Zeichen wird in UTF-8 mit 3 Bytes dargestellt:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    E2 82 AC
</span></span></code></pre></div><p>In bin√§r:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    11100010 10000010 10101100
</span></span></code></pre></div><h2 id="zur√ºck-zum-thema">Zur√ºck zum Thema</h2>
<p>Wie du siehst, sind Buchstaben f√ºr den Computer auch nur bestimmte Orte in einer gro√üen Tabelle. Da die Unicode-Tabelle auch Emojis umfasst, sollte es doch eigentlich m√∂glich sein, Emojis als Bezeichner f√ºr Funktionen und Variablen zu nutzen?</p>
<p>Ganz so leicht ist es leider nicht. Die g√§ngigen Programmiersprachen haben einen festgelegten Bereich von Zeichen, die f√ºr derartige Deklarationen zul√§ssig sind. Ein Ausweg sind <strong>Emoticons</strong>, also Zeichen, die als Emoji interpretiert werden k√∂nnen. Vor allem nicht-lateinische Schriften bieten eine Menge M√∂glichkeiten. In <strong>JavaScript</strong> ist z.B. folgendes m√∂glich:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl">    <span class="k">var</span> <span class="err">„ÉÑ</span> <span class="o">=</span> <span class="err">‚Äû</span><span class="n">smile</span><span class="err">‚Äú</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln">2</span><span class="cl">    <span class="k">var</span> <span class="err">‡µ†</span> <span class="o">=</span> <span class="err">‚Äû</span><span class="n">alien</span><span class="err">‚Äú</span><span class="p">;</span>  
</span></span><span class="line"><span class="ln">3</span><span class="cl">    <span class="n">function</span> <span class="err">‡≤†</span><span class="n">_‡≤†</span> <span class="p">(){</span><span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="err">‚Äú</span><span class="n">Viel</span> <span class="n">Spa√ü</span> <span class="n">beim</span> <span class="n">Refactoring</span><span class="o">!</span><span class="err">‚Äù</span><span class="p">);}</span>
</span></span></code></pre></div><p>Es gibt allerdings auch eine Programmiersprache, die ausschlie√ülich auf Emojis basiert: Emojicode [<a href="https://www.emojicode.org/">EMOJI1</a>]. Erfunden wurde die Sprache von <strong>Theo Weidmann</strong>. Und so sieht ‚Äû<strong>Hello World</strong>‚Äú in Emojicode aus:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">    üèÅ üçá  
</span></span><span class="line"><span class="ln">2</span><span class="cl">    üòÄ üî§Hello World!üî§‚ùóÔ∏è  
</span></span><span class="line"><span class="ln">3</span><span class="cl">    üçâ
</span></span></code></pre></div>
        
        
        <div class="tags">
          <p><strong>Tags:</strong> Programmierung, Emojis, Nerd-Enzyklop√§die, Sprache</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>nerdenz</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Die Nerd Enzyklop√§die 29 - Programmieren mit Emojis - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_explainer</dc:type>
      
      
    </item>
  </channel>
</rss>