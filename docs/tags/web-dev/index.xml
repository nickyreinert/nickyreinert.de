<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" 
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Web-Dev auf Nicky Reinert</title>
    <link>https://nickyreinert.de/tags/web-dev/</link>
    <description>Blog &amp; Projekte von Nicky Reinert (Institut für digitale Herausforderungen): Webentwicklung &amp; Software Development, SEO &amp; Analytics, Hosting &amp; DevOps, WordPress &amp; Hugo, Tools &amp; Projekte, Datenschutz und digitale Kultur – plus Texte zu KI sowie Autismus &amp; Gesellschaft.</description>
    <generator>Hugo 0.148.2</generator>
    <language>de</language>
    <managingEditor></managingEditor>
    <webMaster></webMaster>
    <copyright></copyright>
    <lastBuildDate>Wed, 28 Nov 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://nickyreinert.de/tags/web-dev/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>Zugriff nicht loggen, wenn ein bestimmter HTTP-Request-Header gesetzt ist</title>
      <link>https://nickyreinert.de/2018/2018-11-28-zugriff-nicht-loggen-wenn-ein-bestimmter-http-request-header-gesetzt-ist/</link>
      <pubDate>Wed, 28 Nov 2018 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2018/2018-11-28-zugriff-nicht-loggen-wenn-ein-bestimmter-http-request-header-gesetzt-ist/</guid>
      <description>OK, ich tu mich etwas schwer, das folgende in einen Titel zu gießen, der nicht länger ist, als die eigentlich Anleitung. Wenn du an deiner Webseite arbeitest, …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieses Tutorial beschreibt eine Methode, um eigene Zugriffe bei der Web-Entwicklung aus den Nginx-Logdateien auszuschließen. Die Lösung kombiniert ein Browser-Plugin zur Modifikation von HTTP-Headern mit einer serverseitigen Nginx-Konfiguration, die das Logging auf Basis eines benutzerdefinierten Headers bedingt deaktiviert.</p>
          
          
          <p><strong>Hauptthemen:</strong> Nginx, Webserver-Konfiguration, Logging, Web-Development, HTTP</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>OK, ich tu mich etwas schwer, das folgende in einen Titel zu gießen, der nicht länger ist, als die eigentlich Anleitung. Wenn du an deiner Webseite arbeitest, möchtest du vielleicht vermeiden, dass deine Aufrufe mit deinem Browser im Log-File von <strong>nginx</strong> landen. Dafür gibt es eine Menge Möglichkeiten, ich mag die folgende aber besonders.</p>
<p>Zuerst benötigst du dafür ein Plugin, um den <strong>HTTP-Request-Header</strong> zu modifizieren. Ich nutze dafür <a href="https://addons.mozilla.org/en-US/firefox/addon/modheader-firefox/">ModHeader für Firefox,</a> für Chrome gibt es ähnliche Plugins. Dort legst du einen benutzerdefinierten Header an, dem du z.B. &ldquo;true&rdquo; als Wert zuweist. Bei diesem Plugin kannst du außerdem festlegen, dass der Header nur auf einer bestimmten Seite hinzugefügt wird.</p>
<p>[caption id=&ldquo;attachment_2395&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/zugriff-nicht-loggen-wenn-ein-bestimmter-request-header-gesetzt-ist/modHeader.png"><img src="/2018/2018-11-28-zugriff-nicht-loggen-wenn-ein-bestimmter-http-request-header-gesetzt-ist/images/modHeader-300x163.png" alt="ModHeader Firefox Plugin"></a> ModHeader Firefox Plugin[/caption]</p>
<p>Als nächstes definierst du in deiner nginx-Config eine Regel, die diesen Header ausliest:</p>
<p>map $http_ignoreMe $log_this {</p>
<pre><code>~true 0;

default 1;
</code></pre>
<p>}</p>
<p>Mit $http_ignoreMe sprichst du den zuvor angelegten Header an, $log_this erzeugt eine Variable, auf die du später zugreifen kannst. Enthält der Header &ldquo;true&rdquo; (~true), wird die Variable $log_this auf 0 gesetzt, ansonsten bleibt sie 1. Als nächstes öffnest du den Server-Bereich deiner Webseite und suchst nach deiner Logging-Einstellung (alternativ kannst du natürlich auch die globale Logging-Einstellung anpassen:</p>
<pre><code>access\_log /var/logs/access.log main if=$log\_this;
</code></pre>
<p>Der zweite Parameter ist das Log-File - natürlich. Der dritte Parameter verweist auf mein benutzerdefiniertes Log-Format, das muss hier nicht unbedingt stehen. Und am Ende schließlich kommt die Bedingung, dass nämlich nur geloggt wird, wenn $log_this wahr bzw. 1 ist. Jetzt startest du nginx neu&hellip; et voilá - Anfragen an deine Seite von deinem Browser aus werden ignoriert.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Nginx, Logging, Tutorial, Web-Dev</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>hosting</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Zugriff nicht loggen, wenn ein bestimmter HTTP-Request-Header gesetzt ist - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>tutorial</dc:type>
      
      
    </item><item>
      <title>Termine buchen im BA Friedrichshain/Kreuzberg</title>
      <link>https://nickyreinert.de/2018/2018-11-12-termine-buchen-im-ba-friedrichshain-kreuzberg/</link>
      <pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2018/2018-11-12-termine-buchen-im-ba-friedrichshain-kreuzberg/</guid>
      <description>Frei nach dem Motto: Auch die kleinen Dinge sind wichtig, hab ich mal alle meine L33T-Haxx0r-Skillz herausgeholt und 13 Minuten in einen kleinen Bug auf den …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Ein kurzer Blogbeitrag, der einen defekten Link auf der Webseite des Bezirksamts Friedrichshain-Kreuzberg zur Online-Terminbuchung analysiert. Der Autor debuggt das Problem, indem er die fehlerhafte URL mit einer funktionierenden vergleicht, die korrekte URL-Struktur herleitet und den funktionierenden Link für andere zur Verfügung stellt.</p>
          
          
          <p><strong>Hauptthemen:</strong> Berlin, Bürgerservice, Web-Development, Debugging, URL-Analyse</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> beginner</p>
          
        </div>
        
        
        <p>Frei nach dem Motto: Auch die kleinen Dinge sind wichtig, hab ich mal alle meine L33T-Haxx0r-Skillz herausgeholt und 13 Minuten in einen kleinen Bug auf den behördlichen Seiten der Berliner Bezirksämter investiert.</p>
<p>Willst du einen <strong>Termin</strong> beim <strong>Bezirksamt</strong> Friedrichshain/Kreuzberg von Berlin <strong>buchen</strong>, weil das telefonisch nicht möglich ist? Dann stehst du vor einer kleinen Herausforderung: Das funktioniert nämlich ausgerechnet bei diesem Bezirksamt nicht. Die <a href="https://service.berlin.de/dienstleistung/318991/">Übersichtsseite für die Terminbuchung</a> führt beim Klick auf &ldquo;<a href="https://www.berlin.de/terminvereinbarung/termin/tag.php?id=383&amp;anliegen=318991&amp;dienstleister=0&amp;termin=1&amp;herkunft=1">Termin buchen</a>&rdquo; nur zu einer lapidaren Fehlermeldung, während alle anderen Links zu funktionieren scheinen:</p>
<p>[caption id=&ldquo;attachment_2319&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;300&rdquo;]<a href="https://www.nickyreinert.de/files/termine-buchen-im-ba-friedrichshain-kreuzberg/fehlermeldung_ba_xberg-fhain.png"><img src="/2018/2018-11-12-termine-buchen-im-ba-friedrichshain-kreuzberg/images/fehlermeldung_ba_xberg-fhain-300x81.png" alt="Fehlermeldung Terminbuchung Bezirksamt Friedrichshain/Kreuzberg"></a> Fehlermeldung Terminbuchung Bezirksamt Friedrichshain/Kreuzberg[/caption]</p>
<p>Das Problem ist, dass es erstens keinen anderen Weg gibt, um an die Terminplanung zu kommen - oder diese sehr gut versteckt ist. Du kannst jetzt also die Id für die Logdatei am Telefon den vermutlich irritierten BA-Mitarbeiter/innen mitteilen oder das Problem selber fixen. Das ist nämlich gar nicht so schwierig. Außerdem gibt es auch gar keine E-Mail-Adresse, an die man sich wenden kann. Also schauen wir mal, was da falsch läuft.</p>
<p>Das ist die URL, die sich hinter dem defekten Link versteckt:</p>
<p><a href="https://www.berlin.de/terminvereinbarung/termin/tag.php?id=383&amp;anliegen=318991&amp;dienstleister=0&amp;termin=1&amp;herkunft=1">https://www.berlin.de/terminvereinbarung/termin/tag.php?id=383&anliegen=318991&dienstleister=0&termin=1&herkunft=1</a></p>
<p>Und so sieht die URL aus, die hinter einem funktionierenden Link zur Terminbuchung steckt:</p>
<p><a href="https://service.berlin.de/terminvereinbarung/termin/tag.php?termin=1&amp;dienstleister=122900&amp;anliegen">https://service.berlin.de/terminvereinbarung/termin/tag.php?termin=1&dienstleister=122900&anliegen</a>[]=318991&amp;herkunft=1</p>
<p>Offenbar hat sich also etwas an der internen Struktur geändert und man vergessen, die Verknüpfung für das Bezirksamt Fhain/Xberg anzupassen. Was hat sich geändert? Zunächst einmal lautet die Domain offenbar <strong>service.berlin.de,</strong> nicht mehr <strong><a href="https://www.berlin.de">www.berlin.de</a>.</strong> Das ist aber nicht der fehlerhafte Teil, beide Domains funktionieren.</p>
<p>Außerdem wird der GET-Parameter <em><strong>anliegen</strong></em> wohl als Array erwartet: <strong><em>anliegen[]</em></strong>. Außerdem ist der Parameter <em><strong>dienstleister</strong></em> nicht gesetzt, der wohl die Id für die entsprechende Abteilung erwartet. Die Id für das Standesamt im BA Fhain/Xberg findet man in der URL zur Übersichtsseite dieser Behörde:</p>
<p><a href="https://service.berlin.de/dienstleistung/318991/standort/122898/">https://service.berlin.de/dienstleistung/318991/standort/122898/</a></p>
<p>Die Id 318991 steht für das Bezirksamt selber, die Id für das Standesamt ist <strong>122898</strong>, das Jugendamt versteckt sich hinter der Id <strong>123593</strong>. Das die Terminverbeinbarung nur für das Standesamt funktioniert, packen wir dessen Id also in eine funktionierende URL:</p>
<p><a href="https://service.berlin.de/terminvereinbarung/termin/tag.php?termin=1&amp;dienstleister=122898&amp;anliegen">https://service.berlin.de/terminvereinbarung/termin/tag.php?termin=1&dienstleister=122898&anliegen</a>[]=318991&amp;herkunft=1</p>
<p>Wenn du also einen Termin beim Standesamt vom Bezirksamt Friedrichshain/Kreuzberg buchen möchtest, nutze doch gerne diesen Link:</p>
<p><a href="https://service.berlin.de/terminvereinbarung/termin/tag.php?anliegen[]=318991&amp;dienstleister=122898&amp;termin=1&amp;herkunft=1">Termin buchen</a></p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> Berlin, Bug, Web-Dev, Lifehack</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Termine buchen im BA Friedrichshain/Kreuzberg - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>technical_tip</dc:type>
      
      
    </item><item>
      <title>Wordpress Page Builder - Pro und Contra</title>
      <link>https://nickyreinert.de/2018/2018-08-12-wordpress-page-builder-pro-und-contra/</link>
      <pubDate>Sun, 12 Aug 2018 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2018/2018-08-12-wordpress-page-builder-pro-und-contra/</guid>
      <description>Page Builder oder auch Theme Builder haben ihre Daseinsberechtigung, gar keine Frage. Davon zeugt vor allem ihr Erfolg und ihre Verbreitung. Allerdings sollte …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine kritische Auseinandersetzung mit WordPress Page Buildern. Der Artikel wägt die Vor- und Nachteile dieser Werkzeuge ab und argumentiert, dass trotz der anfänglichen Bequemlichkeit für Laien schwerwiegende Nachteile wie Performance-Probleme, Sicherheitsrisiken und ein starker &#39;Lock-in-Effekt&#39; überwiegen.</p>
          
          
          <p><strong>Hauptthemen:</strong> WordPress, Page-Builder, Web-Design, Web-Development, Usability, Performance</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>Page Builder oder auch Theme Builder haben ihre Daseinsberechtigung, gar keine Frage. Davon zeugt vor allem ihr Erfolg und ihre Verbreitung. Allerdings sollte man sich gut überlegen, für welches Projekt man Page Builder oder Theme Builder einsetzt.<br>
Eins vorweg: Ich bin wahrlich kein Freund von Page Buildern. Jede Begegnung mit Page Buildern hat bei mir immer für Kopfschmerzen gesorgt. Entweder hat ein Update den Page Builder unbrauchbar gemacht. Oder der Nutzer konnte den als intuitiv angepriesenen Page Builder gar nicht erst bedienen und ich musste mich damit rumärgern. Es gibt für mich eigentlich kein denkbares Szenario, in dem ein Page Builder Sinn macht. Trotz allem versuche ich Page Builder möglichst objektiv zu bewerten. Nicht alle hier aufgeführten Punkte betreffen jeden Page Builder, sie können dir aber helfen, die richtige Entscheidung zu treffen.</p>
<h2 id="pro">Pro</h2>
<p><strong>Webdesign für Laien</strong> - ohne HTML-, CSS- und JavaScript-Kenntnisse. Wenn es um kleinere oder Hobby-Projekte geht, ist man bei einem Page Builder gut aufgehoben. Man kann sich auf das Erstellen der Inhalte konzentrieren. Ein recht ahnsehnliches, modernes Layout lässt sich ohne tiefe technische Kenntnisse realisieren.</p>
<p><strong>Viele Funktionen aus einer Hand</strong> - Wer seine Seite mit allerlei Funktionen, Google Maps, Tabellen, Formularen usw. anreichen möchte, macht mit einem Theme Builder nichts falsch. Page Builder liefern eine Vielzahl von Funktionen und Elementen mit, die viele Ansprüche an eine moderne Webseite erfüllen.</p>
<h2 id="contra">Contra</h2>
<p><strong>Kompatibilität</strong> - jedes zusätzliche Plugin erhöht die Komplexität deiner Installation. Bei jedem Update anderer Plugins oder des Page Builders besteht die Gefahr, dass sich Komponenten nicht vertragen oder der Page Builder komplett oder in Teilen gar nicht mehr funktioniert. Dann beginnt die aufwendige Fehlersuche. Das Risiko lässt sich mit einem selber angepassten Theme sicher nicht ganz ausschließen, allerdings gerät die Fehlersuche hier einfacher.</p>
<p><strong>Sicherheit</strong> - jedes zusätzliche Plugin, vor allem wenn es so populär ist, kann Sicherheitslücken enthalten.</p>
<p><strong>Layout</strong> - Bei einem Page Builder ist die Gestaltung der Seite im Backend abgebildet und nicht wie üblich über CSS und HTML. Natürlich verwendet auch ein Theme Builer CSS und HTML - gemeint ist aber die Pseudo-Sprache des Theme Builders. Bei einem Theme Builder ziehst du per Drag&rsquo;n&rsquo;Drop ein Gestaltungselement in deinen Beitrag und diese Information wird als Meta-Datum im Beitrag abgelegt. Das Layout ist mit dem Inhalt und dem Theme Builder eng verwoben und es handelt sich um eine eigene &ldquo;Layout-Definition&rdquo;. Beim Wechsel auf einen anderen Page Builder geht diese Information verloren.</p>
<p><strong>Performance</strong> - das Erstellen aufwendiger Layouts mit Animationen und Spezialeffekten mit nur wenigen Maus-Klicks geht oft zu Lasten der Geschwindigkeit, weil auch nicht benötigte Module geladen werden. Außerdem müssen die ganzen hübschen Animationen auch berechnet werden. Das erfordert unnötige Rechenleistung. Das mag kleinlich klingen, aber das ist nicht nur in Grenzfällen von Bedeutung.</p>
<p><strong>Usability #1</strong> - die Zeiten von Macromedia Flash und aufwendigen Animationen auf den Websiten sind zum Glück lange vorbei. Wer nicht gerade eine Website für ein hippes Games-Studio baut, muss auf seiner Website niemanden mit unzähligen aufwendigen Animationen überzeugen. Bei PowerPoint-Präsentationen sind einfliegende Bilder, pulsierende Überschriften und andere Gimmicks schon lange verpönt, in der Page-Builder-Branche ist man leider noch nicht so weit.</p>
<p>**Usability #**2 - Das ganze trifft allerdings auch auf das Backend zu. Page Builder bieten sehr viele Funktionen an und sind daher relativ komplex aufgebaut, vor allem wenn man ein ausgefallenes Layout hinterlegt. Jemand, der sich nur mit den Inhalten beschäftigen will, läuft zu Beginn Gefahr, bereits an der Nutzung des Page Builders zu scheitern. Der Wordpress-Editor ist zurecht relativ simpel gehalten. Selbst jemand, der fit in der WordPress-Bedienung ist, benötigt erstmal Einarbeitung, um auch einen Theme Builder sicher bedienen zu können.</p>
<p><strong>Modularität</strong> - Die Modularität von Wordpress ist ein riesiger Vorteil, da so verschiedene Aufgaben unabhängig voneinander gelöst werden können. Plugin-Entwicklung, Inhalte und Layout sind strikt voneinander getrennt (wenngleich sie sich natürlich gegenseitig referenzieren dürfen). So kann ich in einer Entwicklungsumgebung mit einem Child-Theme ein neues Layout entwickeln und das dann in ein Live-System integrieren, indem ich einfach nur die Quelle-Dateien kopiere. Ein Page-Builder konterkariert das: Das Grenze zwischen reinem Webdesign und Inhaltserstellung verschwimmen, da nun der Wordpress-Texteditor dafür missbraucht wird, die Gestaltung der Seite maßgeblich zu beeinflussen. Das mag bequem sein, erschwert aber die Weitergabe, da nun nicht nur des Wordpress-Theme weitergegeben werden muss, sondern auch der komplette Inhalt der Beiträge.</p>
<p><strong>Abhängigkeit</strong> - Klar - wer seinen Page Builder liebt, der wird ihm nicht den Rücken kehren. Aber rein hypothetisch: Was ist, wenn du irgendwann doch mal weg willst, von deinem Page Builder? Dann stehst du vor einem Problem: Du musst das Layout komplett neu aufbauen und im schlimmsten Fall auch sämtliche Inhalte überarbeiten.</p>
<h2 id="gutenberg---der-gute-theme-builder">Gutenberg - der gute Theme Builder?</h2>
<p>Gutenberg ist in der Tat nichts anderes als ein Theme Builder und tatsächlich treffen die oben genannten Vor- und Nachteile größtenteils auch auf Gutenberg zu. Es gibt aber einen entscheidenden Unterschied: Gutenberg ist Teil von WordPress. Das Entwickler-Team von WordPress hat bei der Entwicklung von Core-Funktionalitäten immer auch die Kompatibilität mit Gutenberg im Blick.</p>
<h2 id="fazit-im-zweifel-gegen-die-page-builder">Fazit: Im Zweifel gegen die Page Builder</h2>
<p>Man darf sich von der eigenen Bequemlichkeit nicht verleiten lassen. Auf den ersten Blick nehmen Page Builder dir sehr viel Arbeit ab. Anfänger scheuen es verständlicherweise, sich mit JavaScript, CSS und HTML auseinandersetzen zu müssen. Doch die Zeit, die sie zu Beginn durch den Einsatz eines Page Builders sparen, geht später dafür drauf, sich mit all den Unannehmlichkeiten auseinander setzen zu müssen. Ich will nicht sagen, dass Page Builder keine Daseinsberechtigung haben - der Erfolg gibt ihnen schließlich recht. Allerdings begegnet man in den einschlägigen Foren auch vielen Hilfesuchenden, die Opfer ihre anfänglichen Bequemlichkeit werden.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> WordPress, Page-Builder, Meinung, Web-Dev</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Wordpress Page Builder - Pro und Contra - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>opinion_piece</dc:type>
      
      
    </item>
  </channel>
</rss>