<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" 
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Wordpress auf Nicky Reinert</title>
    <link>https://nickyreinert.de/tags/wordpress/</link>
    <description>Blog &amp; Projekte von Nicky Reinert (Institut für digitale Herausforderungen): Webentwicklung &amp; Software Development, SEO &amp; Analytics, Hosting &amp; DevOps, WordPress &amp; Hugo, Tools &amp; Projekte, Datenschutz und digitale Kultur – plus Texte zu KI sowie Autismus &amp; Gesellschaft.</description>
    <generator>Hugo 0.148.2</generator>
    <language>de</language>
    <managingEditor></managingEditor>
    <webMaster></webMaster>
    <copyright></copyright>
    <lastBuildDate>Thu, 05 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://nickyreinert.de/tags/wordpress/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>Wie funktionieren Dateirechte?</title>
      <link>https://nickyreinert.de/2020/2020-11-05-wie-funktionieren-dateirechte/</link>
      <pubDate>Thu, 05 Nov 2020 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2020/2020-11-05-wie-funktionieren-dateirechte/</guid>
      <description>Die korrekten Dateirechte sollten eine wichtige Rolle spielen, wenn du an einem Sicherheitskonzept für deine Webseite bzw. Wordpress arbeitest. Leider wird das …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieser Artikel behandelt Wie funktionieren Dateirechte? und bietet praktische Einblicke in das Thema.</p>
          
          
          <p><strong>Hauptthemen:</strong> Web, WordPress, Development</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>Die korrekten <strong>Dateirechte</strong> sollten eine wichtige Rolle spielen, wenn du an einem Sicherheitskonzept für deine Webseite bzw. Wordpress arbeitest. Leider wird das Thema Dateirechte oft stiefmütterlich behandelt, nicht zuletzt weil es fälschlicherweise als zu kompliziert angesehen wird. Dabei muss es das gar nicht sein: Das Grundprinzip ist einfach: Du willst nicht, dass jedermann Dateien <strong>ändern</strong>, <strong>ausführen</strong> oder <strong>lesen</strong> kann. Sicherlich gibt es feine Abstufungen. und genau die möchte ich hier erklären.</p>
<p>Achtung: Das Ziel dieses Beitrags ist nicht, dir eine fertige Lösung für deine WordPress-Installation bzw. dein Projekt zu geben. Das ist nicht möglich. Warum? Es gibt zig unterschiedliche Konfigurationen. Es mag allgemeingültige Lösungen geben, diese sind aber bei weitem nicht sicher. Stichwort: chmod 777 * -R</p>
<p>Du solltest nach der Lektüre aber das Konzept verstehen und vielleicht sogar in der Lage sein, die Dateirechte selbstständig zu setzen.</p>
<h2 id="die-grundlagen-wie-verarbeitet-ein-web-server-anfragen">Die Grundlagen: Wie verarbeitet ein Web-Server Anfragen?</h2>
<p>Jetzt fragst du dich sicherlich, was das mit Dateirechten zu tun hat? Was passiert, wenn du auf einer Webseite surfst? Folgende Vereinfachung dürfte das konzept hilfreich beschreibe: Der Web-Server schickt eine Datei an deinen Browser. Und du kannst Dateien an den Web-Server schicken, sprich hochladen. Wer also verstehen will, wie Dateirechte gesetzt werden müssen, sollte das Grundkonzept eines Servers verstehen.</p>
<p>Wie sieht diese Kommunikation mit dem Server also im Detail aus? Du schickst über deinen Browser eine Anfrage (<a href="https://nickyreinert.de/index.html">http://nickyreinert.de/index.html</a>) an den Server (was auch nur irgendein anderer Computer auf der Welt ist, egal ob in der Cloud oder in einem Keller). Auf dem Server laufen verschiedene Dienste - die verwirrenderweise auch als Server bezeichnet werden.</p>
<p><img src="https://pbs.twimg.com/media/D864DxrWsAAmvXi?format=png&amp;name=small" alt="Bild"></p>
<p>Die Cloud ist auch nur der Computer von jemand anders</p>
<p>Einer dieser Dienste ist der <strong><a href="https://de.wikipedia.org/wiki/Internetdienst#Die_Internetdienste_im_Einzelnen">HTTP-Dienst</a></strong>. Sehr verbreitet sind <strong>Apache2</strong> und <strong>nginx</strong>. Das Konzept ist bei beiden gleich: Sie empfangen deine Anfrage und schicken dir eine Antwort. Bei dieser Antwort unterscheidet man grob zwischen <strong>statische Inhalten</strong> (HTML-Datei, Texte, Bilder, &hellip;), die der <strong>HTTP-Dienst</strong> direkt zurückschickt und <strong>dynamischen Inhalten</strong>. Dynamische Inhalte müssen auf dem Server erst verarbeitet werden, wie z.B. Datenbankabfragen oder ganz simpel die Darstellung der aktuellen Uhrzeit: <a href="https://nickyreinert.de/dynamisch.php">https://nickyreinert.de/dynamisch.php</a>. Das ermöglicht ein <strong>PHP-Dienst</strong> bzw. <strong>PHP-Interpreter</strong>.</p>
<p>Im Kontext der Dateirechte muss man hier eine wichtige Unterscheidung treffen: Der PHP-Interpreter ist entweder Teil des HTTP-Dienstes (<strong>PHP-Modul</strong>). Damit ist z.B. <strong>Apache2</strong> in der Lage, die PHP-Datei quasi selber zu interpretieren, und den dynamischen Inhalt für die Antwort zu erzeugen. Oder der PHP-Dienst ist ein getrennt laufender Dienst bzw. Prozess, der über eine Schnittstelle (CGI) vom HTTP-Dienst angesprochen wird (<a href="http://www.php-faq.de/q/q-php-cgi-vs-modul.html">mehr dazu hier</a>).</p>
<p>Um Informationen auf dem Server zu speichern, gibt es zwei Möglichkeiten: Zum einen wäre da die Datenbank, wie z.B. <strong>MySQL</strong> oder <strong>MariaDB</strong>. Der PHP-Dienst nutzt die Datenbank, um Informationen abzulegen, die in der Regel volatil sind. Wie z.B. Kommentare oder Texte für deinen Blog. Und es gibt das <strong>Dateisystem</strong>. Ganz banal ausgedrückt ist das die Festplatte des Servers. Und genau dort brauchst du Dateirechte. Die folgende Abbildung zeigt die beiden oben erwähnten Konfigurationen: In der ersten Konfiguration sind HTTP- und PHP-Dienst getrennte Dienste, in der zweiten Konfiguration nutzt der HTTP-Dienst PHP als integriertes Modul.</p>
<p>Die Abbildung zeigt außerdem ein beispielhaftes Dateisystem mit einigen ausgewählten Dateien und Ordnern, die dir von WordPress bekannt vorkommen dürften.</p>
<ul>
<li>
<p><a href="https://www.nickyreinert.de/files/wie-funktionieren-dateirechte/Folie1.png"><img src="/2020/2020-11-05-wie-funktionieren-dateirechte/images/Folie1-700x394.png" alt=""></a></p>
</li>
<li>
<p><a href="https://www.nickyreinert.de/files/wie-funktionieren-dateirechte/Folie2.png"><img src="/2020/2020-11-05-wie-funktionieren-dateirechte/images/Folie2-700x394.png" alt=""></a></p>
</li>
</ul>
<p>Der vierte Dienst im Bunde ist übrigens der <strong>FTP-Dienst</strong>. Dieser ermöglicht es (in der Regel dem Web-Entwickler) sich per <strong>FTP</strong> auf den Server zu verbinden und Dateien über einen FTP-Client hochzuladen, zu bearbeiten oder zu löschen.</p>
<h2 id="lesen-schreiben-ausführen---was-bedeutet-das-eigentlich">Lesen, Schreiben, Ausführen - Was bedeutet das eigentlich?</h2>
<p>Wenn es um die Fähigkeit &ldquo;Ausführen&rdquo; geht, muss man streng zwischen Ordnern und Dateien unterscheiden. Das <strong>Ausführen</strong> von Dateien, egal welche Endung sie haben, ist in <strong>keiner Konfiguration notwendig</strong>! Das Ausführen von Ordern hingegen ermöglicht den Zugriff auf den Ordner. Jeder Ordner deiner WordPress-Installation darf also ausführbar sein.</p>
<p>Das <strong>Lesen</strong> eines Ordners ermöglicht einem Dienst, die Ordner-Inhalte aufzulisten. Das Lesen einer Datei ermöglicht einem Dienst den Inhalt einer Datei darzustellen. Und das ist bereits ein sicherheitskritisches Merkmal: Nicht jeder Dienst muss bzw. darf jede Datei lesen. Der HTTP-Dienst benötigt z.B. keinen lesenden Zugriff auf PHP-Dateien. Und erst Recht nicht auf z.B. die wp-config.php - in der sich ja das Passwort für die Datenbank befindet. Der HTTP-Dienst reicht die Anfrage für die dynamische PHP-Datei in der Regel an den PHP-Dienst weiter. Gleichwohl muss der HTTP-Dienst statische Inhalte lesen können. Vor allem bei den Leserechten gibt es also sehr viele Feinheiten zu beachten.</p>
<p>Wer <strong>Schreibrechte</strong> für einen Ordner hat, kann darin Dateien anlegen bzw. den Ordner löschen oder umbenennen. Das Schreibrecht für eine Datei ermöglicht das Löschen der Datei und das Ändern der Inhalte. Grundsätzlich sollte kein Dienst Schreibrechte im Dateisystem besitzen. So vermeidet man z.B., dass jemand Schadcode in eine PHP-Datei einfügt. Der PHP-Dienst kann Informationen in der Datenbank ablegen und für den HTTP-Dienst gibt es erstmal keinen Grund, überhaupt Dateien ändern oder anlegen zu müssen.</p>
<p>Natürlich gibt es Ausnahmen. Z.B. benötigt der PHP-Dienst Schreibrechte, wenn Dateien von WordPress oder der Plugins aktualisiert werden müssen. Oder ein Nutzer Dateien hochladen möchte (Hier kommt übrigens eine andere wichtige Sicherheitseinstellung zum Tragen: Man kann unterbinden, dass der PHP-Dienst Dateien aus dem Upload-Ordner als PHP-Dateien verarbeitet.)</p>
<p>Wie wir diese Dateirechte setzen, dazu gleich mehr.</p>
<h2 id="besitzrechte-einer-datei">Besitzrechte einer Datei</h2>
<p>Vorher schauen wir uns noch die Besitzverhältnisse von Dateien und Ordnern an. Diese lassen sich einem <strong>Besitzer</strong> und einer <strong>Gruppe</strong> zuordnen. Jeder der oben genannten Dienste kann, ganz abstrakt betracht, als <strong><em>Nutzer</em></strong> verstanden werden. Und damit entweder <strong>direkt Besitzer</strong> einer Datei oder eines Ordners sein. Oder <strong>indirekt</strong>, über die <strong>Gruppenzugehörigkeit</strong>.</p>
<p>Eine Datei gehört also zu einem Besitzer und zu einer Gruppe von Besitzern. Der Besitzer muss nicht zwingend Teil der Gruppe sein. Der <strong>Besitzer</strong> kann bestimmte Rechte für diese Datei besitzen, wie z.B. <strong>Lesen</strong> und <strong>Schreiben</strong>. Einer <strong>Gruppe</strong> von Besitzern werden auch individuelle Rechte zugesprochen, wie z.B. nur das <strong>Lesen</strong>. Und dann gibt es noch &ldquo;<strong>alle anderen</strong>&rdquo;, die vielleicht gar <strong>keine Zugriffsrechte</strong> auf eine Datei haben. Am Beispiel von <strong>index.html</strong> sieht das folgendermaßen aus:</p>
<p><em>index.html:</em></p>
<ul>
<li><strong>Besitzer</strong>: FTP-Dienst, darf lesen und schreiben,</li>
<li><strong>Gruppe</strong>: WWW-Data, darf lesen,</li>
<li><strong>alle andern</strong>: keine Rechte</li>
</ul>
<p>Und das enstpricht auch schon der klassischen Rechtevergabe von Dateien. Schreibrechte werden nur dem Besitzer eingeräumt. Die Gruppe darf bestenfalls lesen. Natürlich gibt es Sonderfälle, wie das Aktualisieren von WordPress oder von Plugins, dazu später mehr.</p>
<h2 id="wie-funktionieren-chown-und-chmod">Wie funktionieren chown und chmod?</h2>
<p>Du wirst es sicher schon mal gehört haben: Dateirechte werden mit <strong>chown</strong> und <strong>chmod</strong> konfiguriert. chown steht für &ldquo;change owner&rdquo; - also &ldquo;ändere den Besitzer&rdquo; und chmod für &ldquo;change mode&rdquo;, &ldquo;ändere den Modus&rdquo;.</p>
<p>Zu Demonstrationszwecken gehen wir von der folgenden Konfiguration aus, die zwar bei weitem nicht die sicherste, dafür aber weit verbreitet ist:</p>
<p>Die <em>Nutzer</em> für den PHP- und HTTP-Dienst sind in der Gruppe <strong>www-data</strong> zusammengefasst. Daneben gibt es den FTP-Dienst (<strong>ftp-user</strong>).</p>
<p><strong>Ftp-user</strong> bekommt alle Rechte: Lesen, Schreiben, usw. Die Nutzer der Gruppe <strong>www-data</strong> bekommen nur lesenden Zugriff - vorerst!</p>
<p>Jede Datei und jeder Ordner sollen dem <strong>ftp-user</strong> gehören, gleichzeitig aber auch zur Gruppe <strong>www-data</strong>. Das lässt sich mit <strong>chown</strong> folgendermaßen bewerkstelligen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">chown</span> <span class="n">ftp</span><span class="o">-</span><span class="n">user</span><span class="p">:</span><span class="n">www</span><span class="o">-</span><span class="n">data</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">www</span><span class="o">/*</span> <span class="o">--</span><span class="n">recursive</span>
</span></span></code></pre></div><p>Der erste Parameter definiert den Besitzer (ftp-user) und die Gruppenzugehörigkeit (www-data), immer getrent mit einem Doppelpunkt. Danach folgt der betroffene Ordner bzw. die Datei. Mit <strong>--recursive</strong> (oder kürzer <strong>-R</strong>) werden auch alle Unterordner und darin befindlichen Dateien angesprochen.</p>
<p>Bei den Dateirechten wird es etwas aufwendiger, zunächst der Aufruf:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">chmod</span> <span class="mi">640</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">www</span><span class="o">/*</span> <span class="o">-</span><span class="n">R</span>
</span></span></code></pre></div><p>Hier nutzen wir die Kurzschreibweise -R um alle Dateien und Ordner rekursiv zu ändern. Wichtig ist für uns die Ziffer hinter chmod: 640. Genau genommen handelt es sich um drei (oktale) Ziffern, nämlich 6, 4 und 0. Entsprechend der Position regeln sie die Zugriffsrechte für den</p>
<ul>
<li><strong>Besitzer</strong> (ftp-user, die 6 an erster Stelle),</li>
<li>die <strong>Gruppe</strong> (www-data) samt ihrer Mitglieder (HTTP-Dienst, die 4 an zweiter Stelle)</li>
<li>und an letzter Stelle alle anderen (<strong>others</strong> - die 0).</li>
</ul>
<p>Und wie entstehen die Ziffern 6, 4 und 0? Wir erinnern uns an die drei Zugriffsrechte:</p>
<ul>
<li>lesen,</li>
<li>schreiben sowie</li>
<li>ausführen.</li>
</ul>
<p>Jedes Recht besitzt einen Wert:</p>
<ul>
<li>Lesen (bzw. r für read) = 4</li>
<li>Schreiben (bzw. w für write) = 2</li>
<li>Ausführen (bzw. x für eXecute) = 1</li>
<li>Kein Recht = 0</li>
</ul>
<p><a href="https://www.nickyreinert.de/files/2227/berechnung-der-Dateirechte-fu%CC%88r-chmod.png"><img src="images/berechnung-der-Dateirechte-fu%CC%88r-chmod-300x167.png" alt="Die Berechnung der Dateirechte für chmod"></a></p>
<p>Die Berechnung der Dateirechte für chmod</p>
<p>Um Rechte zu kombinieren, bildet man deren Summe. Will man also alle Rechte vergeben, erechnet sich das folgendermaßen:</p>
<ul>
<li>Lesen + Schreiben + Ausführen = 4 + 2+ 1 = 7</li>
</ul>
<p>Nur Lese- und Schreibzugriff errechnet sich demnach so:</p>
<ul>
<li>Lesen + Schreiben = 6</li>
</ul>
<p>Die obene genannte chmod-Anweisung setzt also die folgenden Rechte um:</p>
<ul>
<li>Besitzer (ftp-user): 6 (Lesen, Schreiben)</li>
<li>Gruppe (www-data): 4 (Lesen)</li>
<li>Alle anderen (others): 0 (keine Rechte)</li>
</ul>
<p>Was heißt das? Der FTP-Nutzer darf als Besitzer alles: Dateien hochladen, löschen, bearbeiten usw. Jedes Mitglied der Gruppe www-data darf Dateien nur lesen. Jeder andere Nutzer (bzw. Dienst) darf gar nicht auf die Dateien in deinem WordPress-Projekt zugreifen. Das klingt sehr sicher, führt allerdings zu einem Problem: Dein Server dürfte so nicht funktionieren. Nimm als Beispiel diesen Aufruf: <a href="https://nickyreinert.de/ordner/">https://nickyreinert.de/ordner/</a></p>
<p>Die HTTP-Fehlermeldung <strong>403 Forbidden</strong> erscheint. Das sind die Zugriffsrechte für den Ordner, so wie wir sie eben gesetzt haben:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">drw-r----- 2 ftp-user www-data   4096 Okt 14 11:48 ordner/
</span></span></code></pre></div><p>In der zweiten Spalte sehen wir: Der Ordner gehört <strong>ftp-user</strong> und der Gruppe <strong>www-data</strong>.</p>
<p>Das <strong>d</strong> ganz am Anfang steht für <strong>directory</strong>, lies Ordner. Dann folgen die Dateirechte, die wir eben schon festgelegt haben: Zunächst drei Zeichen, die die Zugriffsrechte für den Besitzer (<strong>ftp-user</strong>) beschreiben: <strong>rw-</strong></p>
<p>Also Lesen (<strong>read)</strong> und Schreiben (<strong>write</strong>) (würde anstelle des <strong>-</strong> ein <strong>x</strong> stehen (<strong>eXecute)</strong>, stünde das für <strong>Ausführen</strong>). Die Gruppe <strong>www-data</strong> und alle ihre Mitglieder dürfen nur Lesen (r&ndash;). Alle anderen dürfen gar nichts (&mdash;).</p>
<p>Nun handelt es sich aber um einen Ordner. Ein Ordner kann aber nur &ldquo;betreten&rdquo; werden, wenn man die Genehmigung zum <strong>Ausführen</strong> hat. Weder der Besitzer noch die Gruppe hat diese Genehmigung. Unsere obere Anweisung reicht also nicht aus! Tatsächlich sollte man also <strong>Zugriffsrechte für Dateien und Ordner immer getrennt</strong> festlegen!</p>
<p>Berechtigung für alle Dateien:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">chmod</span> <span class="mi">640</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">www</span><span class="o">/*</span> <span class="o">-</span><span class="n">R</span>
</span></span></code></pre></div><p>Berechtigung für alle Ordner:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">chmod</span> <span class="mi">750</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">www</span><span class="o">/*</span> <span class="o">-</span><span class="n">R</span>
</span></span></code></pre></div><p>Du siehst, dass das Ermöglichen des Ausführens einfach durch das Addieren von 1 für die beiden ersten Positionen ermöglicht wird.</p>
<p>Tatsächlich findest du diese beiden Befehle auch in vielen Anleitungen zu Dateirechten und damit endet die Anleitung oft auch schon. Doch damit hast du ein Problem. Denn die zweite Anweisung überschreibt das Ergebnis der ersten Anweisung. Aber wir wollen doch Dateien und Ordner individuell einrichten! Abhilfe schafft der Befehl <strong>find</strong>, um Dateien und Ordner getrennt anzusprechen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">f</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">640</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">d</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">750</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span></code></pre></div><p>Der Parameter <strong>-type f</strong> liefert alle Dateien im angegeben Ordner zurück (f wie file, Datei). Der Punkt hinter htdocs in der ersten Zeile sorgt dafür, dass auch versteckte Dateien, wie z.B. die .htaccess-Datei, gefunden werden. Mit <strong>exec</strong> übergebe ich das Resultat von find, eine Liste die alle gefundenen Dateien enthält, an einen anderen Befehl. In dem Fall also <strong>chmod</strong>.</p>
<p>Vice versa für alle Ordner, die mit <strong>-type d</strong> gefunden werden. Hier wird mit chmod auch das Recht zum Ausführen vergeben.</p>
<h2 id="dateirechte-in-der-realität">Dateirechte in der Realität</h2>
<p>Das klingt erstmal recht einfach, hat aber drei Haken:</p>
<ol>
<li>Es gibt Dateien, die nur für den PHP-Dienst relevant sind, andere wiederum nur für den HTTP-Dienst. Man muss die Besitzrechte also etwas granularer vergeben.</li>
<li>Bei einem Update der Plugins oder WordPress müssen Dateien für die Gruppe www-data wenigstens temporär schreibbar sein.</li>
<li>Wenn man den Upload von Dateien zulassen möchte, muss der Ordner /wp-content/uploads dauerhaft beschreibbar sein.</li>
</ol>
<p>Es gibt also verschiedene <strong>Ordner- und Datei-Kategorien</strong>, die verschiedene Rechte erfordern. Die folgende Matrix zeigt, am Beispiel von WordPress, eine <strong>ideale</strong> Konfiguration:</p>
<p><a href="https://www.nickyreinert.de/files/wie-funktionieren-dateirechte/grafik-4.png"><img src="/2020/2020-11-05-wie-funktionieren-dateirechte/images/grafik-4-700x315.png" alt=""></a></p>
<p>Die **.htaccess-**Datei muss für den PHP-Dienst gar nicht sichtbar, geschweige denn beschreibbar sein. Die Datei <strong>wp-config.php</strong> wiederum sollte für den HTTP-Dienst unsichtbar sein. Generell müssen PHP-Dateien, also dynamische Ressourcen, für den HTTP-Dienst gar nicht sichtbar sein. Der Upload-Ordner ist hier beschreibbar, um das Hochladen von Datein zu ermöglichen. Wird ein Cache verwendet, muss natürlich auch dieser Ordner beschreibbar sein.</p>
<p>Solltest du, z.B. auf deinem eigenen Webspace, die Möglichkeit haben, Besitzrechte derart granular zu konfigurieren, kann dir die Matrix vielleicht als Inspiration dienen. In der Realität hilft das aber nicht weiter, da der PHP-Dienst als Modul entweder innerhalb des HTTP-Dienstes läuft oder beide Dienste unter einer Gruppe (www-data) laufen (<a href="https://binary-butterfly.de/artikel/dateirechte-wie-stelle-ich-das-bei-meinem-hoster-ein/">hier wird das Problem noch etwas genauer beleuchtet</a>). Die Konfiguration sieht dann in etwa so aus:</p>
<p><a href="https://www.nickyreinert.de/files/wie-funktionieren-dateirechte/grafik-5.png"><img src="/2020/2020-11-05-wie-funktionieren-dateirechte/images/grafik-5-700x288.png" alt=""></a></p>
<p>Nun stellst du dir sicher die Frage, wie du ein derartiges Setup möglichst unkompliziert einrichten kannst. Eins Vorweg: Ohne Zugriff auf die Shell wird das ziemlich aufwendig. Mit Zugriff auf die Kommandozeile kannst du die Dateirechte z.B. folgendermaßen setzen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">f</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">640</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">d</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">750</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/</span><span class="n">wp</span><span class="o">-</span><span class="n">content</span><span class="o">/</span><span class="n">uploads</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">f</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">660</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/</span><span class="n">wp</span><span class="o">-</span><span class="n">content</span><span class="o">/</span><span class="n">uploads</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">d</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">770</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/</span><span class="n">wp</span><span class="o">-</span><span class="n">content</span><span class="o">/</span><span class="n">cache</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">f</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">660</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/</span><span class="n">wp</span><span class="o">-</span><span class="n">content</span><span class="o">/</span><span class="n">cache</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">d</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">770</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span></code></pre></div><p>Wenn du Themes oder Plugins aktualisieren willst, musst du die Rechte folgendermaßen anpassen und somit Datein und Ordner schreibbar machen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/</span><span class="n">wp</span><span class="o">-</span><span class="n">content</span><span class="o">/</span><span class="n">themes</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">f</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">660</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/</span><span class="n">wp</span><span class="o">-</span><span class="n">content</span><span class="o">/</span><span class="n">themes</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">d</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">770</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/</span><span class="n">wp</span><span class="o">-</span><span class="n">content</span><span class="o">/</span><span class="n">plugins</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">f</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">660</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/</span><span class="n">wp</span><span class="o">-</span><span class="n">content</span><span class="o">/</span><span class="n">plugins</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">d</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">770</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span></code></pre></div><p>Beim Update von WordPress trifft das natürlich auf die ganze Installation zu:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">f</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">660</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">find</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htdocs</span><span class="o">/.</span> <span class="o">-</span><span class="n">type</span> <span class="n">d</span> <span class="o">-</span><span class="n">exec</span> <span class="n">chmod</span> <span class="mi">770</span> <span class="o">--</span> <span class="p">{}</span> <span class="o">+</span>
</span></span></code></pre></div><p>Wenn du keinen Zugriff auf die Kommandozeile hast, kannst du auch PHP nutzen, insofern du die Rechte dazu hast. Die Funktion lautet <a href="https://www.php.net/manual/de/function.chmod.php">chmod()</a>.</p>
<h2 id="ausführen-von-php-code-in-bestimmten-ordnern-unterbinden">Ausführen von PHP-Code in bestimmten Ordnern unterbinden</h2>
<p>Oben hatte ich das Problem mit dem Upload-Ordner angesprochen. Wenn Nutzer in der Lage sind, dort Dateien zu modifizieren oder abzulegen, ist das ein Sicherheitsrisiko. Du kannst das Risiko aber eindämmen, indem du dafür sorgst, dass Dateien in diesem Ordner schlicht nicht von PHP interpretiert, sprich ausgeführt, werden können.</p>
<p>So kann der Ordner beschreibbar bleiben, das Sicherheitsrisiko wird aber trotzdem reduziert. Dazu erstellst du eine .htaccess-Datei im uploads-Ordner mit diesem Inhalt:</p>
<p>SetHandler !
RemoveHandler .php .phtml .php3
RemoveType .php .phtml .php3
php_admin_value engine Off
php_flag engine off</p>
<p>Die beiden letzten Zeile sind redundant zu den vorherigen. Sie soll sicherstellen, dass PHP hier wirklich nicht funktioniert. Ein Angreifer ist somit vielleicht in der Lage, PHP-Code in diesem Ordner abzulegen aber nicht mehr, diesen auch auszuführen.</p>
<p>Bei nginx kannst du den Upload-Ordner einfach implizit von PHP abnabeln:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">$</span><span class="n">uri</span> <span class="o">!~</span> <span class="s2">&#34;^/uploads/&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl">   <span class="n">fastcgi_pass</span> <span class="n">unix</span><span class="p">:</span><span class="o">/</span><span class="n">run</span><span class="o">/</span><span class="n">php</span><span class="o">/</span><span class="n">php</span><span class="o">-</span><span class="n">fpm</span><span class="o">-$</span><span class="n">server</span><span class="o">.</span><span class="n">sock</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="fs_method">FS_METHOD</h2>
<p>Wenn du meinst, die Dateirechte korrekt vergeben zu haben und trotzdem fordert dich Wordpress beim Updaten auf, die FTP-Zugangsdaten einzugeben, setze diesen Parameter in der Datei wp-config.php:</p>
<p>define(&lsquo;FS_METHOD&rsquo;, &lsquo;direct&rsquo;);</p>
<p>WordPress weiß nun, dass es Dateien direkt anfassen darf, ohne den Umweg über den FTP-Nutzer zu gehen.</p>
<p>Dieser Parameter kann recht nützlich sein, wenn du die Dateirechte noch restriktiver vergeben willst, sprich: PHP gar keine Schreibrechte einräumst. Du musst dann einen FTP-Nutzer anlegen, über den WordPress sozusagen indirekt auf das Dateisystem zugreifen kann.</p>
<h2 id="wenig-aufwand-viel-nutzen">Wenig Aufwand, viel Nutzen</h2>
<p>Die Einarbeitung in die Benutzerrechte mit <strong>chmod</strong> mag anfangs vielleicht ungewohnt sein, mit etwa Übung hat man den Dreh aber recht schnell raus. Der Nutzen ist immens, denn die falsche Rechte-Vergabe ist ein häufiger Grund, warum bösartige Software sich überhaupt auf einem Server verbreiten kann. Es gibt noch eine Handvoll andere Maßnahmen, die relativ simpel und effektiv sind, denen ich mich in einem anderen Beitrag widmen möchte.</p>
<p>Zuguter Letzt: Willst du wissen, ob die Dateirechte in deiner Installation korrekt gesetzt wurden, kannst du auf dieses Script zurückgreifen. Ich habe dazu das Script von <a href="https://binary-butterfly.de/artikel/dateirechte-warum-eigentlich/">Ernesto Ruge</a> etwas überarbeitet, in der Funktionalität aber unverändert gelassen:</p>
<p><a href="https://www.nickyreinert.de/files/wie-funktionieren-dateirechte/grafik-7.png"><img src="/2020/2020-11-05-wie-funktionieren-dateirechte/images/grafik-7-700x366.png" alt=""></a></p>
<p>Die korrekten Datei und Ordner-Rechte für WordPress prüfen</p>
<p><a href="https://www.nickyreinert.de/files/wie-funktionieren-dateirechte/testFileFolderPermissions.php_-1.zip">testFileFolderPermissions.php_-1</a><a href="https://www.nickyreinert.de/files/wie-funktionieren-dateirechte/testFileFolderPermissions.php_-1.zip">Herunterladen</a></p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> chmod, dateirechte, sysop, wordpress</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>anleitungen</category>
      
      <category>hosting</category>
      
      <category>wordpress</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Wie funktionieren Dateirechte? - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>guide</dc:type>
      
      
    </item><item>
      <title>Automatisierte WordPress Installation</title>
      <link>https://nickyreinert.de/2020/2020-10-08-automatisierte-wordpress-installation/</link>
      <pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2020/2020-10-08-automatisierte-wordpress-installation/</guid>
      <description>Et voilá. Ein BASH Script, um WordPress automatisiert über die Kommandozeile zu installieren, inklusive Theme und beliebigen Plugins sowie - wenn benötigt - …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieser Artikel behandelt Automatisierte WordPress Installation und bietet praktische Einblicke in das Thema.</p>
          
          
          <p><strong>Hauptthemen:</strong> Web, WordPress, Development</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>Et voilá. Ein BASH Script, um WordPress automatisiert über die Kommandozeile zu installieren, inklusive Theme und beliebigen Plugins sowie - wenn benötigt - zufälligen Beiträgen, Kategorien, Tags und Bildern.</p>
<h2 id="warnung">Warnung!</h2>
<p>Du solltest geübt im Umgang mit der Shell, Bash und WordPress sein und unbedingt <strong>Backups</strong> nutzen. Das Script verwendet, wenn der entsprechende Parameter gesetzt ist, den Befehl &ldquo;<strong>rm -rf</strong>&rdquo;, um einen Ordner komplett zu <strong>löschen</strong>. Dieser Schritt lässt sich nicht widerrufen. Außerdem wird, sofern per Parameter gefordert, eine Datenbank mit &ldquo;<strong>DROP DATABASE</strong>&rdquo; komplett entfernt. Wenn du das Script auf eine existierende WordPress-Installation oder Datenbank anwendest, können existierende Daten <strong>überschrieben</strong> werden!</p>
<h2 id="funktionsweise">Funktionsweise</h2>
<p>Das Script wird über die Kommandozeile aufgerufen und nutzt die <a href="https://wp-cli.org/de/">WordPress Kommandozeilen-Benutzeroberfläche,</a> um <strong>WordPress</strong> zu installieren sowie samt <strong>Themes</strong> und <strong>Plugins</strong> einzurichten. Du kannst außerdem beliebig viele <strong>Beiträge</strong> anlegen. Die Inhalte für die Beiträge stammen von einem Online-Dienst für zufällige englische Texte: <a href="http://metaphorpsum.com/paragraphs">metaphorpsum.com/paragraphs</a>. Außerdem werden zufällige <strong>Textauszüge</strong> (Excerpts) sowie <strong>Schlagwörter</strong> (Tags) und sogar <strong>Bilder</strong> jedem Beitrag hinzugefügt. Beiträge werden außerdem Kategorien zugeordnet. Diese werden ebenfalls <strong>zufällig</strong> bis zu einer Tiefe von 2 Ebenen erzeugt.</p>
<h2 id="installation">Installation</h2>
<p>Du findest den Sourcecode auf github: <a href="https://github.com/nickyreinert/AutomatedWordPressInstallation">https://github.com/nickyreinert/AutomatedWordPressInstallation</a>.</p>
<p>Nach der Installation kopierst du die Datei settings-template zu .settings, um in dieser Datei die Einstellungen für deine WordPress-Installation vorzunehmen. Du startest den Prozess mit <strong>bash start.sh</strong> oder setzt den Ausführen-Flag für bash.sh um diese direkt auszuführen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">chmod u+x bash.sh
</span></span><span class="line"><span class="ln">2</span><span class="cl">./bash.sh
</span></span></code></pre></div><h2 id="zufällige-inhalte">Zufällige Inhalte</h2>
<p>Das Script ermöglicht das Anlegen von beliebig vielen zufälligen Beiträgen in beliebig vielen zufälligen Kategorien. Was genau dabei passiert, beschreibe ich hier kurz:</p>
<p>Zunächst wird eine Kategorie erzeugt. Dazu wird von der folgenden API ein zufälliges Wort abgerufen: <a href="https://random-word-api.herokuapp.com/word?swear=0&amp;number=">https://random-word-api.herokuapp.com/word?swear=0&amp;number=</a></p>
<p>Dieser Kategorie wird dann ein Beitrag wird mit einer beliebigen Anzahl von <strong>Absätzen</strong> von dieser API zugeordnet: <a href="http://metaphorpsum.com/paragraphs/">http://metaphorpsum.com/paragraphs/</a>. Der Beitrag erhält einen zufälligen Titel (von dort: <a href="http://metaphorpsum.com/sentences/">http://metaphorpsum.com/sentences</a>), einen Textauszug (gleiche API), sowie eine beliebige Anzahl zufälliger Tags (Schlagwörter), ebenfalls von <a href="https://random-word-api.herokuapp.com/word?swear=0&amp;number=">random-word-api.herokuapp.com</a>. Dann werden für diesen Beitrag Revisionen erzeugt - auch diese in beliebiger Höhe. Abschließend erhält jeder Beitrag ein zufälliges Featured Image sowie ein weiteres zufälliges Bild am Ende des Fließtextes.</p>
<p>Je nachdem, wieviele Beiträge und Kategorien bzw. Sub-Kategorien eingerichtet werden soll, wird dieser Prozess natürlich wiederholt.</p>
<p><em>(Bisher werden die Inhalte leider nur auf Englisch eingefügt)</em></p>
<h2 id="einstellungen">Einstellungen</h2>
<p>Alle Einstellungen befinden sich in der Datei <strong>.settings</strong> und werden im Folgenden beschrieben. Der PROJECT-Parameter kann im weiteren Verlauf als Platzhalter verwendet werden und sollte keine Leerzeichen oder Sonderzeichen enthalten:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">PROJECT=myWordPressBlog
</span></span></code></pre></div><h3 id="datenbank">Datenbank</h3>
<p>Du kannst eine neue Datenbank anlegen (CREATE_DB) oder auf eine existierende Datenbank zurückgreifen.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">DB_DROP=yes|no
</span></span><span class="line"><span class="ln">2</span><span class="cl">CREATE_DB=yes|no
</span></span><span class="line"><span class="ln">3</span><span class="cl">DB_ROOT=root
</span></span><span class="line"><span class="ln">4</span><span class="cl">DB_ROOT_PASSWORD=secret
</span></span></code></pre></div><p>Willst du eine frische Datenbank anlegen, solltest du die alte Datenbank mit DB_DROP=yes löschen. Soll eine neue Datenbank angelegt werden, müssen die Zugangsdaten für einen privilegierten Nutzer angegeben werden: Mit den folgenden Parameter legst du fest, wie WordPress auf die Datenbank zugreift:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">DB_HOST=127.0.0.1
</span></span><span class="line"><span class="ln">2</span><span class="cl">DB_NAME=&#34;${PROJECT}_database&#34;
</span></span><span class="line"><span class="ln">3</span><span class="cl">DB_PREFIX=&#34;wp_&#34;
</span></span><span class="line"><span class="ln">4</span><span class="cl">
</span></span><span class="line"><span class="ln">5</span><span class="cl">ADD_DB_USER=yes|no
</span></span><span class="line"><span class="ln">6</span><span class="cl">DB_USER=&#34;${PROJECT}_dbuser&#34;
</span></span><span class="line"><span class="ln">7</span><span class="cl">DB_USER_PASSWORD=$(cat /dev/urandom | tr -dc &#39;a-zA-Z0-9&#39; | fold -w 32 | head -n 1)
</span></span></code></pre></div><p>Das Passwort wird im Beispiel zufällig erzeugt, willst du ein eigenes Passwort verwenden, kannst du den Parameter überschreiben, z.B:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">DB_USER_PASSWORT=secret
</span></span></code></pre></div><p>Der DB-Nutzer wird natürlich nur angelegt, wenn ADD_DB_USER=yes gesetzt ist. Andernfalls musst du hier die passenden Zugangsdaten angeben.</p>
<h3 id="wordpress">WordPress</h3>
<p>Du kannst auf eine existierende Installation zurückgreifen, um z.B. dort Beiträge hinzuzufügen, oder WordPress komplett neu installieren. Hier kannst du z.B. auch den oben festgelegten PROJECT-Parameter nutzen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">WP_PATH</span><span class="o">=</span><span class="s2">&#34;/var/nginx/htdocs/${PROJECT}/&#34;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">INSTALL_CORE</span><span class="o">=</span><span class="n">yes</span><span class="o">|</span><span class="n">no</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">WP_DROP</span><span class="o">=</span><span class="n">yes</span><span class="o">|</span><span class="n">no</span>
</span></span></code></pre></div><p>Mit WP_DROP kannst du festlegen, dass der Ordner WP_PATH komplett gelöscht wird. <strong>Vorsicht</strong> ist hier also geboten! Die folgenden Parameter betreffen deine allgemeinen WordPress-Einstellungen. Bei der URL kannst du wieder den PROJECT-Platzhalter nutzen.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">WP_TITLE=&#39;WordPress Test&#39;
</span></span><span class="line"><span class="ln">2</span><span class="cl">URL=&#34;https://blog.example.org/${PROJECT}&#34;
</span></span><span class="line"><span class="ln">3</span><span class="cl">WP_ADMIN_NAME=admin
</span></span><span class="line"><span class="ln">4</span><span class="cl">WP_ADMIN_EMAIL=mail@example.org
</span></span><span class="line"><span class="ln">5</span><span class="cl">WP_ADMIN_PASSWORD=secret
</span></span></code></pre></div><p>Willst du ein eigene Passwort vergeben, kannst du auch hier ein zufälliges Passwort erzeugen lassen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">WP_ADMIN_PASSWORD=$(cat /dev/urandom | tr -dc &#39;a-zA-Z0-9&#39; | fold -w 32 | head -n 1)
</span></span></code></pre></div><h3 id="theme-und-plugins">Theme und Plugins</h3>
<p>Mit den folgenden Parametern legst du fest, welches Theme eingerichtet und welche Plugins installiert werden sollen. Der Theme-Name ist der Slug des Themes:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">INSTALL_THEME=yes|no
</span></span><span class="line"><span class="ln">2</span><span class="cl">THEME=&#34;elementor&#34;
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl">INSTALL_PLUGINS=no
</span></span><span class="line"><span class="ln">5</span><span class="cl">PLUGINS=&#34;elementor wordpress-seo tinymce-advanced ninja-forms shortcodes-ultimate instagram-feed ml-slider the-events-calendar amp contact-widgets coblocks woocommerce&#34;
</span></span></code></pre></div><p>Du kannst mehrere Plugins angeben, wenn diese per Leerzeichen voneinander getrennt sind.</p>
<h3 id="inhalte">Inhalte</h3>
<p>Der nächste Abschnitt regelt das (zufällige) Anlegen von Beiträgen, Kategorien usw. Natürlich musst du keine Inhalte anlegen. Ist <strong>RANDOMIZE_EVERY_ITEM</strong> auf <strong>yes</strong> gesetzt, wird jeder Beitrag wie oben zufällig erzeugt. Da das eine Menge HTTP-Requests erfordert, kannst du den Parameter auch auf no setzen. In dem Fall wird jede Zufalls-API genau einmal abgerufen. Der ganze Prozess wird dadurch maßgeblich beschleunigt.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">ADD_CONTENT=yes|no
</span></span><span class="line"><span class="ln">2</span><span class="cl">META_INPUT=&#34;&#34;
</span></span><span class="line"><span class="ln">3</span><span class="cl">RANDOMIZE_EVERY_ITEM=yes|no
</span></span></code></pre></div><p>Manche Themes, wie z.B. <strong>Elementor</strong>, fügen den Inhalten, also Beiträgen, bestimmte Meta-Informationen hinzu. Beim automatisierten Anlegen von Beiträgen passiert das allerdings nicht automatisch. Du kannst das hier also entsprechend einrichten. Der Wert wird als JSON übergeben. Achte auf das einfache Anführungszeichen.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">META_INPUT=&#39;{&#34;_elementor_edit_mode&#34;:&#34;&lt;![CDATA[builder]]&gt;&#34;,&#34;_elementor_template_type&#34;:&#34;&lt;![CDATA[kit]]&gt;&#34;,&#34;_elementor_version&#34;:&#34;&lt;![CDATA[2.9.13]]&gt;&#34;}&#39;
</span></span></code></pre></div><p>Die folgenden Paremeter legen fest, wieviele Inhalte du erzeugen möchtest:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">COUNT_CATEGORIES_LEVEL1=10
</span></span><span class="line"><span class="ln">2</span><span class="cl">COUNT_CATEGORIES_LEVEL2=5
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl">COUNT_POSTS=100
</span></span><span class="line"><span class="ln">5</span><span class="cl">COUNT_PARAGRAPHS=20
</span></span><span class="line"><span class="ln">6</span><span class="cl">COUNT_POST_REVISIONS=5
</span></span><span class="line"><span class="ln">7</span><span class="cl">COUNT_TAGS=20
</span></span></code></pre></div><p>Im Beispiel werden 10 Haupt-Kategorien mit jeweils 5 Unter-Kategorien angelegt. Jede Kategorie wird mit 100 Posts befüllt und jeder Post erhält 20 Tags und 5 Revisionen. Das ergibt also 10 * 5 * 100 * 5 Beiträge = 25.000 Beiträge! In diesem Fall macht es Sinn RANDOMIZE_EVERY_ITEM auf no zu setzen, da du sonst mehre tausende Anfragen an die Zufalls-APIs generieren würdest. COUNT_PARAGRAPHS legt die Länge jedes Beitrags in Absätzen fest.</p>
<h3 id="standard-parameter">Standard-Parameter</h3>
<p>Die folgenden Parameter musst du in der Regel nicht anpassen. WP_CLI legt den Pfad zur WordPress Kommandozeilen Oberfläche fest. Wird die Datei nicht gefunden, muss WP CLI installiert werden. Dazu dient der Parameter WP_CLI_SOURCE.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">WP_CLI_EXEC=~/wp-cli.phar
</span></span><span class="line"><span class="ln">2</span><span class="cl">WP_CLI_SOURCE=https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
</span></span></code></pre></div><p>Im folgenden werden die Quellen für die APIs festgelegt. Hier solltest du nichts ändern, da das Script für die Zusammenarbeit mit diesen Quellen eingerichtet ist. Einzig beim Parameter RANDOM_IMAGE_API_URI kannst du bei Bedarf in der URL die Auflösung der abgefragten Bilder festlegen.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">RANDOM_WORD_API_URL=&#39;https://random-word-api.herokuapp.com/word?swear=0&amp;number=&#39;
</span></span><span class="line"><span class="ln">2</span><span class="cl">RANDOM_SENTENCE_API_URL=&#39;http://metaphorpsum.com/sentences/&#39;
</span></span><span class="line"><span class="ln">3</span><span class="cl">RANDOM_TEXT_API_URL=&#39;http://metaphorpsum.com/paragraphs/&#39;
</span></span><span class="line"><span class="ln">4</span><span class="cl">RANDOM_IMAGE_API_URI=&#39;https://picsum.photos/200/300.jpg&#39;
</span></span></code></pre></div>
        
        
        <div class="tags">
          <p><strong>Tags:</strong> automatiierung, bash, installation, script, setup, wordpress</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      <category>development</category>
      
      <category>tools</category>
      
      <category>wordpress</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Automatisierte WordPress Installation - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>guide</dc:type>
      
      
    </item><item>
      <title>Leitfaden für ein sicheres und schnelles WordPress-Setup</title>
      <link>https://nickyreinert.de/2020/2020-07-01-leitfaden-fur-ein-sicheres-und-schnelles-wordpress-setup/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2020/2020-07-01-leitfaden-fur-ein-sicheres-und-schnelles-wordpress-setup/</guid>
      <description>Das Thema Geschwindigkeit liegt bei uns allen ganz weit oben auf der Agenda. Oft allerdings nur passiv, wenn man ungeduldig auf der Tastatur trommelt und auf …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieser Artikel behandelt Leitfaden für ein sicheres und schnelles WordPress-Setup und bietet praktische Einblicke in das Thema.</p>
          
          
          <p><strong>Hauptthemen:</strong> Web, WordPress, Development</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>Das Thema Geschwindigkeit liegt bei uns allen ganz weit oben auf der Agenda. Oft allerdings nur passiv, wenn man ungeduldig auf der Tastatur trommelt und auf das Laden einer Internetseite wartet. Aktiv fehlt oft der richtige Impuls. Was kann man noch tun, außer die Bilder kleinzuhalten, um WordPress zu beschleunigen?</p>
<p>Hier möchte ich dir ein paar einfache Tricks vorstellen, um die Geschwindigkeit deiner WordPress-Seite zu optimieren. Und da neben der Geschwindigkeit die Sicherheit ein weiteres beliebtes Thema ist, werde ich auch dazu ein paar kleine Kniffe mit großer Wirkung zeigen. Doch zunächst ein paar&hellip;</p>
<h2 id="grundsätze">Grundsätze</h2>
<p>Es gibt ein paar Prämissen, die du beim Thema <strong>Geschwindigkeit und Sicherheit</strong> berücksichtigen solltest:</p>
<ul>
<li><strong>Backups</strong> - Nuff said. Du wirst dein System niemals 100% absichern können. Umso wichtiger sind Backup.</li>
<li><strong>Plugin-Sparksamkeit</strong> - jedes zusätzliche Plugin ist nicht nur ein potentielles Sicherheitsrisiko, sondern lässt deine Seite auch unnötig anwachsen. Versuche so viele Funktionen wie möglich selber umzusetzen. Ein Child-Theme erlaubt dir in der <strong>functions.php</strong> nicht nur Anpassungen des Layouts sondern auch des Funktionsumfanges vorzunehmen.</li>
<li><strong>Updates</strong> - Halte WordPress, Plugins und Themes immer auf dem neuesten Stand. Verzichte möglichst auf Plugins und Themes, die lange nicht aktualisiert wurden.</li>
<li><strong>Page Builder</strong> - <a href="https://www.nickyreinert.de/wordpress-page-builder-pro-und-contra/">ich bin wahrlich kein Fan von Page-Buildern</a>, auch wenn es da draußen relativ performante Vertreter dieser Art gibt. Allerdings wohnt jedem Page-Builder in der Regel ein Problem inne: Sie kommen mit einer Menge von Funktionen, die du oft nicht benötigst, die aber trotzdem Ressourcen verbrauchen.</li>
</ul>
<p>Nun, da das geklärt ist und ich meinen Unmut über Page-Builder mal wieder unterbringen konnte: Was kannst du aktiv tun, um die <strong>Geschwindigkeit und Sicherheit</strong> zu optimieren? Im Folgenden werden wir Änderungen an drei Dateien vornehmen:</p>
<ul>
<li>functions.php (deines Child-Themes)</li>
<li>.htaccess-Datei</li>
<li>wp-config.php</li>
</ul>
<p>Du findest alle drei Dateien auf <a href="https://github.com/nickyreinert/wordPressSettings/tree/master">github.com</a>.</p>
<h2 id="warnung">Warnung</h2>
<p>Da es sich mitunter um sehr tiefe Eingriffe in die WordPress-Mechanik handelt, folgender wichtiger Hinweis:</p>
<p>Nehme die hier beschriebenen Änderungen niemals an einer Live-Installation vor; teste sie in einer geschützten Umgebung und übertrage sie dann sorgfältig und ggf. nacheinander in das Live-System!</p>
<p>Lege außerdem immer ein <strong>Backup</strong> von den Dateien an, die du im Laufe dieses Artikels ändern wirst.</p>
<p>Diese Anleitung ist ein <strong>Leitfaden</strong>, den du nicht ungelesen übernehmen solltest. Passe die Änderungen an die Anforderungen deines Projektes an. Klar soweit? Dann los:</p>
<h2 id="nutze-keine-standard-einstellungen">Nutze keine Standard-Einstellungen</h2>
<p>Eigentlich gehört diese Weisheit zu den Prämissen, ich will sie hier trotzem etwas ausführlicher erklären. Dieser Punkt gehört für mich zum Konzept &ldquo;<strong>Secruity through obscurity</strong>&rdquo;. Viele vermeintliche Angriffe auf deine Seite sind nur das Grundrauschen: Automatisierte Scripte, die zahlreiche Webseiten nach bekannten Sicherheitslücken abklopfen. Lass uns das &ldquo;<strong>passive Angriffe</strong>&rdquo; nennen. Du kannst das geduldig über dich ergehen lassen oder schon jetzt dafür sorgen, dass deine Seite gar nicht erst im Rampenlicht steht. Wenn bei den passiven Angriffen keine Lücken erkannt werden, zieht der Bot weiter und widmet sich <strong>schwächeren Seiten</strong>. Das Credo lautet &ldquo;Kosten-Nutzen-Analyse&rdquo;. Warum mit einem unbekannten Ziel beschäftigen, wenn da draußen genug unsichere WordPress-Installationen darauf warten, <em>gehackt</em> zu werden? Also:</p>
<ul>
<li>Nutze als <strong>Benutzername</strong> für den Administrator-Account nicht den Standardwert &ldquo;admin&rdquo;. Erzeuge einen neuen Admin-Nutzer (z.B. MyLittlePony) mit allen Admin-Rechten und entferne den originalen Admin-Nutzer</li>
<li>Nutze ein &ldquo;kryptisches&rdquo; <strong>Tabellen-Prefix</strong> (z.B. x02349d_), um das Auffinden der WordPress-Tabellen in der Datenbank zu erschweren. Bei Angriffen über <strong>SQL-Injection</strong> wird oft vom Standard-Prefix (wp_) ausgegangen.</li>
<li>Ach ja, und nein: Verschiebe nicht die <strong>wp-admin</strong>-URL - das erzeugt mehr Unruhe im System, als dass es nutzt. Hier reicht der zusätzliche Schutz mit <strong>HTTP Basic Auth</strong>.</li>
<li>Setze korrekte Dateirechte ein, um zu vermeiden, dass jemand deine PHP-Dateien ändern und Schadcode einfügen kann (das ist ein etwas größeres Thema auf Serverseite, <a href="https://binary-butterfly.de/artikel/dateirechte-wie-stelle-ich-das-bei-meinem-hoster-ein/">was hier ganz gut beschrieben ist</a>).</li>
<li>Kein Standard-Passwort. Ok. Muss ich das wirklich erwähnen? ;)</li>
</ul>
<h2 id="emoticons-und-emojis">Emoticons und Emojis</h2>
<p>Emojis sind zwar unstrittig ein fester Bestandteil der modernen Kommunikation, was nicht heißt, dass man sie überall nutzen muss. In WordPress gehören sie leider zum Standard, was die Ladezeit verringert. Um sich der kleinen Kecker zu entledigen, ist eine ganze Menge PHP-Code (<a href="https://kinsta.com/de/wissensdatenbank/deaktivierst-emojis-wordpress/">lose basierend auf diesem Beitrag</a>):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln"> 1</span><span class="cl">function disable_emojis() {
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    remove_action( &#39;wp_head&#39;, &#39;print_emoji_detection_script&#39;, 7 );
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    remove_action( &#39;admin_print_scripts&#39;, &#39;print_emoji_detection_script&#39; );
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    remove_action( &#39;wp_print_styles&#39;, &#39;print_emoji_styles&#39; );
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    remove_action( &#39;admin_print_styles&#39;, &#39;print_emoji_styles&#39; );
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    remove_filter( &#39;the_content_feed&#39;, &#39;wp_staticize_emoji&#39; );
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    remove_filter( &#39;comment_text_rss&#39;, &#39;wp_staticize_emoji&#39; );
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    remove_filter( &#39;wp_mail&#39;, &#39;wp_staticize_emoji_for_email&#39; );
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    add_filter( &#39;tiny_mce_plugins&#39;, &#39;disable_emojis_tinymce&#39; );
</span></span><span class="line"><span class="ln">10</span><span class="cl">    add_filter( &#39;wp_resource_hints&#39;, &#39;disable_emojis_remove_dns_prefetch&#39;, 10, 2 );
</span></span><span class="line"><span class="ln">11</span><span class="cl">}
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl">function disable_emojis_tinymce( $plugins ) {
</span></span><span class="line"><span class="ln">14</span><span class="cl">
</span></span><span class="line"><span class="ln">15</span><span class="cl">    if ( is_array( $plugins ) ) {
</span></span><span class="line"><span class="ln">16</span><span class="cl">        
</span></span><span class="line"><span class="ln">17</span><span class="cl">        return array_diff( $plugins, array( &#39;wpemoji&#39; ) );
</span></span><span class="line"><span class="ln">18</span><span class="cl">
</span></span><span class="line"><span class="ln">19</span><span class="cl">    } else {
</span></span><span class="line"><span class="ln">20</span><span class="cl">        
</span></span><span class="line"><span class="ln">21</span><span class="cl">        return array();
</span></span><span class="line"><span class="ln">22</span><span class="cl">
</span></span><span class="line"><span class="ln">23</span><span class="cl">    }
</span></span><span class="line"><span class="ln">24</span><span class="cl">}
</span></span><span class="line"><span class="ln">25</span><span class="cl"> 
</span></span><span class="line"><span class="ln">26</span><span class="cl">function disable_emojis_remove_dns_prefetch( $urls, $relation_type ) {
</span></span><span class="line"><span class="ln">27</span><span class="cl">    if ( &#39;dns-prefetch&#39; == $relation_type ) {
</span></span><span class="line"><span class="ln">28</span><span class="cl">    
</span></span><span class="line"><span class="ln">29</span><span class="cl">        /** This filter is documented in wp-includes/formatting.php */
</span></span><span class="line"><span class="ln">30</span><span class="cl">        $emoji_svg_url = apply_filters( &#39;emoji_svg_url&#39;, &#39;https://s.w.org/images/core/emoji/2/svg/&#39; );
</span></span><span class="line"><span class="ln">31</span><span class="cl">
</span></span><span class="line"><span class="ln">32</span><span class="cl">        $urls = array_diff( $urls, array( $emoji_svg_url ) );
</span></span><span class="line"><span class="ln">33</span><span class="cl">    }
</span></span><span class="line"><span class="ln">34</span><span class="cl">
</span></span><span class="line"><span class="ln">35</span><span class="cl">    return $urls;
</span></span><span class="line"><span class="ln">36</span><span class="cl">}    
</span></span><span class="line"><span class="ln">37</span><span class="cl">
</span></span><span class="line"><span class="ln">38</span><span class="cl">function disable_emojicons_tinymce( $plugins ) {
</span></span><span class="line"><span class="ln">39</span><span class="cl">
</span></span><span class="line"><span class="ln">40</span><span class="cl">    if ( is_array( $plugins ) ) {
</span></span><span class="line"><span class="ln">41</span><span class="cl">    
</span></span><span class="line"><span class="ln">42</span><span class="cl">        return array_diff( $plugins, array( &#39;wpemoji&#39; ) );
</span></span><span class="line"><span class="ln">43</span><span class="cl">
</span></span><span class="line"><span class="ln">44</span><span class="cl">    } else {
</span></span><span class="line"><span class="ln">45</span><span class="cl">
</span></span><span class="line"><span class="ln">46</span><span class="cl">      return array();
</span></span><span class="line"><span class="ln">47</span><span class="cl">
</span></span><span class="line"><span class="ln">48</span><span class="cl">    }
</span></span><span class="line"><span class="ln">49</span><span class="cl">}
</span></span><span class="line"><span class="ln">50</span><span class="cl">
</span></span><span class="line"><span class="ln">51</span><span class="cl">function disable_wp_emojicons() {
</span></span><span class="line"><span class="ln">52</span><span class="cl">
</span></span><span class="line"><span class="ln">53</span><span class="cl">    remove_action( &#39;admin_print_styles&#39;, &#39;print_emoji_styles&#39; );
</span></span><span class="line"><span class="ln">54</span><span class="cl">    remove_action( &#39;wp_head&#39;, &#39;print_emoji_detection_script&#39;, 7 );
</span></span><span class="line"><span class="ln">55</span><span class="cl">    remove_action( &#39;admin_print_scripts&#39;, &#39;print_emoji_detection_script&#39; );
</span></span><span class="line"><span class="ln">56</span><span class="cl">    remove_action( &#39;wp_print_styles&#39;, &#39;print_emoji_styles&#39; );
</span></span><span class="line"><span class="ln">57</span><span class="cl">    remove_filter( &#39;wp_mail&#39;, &#39;wp_staticize_emoji_for_email&#39; );
</span></span><span class="line"><span class="ln">58</span><span class="cl">    remove_filter( &#39;the_content_feed&#39;, &#39;wp_staticize_emoji&#39; );
</span></span><span class="line"><span class="ln">59</span><span class="cl">    remove_filter( &#39;comment_text_rss&#39;, &#39;wp_staticize_emoji&#39; );
</span></span></code></pre></div><p>Hier passiert eine ganze Menge, weil die Emojis relativ breit implementiert wurden. Die einfachste Erklärung ist: Wir entfernen alle möglichen Verweise auf Emojis. Du musst die Trigger allerdings noch aktivieren indem du sie folgendermaßen aufrufst:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">add_filter( &#39;tiny_mce_plugins&#39;, &#39;disable_emojicons_tinymce&#39;);}
</span></span><span class="line"><span class="ln">2</span><span class="cl">add_action( &#39;init&#39;, &#39;disable_emojis&#39; );
</span></span><span class="line"><span class="ln">3</span><span class="cl">add_filter( &#39;emoji_svg_url&#39;, &#39;__return_false&#39; );
</span></span><span class="line"><span class="ln">4</span><span class="cl">add_action( &#39;init&#39;, &#39;disable_wp_emojicons&#39; );
</span></span></code></pre></div><h2 id="gravatar-deaktivieren">Gravatar deaktivieren</h2>
<p>Du kannnst die Nutzung der Gravatare auch in den Einstellungen deaktivieren. Ich bevorzuge aber die Variante in der functions.php, da man sich so ein kleines Boilerplate erstellen kann. So deaktivierst du die Gravatar-Funktion:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">add_filter( &#39;option_show_avatars&#39;, &#39;__return_false&#39; );
</span></span></code></pre></div><p>Wie du siehst, spart uns das mindestens zwei Anfragen und ein paar Millisekunden ein:</p>
<p><img src="/2020/2020-07-01-leitfaden-fur-ein-sicheres-und-schnelles-wordpress-setup/images/grafik-700x57.png" alt=""></p>
<h2 id="gzip-und-deflate">GZIP und Deflate</h2>
<p>Sehr naheliegend ist natürlich die Komprimierung von Dateien. Du nimmst diese Änderung in der .htaccess-Datei vor:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">&lt;IfModule mod_deflate.c&gt;
</span></span><span class="line"><span class="ln">2</span><span class="cl">    &lt;FilesMatch &#34;.*\.(html|php|css|js|xml)$&#34;&gt;
</span></span><span class="line"><span class="ln">3</span><span class="cl">        SetOutputFilter DEFLATE
</span></span><span class="line"><span class="ln">4</span><span class="cl">    &lt;/FilesMatch&gt;
</span></span><span class="line"><span class="ln">5</span><span class="cl">    AddOutputFilterByType DEFLATE application/rss+xml
</span></span><span class="line"><span class="ln">6</span><span class="cl">    AddOutputFilterByType DEFLATE application/xml application/xhtml+xml
</span></span><span class="line"><span class="ln">7</span><span class="cl">    AddOutputFilterByType DEFLATE application/javascript application/x-javascript
</span></span><span class="line"><span class="ln">8</span><span class="cl">&lt;/IfModule&gt;
</span></span></code></pre></div><p>Achtung: Du solltest deine Seite genau beobachten. Die Aktivierung von GZIP führt bei sehr kleinen Dateien nicht zu einem Größenvorteil, kann sich aber negativ auf die Antwortzeit des Servers auswirken, da die kleinen Dateien ja trotzdem einmal &ldquo;angefasst&rdquo; werden.</p>
<h2 id="cron-job-deaktivieren">Cron-Job deaktivieren</h2>
<p>Bei jedem Aufruf der Seite wird ein internes Cron-Job-Script ausgeführt. Das ist vor allem für das Suchen nach Updates wichtig. Wenn dein Hoster Cron-Jobs anbietet, ist das natürlich unnötig und verlangsamt jeden Aufruf deiner Seite. Du kannst die Cron-Job-Aufrufe in der wp-config.php folgendermaßen deaktivieren:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">define(&#39;DISABLE_WP_CRON&#39;, true);
</span></span></code></pre></div><p>Danach musst diese Anfrage aber trotzdem irgendwie ausführen. Das machst du im Backend deines Hosters, bei <strong>all-inkl z</strong>.B. im KAS unter Tools:</p>
<p><img src="/2020/2020-07-01-leitfaden-fur-ein-sicheres-und-schnelles-wordpress-setup/images/grafik-700x125.png" alt=""></p>
<p>Als Intervall genügt hier eigentlich stündlich.</p>
<h2 id="scripte-im-footer-laden">Scripte im Footer laden</h2>
<p>In der Regel müssen JavaScript-Dateien nicht sofort zur Verfügung stehen, da sie z.B: Benutzerinteraktion ermöglichen bzw. darauf reagieren. Trotzdem können Sie den Aufbau der Seite verzögern, wenn sie ganz am Anfang oder in der Mitte eingebunden werden.</p>
<p>Aus dem Grund sollte man die Scripte ganz am Ende einer Seite auflisten, die nicht für den Seitenaufbau direkt benötigt werden. Die grobe Methode funktioniert folgendermaßen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">add_action(&#39;after_setup_theme&#39;, &#39;footer_enqueue_scripts&#39;);
</span></span><span class="line"><span class="ln">2</span><span class="cl">function footer_enqueue_scripts() {
</span></span><span class="line"><span class="ln">3</span><span class="cl">    remove_action(&#39;wp_head&#39;, &#39;wp_print_scripts&#39;);
</span></span><span class="line"><span class="ln">4</span><span class="cl">    remove_action(&#39;wp_head&#39;, &#39;wp_print_head_scripts&#39;, 9);
</span></span><span class="line"><span class="ln">5</span><span class="cl">    remove_action(&#39;wp_head&#39;, &#39;wp_enqueue_scripts&#39;, 1);
</span></span><span class="line"><span class="ln">6</span><span class="cl">    add_action(&#39;wp_footer&#39;, &#39;wp_print_scripts&#39;, 5);
</span></span><span class="line"><span class="ln">7</span><span class="cl">    add_action(&#39;wp_footer&#39;, &#39;wp_print_head_scripts&#39;, 5);
</span></span><span class="line"><span class="ln">8</span><span class="cl">    add_action(&#39;wp_footer&#39;, &#39;wp_enqueue_scripts&#39;, 5);
</span></span><span class="line"><span class="ln">9</span><span class="cl">}
</span></span></code></pre></div><p>Nachdem du diese Zeilen übernommen hast, solltest du deine Seite einmal z.B. im Inkognito-Modus, ohne Cache, neu laden. Flackert die Seite in der ersten Millisekunden auffällig, also wird für einen kurzen Augenblick der fast roh anmutende Inhalt der Seite und dann das Layout angezeigt, kommentiere in der Callback-Funktion die beiden Zeilen aus, die <strong>wp_enqueue_scripts</strong> in den Footer verlagern.</p>
<h2 id="javascript-ausführung-verzögern">JavaScript Ausführung verzögern</h2>
<p>Die etwas elegantere Methoden nennen sich &ldquo;<strong>defer</strong>&rdquo; und &ldquo;<strong>async</strong>&rdquo;. Mit defer teilst du dem Browser mit, dass die JavaScript-Datien im Hintergrund geladen und erst ausgeführt werden, wenn die eigentlichen Inhalte fertig sind.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="n">add_filter</span><span class="p">(</span> <span class="s1">&#39;script_loader_tag&#39;</span><span class="p">,</span> <span class="s1">&#39;defer_parsing_of_js&#39;</span><span class="p">,</span> <span class="mi">10</span> <span class="p">);</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="n">function</span> <span class="n">defer_parsing_of_js</span><span class="p">(</span> <span class="o">$</span><span class="n">url</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="n">is_user_logged_in</span><span class="p">()</span> <span class="p">)</span> <span class="k">return</span> <span class="o">$</span><span class="n">url</span><span class="p">;</span> <span class="o">//</span><span class="n">don</span><span class="s1">&#39;t break WP Admin</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="n">strpos</span><span class="p">(</span> <span class="o">$</span><span class="n">url</span><span class="p">,</span> <span class="s1">&#39;.js&#39;</span> <span class="p">)</span> <span class="o">===</span> <span class="n">FALSE</span><span class="p">)</span> <span class="k">return</span> <span class="o">$</span><span class="n">url</span><span class="p">;</span> <span class="o">//</span> <span class="n">only</span> <span class="n">process</span> <span class="n">JavaScript</span> <span class="n">files</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="n">strpos</span><span class="p">(</span> <span class="o">$</span><span class="n">url</span><span class="p">,</span> <span class="s1">&#39;jquery.js&#39;</span> <span class="p">)</span> <span class="p">)</span> <span class="k">return</span> <span class="o">$</span><span class="n">url</span><span class="p">;</span>  <span class="o">//</span> <span class="n">skip</span> <span class="n">JQuery</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="k">return</span> <span class="n">str_replace</span><span class="p">(</span> <span class="s1">&#39; src&#39;</span><span class="p">,</span> <span class="s1">&#39; defer src&#39;</span><span class="p">,</span> <span class="o">$</span><span class="n">url</span> <span class="p">);</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Der defer-Flag macht nur bei Scripten Sinn, die mit <strong>src</strong> eingebunden werden. Inline-Scripte werden immer sofort gelesen und geparsed. Daneben gibt es noch async. Mit async wird die Datei ebenfalls parallel geladen und sofort ausgeführt, wenn die Datei vollständig ist. Das macht vor allem bei Tracking-Scripten Sinn, die keinen Bezug zum inhaltlichen Aufbau haben.</p>
<h2 id="versionsinfos-entfernen">Versionsinfos entfernen</h2>
<p>Style- und Script-Dateien werden oft mit einem Anhang übermittelt, z.B. <strong>style.css?ver=123</strong>. Das macht Sinn um Änderungen nachzuverfolgen, hat aber auch einen entscheidenen Nachteil: Damit werden Cache-Mechanismen umgangen, weil der Cache denkt, es handelt sich um eine dynamische Ressource. Aus dem Grund solltest du die Versions-Infos komplett deaktivieren. Achte beim Arbeiten an der Webseite einfach daran, sämtliche Caches zu deaktivieren.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="n">add_filter</span><span class="p">(</span> <span class="s1">&#39;script_loader_src&#39;</span><span class="p">,</span> <span class="s1">&#39;remove_version_parameter&#39;</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="n">add_filter</span><span class="p">(</span> <span class="s1">&#39;style_loader_src&#39;</span><span class="p">,</span> <span class="s1">&#39;remove_version_parameter&#39;</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="n">function</span> <span class="n">remove_version_parameter</span><span class="p">(</span><span class="o">$</span><span class="n">src</span><span class="p">){</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="o">//</span> <span class="n">Check</span> <span class="k">if</span> <span class="n">version</span> <span class="n">parameter</span> <span class="n">exist</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="o">$</span><span class="n">parts</span> <span class="o">=</span> <span class="n">explode</span><span class="p">(</span> <span class="s1">&#39;?ver&#39;</span><span class="p">,</span> <span class="o">$</span><span class="n">src</span> <span class="p">);</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="o">//</span> <span class="k">return</span> <span class="n">without</span> <span class="n">version</span> <span class="n">parameter</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="k">return</span> <span class="o">$</span><span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="google-fonts-deaktivieren">Google Fonts deaktivieren</h2>
<p>Die Einbindung der Fonts über Google ist bequem, birgt neben dem Performance-Nachteil aber unter Umständen auch ein Datenschutz problem. (Grundsätzlich solltest du versuchen, alle Ressourcen von deinem Server zu laden und auch auf CDN zu verzichten - <a href="https://binary-butterfly.de/artikel/warum-dir-ein-cdn-vermutlich-keinen-geschwindigkeitsvorteil-bringen-wird/">das bringt selten einen Vorteil</a>.)</p>
<p>Leider ist das Entfernen nicht ohne weiteres möglich. Du musst erst herausfinden, unter welchem Handler das Theme die Google Fonts einbindet (Eine Liste bekannter Themes und der verwendeten Font-Handler findest du hier.) Dazu durchsuchst du die functions.php nach z.B. Google. Für das Theme Rowling sieht das dann folgendermaßen aus:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">wp_register_style( &#39;rowling_google_fonts&#39;, &#39;//fonts.googleapis.com/css?family=Lato:400,700,900,400italic,700italic|Merriweather:700,900,400italic&#39; );
</span></span></code></pre></div><p>Der Handler lautet also &ldquo;<strong>rowling_google_fonts</strong>&rdquo;. Auf gehts:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">add_action( &#39;wp_print_styles&#39;, &#39;dequeue_google_fonts_style&#39; );
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl">function dequeue_google_fonts_style() {
</span></span><span class="line"><span class="ln">4</span><span class="cl">
</span></span><span class="line"><span class="ln">5</span><span class="cl">      wp_dequeue_style( &#39;rowling_style&#39; );
</span></span><span class="line"><span class="ln">6</span><span class="cl">
</span></span><span class="line"><span class="ln">7</span><span class="cl">}
</span></span></code></pre></div><p>Achte darauf, dass jetzt natürlich die Fallback-Schriftart aus dem CSS verwendet wird.</p>
<h2 id="die-beitrags-historie-verschlanken">Die Beitrags-Historie verschlanken</h2>
<p>Seit einiger Zeit gibt es in WordPress das ansich ganz nützliche Feature der Revisionen: Bei jeder Änderung und jeder Speicherung legt WordPress in der Datenbank eine Kopie der vorherigen Version des Beitrages an. Das ist praktisch. Aber auch grenzenlos.<br>
Zunächst solltest du die Anzahl der Revisionen pro Beitrag eingrenzen. Dazu setzt du in der wp-config.php folgenden Parameter:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">define(&#39;WP_POST_REVISIONS&#39;, 5);
</span></span></code></pre></div><p>Die Fünf beschreibt die Anzahl der erlaubten Revisionen. Du kannst die Zahl natürlich beliebig anpassen. Damit ist es aber noch nicht getan, du solltest die alten Revisionen natürlich noch aufräumen. Dazu kannst du dir das Plugin <a href="https://de.wordpress.org/plugins/wp-sweep/">WP Sweep installieren</a>. Du kannst nun ganz bequem alle Revisionen löschen:</p>
<p><img src="/2020/2020-07-01-leitfaden-fur-ein-sicheres-und-schnelles-wordpress-setup/images/grafik-2-700x102.png" alt=""></p>
<p>Alle Revisionen mit WP Sweep löschen</p>
<h2 id="oembeds-deaktivieren">oEmbeds deaktivieren</h2>
<p>Hierbei handelt es sich um ein Feature, das WordPress seit Version 4.4 mitbringt, die sogenannten Embeds. Dir ist es vielleicht schon mal aufgefallen: Beim Einfügen von URL in den Beitrag, wird nicht die URL angezeigt, sondern eine Art Snippet mit zusätzlichne Informationen und sogar einer Vorschau. Das sieht schick aus, braucht aber vielleicht nicht jeder. Wenn du Embed also nicht benötigst, erspart dir das wieder ein paar Zeilen im HTML-Header und sogar eine zusätzliche JavaScript-Bibliothek:</p>
<p><img src="/2020/2020-07-01-leitfaden-fur-ein-sicheres-und-schnelles-wordpress-setup/images/grafik-4-700x52.png" alt=""></p>
<p>Die Embed-Bibliothek von WordPress</p>
<p>Füge dazu folgendes in die <strong>functions.php</strong> ein (<a href="https://kinsta.com/de/wissensdatenbank/deaktivierst-embeds-wordpress/#disable-embeds-code">Quelle</a>):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln"> 1</span><span class="cl">add_action( &#39;init&#39;, &#39;disable_embeds_code_init&#39;, 9999 );
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">function disable_embeds_code_init() {
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    remove_action( &#39;rest_api_init&#39;, &#39;wp_oembed_register_route&#39; );
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    add_filter( &#39;embed_oembed_discover&#39;, &#39;__return_false&#39; );
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    remove_filter( &#39;oembed_dataparse&#39;, &#39;wp_filter_oembed_result&#39;, 10 );
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    remove_action( &#39;wp_head&#39;, &#39;wp_oembed_add_discovery_links&#39; );
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    remove_action( &#39;wp_head&#39;, &#39;wp_oembed_add_host_js&#39; );
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    add_filter( &#39;tiny_mce_plugins&#39;, &#39;disable_embeds_tiny_mce_plugin&#39; );
</span></span><span class="line"><span class="ln">10</span><span class="cl">    add_filter( &#39;rewrite_rules_array&#39;, &#39;disable_embeds_rewrites&#39; );
</span></span><span class="line"><span class="ln">11</span><span class="cl">    remove_filter( &#39;pre_oembed_result&#39;, &#39;wp_filter_pre_oembed_result&#39;, 10 );
</span></span><span class="line"><span class="ln">12</span><span class="cl">}
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl">function disable_embeds_tiny_mce_plugin($plugins) {
</span></span><span class="line"><span class="ln">15</span><span class="cl">    return array_diff($plugins, array(&#39;wpembed&#39;));
</span></span><span class="line"><span class="ln">16</span><span class="cl">}
</span></span><span class="line"><span class="ln">17</span><span class="cl">
</span></span><span class="line"><span class="ln">18</span><span class="cl">function disable_embeds_rewrites($rules) {
</span></span><span class="line"><span class="ln">19</span><span class="cl">    foreach($rules as $rule =&gt; $rewrite) {
</span></span><span class="line"><span class="ln">20</span><span class="cl">        if(false !== strpos($rewrite, &#39;embed=true&#39;)) {
</span></span><span class="line"><span class="ln">21</span><span class="cl">            unset($rules[$rule]);
</span></span><span class="line"><span class="ln">22</span><span class="cl">        }
</span></span><span class="line"><span class="ln">23</span><span class="cl">    }
</span></span><span class="line"><span class="ln">24</span><span class="cl">    return $rules;
</span></span><span class="line"><span class="ln">25</span><span class="cl">}
</span></span></code></pre></div><h2 id="den-header-aufräumen">Den Header aufräumen</h2>
<p>Kommen wir zu ein paar Maßnahmen, die das HTML ein wenig verschlanken, aber aus Performance-Sicht nur Peanuts sind: Wir räumen den Header-Bereich auf. Diese Maßnahmen sind nicht wirklich notwendig, außer du willst es wirklich auf die Spitze treiben.</p>
<p>Los geht es mit dem Manifest für den <strong>Windows Live Writer</strong>, einer App um Blog-Beiträge zu schreiben (was mit deaktivierter XML-RPC, siehe unten, sowieso nicht mehr möglich ist):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">&lt;link rel=&#34;wlwmanifest&#34; type=&#34;application/wlwmanifest+xml&#34; href=&#34;https://example.com/wp-includes/wlwmanifest.xml&#34;&gt;
</span></span></code></pre></div><p>Und so deaktivierst du den Spaß:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">remove_action( &#39;wp_head&#39;, &#39;wlwmanifest_link&#39;);
</span></span></code></pre></div><p>Weiter geht es mit dem Verweis zum <strong>Shortlink</strong> des jeweiligen Beitrages. Shortlinks sind praktisch, um mit kurzem URL auf Inhalte deiner Webseite zu verweisen. Anstatt dem langen Permalink <a href="https://www.example.com/das-ist-mein-allererster-beitrag-hier-und-ich-liebe-es">www.example.com/das-ist-mein-allererster-beitrag-hier-und-ich-liebe-es</a> nutzt du z.B. einfach <strong><a href="https://www.example.com/?p=1">www.example.com/?p=1</a></strong>. Wenn du das nicht brauchst, entferne den Shortlink-Verweis aus dem HTML-Header und dem HTTP-Antwort-Header:</p>
<p><img src="/2020/2020-07-01-leitfaden-fur-ein-sicheres-und-schnelles-wordpress-setup/images/grafik-3-700x336.png" alt=""></p>
<p>Der Shortlink-Verweis im HTTP-Header</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">remove_action( &#39;wp_head&#39;, &#39;wp_shortlink_wp_head&#39;);
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl">add_filter(&#39;after_setup_theme&#39;, &#39;remove_shortlink_from_http_header&#39;);
</span></span><span class="line"><span class="ln">4</span><span class="cl">
</span></span><span class="line"><span class="ln">5</span><span class="cl">function remove_shortlink_from_http_header() {
</span></span><span class="line"><span class="ln">6</span><span class="cl">
</span></span><span class="line"><span class="ln">7</span><span class="cl">    remove_action( &#39;template_redirect&#39;, &#39;wp_shortlink_header&#39;, 11);
</span></span><span class="line"><span class="ln">8</span><span class="cl">
</span></span><span class="line"><span class="ln">9</span><span class="cl">}
</span></span></code></pre></div><p>Im Header findest Verweise auf den vorherigen, den nächsten Beitrag oder die Startseite. Diese Funktionalität sollte theoretisch durch dein Template abgedeckt sein. Diese Verweise entfernst du folgendermaßen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">remove_action(&#39;wp_head&#39;, &#39;start_post_rel_link&#39;);
</span></span><span class="line"><span class="ln">2</span><span class="cl">remove_action(&#39;wp_head&#39;, &#39;index_rel_link&#39;);
</span></span><span class="line"><span class="ln">3</span><span class="cl">remove_action(&#39;wp_head&#39;, &#39;adjacent_posts_rel_link&#39;);
</span></span></code></pre></div><p>Zu guter Letzt die Versions-Information. Das Verbergen der WordPress-Version kann auch als Sicherheitsfeature verstanden werden (<strong>Security through obscurity</strong>, Sicherheit durch Unklarheit, siehe oben). Wenn der potentielle Angreifer nicht weiß, welche Version du verwendest, erschwerst du ihm zumindest das Identifizieren potentieller Sicherheitslücken. In der Realtität wird das nur die Bots aufhalten, die dein System automatisiert scannen. Bei einem aktiven Angriff ist das ziemlich sicher nutzlos. Nutze dazu folgende Zeile in der functions.php:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">remove_action(&#39;wp_head&#39;, &#39;wp_generator&#39;);
</span></span></code></pre></div><h2 id="cache-plugin">Cache-Plugin</h2>
<p>Wenn du immer noch nicht zufrieden bist, kannst du auch auf ein Cache-Plugin zurück greifen. Das sorgt dafür, dass die Seiten nicht bei jedem Aufruf komplett neu über PHP erstellt, sondern statische Inhalte ausgeliefert werden. Das bringt noch mal einen enormen Geschwindigkeitsgewinn.</p>
<h2 id="die-xml-rpc-schnittstelle-deaktivieren">Die XML-RPC-Schnittstelle deaktivieren</h2>
<p>XML-RPC steht für Extensible Markup Language Remote Procedure Call. Klingt kompliziert, ist es auch. Dabei handelt es sich um eine Schnittstelle. mit der du, ganz einfach gesagt, WordPress steuern kannst, ohne auf das Backend zuzugreifen (<a href="https://www.kuketz-blog.de/wordpress-angriffe-auf-die-xmlrpc-schnittstelle-xmlrpc-php-unterbinden/">mehr Hintergründe dazu hier</a>). Wenn du diese Schnittstelle deaktivierst, verlierst du also Funktionalität, wie z.B. <strong>Pingbacks</strong> oder das <strong>Verwalten von WordPress mit einer externen App</strong>. Auch Jetpack greift auf die XML-RPC zu! Du gewinnst aber auch etwas an Sicherheit dazu. Entscheide selber.</p>
<p>In den aktuellen Apache-Versionen (ab 2.4) sperrst du den Zugriff auf xmlrpc.php in der .htaccess-Datei folgendermaßen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">&lt;FilesMatch &#34;(^\.|wp-config\.php|xmlrpc\.php|(?&lt;!robots)\.txt|(liesmich|readme)\.*)&#34;&gt;
</span></span><span class="line"><span class="ln">2</span><span class="cl">   Require all denied
</span></span><span class="line"><span class="ln">3</span><span class="cl">&lt;/FilesMatch&gt;
</span></span></code></pre></div><p>Eigentlich sollte das schon genügen. Willst du auf Nummer sicher gehen, kannst du durchaus mehrt tun. Der weniger disruptive Weg wäre, <a href="https://developer.wordpress.org/reference/hooks/xmlrpc_enabled/">alle</a> <a href="https://developer.wordpress.org/reference/hooks/xmlrpc_enabled/"></a><a href="https://developer.wordpress.org/reference/hooks/xmlrpc_enabled/">Methoden zu deaktivieren, die eine Authentifizierung erfordern</a>. Das funktioniert folgendermaßen (in der functions.php deines Child-Themes):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl"># XML RPC deaktivieren
</span></span><span class="line"><span class="ln">2</span><span class="cl">add_filter( &#39;xmlrpc_enabled&#39;, &#39;__return_false&#39; );
</span></span><span class="line"><span class="ln">3</span><span class="cl"># XML RPC Verweis aus Header entfernen
</span></span><span class="line"><span class="ln">4</span><span class="cl">remove_action(&#39;wp_head&#39;, &#39;rsd_link&#39;);
</span></span></code></pre></div><p>Allerdings ist das ganze Sub-System weiterhin aktiv. <a href="https://www.scottbrownconsulting.com/2020/03/two-ways-to-fully-disable-wordpress-xml-rpc/">Willst du das also komplett deaktivieren</a>, füge der functions.php folgendes hinzu:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">// disable xmlrpc
</span></span><span class="line"><span class="ln">2</span><span class="cl">function remove_xmlrpc_methods( $methods ) {
</span></span><span class="line"><span class="ln">3</span><span class="cl">  return array();
</span></span><span class="line"><span class="ln">4</span><span class="cl">}
</span></span><span class="line"><span class="ln">5</span><span class="cl">add_filter( &#39;xmlrpc_methods&#39;, &#39;remove_xmlrpc_methods&#39; );
</span></span></code></pre></div><p>Aber wie gesagt, das sind zusätzliche Maßnahmen. In der Regel kannst du vielleicht schon gut schlafen, wenn der Webserver den Zugriff auf xmlrpc.php einfach nicht zulässt.</p>
<h2 id="die-rest-api-verweise-entfernen">Die REST-API-Verweise entfernen</h2>
<p>Seit Version 4.4 hat WordPress eine REST-API an Bord, die wie XML-RPC eine Schnittstelle bietete, um bestimmte Informationen über deine Seite automatisiert auszulesen. Obgleich das Sicherheitsrisiko der REST-API ungleich niedriger ist als bei XML-RPC, kannst du auch hier ein wenig aufräumen, indem du den Verweis auf die REST-API folgendermaßen aus den HTML- sowie HTTP-Header entfernst:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">remove_action(&#39;wp_head&#39;, &#39;rest_output_link_wp_head&#39;, 10);
</span></span><span class="line"><span class="ln">2</span><span class="cl">remove_action(&#39;template_redirect&#39;, &#39;rest_output_link_header&#39;, 11, 0);
</span></span></code></pre></div><p>Ganz deaktivieren solltest du die API allerdings nicht, da sie vor allem auch für die reibungslose Backend-Funktionalität wichtig ist. Was du aber machen kannst, ist die REST-API <a href="https://developer.wordpress.org/rest-api/frequently-asked-questions/">nur nach Anmeldung zulassen:</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln"> 1</span><span class="cl">add_filter(&#39;rest_authentication_errors&#39;, &#39;rest_api_auth&#39;);
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">function rest_api_auth($result) {
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    // bereits erfolgreich authentifiziert?
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    if ( true === $result || is_wp_error( $result ) ) {
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">        return $result;
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    }
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"> 
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    // noch nicht authentifiziert?
</span></span><span class="line"><span class="ln">10</span><span class="cl">    if ( ! is_user_logged_in() ) {
</span></span><span class="line"><span class="ln">11</span><span class="cl">        return new WP_Error(
</span></span><span class="line"><span class="ln">12</span><span class="cl">            &#39;rest_not_logged_in&#39;,
</span></span><span class="line"><span class="ln">13</span><span class="cl">            __( &#39;You are not currently logged in.&#39; ),
</span></span><span class="line"><span class="ln">14</span><span class="cl">            array( &#39;status&#39; =&gt; 401 )
</span></span><span class="line"><span class="ln">15</span><span class="cl">        );
</span></span><span class="line"><span class="ln">16</span><span class="cl">    }
</span></span><span class="line"><span class="ln">17</span><span class="cl"> 
</span></span><span class="line"><span class="ln">18</span><span class="cl">    // sonst zurück
</span></span><span class="line"><span class="ln">19</span><span class="cl">    return $result;
</span></span><span class="line"><span class="ln">20</span><span class="cl">}
</span></span></code></pre></div><h2 id="fazit">Fazit</h2>
<p>Das war es erstmal. Wenn du jetzt noch das Gefühl hast, dass dein WordPress zu langsam ist, wirf mal einen Blick in die Entwickler-Konsole und schau nach, welche Ressourcen lange dauern oder ob du Anfragen doppelt absetzt. Es gibt vor allem auf Server-Seite, also unterhalb von WordPress, noch eine Menge Möglichkeiten. Einige davon habe ich in der <a href="https://www.nickyreinert.de/mehrere-virtuelle-server-mit-nginx-und-php-fpm-fur-wordpress-teil-1-3/">Artikel-Serie zum perfekten Web-Server-Setup aufgeführt</a>. Außerdem gibt es hier eine wirklich brilliante Artikel-Serie zum Thema Sicherheit, die du dir unbedingt lesen solltest. Hier werden unzählige wichtige Hinweise gegeben,</p>
<p>Zum Abschluss noch mal der Hinweis: Es handelt sich hierbei um mitunter tiefe Eingriffe in die <strong>WordPress-Mechanik</strong>. Solltest du in der Zukunft Probleme mit deiner Seite haben, nimm diese Änderungen Schritt für Schritt zurück. Arbeite mit einem Staging-System und nutze Backups. Bei Probleme und Inkompatiblitäten freue ich mich über sachdienliche Hinweise, die ich in den Artikel einbauen kann!</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> einstellungen, setup, wordpress</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Leitfaden für ein sicheres und schnelles WordPress-Setup - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>guide</dc:type>
      
      
    </item><item>
      <title>WordPress Tag Cloud mit Umlauten (äöü) korrekt sortieren - Oder: Der WordPress Filter im Live-Beispiel erklärt</title>
      <link>https://nickyreinert.de/2019/2019-04-18-wordpress-tag-cloud-mit-umlauten-aeoeue-korrekt-sortieren-oder-der-wordpress-filter-im-live-beispiel-erklaert/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2019/2019-04-18-wordpress-tag-cloud-mit-umlauten-aeoeue-korrekt-sortieren-oder-der-wordpress-filter-im-live-beispiel-erklaert/</guid>
      <description>WordPress bringt von Hause aus ein Widget mit, dass die verwendeten Tags als Cloud darstellt (wer es ein wenig schöner mag, greift auf mein WordCloud Plugin …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieser Artikel behandelt WordPress Tag Cloud mit Umlauten (äöü) korrekt sortieren - Oder: Der WordPress Filter im Live-Beispiel erklärt und bietet praktische Einblicke in das Thema.</p>
          
          
          <p><strong>Hauptthemen:</strong> Web, WordPress, Development</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>WordPress bringt von Hause aus ein Widget mit, dass die verwendeten Tags als Cloud darstellt (wer es ein wenig schöner mag, <a href="https://www.nickyreinert.de/wordpress-word-cloud-2-0/">greift auf mein WordCloud Plugin zurück</a>). Das Ganze hat nur einen Haken: Die entsprechende WordPress-Funktion <strong><a href="https://developer.wordpress.org/reference/functions/wp_generate_tag_cloud/">wp_generate_tag_cloud</a></strong> nutzt <strong>aosort()</strong> als Sortierfunktion. Und die kommt mit Umlauten nicht sonderlich gut klar. Eine Lösung wäre also, die Umlaute für die Sortierung zu übersetzen, also Ä ind Ae, ö in oe und so weiter.</p>
<p>Das schöne an WordPress: Sehr viele Funktionalitäten lassen sich über <strong>Hooks</strong> und <strong>Filter</strong> modifizieren. So bietet auch der Sortier-Algorithmus die Möglichkeit an, den Array mit einer eigenen Funktion zu filtern. Die perfekte Gelegenheit, um sich mit dem Thema <strong>Filter mal</strong> etwas näher zu beschäftigen. Ein Blick in den Source-Code von <strong>wp_generate_tag_cloud()</strong> zeigt ab Zeile 875 (seit Version 4.8.0):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln"> 1</span><span class="cl">    /**
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">     * Filters how the items in a tag cloud are sorted.
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">     *
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">     * @since 2.8.0
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">     *
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">     * @param WP_Term[] $tags Ordered array of terms.
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">     * @param array     $args An array of tag cloud arguments.
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">     */
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">    $tags_sorted = apply_filters( &#39;tag_cloud_sort&#39;, $tags, $args );
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">    if ( empty( $tags_sorted ) ) {
</span></span><span class="line"><span class="ln">13</span><span class="cl">        return $return;
</span></span><span class="line"><span class="ln">14</span><span class="cl">    }
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl">...
</span></span></code></pre></div><p>Die Tags lassen sich also über den <strong>Filter</strong> <strong>tag_cloud_sort</strong> mit einer eigenen Funktion sortieren. Gesagt, getan. Folgendes packen wir in die <strong>functions.php</strong> unseres Child Themes (wir ignorieren dabei mal die Vorgabe, Funktionalitäten nicht im Theme unterzubringen):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">add_filter(&#39;tag_cloud_sort&#39;, &#39;custom_tag_sort&#39;, 10, 2);
</span></span></code></pre></div><p>Der zweite Parameter verweist auf unsere eigene Sortier-Funktion. Die 10 beschreibt die Priorität und mit 2 wird die Anzahl der Funktions-Parmaeter festgelegt, nämlich <strong>$tags und $args</strong>. Unsere eigene Sortier-Funktion sieht dann folgendermaßen aus (in Ahnlehnung an <a href="http://www.marcokrings.de/arrays-sortieren-mit-umlauten/">&ldquo;Arrays sortieren mit Umlauten&rdquo;</a>).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln"> 1</span><span class="cl">function custom_tag_sort($tags, $args) {
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">        
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    if (count($tags) == 0) { return $tags; }
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    $tagsSorted = array();
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    $tagsReturn   = array();
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    $search   = array(&#34;Ä&#34;,&#34;ä&#34;,&#34;Ö&#34;,&#34;ö&#34;,&#34;Ü&#34;,&#34;ü&#34;,&#34;ß&#34;);
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    $replace  = array(&#34;Ae&#34;,&#34;ae&#34;,&#34;Oe&#34;,&#34;oe&#34;,&#34;Ue&#34;,&#34;ue&#34;,&#34;ss&#34;);
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    foreach($tags as $key =&gt; $val) {
</span></span><span class="line"><span class="ln">10</span><span class="cl">        $tagsSorted[$key] = str_replace($search, $replace, $val-&gt;name);
</span></span><span class="line"><span class="ln">11</span><span class="cl">    }
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl">    natcasesort($tagsSorted);
</span></span><span class="line"><span class="ln">14</span><span class="cl">    
</span></span><span class="line"><span class="ln">15</span><span class="cl">    foreach($tagsSorted as $key =&gt; $val) {
</span></span><span class="line"><span class="ln">16</span><span class="cl">        $tagsReturn[$key] = $tags[$key];
</span></span><span class="line"><span class="ln">17</span><span class="cl">    }
</span></span><span class="line"><span class="ln">18</span><span class="cl">
</span></span><span class="line"><span class="ln">19</span><span class="cl">    return $tagsReturn;
</span></span><span class="line"><span class="ln">20</span><span class="cl">        
</span></span><span class="line"><span class="ln">21</span><span class="cl">}
</span></span></code></pre></div><p>Am Anfang schauen wir, ob überhaupt Tags übergeben werden, andernfalls gehts gleich wieder zurück. Danach initialisieren wir unsere Variablen. Von Interesse dürften hier vor allem <strong>$search</strong> und <strong>$replace</strong> sein. Damit legen wir fest, welche <strong>Umlaute und Sonderzeichen</strong> ersetzt werden sollen. Die Liste darfst du natürlich beliebig erweitern.</p>
<p>In der ersten foreach-Schleife durchlaufen wir die Tag-Liste und ersetzen ganz schlicht die Umlaute entsprechend der Vorgabe.</p>
<p>Danach sortieren wir unsere &ldquo;bereinigte&rdquo; Tag-List mit der alternativen Sortier-Funktion <a href="https://www.php.net/manual/de/function.natcasesort.php"><strong>natcasesort()</strong>.</a> <em>natcase</em> steht für <em>natural sort, case insensitive</em>. Sprich: Natürliche <em>Sortierung, Ignorieren der Groß-/Kleinschreibung</em>. Natürliche Sortierung heißt ganz einfach: So wie ein Mensch sortieren würde.</p>
<p>In der letzten Schleife sorgen wir dafür, dass die nun sortierte Tag-Liste wieder unsere ursprünglichen Umlaute enthält und geben die sortierte Liste dann zurück.</p>
<p>Das war es auch schon. Unsere Liste ist, unter Berücksichtigung der deutschen Umlaute, sauber sortiert. Ab dort übernimmt WordPress die weitere Verarbeitung. Und wir haben gelernt, wie wir einen <strong>einfachen Filter</strong> in WordPress implementieren.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> anleitung, filter, php, tagcloud, tutorial, wordcloud, wordpress</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>blog</category>
      
      <category>anleitungen</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>WordPress Tag Cloud mit Umlauten (äöü) korrekt sortieren - Oder: Der WordPress Filter im Live-Beispiel erklärt - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>guide</dc:type>
      
      
    </item><item>
      <title>Checkliste - Wordpress Umzug</title>
      <link>https://nickyreinert.de/2018/2018-08-25-checkliste-wordpress-umzug/</link>
      <pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate>
      <author></author>
      <guid>https://nickyreinert.de/2018/2018-08-25-checkliste-wordpress-umzug/</guid>
      <description>Du hast Wordpress auf eine neue Domain oder einen neuen Hoster umgezogen und der Blog ist noch nicht erreichbar oder die Adresse verweist noch auf eine alte …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Dieser Artikel behandelt Checkliste - Wordpress Umzug und bietet praktische Einblicke in das Thema.</p>
          
          
          <p><strong>Hauptthemen:</strong> Web, WordPress, Development</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>Du hast Wordpress auf eine neue Domain oder einen neuen Hoster umgezogen und der Blog ist noch nicht erreichbar oder die Adresse verweist noch auf eine alte Installation, obwohl du an alles gedacht hast? Da fragst du dich zurecht: Wo hängt&rsquo;s? Oder du hast den Umzug erst vor dir und willst wissen, woran du denken musst?</p>
<p>Dafür habe ich dir hier eine Checkliste der gängigen Fehlerquellen aufgestellt, die dir beim nächsten Mal helfen soll.</p>
<h3 id="vom-browser-zum-server">Vom Browser zum Server</h3>
<p>Um die potentiellen Fehler zu erkennen und zu verstehen ist es sehr hilfreich, den <strong>groben Ablauf</strong> zu kennen: Was passiert, wenn du deine Domain in den Browser eingibst? Denn meistens steckt der Fehler im Detail und man hat nur vergessen, an einer Stelle die nötigen Anpassungen vorzunehmen. Was passiert also, wenn ein Benutzer deine Website im Browser aufruft? Ich habe das ganze einmal sehr laienhaft und stark reduziert in einer Grafik zusammengefasst. Wenn du weißt, worum es geht, überspringe diesen Absatz oder schlage danach einmal die Hände über dem Kopf zusammen.</p>
<p><a href="https://www.nickyreinert.de/files/aufruf-einer-website-vereinfacht.png"><img src="/2018/2018-08-25-checkliste-wordpress-umzug/images/aufruf-einer-website-vereinfacht-300x132.png" alt=""></a></p>
<p>Was passiert beim Aufruf einer Webseite im Browser</p>
<p>Der Browser, oder vielmehr der Computer, muss die Adresse der Website zunächst in die sogenannte IP-Adresse übersetzen lassen - durch einen <strong>DNS-Server</strong>. Anhand der <strong>IP-Adresse</strong> findet der Browser dann den Weg zum eigentlich <strong>Webserver</strong>. Dieser muss dann  wissen, dass die Website bei ihm existiert und kann deshalb auch auf den entsprechenden <strong>Ordner</strong> im Dateisystem verweisen. Dort wird die <strong>Web-Anwendung</strong>, also z.B. <strong>Wordpress</strong>, ausgeführt. Hier erfolgen auch die Zugriffe auf die Datenbank. Die <em>index.php</em> ist der zentrale <strong>Einstiegspunkt</strong>, von dem aus noch viele andere, vornehmlich PHP-Dateien, eingebunden werden.</p>
<h2 id="potentielle-fehlerquellen">Potentielle Fehlerquellen</h2>
<h3 id="dein-computer-und-der-dns-cache">Dein Computer und der DNS-Cache</h3>
<p>Damit dein Computer und der Browser nicht jedes mal beim DNS-Server nachfragen müssen, welche IP-Adresse zu einer Website gehört, gibt es hier sog. <strong>Zwischenspeicher</strong>, auch <strong>Cache</strong> genannt. In <strong>Chrome</strong> kannst du diesen folgendermaßen deaktivieren.</p>
<ol>
<li>Rufe diese Adresse auf: chrome://net-internals/#dns</li>
<li>Klicke dort den Button &ldquo;Clear host cache&rdquo;</li>
</ol>
<p>In <strong>Firefox</strong> löschst du den DNS-Cache über die Datenschutz-Optionen in den Einstellung.</p>
<p>In beiden Browsern gibt es übrigens die Möglichkeit, den Cache permanent zu deaktivieren. Dazu musst du die <strong>Entwicklerkonsole</strong> öffnen (ALT+F12 oder Alt+Apfel+I) und die Checkbox &ldquo;<em>Cache deaktivieren</em>&rdquo; aktivieren. Diese Funktion ist aber nur so lange aktiv, bis die Entwicklerkonsole wieder geschlossen wird:</p>
<p><a href="https://www.nickyreinert.de/files/image-2.png"><img src="/2018/2018-08-25-checkliste-wordpress-umzug/images/image-2-700x232.png" alt=""></a></p>
<p>Außerdem legt auch dein <strong>Betriebssystem</strong> einen Cache an. In Windows wird dieser folgendermaßen geleert:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">ipconfig /flushdns
</span></span></code></pre></div><p>Auch in Apples Betriebssystem OS X kann man den Cache per Hand leeren (ab 10.12 Sierra):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">sudo killall -HUP mDNSResponder
</span></span></code></pre></div><h3 id="dein-router-und-dein-internetanbieter">Dein Router und dein Internetanbieter</h3>
<p>Bestimmte <strong>Router-Modelle</strong> und mit Sicherheit auch dein <strong>Internet-Anbieter</strong> (ISP) speichern ebenfalls die Kombination aus Domain Name und IP-Adresse. Den DNS-Cache des Routers kannst du ggf. leeren, indem du ihn neu startest. Den deines ISP kannst du mit Sicherheit nicht beeinflussen. Du kannst aber in den Netzwerkeinstellungen einen anderen <strong>DNS-Server</strong> einrichten, wie z.B. den von Google (8.8.8.8). Wenn dir das zu aufwendig ist, rufe die Seite über dein Handy auf, wenn es <strong>nicht mit deinem WLAN verbunden</strong> ist. Dann nutzt du den Internetzugang deines Handy-Anbieters, der vielleicht schon einen anderen DNS-Eintrag kennt. Jeder DNS-Eintrag ist übrigens für gewöhnlich mit einem sog. TTL versehen - einem Eintrag für das <strong>Time-To-Live.</strong> Dieser beträgt z.B. 24 Stunden und besagt, wie lange ein entsprechender Eintrag gültig ist. Willst du wissen, wie groß dieser Wert ist, hilft dir die <a href="https://mxtoolbox.com/SuperTool.aspx?action=a%3awww.example.com&amp;run=toolpage">mxtoolbox</a> weiter.</p>
<h3 id="der-hoster">Der Hoster</h3>
<p>Das ist der schwierigste Punkt, da es hier erstmal zwei Möglichkeiten gibt:</p>
<p><strong>Grundsätzlich</strong> gilt: Damit ein Domain-Name auf (d)einen Web-Server zeigt, sind mindestens <strong>zwei Schritte</strong> nötig:</p>
<ol>
<li>die Domain muss registriert und einer IP-Adresse zugeordnet werden</li>
<li>die Domain muss dem Web-Server &ldquo;mitgeteilt&rdquo; werden</li>
</ol>
<p>Nun gibt es allerdings mindestens <strong>drei Szenarien</strong>, wie das umgesetzt wird:</p>
<ol>
<li>Dein Hoster stellt den Webspace unter einer Hosting-Domain zur Verfügung (<em>c123123.hoster.com</em>) und die &ldquo;echte&rdquo; Domain (<em>example.com</em>) wird bei einem anderen Anbieter verwaltet. Die Hosting-Domain zeigt hier bereits direkt auf deinen Webspace. Wenn deine Anwendung dort in einem anderen Ordner liegt, musst die &ldquo;echte&rdquo; Domain direkt darauf zeigen, also z.B: <em>example.com -&gt; c123123.hoster.com/wordpress</em>_/_.</li>
<li> Dein Hoster stellt den Webspace unter einer IP-Adresse zur Verfügung (bzw. du nutzt einen Managed- oder Root-Server) und die Domain wird bei einem anderen Anbieter verwaltet. In diesem Fall muss der Hoster wissen, welche Domain auf die IP-Adresse deines Webspaces zeigt. Er kann diese Domain dann einem Ordner auf dem Webspace zuordnen.</li>
<li>Das <strong>Gesamtpaket</strong>: Dein Hoster stellt den Webspace und verwaltet deine Domain.</li>
</ol>
<p><a href="https://www.nickyreinert.de/files/image-6.png"><img src="/2018/2018-08-25-checkliste-wordpress-umzug/images/image-6-700x493.png" alt=""></a></p>
<p>Hosting-Varianten im Vergleich</p>
<p>Bei den Gesamt-Paketen wird das ganze Konstrukt wie gesagt sehr simpel zusammengefasst. Bei <strong>all-inkl.com</strong> erfolgt das z.B. über das KAS über den Menüpunkt <strong>Domains</strong>, wo der Ort im Dateisystem angegeben werden kann. Der Verweis zu einem anderen, fremden Webspace erfolgt über die Option &ldquo;Redirect&rdquo;. Dann wird diese Domain mit einem HTTP-Statuscode 301, 302 oder 307 an einen anderen Server weitergeleitet.</p>
<p><a href="https://www.nickyreinert.de/files/domain-ziel-bei-all-inkl.png"><img src="/2018/2018-08-25-checkliste-wordpress-umzug/images/domain-ziel-bei-all-inkl-700x344.png" alt=""></a></p>
<p>Domain-Ziel bei all-inkl.com einrichten</p>
<p>Bei Strato ist das Formular etwas anders aufgebaut, hat aber natürlich die gleiche Funktion. Im Menü <strong>Domain / Domainverwaltung</strong> legst du fest, auf welchen Ordner deine Domain zeigen soll. Über die DNS-Einstellungen kannst du auch hier auf einen anderen Server zeigen lassen:</p>
<p><a href="https://www.nickyreinert.de/files/image.png"><img src="/2018/2018-08-25-checkliste-wordpress-umzug/images/image-281x300.png" alt=""></a></p>
<p>Domain-Ziel bei Strato einrichten</p>
<p>Wenn du Zugriff auf die <strong>Konsole</strong> hast (z.B. mit SSH), kannst du mit folgendem Befehl prüfen, ob der Server deine Domain überhaupt &ldquo;kennt&rdquo;:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">apache2ctl -S
</span></span></code></pre></div><p>Die Ausgabe sollte in etwa folgenden Aufbau haben und mindestens deine Domain enthalten und auch auf den korrekten Ordner Grundsätzlich hilft auch hier erstmal die <a href="https://mxtoolbox.com/SuperTool.aspx?action=a%3awww.example.com&amp;run=toolpage">mxtoolbox</a> weiter, um zu erkennen, ob der Eintrag schon existiert:</p>
<p><a href="https://www.nickyreinert.de/files/apachectl-ausgabe.png"><img src="/2018/2018-08-25-checkliste-wordpress-umzug/images/apachectl-ausgabe-700x298.png" alt="Ausgabe von apachectl , Liste der virtuellen Hosts in Apache"></a></p>
<h3 id="die-wordpress-konfiguration">Die Wordpress-Konfiguration</h3>
<p>Und schließlich muss natürlich auch die Wordpress-Installation vollständig und korrekt eingerichtet und angepasst sein. Hier gibt es zwei Stellen, an denen der Domain-Name eingerichtet werden kann. Der einfachste Weg ist über das Backend von Wordpress. Damit wird deine Adresse direkt in der Datenbank abgelegt:</p>
<p><a href="https://www.nickyreinert.de/files/image-3.png"><img src="/2018/2018-08-25-checkliste-wordpress-umzug/images/image-3-300x61.png" alt=""></a></p>
<p>Wenn du auf das Backend keinen Zugriff hast, wählst du den direkten Weg über die <em>wp-config.php</em>. Die Änderungen hier überschreiben die Einstellungen im Backend.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">define(&#39;WP_HOME&#39;,&#39;https://www.nickyreinert.de&#39;);
</span></span><span class="line"><span class="ln">2</span><span class="cl">define(&#39;WP_SITEURL&#39;,&#39;https://www.nickyreinert.de&#39;);
</span></span></code></pre></div><p>In der Datenbank befinden sich sehr oft noch andere Verweise auf deine Domain. Bei einem Umzug müssen auch diese angepasst werden. Da das aber ein sehr umfangreicher Prozess ist, empfehle ich dazu das Wordpress-Plugin &ldquo;<a href="https://de.wordpress.org/plugins/better-search-replace/">Better Search Replace</a>&rdquo;.</p>
<h3 id="fazit">Fazit</h3>
<p>Wenn du die hier genannten Punkte berücksichtigt hast, hast du eigentlich an alles gedacht. Oft ist es der lokale Cache, der die neue Adresse noch nicht kennt und dann die Sorgenfalten auf die Stirn treibt. Wenn ich einen Punkt vergessen haben sollte oder etwas unklar ist, hinterlasse mir gerne ein Kommentar.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> checkliste, domains, hosting, umzug, wordpress</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>wordpress</category>
      
      
      
      
      <media:content url="https://nickyreinert.de/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Checkliste - Wordpress Umzug - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>guide</dc:type>
      
      
    </item>
  </channel>
</rss>