<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" 
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Checkliste auf Nicky Reinert</title>
    <link>http://localhost:1313/tags/checkliste/</link>
    <description>Blog &amp; Projekte von Nicky Reinert (Institut für digitale Herausforderungen): Webentwicklung &amp; Software Development, SEO &amp; Analytics, Hosting &amp; DevOps, WordPress &amp; Hugo, Tools &amp; Projekte, Datenschutz und digitale Kultur – plus Texte zu KI sowie Autismus &amp; Gesellschaft.</description>
    <generator>Hugo 0.148.2</generator>
    <language>de</language>
    <managingEditor></managingEditor>
    <webMaster></webMaster>
    <copyright></copyright>
    <lastBuildDate>Sat, 25 Aug 2018 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/checkliste/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>Checkliste - Wordpress Umzug</title>
      <link>http://localhost:1313/2018/2018-08-25-checkliste-wordpress-umzug/</link>
      <pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://localhost:1313/2018/2018-08-25-checkliste-wordpress-umzug/</guid>
      <description>Du hast Wordpress auf eine neue Domain oder einen neuen Hoster umgezogen und der Blog ist noch nicht erreichbar oder die Adresse verweist noch auf eine alte …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Eine detaillierte Checkliste und Anleitung zur Fehlerbehebung bei einem WordPress-Umzug. Der Artikel führt schrittweise durch potenzielle Fehlerquellen, von lokalen DNS-Cache-Problemen im Browser und Betriebssystem über die korrekte Domain- und Hoster-Konfiguration bis hin zu den notwendigen Anpassungen in der WordPress-Datenbank und der &#39;wp-config.php&#39;.</p>
          
          
          <p><strong>Hauptthemen:</strong> WordPress, Website-Migration, DNS, Webhosting, Troubleshooting, Server-Administration</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>Du hast Wordpress auf eine neue Domain oder einen neuen Hoster umgezogen und der Blog ist noch nicht erreichbar oder die Adresse verweist noch auf eine alte Installation, obwohl du an alles gedacht hast? Da fragst du dich zurecht: Wo hängt&rsquo;s? Oder du hast den Umzug erst vor dir und willst wissen, woran du denken musst?</p>
<p>Dafür habe ich dir hier eine Checkliste der gängigen Fehlerquellen aufgestellt, die dir beim nächsten Mal helfen soll.</p>
<h3 id="vom-browser-zum-server">Vom Browser zum Server</h3>
<p>Um die potentiellen Fehler zu erkennen und zu verstehen ist es sehr hilfreich, den <strong>groben Ablauf</strong> zu kennen: Was passiert, wenn du deine Domain in den Browser eingibst? Denn meistens steckt der Fehler im Detail und man hat nur vergessen, an einer Stelle die nötigen Anpassungen vorzunehmen. Was passiert also, wenn ein Benutzer deine Website im Browser aufruft? Ich habe das ganze einmal sehr laienhaft und stark reduziert in einer Grafik zusammengefasst. Wenn du weißt, worum es geht, überspringe diesen Absatz oder schlage danach einmal die Hände über dem Kopf zusammen.</p>
<p><a href="https://www.nickyreinert.de/files/aufruf-einer-website-vereinfacht.png"><img src="/2018/2018-08-25-checkliste-wordpress-umzug/images/aufruf-einer-website-vereinfacht-300x132.png" alt=""></a></p>
<p>Was passiert beim Aufruf einer Webseite im Browser</p>
<p>Der Browser, oder vielmehr der Computer, muss die Adresse der Website zunächst in die sogenannte IP-Adresse übersetzen lassen - durch einen <strong>DNS-Server</strong>. Anhand der <strong>IP-Adresse</strong> findet der Browser dann den Weg zum eigentlich <strong>Webserver</strong>. Dieser muss dann  wissen, dass die Website bei ihm existiert und kann deshalb auch auf den entsprechenden <strong>Ordner</strong> im Dateisystem verweisen. Dort wird die <strong>Web-Anwendung</strong>, also z.B. <strong>Wordpress</strong>, ausgeführt. Hier erfolgen auch die Zugriffe auf die Datenbank. Die <em>index.php</em> ist der zentrale <strong>Einstiegspunkt</strong>, von dem aus noch viele andere, vornehmlich PHP-Dateien, eingebunden werden.</p>
<h2 id="potentielle-fehlerquellen">Potentielle Fehlerquellen</h2>
<h3 id="dein-computer-und-der-dns-cache">Dein Computer und der DNS-Cache</h3>
<p>Damit dein Computer und der Browser nicht jedes mal beim DNS-Server nachfragen müssen, welche IP-Adresse zu einer Website gehört, gibt es hier sog. <strong>Zwischenspeicher</strong>, auch <strong>Cache</strong> genannt. In <strong>Chrome</strong> kannst du diesen folgendermaßen deaktivieren.</p>
<ol>
<li>Rufe diese Adresse auf: chrome://net-internals/#dns</li>
<li>Klicke dort den Button &ldquo;Clear host cache&rdquo;</li>
</ol>
<p>In <strong>Firefox</strong> löschst du den DNS-Cache über die Datenschutz-Optionen in den Einstellung.</p>
<p>In beiden Browsern gibt es übrigens die Möglichkeit, den Cache permanent zu deaktivieren. Dazu musst du die <strong>Entwicklerkonsole</strong> öffnen (ALT+F12 oder Alt+Apfel+I) und die Checkbox &ldquo;<em>Cache deaktivieren</em>&rdquo; aktivieren. Diese Funktion ist aber nur so lange aktiv, bis die Entwicklerkonsole wieder geschlossen wird:</p>
<p><a href="https://www.nickyreinert.de/files/image-2.png"><img src="/2018/2018-08-25-checkliste-wordpress-umzug/images/image-2-700x232.png" alt=""></a></p>
<p>Außerdem legt auch dein <strong>Betriebssystem</strong> einen Cache an. In Windows wird dieser folgendermaßen geleert:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">ipconfig /flushdns
</span></span></code></pre></div><p>Auch in Apples Betriebssystem OS X kann man den Cache per Hand leeren (ab 10.12 Sierra):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">sudo killall -HUP mDNSResponder
</span></span></code></pre></div><h3 id="dein-router-und-dein-internetanbieter">Dein Router und dein Internetanbieter</h3>
<p>Bestimmte <strong>Router-Modelle</strong> und mit Sicherheit auch dein <strong>Internet-Anbieter</strong> (ISP) speichern ebenfalls die Kombination aus Domain Name und IP-Adresse. Den DNS-Cache des Routers kannst du ggf. leeren, indem du ihn neu startest. Den deines ISP kannst du mit Sicherheit nicht beeinflussen. Du kannst aber in den Netzwerkeinstellungen einen anderen <strong>DNS-Server</strong> einrichten, wie z.B. den von Google (8.8.8.8). Wenn dir das zu aufwendig ist, rufe die Seite über dein Handy auf, wenn es <strong>nicht mit deinem WLAN verbunden</strong> ist. Dann nutzt du den Internetzugang deines Handy-Anbieters, der vielleicht schon einen anderen DNS-Eintrag kennt. Jeder DNS-Eintrag ist übrigens für gewöhnlich mit einem sog. TTL versehen - einem Eintrag für das <strong>Time-To-Live.</strong> Dieser beträgt z.B. 24 Stunden und besagt, wie lange ein entsprechender Eintrag gültig ist. Willst du wissen, wie groß dieser Wert ist, hilft dir die <a href="https://mxtoolbox.com/SuperTool.aspx?action=a%3awww.example.com&amp;run=toolpage">mxtoolbox</a> weiter.</p>
<h3 id="der-hoster">Der Hoster</h3>
<p>Das ist der schwierigste Punkt, da es hier erstmal zwei Möglichkeiten gibt:</p>
<p><strong>Grundsätzlich</strong> gilt: Damit ein Domain-Name auf (d)einen Web-Server zeigt, sind mindestens <strong>zwei Schritte</strong> nötig:</p>
<ol>
<li>die Domain muss registriert und einer IP-Adresse zugeordnet werden</li>
<li>die Domain muss dem Web-Server &ldquo;mitgeteilt&rdquo; werden</li>
</ol>
<p>Nun gibt es allerdings mindestens <strong>drei Szenarien</strong>, wie das umgesetzt wird:</p>
<ol>
<li>Dein Hoster stellt den Webspace unter einer Hosting-Domain zur Verfügung (<em>c123123.hoster.com</em>) und die &ldquo;echte&rdquo; Domain (<em>example.com</em>) wird bei einem anderen Anbieter verwaltet. Die Hosting-Domain zeigt hier bereits direkt auf deinen Webspace. Wenn deine Anwendung dort in einem anderen Ordner liegt, musst die &ldquo;echte&rdquo; Domain direkt darauf zeigen, also z.B: <em>example.com -&gt; c123123.hoster.com/wordpress</em>_/_.</li>
<li> Dein Hoster stellt den Webspace unter einer IP-Adresse zur Verfügung (bzw. du nutzt einen Managed- oder Root-Server) und die Domain wird bei einem anderen Anbieter verwaltet. In diesem Fall muss der Hoster wissen, welche Domain auf die IP-Adresse deines Webspaces zeigt. Er kann diese Domain dann einem Ordner auf dem Webspace zuordnen.</li>
<li>Das <strong>Gesamtpaket</strong>: Dein Hoster stellt den Webspace und verwaltet deine Domain.</li>
</ol>
<p><a href="https://www.nickyreinert.de/files/image-6.png"><img src="/2018/2018-08-25-checkliste-wordpress-umzug/images/image-6-700x493.png" alt=""></a></p>
<p>Hosting-Varianten im Vergleich</p>
<p>Bei den Gesamt-Paketen wird das ganze Konstrukt wie gesagt sehr simpel zusammengefasst. Bei <strong>all-inkl.com</strong> erfolgt das z.B. über das KAS über den Menüpunkt <strong>Domains</strong>, wo der Ort im Dateisystem angegeben werden kann. Der Verweis zu einem anderen, fremden Webspace erfolgt über die Option &ldquo;Redirect&rdquo;. Dann wird diese Domain mit einem HTTP-Statuscode 301, 302 oder 307 an einen anderen Server weitergeleitet.</p>
<p><a href="https://www.nickyreinert.de/files/domain-ziel-bei-all-inkl.png"><img src="/2018/2018-08-25-checkliste-wordpress-umzug/images/domain-ziel-bei-all-inkl-700x344.png" alt=""></a></p>
<p>Domain-Ziel bei all-inkl.com einrichten</p>
<p>Bei Strato ist das Formular etwas anders aufgebaut, hat aber natürlich die gleiche Funktion. Im Menü <strong>Domain / Domainverwaltung</strong> legst du fest, auf welchen Ordner deine Domain zeigen soll. Über die DNS-Einstellungen kannst du auch hier auf einen anderen Server zeigen lassen:</p>
<p><a href="https://www.nickyreinert.de/files/image.png"><img src="/2018/2018-08-25-checkliste-wordpress-umzug/images/image-281x300.png" alt=""></a></p>
<p>Domain-Ziel bei Strato einrichten</p>
<p>Wenn du Zugriff auf die <strong>Konsole</strong> hast (z.B. mit SSH), kannst du mit folgendem Befehl prüfen, ob der Server deine Domain überhaupt &ldquo;kennt&rdquo;:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">apache2ctl -S
</span></span></code></pre></div><p>Die Ausgabe sollte in etwa folgenden Aufbau haben und mindestens deine Domain enthalten und auch auf den korrekten Ordner Grundsätzlich hilft auch hier erstmal die <a href="https://mxtoolbox.com/SuperTool.aspx?action=a%3awww.example.com&amp;run=toolpage">mxtoolbox</a> weiter, um zu erkennen, ob der Eintrag schon existiert:</p>
<p><a href="https://www.nickyreinert.de/files/apachectl-ausgabe.png"><img src="/2018/2018-08-25-checkliste-wordpress-umzug/images/apachectl-ausgabe-700x298.png" alt="Ausgabe von apachectl , Liste der virtuellen Hosts in Apache"></a></p>
<h3 id="die-wordpress-konfiguration">Die Wordpress-Konfiguration</h3>
<p>Und schließlich muss natürlich auch die Wordpress-Installation vollständig und korrekt eingerichtet und angepasst sein. Hier gibt es zwei Stellen, an denen der Domain-Name eingerichtet werden kann. Der einfachste Weg ist über das Backend von Wordpress. Damit wird deine Adresse direkt in der Datenbank abgelegt:</p>
<p><a href="https://www.nickyreinert.de/files/image-3.png"><img src="/2018/2018-08-25-checkliste-wordpress-umzug/images/image-3-300x61.png" alt=""></a></p>
<p>Wenn du auf das Backend keinen Zugriff hast, wählst du den direkten Weg über die <em>wp-config.php</em>. Die Änderungen hier überschreiben die Einstellungen im Backend.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="ln">1</span><span class="cl">define(&#39;WP_HOME&#39;,&#39;https://www.nickyreinert.de&#39;);
</span></span><span class="line"><span class="ln">2</span><span class="cl">define(&#39;WP_SITEURL&#39;,&#39;https://www.nickyreinert.de&#39;);
</span></span></code></pre></div><p>In der Datenbank befinden sich sehr oft noch andere Verweise auf deine Domain. Bei einem Umzug müssen auch diese angepasst werden. Da das aber ein sehr umfangreicher Prozess ist, empfehle ich dazu das Wordpress-Plugin &ldquo;<a href="https://de.wordpress.org/plugins/better-search-replace/">Better Search Replace</a>&rdquo;.</p>
<h3 id="fazit">Fazit</h3>
<p>Wenn du die hier genannten Punkte berücksichtigt hast, hast du eigentlich an alles gedacht. Oft ist es der lokale Cache, der die neue Adresse noch nicht kennt und dann die Sorgenfalten auf die Stirn treibt. Wenn ich einen Punkt vergessen haben sollte oder etwas unklar ist, hinterlasse mir gerne ein Kommentar.</p>

        
        
        <div class="tags">
          <p><strong>Tags:</strong> checkliste, domains, hosting, umzug, wordpress</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>wordpress</category>
      
      
      
      
      <media:content url="http://localhost:1313/images/posts/placeholder.jpg" type="image/jpeg">
        <media:title>Checkliste - Wordpress Umzug - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>checklist</dc:type>
      
      
    </item><item>
      <title>Wordpress-Security Checkliste</title>
      <link>http://localhost:1313/2000/2000-01-01-wordpress-security-checkliste/</link>
      <pubDate>Sat, 01 Jan 2000 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://localhost:1313/2000/2000-01-01-wordpress-security-checkliste/</guid>
      <description>Wordpress hat unter den Content Management System im Internet mittlerweile einen Marktanteil von 60% erreicht und lockt mit dieser Verbreitung natürlich auch …</description>
      
      
      <content:encoded>&lt;![CDATA[
        
        <div class="ai-summary">
          <h3>AI-Zusammenfassung</h3>
          <p>Diese detaillierte Checkliste bietet umfassende Anleitungen zur Absicherung von WordPress-Installationen. Sie behandelt essenzielle Sicherheitspraktiken wie regelmäßige Updates, Backups, die Nutzung von Staging-Systemen sowie technische Maßnahmen wie &#39;.htaccess&#39;-Schutz, korrekte Dateirechte und die sichere Konfiguration von PHP, angepasst an verschiedene Hosting-Szenarien.</p>
          
          
          <p><strong>Hauptthemen:</strong> WordPress Sicherheit, Webserver Konfiguration, PHP Sicherheit, Datensicherung, Systemhärtung, Cybersecurity</p>
          
          
          
          <p><strong>Schwierigkeitsgrad:</strong> intermediate</p>
          
        </div>
        
        
        <p>Wordpress hat unter den Content Management System im Internet mittlerweile einen Marktanteil von 60% erreicht und lockt mit dieser Verbreitung natürlich auch kriminelle Geister an und so schwirren immer wieder Nachrichten über Sicherheitslücken und gehackte WP-Seiten durch die einschlägigen Medien. Aus diesem Grund will ich mal meine Erfahrungen in Bezug auf Wordpress-Sicherheit an dieser Stelle zusammenfassen und zwar so kompakt wie möglich, damit diese Information als Checkliste genutzt werden kann.</p>
<p>Wenn du Betreiber einer Wordpress-Seite bist, gibt es dafür drei Wege und unterschiedliche Freiheiten, sich selber um die Sicherheit der WP-Installation zu nutzen - im folgenden die &ldquo;Freiheitsgrade&rdquo; genannt: Bei &ldquo;wordpress as a service&rdquo; greifst du auf einen Angebot zurück, das bekannteste ist wordpress.com, bei dem du nur Zugriff auf das Backend hast und dementsprechend wenig Konfigurationsmöglichkeiten. Als Nutzer eines Shared Hosting hast du zusätzlich die Möglichkeit, per FTP oder SSH auf den Webspace zu gelangen und dort Einstellungen vorzunehmen. Und schließlich gibt es noch die Möglichkeit, einen eigenen Server zu nutzen, bei dem du dich auch um die Konfiguration auf Systemebene, also des Webserver kümmern musst. In dieser Reihenfolge möchte ich nun im folgenden Zusammenfassen, welche Möglichkeiten du hast, deine WP-Installation etwas sicherer zu gestalten.</p>
<h2 id="aktuelle-updates">Aktuelle Updates</h2>
<p>Zunächst zum Offensichtlichen: Sicherheitsupdates. Die automatischen Updates des WP-Cores (also dem, was WP ausmacht) sind mit jedem Freiheitsgrad konfigurierbar, bergen aber auch Risikos. So hatte z.B. das Update auf Version 4.9.3 Anfang 2018 den Auto-Update-Mechanismus deaktiviert. Spätere Sicherheitsupdates würden also ignoriert werden. Grundsätzlich ist das Auto-Update nur für sog. Minor-Versionen zu empfehlen, wodurch Sicherheitlücken und Bugs behoben werden. Wer diese Funktion auf einem Test-System auch für Major-Versionen aktivieren möchte, muss in der wp-config.php folgenden Parameter setzen:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="ln">1</span><span class="cl"><span class="nx">define</span><span class="p">(</span> <span class="s1">&#39;WP_AUTO_UPDATE_CORE&#39;</span><span class="p">,</span> <span class="s1">&#39;true&#39;</span> <span class="p">);</span>
</span></span></code></pre></div><p>(der Parameter ist per default auf <em>minor</em> gesetzt.) Grundsätzlich ist das aber nicht zu empfehlen: Denn: Bevor ein großes Update eingespielt wird, sollte das auf Herz &amp; Nieren und natürlich Kompatibilität mit den vorhandenen Themes und Plugins getestet werden. Dazu sollte man ein Staging-System einrichten, worauf ich im nächsten Absatz eingehe.</p>
<h2 id="ein-staging-system-nutzen">Ein Staging-System nutzen</h2>
<p>Die Sicherheit der WP-Installation kann nicht nur durch Malware oder Angriffe von außen versehrt werden, sondern auch durch Bedienfehler. Ein wichtiger Baustein ist also ein Staging-System. Das ist im weitesten Sinne eine exakte Kopie der aktuelle WP-Installation. Das Staging-System erfüllt eine Reihe von Funktionen:</p>
<ul>
<li>Testen von Plugins &amp; Updates auf Kompatibilität</li>
<li>Referenz-System zum Erkennen von verdächtigen Änderungen</li>
<li>Testen von Änderungen am Theme</li>
</ul>
<p>Wie ein Staging-System eingerichtet wird, habe ich hier genauer erklärt. Was es mit dem 2. Punkt auf sich hat, erkläre ich weiter unten.</p>
<h2 id="regelmäßige-backups">Regelmäßige Backups</h2>
<p>Auch Backups sind ein wichtiger Teil eines Sicherheitskonzeptes. Hier gibt es je nach Freiheitsgrad verschiedene Möglichkeiten. Als Plugin empfehle ich zunächst das sehr weit verbreitete Updraft. Das Backup sollte unbedingt auf einen anderen Ort kopiert werden. Updraft unterstützt in der kostenlosen Version z.B. FTP. Wer kein Problem mit Dropbox oder Google Drive hat, kann natürlich auch die Cloud nutzen. Updraft unterstützt die Verschlüsselung der Datenbank-Sicherung nur in der bezahlten Version. Wer mit personenbezogenen Daten hantiert, sollte sich diese Funktion unbedingt zulegen!</p>
<p>Eine bessere Alternative, die aber nur ab dem 2. Freiheitsgrad möglich ist, ist das Backup über die Kommandozeile. Das ist vor allem dann unumgänglich, wenn die WP-Installation sehr groß ist und nicht mehr mit den gängigen Plugins durchführbar ist. Außerdem funktioniert das unabhängig von Wordpress und kann demnach auch nicht durch andere Plugins beeinträchtigt werden. Wie genau man das einrichtet und vor allem auch die Wiederherstellung habe ich in diesem Beitrag genauer beschrieben.</p>
<h2 id="plugin-sparsamkeit">Plugin-Sparsamkeit</h2>
<p>Hierunter ist eher ein Konzept als eine konkrete Handlungsempfehlung zu verstehen. Vor allem technisch unbedarfte Nutzer tendieren dazu, sofort ein Plugin zu installieren, wenn eine bestimmte Funktion benötigt wird. Doch gerade unsaubere, nicht gepflegte Plugins bieten eine Angriffsfläche und noch dazu wirkt sich ein zunehmendes Plugin-Portfolio negativ auf die Performance aus. Wer ein Plugin installieren möchte, sollte dazu nur auf vertrauenswürdige und bekannte Quellen zurückgreifen. Im Klartext: <a href="https://de.wordpress.org/plugins/">https://de.wordpress.org/plugins/</a></p>
<h2 id="die-offensichtlichen">Die offensichtlichen</h2>
<ol start="2">
<li>Admin-Benutzer umbenennen</li>
</ol>
<h2 id="die-technischen">Die technischen</h2>
<ol>
<li>Admin-Bereich mit .htaccess schützen</li>
<li>Dateirechte korrekt setzen</li>
<li>PHP-Ausführung in bestimmten Unterordner deaktivieren</li>
</ol>
<h2 id="plugins-und-themes">Plugins und Themes</h2>
<p>Ein zentrales Element und der größte Vorteil von Wordpress ist seine fast unerreichbar funktionale Erweiterbarkeit und sehr große Community. Das zieht allerdings auch schwarze Schafe an.</p>
<ol>
<li>Installiere nicht wahllos Plugins, weil du eine bestimmte Funktion benötigst</li>
<li>Installiere Plugins nur von vertrauenswürdigen Quellen</li>
<li>Räume deinen Plugin-Ordner regelmäßig auf</li>
</ol>
<h2 id="die-mutigen">Die mutigen</h2>
<h3 id="php-ini-parameter">PHP ini-Parameter</h3>
<p>Es dürfte kein Geheimnis sein, dass PHP über die php.ini gesteuert wird. Es gibt allerdings einige sicherheitsrelevante Parameter, um die man sich allerdings selber kümmern muss. Die wichtigsten möchte ich hier vorstellen.</p>
<p>Um die Übersicht über manuelle Änderungen nicht zu verlieren, solltest du die Einstellungen in einer separaten Datei (z.B. <em>security.ini</em>) speichern. Auf der Kommandozeile zeigt dir der folgende Befehl, aus welchem zusätzlichen Ordner PHP zusätzliche ini-Dateien liest:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">php --ini
</span></span></code></pre></div><p>In den meisten Fällen dürfte das /etc/php/7.1/apache2/conf.d/ sein.</p>
<p>Eine einfache aber sehr wirksame Maßnahme ist das deaktivieren potentiell gefährlicher PHP-Funktionen. Wie z.B. <a href="http://php.net/manual/en/function.shell-exec.php">shell_exec()</a> - im Wordpress-Umfeld gibt es kaum ein Szenario, in dem diese Funktion nützlich sein könnte. Um PHP-Funktionen zu deaktivieren, kannst du den ini-Parameter <a href="http://php.net/manual/de/ini.core.php#ini.disable-functions">disable_functions</a> nutzen.</p>
<p>Dort legst du die <em>security.ini</em> ab und füllst sie entsprechend:</p>
<p><a href="https://www.damianschwyrz.de/php-backdoors-und-shells-finden-eine-kurze-anleitung">https://www.damianschwyrz.de/php-backdoors-und-shells-finden-eine-kurze-anleitung</a></p>
<p>siehe auch</p>
<p><a href="https://binary-butterfly.de/artikel/wordpress-login-security-eine-stahltuer-in-der-wellblechhuette/">https://binary-butterfly.de/artikel/wordpress-login-security-eine-stahltuer-in-der-wellblechhuette/</a></p>
<p>IP-Filter</p>
<h3 id="den-admin-bereich-verstecken">Den Admin-Bereich verstecken</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-apache" data-lang="apache"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nt">&lt;IfModule</span> <span class="s">mod_rewrite.c</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="nb">RewriteEngine</span> <span class="k">on</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="nb">RewriteBase</span> /
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="c"># Move Wordpress login to /cms.</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="nb">RewriteRule</span> ^cms wp-login.php?cms=unlocked [L]
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="nb">RewriteCond</span> %{REQUEST_URI} ^(.*)?wp-login\.php(.*)$
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="nb">RewriteCond</span> %{QUERY_STRING} !^cms=unlocked
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="nb">RewriteCond</span> %{QUERY_STRING} !^action=logout
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="nb">RewriteCond</span> %{QUERY_STRING} !^loggedout=true
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="nb">RewriteCond</span> %{REQUEST_METHOD} !POST
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="nb">RewriteRule</span> ^(.*)$ - [R=403,L]
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="nb">RewriteCond</span> %{REQUEST_URI} ^(.*)?wp-login\.php(.*)$
</span></span><span class="line"><span class="ln">14</span><span class="cl">    <span class="nb">RewriteCond</span> %{QUERY_STRING} ^loggedout=true
</span></span><span class="line"><span class="ln">15</span><span class="cl">    <span class="nb">RewriteRule</span> ^(.*) ./cms? [R=302,NC,L]
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl">    <span class="nb">RewriteCond</span> %{REQUEST_URI} ^(.*)?wp-login\.php(.*)$
</span></span><span class="line"><span class="ln">18</span><span class="cl">    <span class="nb">RewriteCond</span> %{HTTP_REFERER} !cms$
</span></span><span class="line"><span class="ln">19</span><span class="cl">    <span class="nb">RewriteCond</span> %{REQUEST_METHOD} POST
</span></span><span class="line"><span class="ln">20</span><span class="cl">    <span class="nb">RewriteRule</span> ^(.*)$ - [R=403,L]
</span></span><span class="line"><span class="ln">21</span><span class="cl"><span class="nt">&lt;/IfModule&gt;</span>
</span></span></code></pre></div><!-- https://wordpress.stackexchange.com/a/292691/132138

## Die unnötigen

### Sicherheits-Plugins

siehe auch

https://www.kuketz-blog.de/basisschutz-wordpress-absichern-teil1

https://fastwp.de/487

```bash
chown user:user -R *
find . -type d -exec chmod 755 {} \;
find . -type f -exec chmod 644 {} \;

chown www-data:www-data wp-content

## Disable Editing in Dashboard
define('DISALLOW_FILE_EDIT', true);

<Directory /var/www/nickyreinert.de/www>
# prevent   var_dump(scandir('/etc'));
# see http://php.net/manual/de/ini.core.php#ini.open-basedir
# alternativ: php für jeden virtuellen host mit separatem user ausführen und die dateirechte anpassen
php_admin_value open_basedir "/var/www/nickyreinert.de/www"

</Directory>
```

```ini
# disable_functions in php.ini
# list of function to disable globally #
disable_functions =exec,passthru,shell_exec,system,proc_open,popen,curl_exec,curl_multi_exec,parse_ini_file,show_source
```

## PHP-FPM?

Normalerweise ruft der Apache-Webserver den PHP-Interpreter jedes mal erneut auf. Der Nachteil: Viel Speicherverbrauch, lange Ladezeiten und ein globaler Benutzer. Etwas schneller ist FastCGI. Dabei läuft der Interpreter permanent im Hintergrund. FPM startet nicht nur einen sondern mehrere PHP-Prozesse im Hintergrund. -->
        
        
        <div class="tags">
          <p><strong>Tags:</strong> WordPress, Sicherheit, Anleitung, Checkliste, Webserver</p>
        </div>
        
      ]]></content:encoded>
      
      
      
      <category>wordpress</category>
      
      <category>anleitungen</category>
      
      
      
      
      <media:content url="http://localhost:1313/image.png" type="image/jpeg">
        <media:title>Wordpress-Security Checkliste - Titelbild</media:title>
      </media:content>
      
      
      
      
      <dc:subject>Lesezeit: 5 Minuten</dc:subject>
      
      
      
      <dc:type>security_checklist</dc:type>
      
      
    </item>
  </channel>
</rss>